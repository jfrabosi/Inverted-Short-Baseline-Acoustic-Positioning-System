
STM32H723_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df70  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e028  0801e240  0801e240  0001f240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803c268  0803c268  0003d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803c270  0803c270  0003d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803c274  0803c274  0003d274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  24000000  0803c278  0003e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001f0  0803c468  0003e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000250  0803c4c8  0003e250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  240002b0  0803c528  0003e2b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004cbc  0803c528  0003ecbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003e2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a280  00000000  00000000  0003e2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061db  00000000  00000000  0008855e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c08  00000000  00000000  0008e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000208b  00000000  00000000  00091348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038d87  00000000  00000000  000933d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000325d6  00000000  00000000  000cc15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179753  00000000  00000000  000fe730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  00277e83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d7c4  00000000  00000000  00277f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00285704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00005f5c  00000000  00000000  0028578e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000170  00000000  00000000  0028b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002b0 	.word	0x240002b0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e228 	.word	0x0801e228

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002b4 	.word	0x240002b4
 800030c:	0801e228 	.word	0x0801e228

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <__NVIC_SystemReset+0x24>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000aaa:	4904      	ldr	r1, [pc, #16]	@ (8000abc <__NVIC_SystemReset+0x24>)
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_SystemReset+0x28>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
}
 8000ab6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <__NVIC_SystemReset+0x20>
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	05fa0004 	.word	0x05fa0004

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	ed2d 8b0e 	vpush	{d8-d14}
 8000aca:	f5ad 4d01 	sub.w	sp, sp, #33024	@ 0x8100
 8000ace:	b0a8      	sub	sp, #160	@ 0xa0
 8000ad0:	af1e      	add	r7, sp, #120	@ 0x78

  /* USER CODE BEGIN 1 */
	int stationary = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f248 120c 	movw	r2, #33036	@ 0x810c
 8000ad8:	443a      	add	r2, r7
 8000ada:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f006 fc1a 	bl	8007314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f001 f914 	bl	8001d0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae4:	f001 f982 	bl	8001dec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f001 fcb8 	bl	800245c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f001 fc8e 	bl	800240c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000af0:	f001 fc38 	bl	8002364 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000af4:	f001 fc82 	bl	80023fc <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000af8:	f001 f9a8 	bl	8001e4c <MX_ADC1_Init>
  MX_ETH_Init();
 8000afc:	f001 fac4 	bl	8002088 <MX_ETH_Init>
  MX_TIM3_Init();
 8000b00:	f001 fb4e 	bl	80021a0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b04:	f001 fb0c 	bl	8002120 <MX_I2C1_Init>
  MX_TIM13_Init();
 8000b08:	f001 fb98 	bl	800223c <MX_TIM13_Init>
  MX_UART4_Init();
 8000b0c:	f001 fbde 	bl	80022cc <MX_UART4_Init>
  MX_TIM14_Init();
 8000b10:	f001 fbb8 	bl	8002284 <MX_TIM14_Init>
  MX_ADC2_Init();
 8000b14:	f001 fa2c 	bl	8001f70 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // start timer for Madgwick filter (finds delta_t between filter updates)
  HAL_TIM_Base_Start(&htim13);
 8000b18:	488d      	ldr	r0, [pc, #564]	@ (8000d50 <main+0x28c>)
 8000b1a:	f011 fa39 	bl	8011f90 <HAL_TIM_Base_Start>

  // start timer for iSBL position update (finds delta_tpos between acoustic updates)
  HAL_TIM_Base_Start(&htim14);
 8000b1e:	488d      	ldr	r0, [pc, #564]	@ (8000d54 <main+0x290>)
 8000b20:	f011 fa36 	bl	8011f90 <HAL_TIM_Base_Start>

  // run IMU initialization
  init_imu();
 8000b24:	f003 f92e 	bl	8003d84 <init_imu>

  // initialize Kalman filters
  KalmanFilter* kf_combined = init_kalman_filter_combined();
 8000b28:	f005 fba2 	bl	8006270 <init_kalman_filter_combined>
 8000b2c:	f248 1308 	movw	r3, #33032	@ 0x8108
 8000b30:	443b      	add	r3, r7
 8000b32:	6018      	str	r0, [r3, #0]
  KalmanFilter* kf_isbl = init_kalman_filter_isbl();
 8000b34:	f005 fc8a 	bl	800644c <init_kalman_filter_isbl>
 8000b38:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b3c:	443b      	add	r3, r7
 8000b3e:	6018      	str	r0, [r3, #0]

  // initialize FFT handler with correct FFT length
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUF_LEN);
 8000b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b44:	4884      	ldr	r0, [pc, #528]	@ (8000d58 <main+0x294>)
 8000b46:	f015 fd77 	bl	8016638 <arm_rfft_fast_init_f32>

  // initialize the mic array base points
  MicArray_t* original_mic_array = createMicArray(NUM_MIC);
 8000b4a:	2004      	movs	r0, #4
 8000b4c:	f002 f8f6 	bl	8002d3c <createMicArray>
 8000b50:	f507 4301 	add.w	r3, r7, #33024	@ 0x8100
 8000b54:	6018      	str	r0, [r3, #0]
  calculate_base_points(original_mic_array, baseline);
 8000b56:	4b81      	ldr	r3, [pc, #516]	@ (8000d5c <main+0x298>)
 8000b58:	edd3 7a00 	vldr	s15, [r3]
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	f507 4301 	add.w	r3, r7, #33024	@ 0x8100
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	f002 f911 	bl	8002d8c <calculate_base_points>

  // go to first state
  state = 0;
 8000b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8000d60 <main+0x29c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
     *
     * In the initialization state, the FFT handler is initialized and the system
     * transitions to the trigger state after starting DMA and starting the timer
     * controlling the ADC
     **********************************************************************************/
    if (state == 0){
 8000b70:	4b7b      	ldr	r3, [pc, #492]	@ (8000d60 <main+0x29c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d112      	bne.n	8000b9e <main+0xda>

      // small delay to let system settle/initialize
      HAL_Delay(1000);
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f006 fc5c 	bl	8007438 <HAL_Delay>

      // start DMA from ADCs, writing TRIG_BUF_LEN samples to trig_buf (trigger state)
      // note: using multimode, which means that ADC2 is a slave to ADC1 - when ADC1 is triggered,
      // it simultaneously reads ADC2. this doubles the sampling rate that the system can achieve
      HAL_ADC_Start(&hadc2);
 8000b80:	4878      	ldr	r0, [pc, #480]	@ (8000d64 <main+0x2a0>)
 8000b82:	f007 f96f 	bl	8007e64 <HAL_ADC_Start>
      HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)trig_buf, TRIG_BUF_LEN * NUM_MIC / 2);
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	4977      	ldr	r1, [pc, #476]	@ (8000d68 <main+0x2a4>)
 8000b8a:	4878      	ldr	r0, [pc, #480]	@ (8000d6c <main+0x2a8>)
 8000b8c:	f008 fcfa 	bl	8009584 <HAL_ADCEx_MultiModeStart_DMA>

      // start timer that controls ADCs; when timer updates, a new ADC value is recorded from each microphone
      HAL_TIM_Base_Start_IT(&htim3);
 8000b90:	4877      	ldr	r0, [pc, #476]	@ (8000d70 <main+0x2ac>)
 8000b92:	f011 fa7b 	bl	801208c <HAL_TIM_Base_Start_IT>

      // transition to trigger state
      state = 1;
 8000b96:	4b72      	ldr	r3, [pc, #456]	@ (8000d60 <main+0x29c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e7e8      	b.n	8000b70 <main+0xac>
     * In the triggering state, we just wait until we transition to a different state.
     * The trigger process is handled in the callback function HAL_ADC_ConvCpltCallback
     * Basically, we are waiting until the microphones read five values in a row that
     * exceed the TRIG_THRES value defined in the private defines section of the code.
     **********************************************************************************/
    else if (state == 1){
 8000b9e:	4b70      	ldr	r3, [pc, #448]	@ (8000d60 <main+0x29c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d0e4      	beq.n	8000b70 <main+0xac>
     * In the full recording state, we just wait until we transition to a different
     * state. The full recording process is handled in the callback function
     * HAL_ADC_ConvCpltCallback. During this state, we just record the values of the
     * ADC to the adc_buf and wait until it's full.
     **********************************************************************************/
    else if (state == 2){
 8000ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d60 <main+0x29c>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d0e0      	beq.n	8000b70 <main+0xac>
     *
     * Lastly, we check if the readings are "good." If the standard deviation of the
     * data from all four mics exceeds a threshold, then we assume the data has enough
     * variance to determine a good time shift.
     **********************************************************************************/
    else if (state == 3){
 8000bae:	4b6c      	ldr	r3, [pc, #432]	@ (8000d60 <main+0x29c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	f040 82ba 	bne.w	800112c <main+0x668>

      // set recording flag to 0 because the ADC has stopped recording
      recording = 0;
 8000bb8:	4b6e      	ldr	r3, [pc, #440]	@ (8000d74 <main+0x2b0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]

      // stop the ADC trigger timer
      HAL_TIM_Base_Stop_IT(&htim3);
 8000bbe:	486c      	ldr	r0, [pc, #432]	@ (8000d70 <main+0x2ac>)
 8000bc0:	f011 faea 	bl	8012198 <HAL_TIM_Base_Stop_IT>

      // variables for calculating average and standard deviation for each microphone
      mic0_avg = 0, mic1_avg = 0, mic2_avg = 0, mic3_avg = 0;
 8000bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000d78 <main+0x2b4>)
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8000d7c <main+0x2b8>)
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d80 <main+0x2bc>)
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	4b69      	ldr	r3, [pc, #420]	@ (8000d84 <main+0x2c0>)
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
      mic0_var = 0, mic1_var = 0, mic2_var = 0, mic3_var = 0;
 8000be4:	4b68      	ldr	r3, [pc, #416]	@ (8000d88 <main+0x2c4>)
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	4b67      	ldr	r3, [pc, #412]	@ (8000d8c <main+0x2c8>)
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	4b66      	ldr	r3, [pc, #408]	@ (8000d90 <main+0x2cc>)
 8000bf6:	f04f 0200 	mov.w	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	4b65      	ldr	r3, [pc, #404]	@ (8000d94 <main+0x2d0>)
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
      mic0_stdev = 0, mic1_stdev = 0, mic2_stdev = 0, mic3_stdev = 0;
 8000c04:	4b64      	ldr	r3, [pc, #400]	@ (8000d98 <main+0x2d4>)
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	4b63      	ldr	r3, [pc, #396]	@ (8000d9c <main+0x2d8>)
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	4b62      	ldr	r3, [pc, #392]	@ (8000da0 <main+0x2dc>)
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	4b61      	ldr	r3, [pc, #388]	@ (8000da4 <main+0x2e0>)
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

      // calculate average of each mic signal
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	f248 1224 	movw	r2, #33060	@ 0x8124
 8000c2a:	443a      	add	r2, r7
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e05a      	b.n	8000ce6 <main+0x222>
        mic0_avg += (float)adc1conv(adc_buf[i]);
 8000c30:	4a5d      	ldr	r2, [pc, #372]	@ (8000da8 <main+0x2e4>)
 8000c32:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000c36:	443b      	add	r3, r7
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c48:	4b4b      	ldr	r3, [pc, #300]	@ (8000d78 <main+0x2b4>)
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c52:	4b49      	ldr	r3, [pc, #292]	@ (8000d78 <main+0x2b4>)
 8000c54:	edc3 7a00 	vstr	s15, [r3]
        mic1_avg += (float)adc1conv(adc_buf[i+1]);
 8000c58:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000c5c:	443b      	add	r3, r7
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a51      	ldr	r2, [pc, #324]	@ (8000da8 <main+0x2e4>)
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c72:	4b42      	ldr	r3, [pc, #264]	@ (8000d7c <main+0x2b8>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d7c <main+0x2b8>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
        mic2_avg += (float)adc2conv(adc_buf[i]);
 8000c82:	4a49      	ldr	r2, [pc, #292]	@ (8000da8 <main+0x2e4>)
 8000c84:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000c88:	443b      	add	r3, r7
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	0c1b      	lsrs	r3, r3, #16
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c9a:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <main+0x2bc>)
 8000c9c:	edd3 7a00 	vldr	s15, [r3]
 8000ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca4:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <main+0x2bc>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
        mic3_avg += (float)adc2conv(adc_buf[i+1]);
 8000caa:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000cae:	443b      	add	r3, r7
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8000da8 <main+0x2e4>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <main+0x2c0>)
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <main+0x2c0>)
 8000cd0:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 8000cd4:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000cd8:	443b      	add	r3, r7
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f248 1224 	movw	r2, #33060	@ 0x8124
 8000ce2:	443a      	add	r2, r7
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	f248 1324 	movw	r3, #33060	@ 0x8124
 8000cea:	443b      	add	r3, r7
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000cf2:	db9d      	blt.n	8000c30 <main+0x16c>
      }

      mic0_avg /= (float)ADC_BUF_LEN;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <main+0x2b4>)
 8000cf6:	ed93 7a00 	vldr	s14, [r3]
 8000cfa:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000dac <main+0x2e8>
 8000cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <main+0x2b4>)
 8000d04:	edc3 7a00 	vstr	s15, [r3]
      mic1_avg /= (float)ADC_BUF_LEN;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <main+0x2b8>)
 8000d0a:	ed93 7a00 	vldr	s14, [r3]
 8000d0e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000dac <main+0x2e8>
 8000d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <main+0x2b8>)
 8000d18:	edc3 7a00 	vstr	s15, [r3]
      mic2_avg /= (float)ADC_BUF_LEN;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <main+0x2bc>)
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000dac <main+0x2e8>
 8000d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <main+0x2bc>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
      mic3_avg /= (float)ADC_BUF_LEN;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <main+0x2c0>)
 8000d32:	ed93 7a00 	vldr	s14, [r3]
 8000d36:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000dac <main+0x2e8>
 8000d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <main+0x2c0>)
 8000d40:	edc3 7a00 	vstr	s15, [r3]

      // calculate variance of each mic
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 8000d44:	2300      	movs	r3, #0
 8000d46:	f248 1220 	movw	r2, #33056	@ 0x8120
 8000d4a:	443a      	add	r2, r7
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e0be      	b.n	8000ece <main+0x40a>
 8000d50:	240005ac 	.word	0x240005ac
 8000d54:	240005f8 	.word	0x240005f8
 8000d58:	24004a44 	.word	0x24004a44
 8000d5c:	24000004 	.word	0x24000004
 8000d60:	240007e4 	.word	0x240007e4
 8000d64:	24000374 	.word	0x24000374
 8000d68:	24004814 	.word	0x24004814
 8000d6c:	24000304 	.word	0x24000304
 8000d70:	24000560 	.word	0x24000560
 8000d74:	240007e8 	.word	0x240007e8
 8000d78:	24004a14 	.word	0x24004a14
 8000d7c:	24004a18 	.word	0x24004a18
 8000d80:	24004a1c 	.word	0x24004a1c
 8000d84:	24004a20 	.word	0x24004a20
 8000d88:	24004a24 	.word	0x24004a24
 8000d8c:	24004a28 	.word	0x24004a28
 8000d90:	24004a2c 	.word	0x24004a2c
 8000d94:	24004a30 	.word	0x24004a30
 8000d98:	24004a34 	.word	0x24004a34
 8000d9c:	24004a38 	.word	0x24004a38
 8000da0:	24004a3c 	.word	0x24004a3c
 8000da4:	24004a40 	.word	0x24004a40
 8000da8:	24000814 	.word	0x24000814
 8000dac:	45000000 	.word	0x45000000
        mic0_var += powf((float)adc1conv(adc_buf[i]) - mic0_avg, 2);
 8000db0:	4ac7      	ldr	r2, [pc, #796]	@ (80010d0 <main+0x60c>)
 8000db2:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000db6:	443b      	add	r3, r7
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc8:	4bc2      	ldr	r3, [pc, #776]	@ (80010d4 <main+0x610>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dda:	f01b fed9 	bl	801cb90 <powf>
 8000dde:	eeb0 7a40 	vmov.f32	s14, s0
 8000de2:	4bbd      	ldr	r3, [pc, #756]	@ (80010d8 <main+0x614>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	4bba      	ldr	r3, [pc, #744]	@ (80010d8 <main+0x614>)
 8000dee:	edc3 7a00 	vstr	s15, [r3]
        mic1_var += powf((float)adc1conv(adc_buf[i+1]) - mic1_avg, 2);
 8000df2:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000df6:	443b      	add	r3, r7
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4ab4      	ldr	r2, [pc, #720]	@ (80010d0 <main+0x60c>)
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e0c:	4bb3      	ldr	r3, [pc, #716]	@ (80010dc <main+0x618>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e16:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	f01b feb7 	bl	801cb90 <powf>
 8000e22:	eeb0 7a40 	vmov.f32	s14, s0
 8000e26:	4bae      	ldr	r3, [pc, #696]	@ (80010e0 <main+0x61c>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e30:	4bab      	ldr	r3, [pc, #684]	@ (80010e0 <main+0x61c>)
 8000e32:	edc3 7a00 	vstr	s15, [r3]
        mic2_var += powf((float)adc2conv(adc_buf[i]) - mic2_avg, 2);
 8000e36:	4aa6      	ldr	r2, [pc, #664]	@ (80010d0 <main+0x60c>)
 8000e38:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000e3c:	443b      	add	r3, r7
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e4e:	4ba5      	ldr	r3, [pc, #660]	@ (80010e4 <main+0x620>)
 8000e50:	edd3 7a00 	vldr	s15, [r3]
 8000e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e58:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e60:	f01b fe96 	bl	801cb90 <powf>
 8000e64:	eeb0 7a40 	vmov.f32	s14, s0
 8000e68:	4b9f      	ldr	r3, [pc, #636]	@ (80010e8 <main+0x624>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e72:	4b9d      	ldr	r3, [pc, #628]	@ (80010e8 <main+0x624>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]
        mic3_var += powf((float)adc2conv(adc_buf[i+1]) - mic3_avg, 2);
 8000e78:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000e7c:	443b      	add	r3, r7
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a93      	ldr	r2, [pc, #588]	@ (80010d0 <main+0x60c>)
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	0c1b      	lsrs	r3, r3, #16
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e92:	4b96      	ldr	r3, [pc, #600]	@ (80010ec <main+0x628>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8000ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea4:	f01b fe74 	bl	801cb90 <powf>
 8000ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8000eac:	4b90      	ldr	r3, [pc, #576]	@ (80010f0 <main+0x62c>)
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80010f0 <main+0x62c>)
 8000eb8:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 8000ebc:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000ec0:	443b      	add	r3, r7
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f248 1220 	movw	r2, #33056	@ 0x8120
 8000eca:	443a      	add	r2, r7
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000ed2:	443b      	add	r3, r7
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eda:	f6ff af69 	blt.w	8000db0 <main+0x2ec>
      }

      mic0_var /= (float)(ADC_BUF_LEN - 1);
 8000ede:	4b7e      	ldr	r3, [pc, #504]	@ (80010d8 <main+0x614>)
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
 8000ee4:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80010f4 <main+0x630>
 8000ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eec:	4b7a      	ldr	r3, [pc, #488]	@ (80010d8 <main+0x614>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
      mic1_var /= (float)(ADC_BUF_LEN - 1);
 8000ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80010e0 <main+0x61c>)
 8000ef4:	ed93 7a00 	vldr	s14, [r3]
 8000ef8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80010f4 <main+0x630>
 8000efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f00:	4b77      	ldr	r3, [pc, #476]	@ (80010e0 <main+0x61c>)
 8000f02:	edc3 7a00 	vstr	s15, [r3]
      mic2_var /= (float)(ADC_BUF_LEN - 1);
 8000f06:	4b78      	ldr	r3, [pc, #480]	@ (80010e8 <main+0x624>)
 8000f08:	ed93 7a00 	vldr	s14, [r3]
 8000f0c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80010f4 <main+0x630>
 8000f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f14:	4b74      	ldr	r3, [pc, #464]	@ (80010e8 <main+0x624>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]
      mic3_var /= (float)(ADC_BUF_LEN - 1);
 8000f1a:	4b75      	ldr	r3, [pc, #468]	@ (80010f0 <main+0x62c>)
 8000f1c:	ed93 7a00 	vldr	s14, [r3]
 8000f20:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80010f4 <main+0x630>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	4b71      	ldr	r3, [pc, #452]	@ (80010f0 <main+0x62c>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]

      // calculate standard deviation of each mic
      mic0_stdev = sqrtf(mic0_var);
 8000f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80010d8 <main+0x614>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	f01b fd84 	bl	801ca44 <sqrtf>
 8000f3c:	eef0 7a40 	vmov.f32	s15, s0
 8000f40:	4b6d      	ldr	r3, [pc, #436]	@ (80010f8 <main+0x634>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]
      mic1_stdev = sqrtf(mic1_var);
 8000f46:	4b66      	ldr	r3, [pc, #408]	@ (80010e0 <main+0x61c>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	f01b fd78 	bl	801ca44 <sqrtf>
 8000f54:	eef0 7a40 	vmov.f32	s15, s0
 8000f58:	4b68      	ldr	r3, [pc, #416]	@ (80010fc <main+0x638>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
      mic2_stdev = sqrtf(mic2_var);
 8000f5e:	4b62      	ldr	r3, [pc, #392]	@ (80010e8 <main+0x624>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	eeb0 0a67 	vmov.f32	s0, s15
 8000f68:	f01b fd6c 	bl	801ca44 <sqrtf>
 8000f6c:	eef0 7a40 	vmov.f32	s15, s0
 8000f70:	4b63      	ldr	r3, [pc, #396]	@ (8001100 <main+0x63c>)
 8000f72:	edc3 7a00 	vstr	s15, [r3]
      mic3_stdev = sqrtf(mic3_var);
 8000f76:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <main+0x62c>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f80:	f01b fd60 	bl	801ca44 <sqrtf>
 8000f84:	eef0 7a40 	vmov.f32	s15, s0
 8000f88:	4b5e      	ldr	r3, [pc, #376]	@ (8001104 <main+0x640>)
 8000f8a:	edc3 7a00 	vstr	s15, [r3]

      // check if each microphone exceeds the threshold for "good" data
      int stdev_above_thres = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f248 02ec 	movw	r2, #33004	@ 0x80ec
 8000f94:	443a      	add	r2, r7
 8000f96:	6013      	str	r3, [r2, #0]
      stdev_above_thres += mic0_stdev > (TRIG_THRES);
 8000f98:	4b57      	ldr	r3, [pc, #348]	@ (80010f8 <main+0x634>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001108 <main+0x644>
 8000fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	bfcc      	ite	gt
 8000fac:	2301      	movgt	r3, #1
 8000fae:	2300      	movle	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f248 03ec 	movw	r3, #33004	@ 0x80ec
 8000fb8:	443b      	add	r3, r7
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f248 02ec 	movw	r2, #33004	@ 0x80ec
 8000fc2:	443a      	add	r2, r7
 8000fc4:	6013      	str	r3, [r2, #0]
      stdev_above_thres += mic1_stdev > (TRIG_THRES);
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <main+0x638>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001108 <main+0x644>
 8000fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	bfcc      	ite	gt
 8000fda:	2301      	movgt	r3, #1
 8000fdc:	2300      	movle	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f248 03ec 	movw	r3, #33004	@ 0x80ec
 8000fe6:	443b      	add	r3, r7
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	f248 02ec 	movw	r2, #33004	@ 0x80ec
 8000ff0:	443a      	add	r2, r7
 8000ff2:	6013      	str	r3, [r2, #0]
      stdev_above_thres += mic2_stdev > (TRIG_THRES);
 8000ff4:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <main+0x63c>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001108 <main+0x644>
 8000ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	bfcc      	ite	gt
 8001008:	2301      	movgt	r3, #1
 800100a:	2300      	movle	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	f248 03ec 	movw	r3, #33004	@ 0x80ec
 8001014:	443b      	add	r3, r7
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4413      	add	r3, r2
 800101a:	f248 02ec 	movw	r2, #33004	@ 0x80ec
 800101e:	443a      	add	r2, r7
 8001020:	6013      	str	r3, [r2, #0]
      stdev_above_thres += mic3_stdev > (TRIG_THRES);
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <main+0x640>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001108 <main+0x644>
 800102c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	bfcc      	ite	gt
 8001036:	2301      	movgt	r3, #1
 8001038:	2300      	movle	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	f248 03ec 	movw	r3, #33004	@ 0x80ec
 8001042:	443b      	add	r3, r7
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	f248 02ec 	movw	r2, #33004	@ 0x80ec
 800104c:	443a      	add	r2, r7
 800104e:	6013      	str	r3, [r2, #0]

      // if the signal is good and the initial IMU angle has been set (remove yaw), then
      // move to the data processing state
      if ((stdev_above_thres >= NUM_MIC) && imu_init_set){
 8001050:	f248 03ec 	movw	r3, #33004	@ 0x80ec
 8001054:	443b      	add	r3, r7
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	dd08      	ble.n	800106e <main+0x5aa>
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <main+0x648>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <main+0x5aa>
        state = 4;
 8001064:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <main+0x64c>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	f000 be1e 	b.w	8001caa <main+0x11e6>
      }
      else{
        // reset all ADC buffers
        memset(adc_buf, 0, sizeof(adc_buf));
 800106e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001072:	2100      	movs	r1, #0
 8001074:	4816      	ldr	r0, [pc, #88]	@ (80010d0 <main+0x60c>)
 8001076:	f019 f849 	bl	801a10c <memset>
        memset(trig_buf, 0, sizeof(trig_buf));
 800107a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107e:	2100      	movs	r1, #0
 8001080:	4824      	ldr	r0, [pc, #144]	@ (8001114 <main+0x650>)
 8001082:	f019 f843 	bl	801a10c <memset>

        // turn off LEDs for debugging
        HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);  // Turn off green LED
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <main+0x654>)
 800108c:	f00b fe82 	bl	800cd94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);  // Turn off yellow LED
 8001090:	2200      	movs	r2, #0
 8001092:	2102      	movs	r1, #2
 8001094:	4821      	ldr	r0, [pc, #132]	@ (800111c <main+0x658>)
 8001096:	f00b fe7d 	bl	800cd94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);  // Turn off red LED
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a0:	481d      	ldr	r0, [pc, #116]	@ (8001118 <main+0x654>)
 80010a2:	f00b fe77 	bl	800cd94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);  // Turn off LED on Pin E2
 80010a6:	2200      	movs	r2, #0
 80010a8:	2104      	movs	r1, #4
 80010aa:	481c      	ldr	r0, [pc, #112]	@ (800111c <main+0x658>)
 80010ac:	f00b fe72 	bl	800cd94 <HAL_GPIO_WritePin>

        // return to the trigger state
        state = 1;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <main+0x64c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]

        // restart the DMA from ADCs and the timer that controls the ADCs
        HAL_ADC_Start(&hadc2);
 80010b6:	481a      	ldr	r0, [pc, #104]	@ (8001120 <main+0x65c>)
 80010b8:	f006 fed4 	bl	8007e64 <HAL_ADC_Start>
        HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)trig_buf, TRIG_BUF_LEN * NUM_MIC / 2);
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	4915      	ldr	r1, [pc, #84]	@ (8001114 <main+0x650>)
 80010c0:	4818      	ldr	r0, [pc, #96]	@ (8001124 <main+0x660>)
 80010c2:	f008 fa5f 	bl	8009584 <HAL_ADCEx_MultiModeStart_DMA>
        HAL_TIM_Base_Start_IT(&htim3);
 80010c6:	4818      	ldr	r0, [pc, #96]	@ (8001128 <main+0x664>)
 80010c8:	f010 ffe0 	bl	801208c <HAL_TIM_Base_Start_IT>
 80010cc:	e550      	b.n	8000b70 <main+0xac>
 80010ce:	bf00      	nop
 80010d0:	24000814 	.word	0x24000814
 80010d4:	24004a14 	.word	0x24004a14
 80010d8:	24004a24 	.word	0x24004a24
 80010dc:	24004a18 	.word	0x24004a18
 80010e0:	24004a28 	.word	0x24004a28
 80010e4:	24004a1c 	.word	0x24004a1c
 80010e8:	24004a2c 	.word	0x24004a2c
 80010ec:	24004a20 	.word	0x24004a20
 80010f0:	24004a30 	.word	0x24004a30
 80010f4:	44ffe000 	.word	0x44ffe000
 80010f8:	24004a34 	.word	0x24004a34
 80010fc:	24004a38 	.word	0x24004a38
 8001100:	24004a3c 	.word	0x24004a3c
 8001104:	24004a40 	.word	0x24004a40
 8001108:	42480000 	.word	0x42480000
 800110c:	240007ec 	.word	0x240007ec
 8001110:	240007e4 	.word	0x240007e4
 8001114:	24004814 	.word	0x24004814
 8001118:	58020400 	.word	0x58020400
 800111c:	58021000 	.word	0x58021000
 8001120:	24000374 	.word	0x24000374
 8001124:	24000304 	.word	0x24000304
 8001128:	24000560 	.word	0x24000560
     * TO-DO:
     *   - ADD IMU TO INCORPORATE TRUE RECEIVER ARRAY ORIENTATION INTO BASE POINTS
     *   - ADD "DEPTH" MEASUREMENTS TO RESIDUAL FUNCTION
     **********************************************************************************/

    else if (state == 4){
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <main+0x688>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b04      	cmp	r3, #4
 8001132:	f47f ad1d 	bne.w	8000b70 <main+0xac>
      float32_t mic1_buf[ADC_BUF_LEN];
      float32_t mic2_buf[ADC_BUF_LEN];
      float32_t mic3_buf[ADC_BUF_LEN];

      // de-interleave the ADC values and normalize the data
      int index = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f248 121c 	movw	r2, #33052	@ 0x811c
 800113c:	443a      	add	r2, r7
 800113e:	6013      	str	r3, [r2, #0]
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 8001140:	2300      	movs	r3, #0
 8001142:	f248 1218 	movw	r2, #33048	@ 0x8118
 8001146:	443a      	add	r2, r7
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e0a0      	b.n	800128e <main+0x7ca>
 800114c:	240007e4 	.word	0x240007e4
        mic0_buf[index] = (((float)adc1conv(adc_buf[i]) - mic0_avg) / mic0_stdev);
 8001150:	4acf      	ldr	r2, [pc, #828]	@ (8001490 <main+0x9cc>)
 8001152:	f248 1318 	movw	r3, #33048	@ 0x8118
 8001156:	443b      	add	r3, r7
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	b29b      	uxth	r3, r3
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001168:	4bca      	ldr	r3, [pc, #808]	@ (8001494 <main+0x9d0>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001172:	4bc9      	ldr	r3, [pc, #804]	@ (8001498 <main+0x9d4>)
 8001174:	ed93 7a00 	vldr	s14, [r3]
 8001178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001180:	461a      	mov	r2, r3
 8001182:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001186:	443b      	add	r3, r7
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3bb0      	subs	r3, #176	@ 0xb0
 8001190:	edc3 7a00 	vstr	s15, [r3]
        mic1_buf[index] = (((float)adc1conv(adc_buf[i+1]) - mic1_avg) / mic1_stdev);
 8001194:	f248 1318 	movw	r3, #33048	@ 0x8118
 8001198:	443b      	add	r3, r7
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4abc      	ldr	r2, [pc, #752]	@ (8001490 <main+0x9cc>)
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	4bbb      	ldr	r3, [pc, #748]	@ (800149c <main+0x9d8>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011b8:	4bb9      	ldr	r3, [pc, #740]	@ (80014a0 <main+0x9dc>)
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	f242 1328 	movw	r3, #8488	@ 0x2128
 80011c6:	443b      	add	r3, r7
 80011c8:	461a      	mov	r2, r3
 80011ca:	f248 131c 	movw	r3, #33052	@ 0x811c
 80011ce:	443b      	add	r3, r7
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3bb0      	subs	r3, #176	@ 0xb0
 80011d8:	edc3 7a00 	vstr	s15, [r3]
        mic2_buf[index] = (((float)adc2conv(adc_buf[i]) - mic2_avg) / mic2_stdev);
 80011dc:	4aac      	ldr	r2, [pc, #688]	@ (8001490 <main+0x9cc>)
 80011de:	f248 1318 	movw	r3, #33048	@ 0x8118
 80011e2:	443b      	add	r3, r7
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	0c1b      	lsrs	r3, r3, #16
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f4:	4bab      	ldr	r3, [pc, #684]	@ (80014a4 <main+0x9e0>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011fe:	4baa      	ldr	r3, [pc, #680]	@ (80014a8 <main+0x9e4>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001208:	f244 1328 	movw	r3, #16680	@ 0x4128
 800120c:	443b      	add	r3, r7
 800120e:	461a      	mov	r2, r3
 8001210:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001214:	443b      	add	r3, r7
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3bb0      	subs	r3, #176	@ 0xb0
 800121e:	edc3 7a00 	vstr	s15, [r3]
        mic3_buf[index] = (((float)adc2conv(adc_buf[i+1]) - mic3_avg) / mic3_stdev);
 8001222:	f248 1318 	movw	r3, #33048	@ 0x8118
 8001226:	443b      	add	r3, r7
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a98      	ldr	r2, [pc, #608]	@ (8001490 <main+0x9cc>)
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123c:	4b9b      	ldr	r3, [pc, #620]	@ (80014ac <main+0x9e8>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001246:	4b9a      	ldr	r3, [pc, #616]	@ (80014b0 <main+0x9ec>)
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001250:	f246 1328 	movw	r3, #24872	@ 0x6128
 8001254:	443b      	add	r3, r7
 8001256:	461a      	mov	r2, r3
 8001258:	f248 131c 	movw	r3, #33052	@ 0x811c
 800125c:	443b      	add	r3, r7
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3bb0      	subs	r3, #176	@ 0xb0
 8001266:	edc3 7a00 	vstr	s15, [r3]
        index += 1;
 800126a:	f248 131c 	movw	r3, #33052	@ 0x811c
 800126e:	443b      	add	r3, r7
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	f248 121c 	movw	r2, #33052	@ 0x811c
 8001278:	443a      	add	r2, r7
 800127a:	6013      	str	r3, [r2, #0]
      for (int i = 0; i < ADC_BUF_LEN * NUM_MIC / 2; i += NUM_MIC / 2) {
 800127c:	f248 1318 	movw	r3, #33048	@ 0x8118
 8001280:	443b      	add	r3, r7
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3302      	adds	r3, #2
 8001286:	f248 1218 	movw	r2, #33048	@ 0x8118
 800128a:	443a      	add	r2, r7
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	f248 1318 	movw	r3, #33048	@ 0x8118
 8001292:	443b      	add	r3, r7
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800129a:	f6ff af59 	blt.w	8001150 <main+0x68c>
      }

      // calculate time-shifts between mic0 and all other microphones
      measured_time_shifts[0] = calculate_time_shift(mic0_buf, mic1_buf);
 800129e:	4a85      	ldr	r2, [pc, #532]	@ (80014b4 <main+0x9f0>)
 80012a0:	f248 1328 	movw	r3, #33064	@ 0x8128
 80012a4:	4413      	add	r3, r2
 80012a6:	19da      	adds	r2, r3, r7
 80012a8:	4b83      	ldr	r3, [pc, #524]	@ (80014b8 <main+0x9f4>)
 80012aa:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 80012ae:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80012b2:	443b      	add	r3, r7
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fbb0 	bl	8002a1c <calculate_time_shift>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	4b7e      	ldr	r3, [pc, #504]	@ (80014bc <main+0x9f8>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
      measured_time_shifts[1] = calculate_time_shift(mic0_buf, mic2_buf);
 80012c6:	4a7e      	ldr	r2, [pc, #504]	@ (80014c0 <main+0x9fc>)
 80012c8:	f248 1328 	movw	r3, #33064	@ 0x8128
 80012cc:	4413      	add	r3, r2
 80012ce:	19da      	adds	r2, r3, r7
 80012d0:	4b79      	ldr	r3, [pc, #484]	@ (80014b8 <main+0x9f4>)
 80012d2:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 80012d6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80012da:	443b      	add	r3, r7
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb9c 	bl	8002a1c <calculate_time_shift>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	4b74      	ldr	r3, [pc, #464]	@ (80014bc <main+0x9f8>)
 80012ea:	edc3 7a01 	vstr	s15, [r3, #4]
      measured_time_shifts[2] = calculate_time_shift(mic0_buf, mic3_buf);
 80012ee:	4a75      	ldr	r2, [pc, #468]	@ (80014c4 <main+0xa00>)
 80012f0:	f248 1328 	movw	r3, #33064	@ 0x8128
 80012f4:	4413      	add	r3, r2
 80012f6:	19da      	adds	r2, r3, r7
 80012f8:	4b6f      	ldr	r3, [pc, #444]	@ (80014b8 <main+0x9f4>)
 80012fa:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 80012fe:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001302:	443b      	add	r3, r7
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fb88 	bl	8002a1c <calculate_time_shift>
 800130c:	eef0 7a40 	vmov.f32	s15, s0
 8001310:	4b6a      	ldr	r3, [pc, #424]	@ (80014bc <main+0x9f8>)
 8001312:	edc3 7a02 	vstr	s15, [r3, #8]

      // extract the current orientation of the platform
      // note: q0-3 are calculated in the Madgwick filter
      Quaternion quat_raw = {q0, q1, q2, q3};
 8001316:	4b6c      	ldr	r3, [pc, #432]	@ (80014c8 <main+0xa04>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f248 02dc 	movw	r2, #32988	@ 0x80dc
 800131e:	443a      	add	r2, r7
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <main+0xa08>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f248 02e0 	movw	r2, #32992	@ 0x80e0
 800132a:	443a      	add	r2, r7
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b68      	ldr	r3, [pc, #416]	@ (80014d0 <main+0xa0c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f248 02e4 	movw	r2, #32996	@ 0x80e4
 8001336:	443a      	add	r2, r7
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <main+0xa10>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f248 02e8 	movw	r2, #33000	@ 0x80e8
 8001342:	443a      	add	r2, r7
 8001344:	6013      	str	r3, [r2, #0]

      // create a quaternion to undo initial yaw rotation
      Quaternion yaw_compensation = create_yaw_quaternion(init_yaw);
 8001346:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <main+0xa14>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	f004 faa0 	bl	8005894 <create_yaw_quaternion>
 8001354:	eeb0 6a40 	vmov.f32	s12, s0
 8001358:	eef0 6a60 	vmov.f32	s13, s1
 800135c:	eeb0 7a41 	vmov.f32	s14, s2
 8001360:	eef0 7a61 	vmov.f32	s15, s3
 8001364:	f248 03cc 	movw	r3, #32972	@ 0x80cc
 8001368:	443b      	add	r3, r7
 800136a:	ed83 6a00 	vstr	s12, [r3]
 800136e:	f248 03d0 	movw	r3, #32976	@ 0x80d0
 8001372:	443b      	add	r3, r7
 8001374:	edc3 6a00 	vstr	s13, [r3]
 8001378:	f248 03d4 	movw	r3, #32980	@ 0x80d4
 800137c:	443b      	add	r3, r7
 800137e:	ed83 7a00 	vstr	s14, [r3]
 8001382:	f248 03d8 	movw	r3, #32984	@ 0x80d8
 8001386:	443b      	add	r3, r7
 8001388:	edc3 7a00 	vstr	s15, [r3]

      // apply the yaw compensation to the current quaternion
      Quaternion quat = multiply_quaternions(yaw_compensation, quat_raw);
 800138c:	f248 03dc 	movw	r3, #32988	@ 0x80dc
 8001390:	443b      	add	r3, r7
 8001392:	ed93 4a00 	vldr	s8, [r3]
 8001396:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 800139a:	443b      	add	r3, r7
 800139c:	edd3 4a00 	vldr	s9, [r3]
 80013a0:	f248 03e4 	movw	r3, #32996	@ 0x80e4
 80013a4:	443b      	add	r3, r7
 80013a6:	ed93 5a00 	vldr	s10, [r3]
 80013aa:	f248 03e8 	movw	r3, #33000	@ 0x80e8
 80013ae:	443b      	add	r3, r7
 80013b0:	edd3 5a00 	vldr	s11, [r3]
 80013b4:	f248 03cc 	movw	r3, #32972	@ 0x80cc
 80013b8:	443b      	add	r3, r7
 80013ba:	ed93 6a00 	vldr	s12, [r3]
 80013be:	f248 03d0 	movw	r3, #32976	@ 0x80d0
 80013c2:	443b      	add	r3, r7
 80013c4:	edd3 6a00 	vldr	s13, [r3]
 80013c8:	f248 03d4 	movw	r3, #32980	@ 0x80d4
 80013cc:	443b      	add	r3, r7
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	f248 03d8 	movw	r3, #32984	@ 0x80d8
 80013d6:	443b      	add	r3, r7
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eeb0 2a44 	vmov.f32	s4, s8
 80013e0:	eef0 2a64 	vmov.f32	s5, s9
 80013e4:	eeb0 3a45 	vmov.f32	s6, s10
 80013e8:	eef0 3a65 	vmov.f32	s7, s11
 80013ec:	eeb0 0a46 	vmov.f32	s0, s12
 80013f0:	eef0 0a66 	vmov.f32	s1, s13
 80013f4:	eeb0 1a47 	vmov.f32	s2, s14
 80013f8:	eef0 1a67 	vmov.f32	s3, s15
 80013fc:	f004 fa97 	bl	800592e <multiply_quaternions>
 8001400:	eeb0 6a40 	vmov.f32	s12, s0
 8001404:	eef0 6a60 	vmov.f32	s13, s1
 8001408:	eeb0 7a41 	vmov.f32	s14, s2
 800140c:	eef0 7a61 	vmov.f32	s15, s3
 8001410:	f248 03bc 	movw	r3, #32956	@ 0x80bc
 8001414:	443b      	add	r3, r7
 8001416:	ed83 6a00 	vstr	s12, [r3]
 800141a:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 800141e:	443b      	add	r3, r7
 8001420:	edc3 6a00 	vstr	s13, [r3]
 8001424:	f248 03c4 	movw	r3, #32964	@ 0x80c4
 8001428:	443b      	add	r3, r7
 800142a:	ed83 7a00 	vstr	s14, [r3]
 800142e:	f248 03c8 	movw	r3, #32968	@ 0x80c8
 8001432:	443b      	add	r3, r7
 8001434:	edc3 7a00 	vstr	s15, [r3]

      // normalize the result to ensure it's a valid rotation
      normalize_quaternion(&quat);
 8001438:	f248 03bc 	movw	r3, #32956	@ 0x80bc
 800143c:	443b      	add	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f97c 	bl	800573c <normalize_quaternion>

      // generate the euler angles associated with the compensated quaternion
      EulerAngles newAngles = QuaternionToEulerAngles(quat);
 8001444:	f248 03bc 	movw	r3, #32956	@ 0x80bc
 8001448:	443b      	add	r3, r7
 800144a:	ed93 6a00 	vldr	s12, [r3]
 800144e:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 8001452:	443b      	add	r3, r7
 8001454:	edd3 6a00 	vldr	s13, [r3]
 8001458:	f248 03c4 	movw	r3, #32964	@ 0x80c4
 800145c:	443b      	add	r3, r7
 800145e:	ed93 7a00 	vldr	s14, [r3]
 8001462:	f248 03c8 	movw	r3, #32968	@ 0x80c8
 8001466:	443b      	add	r3, r7
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eeb0 0a46 	vmov.f32	s0, s12
 8001470:	eef0 0a66 	vmov.f32	s1, s13
 8001474:	eeb0 1a47 	vmov.f32	s2, s14
 8001478:	eef0 1a67 	vmov.f32	s3, s15
 800147c:	f003 ff58 	bl	8005330 <QuaternionToEulerAngles>
 8001480:	eef0 6a40 	vmov.f32	s13, s0
 8001484:	eeb0 7a60 	vmov.f32	s14, s1
 8001488:	eef0 7a41 	vmov.f32	s15, s2
 800148c:	e026      	b.n	80014dc <main+0xa18>
 800148e:	bf00      	nop
 8001490:	24000814 	.word	0x24000814
 8001494:	24004a14 	.word	0x24004a14
 8001498:	24004a34 	.word	0x24004a34
 800149c:	24004a18 	.word	0x24004a18
 80014a0:	24004a38 	.word	0x24004a38
 80014a4:	24004a1c 	.word	0x24004a1c
 80014a8:	24004a3c 	.word	0x24004a3c
 80014ac:	24004a20 	.word	0x24004a20
 80014b0:	24004a40 	.word	0x24004a40
 80014b4:	ffff9f50 	.word	0xffff9f50
 80014b8:	ffff7f50 	.word	0xffff7f50
 80014bc:	24004a5c 	.word	0x24004a5c
 80014c0:	ffffbf50 	.word	0xffffbf50
 80014c4:	ffffdf50 	.word	0xffffdf50
 80014c8:	24000010 	.word	0x24000010
 80014cc:	24004b20 	.word	0x24004b20
 80014d0:	24004b24 	.word	0x24004b24
 80014d4:	24004b28 	.word	0x24004b28
 80014d8:	24004ae8 	.word	0x24004ae8
 80014dc:	f248 03b0 	movw	r3, #32944	@ 0x80b0
 80014e0:	443b      	add	r3, r7
 80014e2:	edc3 6a00 	vstr	s13, [r3]
 80014e6:	f248 03b4 	movw	r3, #32948	@ 0x80b4
 80014ea:	443b      	add	r3, r7
 80014ec:	ed83 7a00 	vstr	s14, [r3]
 80014f0:	f248 03b8 	movw	r3, #32952	@ 0x80b8
 80014f4:	443b      	add	r3, r7
 80014f6:	edc3 7a00 	vstr	s15, [r3]

      // rotate the mic array by the compensated quaternion
      // note: this makes sure that the current orientation of the mic array is accounted
      // for before running Hooke-Jeeves search
      MicArray_t* rotated_mic_array = rotateMicArray(original_mic_array, quat);
 80014fa:	f248 03bc 	movw	r3, #32956	@ 0x80bc
 80014fe:	443b      	add	r3, r7
 8001500:	ed93 6a00 	vldr	s12, [r3]
 8001504:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 8001508:	443b      	add	r3, r7
 800150a:	edd3 6a00 	vldr	s13, [r3]
 800150e:	f248 03c4 	movw	r3, #32964	@ 0x80c4
 8001512:	443b      	add	r3, r7
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	f248 03c8 	movw	r3, #32968	@ 0x80c8
 800151c:	443b      	add	r3, r7
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb0 0a46 	vmov.f32	s0, s12
 8001526:	eef0 0a66 	vmov.f32	s1, s13
 800152a:	eeb0 1a47 	vmov.f32	s2, s14
 800152e:	eef0 1a67 	vmov.f32	s3, s15
 8001532:	f507 4301 	add.w	r3, r7, #33024	@ 0x8100
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f001 fca4 	bl	8002e84 <rotateMicArray>
 800153c:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 8001540:	443b      	add	r3, r7
 8001542:	6018      	str	r0, [r3, #0]
      // the true position of the transmitter
      // note: in the full (underwater) system, these would be the GPS coordinates of the
      // transmitter (encoded in the ultrasonic message) and the depth measured by a depth
      // pressure sensor. since I don't have those systems incorporated in this setup, I
      // measure the position physically and save it here.
      float true_x = 3.880f;
 8001544:	4b50      	ldr	r3, [pc, #320]	@ (8001688 <main+0xbc4>)
 8001546:	f248 02f8 	movw	r2, #33016	@ 0x80f8
 800154a:	443a      	add	r2, r7
 800154c:	6013      	str	r3, [r2, #0]
      float true_y = 0.0f;
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	f248 02f4 	movw	r2, #33012	@ 0x80f4
 8001556:	443a      	add	r2, r7
 8001558:	6013      	str	r3, [r2, #0]
      float true_z = -0.682f + 0.03;
 800155a:	4b4c      	ldr	r3, [pc, #304]	@ (800168c <main+0xbc8>)
 800155c:	f248 02f0 	movw	r2, #33008	@ 0x80f0
 8001560:	443a      	add	r2, r7
 8001562:	6013      	str	r3, [r2, #0]

      // define an initial guess for the transmitter's XYZ position
      // note: noise in the depth measurement is simulated here using randn()
      Point3D init_pos_est;
      init_pos_est.x = true_x - fossl_x + randn(0.0f, 0.0005f);
 8001564:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <main+0xbcc>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 800156e:	443b      	add	r3, r7
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001578:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8001694 <main+0xbd0>
 800157c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8001698 <main+0xbd4>
 8001580:	f004 fad4 	bl	8005b2c <randn>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	ee78 7a27 	vadd.f32	s15, s16, s15
 800158c:	f248 03a4 	movw	r3, #32932	@ 0x80a4
 8001590:	443b      	add	r3, r7
 8001592:	edc3 7a00 	vstr	s15, [r3]
      init_pos_est.y = 0;
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	f248 02a8 	movw	r2, #32936	@ 0x80a8
 800159e:	443a      	add	r2, r7
 80015a0:	6013      	str	r3, [r2, #0]
      init_pos_est.z = 0;
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f248 02ac 	movw	r2, #32940	@ 0x80ac
 80015aa:	443a      	add	r2, r7
 80015ac:	6013      	str	r3, [r2, #0]

      // perform hooke-jeeves search to minimize the residual function
      raw_isbl_pos_est = hooke_jeeves_search_2d(rotated_mic_array, init_pos_est, measured_time_shifts, 1000, 1e-13, 1e-6, 2.0f);
 80015ae:	f248 03a4 	movw	r3, #32932	@ 0x80a4
 80015b2:	443b      	add	r3, r7
 80015b4:	edd3 6a00 	vldr	s13, [r3]
 80015b8:	f248 03a8 	movw	r3, #32936	@ 0x80a8
 80015bc:	443b      	add	r3, r7
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	f248 03ac 	movw	r3, #32940	@ 0x80ac
 80015c6:	443b      	add	r3, r7
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eef0 2a00 	vmov.f32	s5, #0	@ 0x40000000  2.0
 80015d0:	ed9f 2a32 	vldr	s4, [pc, #200]	@ 800169c <main+0xbd8>
 80015d4:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80016a0 <main+0xbdc>
 80015d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015dc:	4931      	ldr	r1, [pc, #196]	@ (80016a4 <main+0xbe0>)
 80015de:	eeb0 0a66 	vmov.f32	s0, s13
 80015e2:	eef0 0a47 	vmov.f32	s1, s14
 80015e6:	eeb0 1a67 	vmov.f32	s2, s15
 80015ea:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 80015ee:	443b      	add	r3, r7
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f001 fcb3 	bl	8002f5c <hooke_jeeves_search_2d>
 80015f6:	eef0 6a40 	vmov.f32	s13, s0
 80015fa:	eeb0 7a60 	vmov.f32	s14, s1
 80015fe:	eef0 7a41 	vmov.f32	s15, s2
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <main+0xbe4>)
 8001604:	edc3 6a00 	vstr	s13, [r3]
 8001608:	ed83 7a01 	vstr	s14, [r3, #4]
 800160c:	edc3 7a02 	vstr	s15, [r3, #8]

      // subtract estimated position to transmitter from known transmitter location to get receiver position
      // in global frame
      raw_isbl_pos_est.x = true_x - raw_isbl_pos_est.x;
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <main+0xbe4>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 800161a:	443b      	add	r3, r7
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <main+0xbe4>)
 8001626:	edc3 7a00 	vstr	s15, [r3]
      raw_isbl_pos_est.y = true_y - raw_isbl_pos_est.y;
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <main+0xbe4>)
 800162c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001630:	f248 03f4 	movw	r3, #33012	@ 0x80f4
 8001634:	443b      	add	r3, r7
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <main+0xbe4>)
 8001640:	edc3 7a01 	vstr	s15, [r3, #4]
      raw_isbl_pos_est.z = true_z - raw_isbl_pos_est.z;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <main+0xbe4>)
 8001646:	edd3 7a02 	vldr	s15, [r3, #8]
 800164a:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 800164e:	443b      	add	r3, r7
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <main+0xbe4>)
 800165a:	edc3 7a02 	vstr	s15, [r3, #8]

      // calculate the change in time since the last acoustic update (deltat_pos)
      timestamp2 = __HAL_TIM_GET_COUNTER(&htim14);
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <main+0xbe8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <main+0xbec>)
 8001666:	6013      	str	r3, [r2, #0]
      uint32_t diff_ticks;
      if (timestamp2 >= previousTimestamp2) {
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <main+0xbec>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <main+0xbf0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d321      	bcc.n	80016b8 <main+0xbf4>
          diff_ticks = timestamp2 - previousTimestamp2;
 8001674:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <main+0xbec>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <main+0xbf0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f248 1214 	movw	r2, #33044	@ 0x8114
 8001682:	443a      	add	r2, r7
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e022      	b.n	80016ce <main+0xc0a>
 8001688:	407851ec 	.word	0x407851ec
 800168c:	bf26e979 	.word	0xbf26e979
 8001690:	24004b2c 	.word	0x24004b2c
 8001694:	3a03126f 	.word	0x3a03126f
 8001698:	00000000 	.word	0x00000000
 800169c:	358637bd 	.word	0x358637bd
 80016a0:	29e12e13 	.word	0x29e12e13
 80016a4:	24004a5c 	.word	0x24004a5c
 80016a8:	24004a8c 	.word	0x24004a8c
 80016ac:	240005f8 	.word	0x240005f8
 80016b0:	24000808 	.word	0x24000808
 80016b4:	2400080c 	.word	0x2400080c
      } else {
          diff_ticks = (65536 - previousTimestamp2) + timestamp2;
 80016b8:	4bc3      	ldr	r3, [pc, #780]	@ (80019c8 <main+0xf04>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4bc3      	ldr	r3, [pc, #780]	@ (80019cc <main+0xf08>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80016c6:	f248 1214 	movw	r2, #33044	@ 0x8114
 80016ca:	443a      	add	r2, r7
 80016cc:	6013      	str	r3, [r2, #0]
      }
      deltat_pos = (float)diff_ticks * 65536.0f / 275000000.0f;
 80016ce:	f248 1314 	movw	r3, #33044	@ 0x8114
 80016d2:	443b      	add	r3, r7
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016de:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 80019d0 <main+0xf0c>
 80016e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e6:	eddf 6abb 	vldr	s13, [pc, #748]	@ 80019d4 <main+0xf10>
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	4bba      	ldr	r3, [pc, #744]	@ (80019d8 <main+0xf14>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
      previousTimestamp2 = __HAL_TIM_GET_COUNTER(&htim14);
 80016f4:	4bb9      	ldr	r3, [pc, #740]	@ (80019dc <main+0xf18>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	4ab4      	ldr	r2, [pc, #720]	@ (80019cc <main+0xf08>)
 80016fc:	6013      	str	r3, [r2, #0]

      // update F and H matrices with new delta t
      update_kalman_matrices(kf_combined, kf_isbl, deltat_pos);
 80016fe:	4bb6      	ldr	r3, [pc, #728]	@ (80019d8 <main+0xf14>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	f248 1304 	movw	r3, #33028	@ 0x8104
 800170c:	443b      	add	r3, r7
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	f248 1308 	movw	r3, #33032	@ 0x8108
 8001714:	443b      	add	r3, r7
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	f004 ff4c 	bl	80065b4 <update_kalman_matrices>

      // predict step for filters
      kalman_filter_predict(kf_combined);
 800171c:	f248 1308 	movw	r3, #33032	@ 0x8108
 8001720:	443b      	add	r3, r7
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	f004 fbb4 	bl	8005e90 <kalman_filter_predict>
      kalman_filter_predict(kf_isbl);
 8001728:	f248 1304 	movw	r3, #33028	@ 0x8104
 800172c:	443b      	add	r3, r7
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	f004 fbae 	bl	8005e90 <kalman_filter_predict>

      // get measurements
      float32_t measurements_combined[6] = {
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 8001734:	4baa      	ldr	r3, [pc, #680]	@ (80019e0 <main+0xf1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
      float32_t measurements_combined[6] = {
 8001738:	f248 028c 	movw	r2, #32908	@ 0x808c
 800173c:	443a      	add	r2, r7
 800173e:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 8001740:	4ba7      	ldr	r3, [pc, #668]	@ (80019e0 <main+0xf1c>)
 8001742:	685b      	ldr	r3, [r3, #4]
      float32_t measurements_combined[6] = {
 8001744:	f248 0290 	movw	r2, #32912	@ 0x8090
 8001748:	443a      	add	r2, r7
 800174a:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 800174c:	4ba4      	ldr	r3, [pc, #656]	@ (80019e0 <main+0xf1c>)
 800174e:	689b      	ldr	r3, [r3, #8]
      float32_t measurements_combined[6] = {
 8001750:	f248 0294 	movw	r2, #32916	@ 0x8094
 8001754:	443a      	add	r2, r7
 8001756:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 8001758:	4ba2      	ldr	r3, [pc, #648]	@ (80019e4 <main+0xf20>)
 800175a:	681b      	ldr	r3, [r3, #0]
      float32_t measurements_combined[6] = {
 800175c:	f248 0298 	movw	r2, #32920	@ 0x8098
 8001760:	443a      	add	r2, r7
 8001762:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 8001764:	4b9f      	ldr	r3, [pc, #636]	@ (80019e4 <main+0xf20>)
 8001766:	685b      	ldr	r3, [r3, #4]
      float32_t measurements_combined[6] = {
 8001768:	f248 029c 	movw	r2, #32924	@ 0x809c
 800176c:	443a      	add	r2, r7
 800176e:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z, delta_x_imu.x, delta_x_imu.y, delta_x_imu.z
 8001770:	4b9c      	ldr	r3, [pc, #624]	@ (80019e4 <main+0xf20>)
 8001772:	689b      	ldr	r3, [r3, #8]
      float32_t measurements_combined[6] = {
 8001774:	f248 02a0 	movw	r2, #32928	@ 0x80a0
 8001778:	443a      	add	r2, r7
 800177a:	6013      	str	r3, [r2, #0]
      };
      float32_t measurements_isbl[3] = {
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z
 800177c:	4b98      	ldr	r3, [pc, #608]	@ (80019e0 <main+0xf1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
      float32_t measurements_isbl[3] = {
 8001780:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001784:	443a      	add	r2, r7
 8001786:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z
 8001788:	4b95      	ldr	r3, [pc, #596]	@ (80019e0 <main+0xf1c>)
 800178a:	685b      	ldr	r3, [r3, #4]
      float32_t measurements_isbl[3] = {
 800178c:	f248 0284 	movw	r2, #32900	@ 0x8084
 8001790:	443a      	add	r2, r7
 8001792:	6013      	str	r3, [r2, #0]
          raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z
 8001794:	4b92      	ldr	r3, [pc, #584]	@ (80019e0 <main+0xf1c>)
 8001796:	689b      	ldr	r3, [r3, #8]
      float32_t measurements_isbl[3] = {
 8001798:	f248 0288 	movw	r2, #32904	@ 0x8088
 800179c:	443a      	add	r2, r7
 800179e:	6013      	str	r3, [r2, #0]
      };

      // update step for filters
      kalman_filter_update(kf_combined, measurements_combined);
 80017a0:	f248 038c 	movw	r3, #32908	@ 0x808c
 80017a4:	443b      	add	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	f248 1308 	movw	r3, #33032	@ 0x8108
 80017ac:	443b      	add	r3, r7
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f004 fbf6 	bl	8005fa0 <kalman_filter_update>
      kalman_filter_update(kf_isbl, measurements_isbl);
 80017b4:	f248 0380 	movw	r3, #32896	@ 0x8080
 80017b8:	443b      	add	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	f248 1304 	movw	r3, #33028	@ 0x8104
 80017c0:	443b      	add	r3, r7
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	f004 fbec 	bl	8005fa0 <kalman_filter_update>

      // return filter position estimates, convert to mm
      kf_comb_pos_est.x = kf_combined->x_data[0] * 1000;
 80017c8:	f248 1308 	movw	r3, #33032	@ 0x8108
 80017cc:	443b      	add	r3, r7
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80019e8 <main+0xf24>
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017de:	4b83      	ldr	r3, [pc, #524]	@ (80019ec <main+0xf28>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
      kf_comb_pos_est.y = kf_combined->x_data[1] * 1000;
 80017e4:	f248 1308 	movw	r3, #33032	@ 0x8108
 80017e8:	443b      	add	r3, r7
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ee:	3304      	adds	r3, #4
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80019e8 <main+0xf24>
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	4b7b      	ldr	r3, [pc, #492]	@ (80019ec <main+0xf28>)
 80017fe:	edc3 7a01 	vstr	s15, [r3, #4]
      kf_comb_pos_est.z = kf_combined->x_data[2] * 1000;
 8001802:	f248 1308 	movw	r3, #33032	@ 0x8108
 8001806:	443b      	add	r3, r7
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180c:	3308      	adds	r3, #8
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80019e8 <main+0xf24>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	4b74      	ldr	r3, [pc, #464]	@ (80019ec <main+0xf28>)
 800181c:	edc3 7a02 	vstr	s15, [r3, #8]

      kf_isbl_pos_est.x = kf_isbl->x_data[0] * 1000;
 8001820:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001824:	443b      	add	r3, r7
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80019e8 <main+0xf24>
 8001832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001836:	4b6e      	ldr	r3, [pc, #440]	@ (80019f0 <main+0xf2c>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
      kf_isbl_pos_est.y = kf_isbl->x_data[1] * 1000;
 800183c:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001840:	443b      	add	r3, r7
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001846:	3304      	adds	r3, #4
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80019e8 <main+0xf24>
 8001850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001854:	4b66      	ldr	r3, [pc, #408]	@ (80019f0 <main+0xf2c>)
 8001856:	edc3 7a01 	vstr	s15, [r3, #4]
      kf_isbl_pos_est.z = kf_isbl->x_data[2] * 1000;
 800185a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800185e:	443b      	add	r3, r7
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001864:	3308      	adds	r3, #8
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80019e8 <main+0xf24>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	4b5f      	ldr	r3, [pc, #380]	@ (80019f0 <main+0xf2c>)
 8001874:	edc3 7a02 	vstr	s15, [r3, #8]

      // convert raw acoustic position estimate to mm
      raw_isbl_pos_est.x *= 1000;
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <main+0xf1c>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80019e8 <main+0xf24>
 8001882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001886:	4b56      	ldr	r3, [pc, #344]	@ (80019e0 <main+0xf1c>)
 8001888:	edc3 7a00 	vstr	s15, [r3]
      raw_isbl_pos_est.y *= 1000;
 800188c:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <main+0xf1c>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80019e8 <main+0xf24>
 8001896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189a:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <main+0xf1c>)
 800189c:	edc3 7a01 	vstr	s15, [r3, #4]
      raw_isbl_pos_est.z *= 1000;
 80018a0:	4b4f      	ldr	r3, [pc, #316]	@ (80019e0 <main+0xf1c>)
 80018a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a6:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80019e8 <main+0xf24>
 80018aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ae:	4b4c      	ldr	r3, [pc, #304]	@ (80019e0 <main+0xf1c>)
 80018b0:	edc3 7a02 	vstr	s15, [r3, #8]

      // convert true tx position to mm
      true_x *= 1000;
 80018b4:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 80018b8:	443b      	add	r3, r7
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80019e8 <main+0xf24>
 80018c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c6:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 80018ca:	443b      	add	r3, r7
 80018cc:	edc3 7a00 	vstr	s15, [r3]
      true_y *= 1000;
 80018d0:	f248 03f4 	movw	r3, #33012	@ 0x80f4
 80018d4:	443b      	add	r3, r7
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80019e8 <main+0xf24>
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	f248 03f4 	movw	r3, #33012	@ 0x80f4
 80018e6:	443b      	add	r3, r7
 80018e8:	edc3 7a00 	vstr	s15, [r3]
      true_z *= 1000;
 80018ec:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 80018f0:	443b      	add	r3, r7
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80019e8 <main+0xf24>
 80018fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fe:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 8001902:	443b      	add	r3, r7
 8001904:	edc3 7a00 	vstr	s15, [r3]

      // prepare and transmit the orientation string over UART
      char orientationString[120];
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
               kf_isbl_pos_est.x, kf_isbl_pos_est.y, kf_isbl_pos_est.z,
 8001908:	4b39      	ldr	r3, [pc, #228]	@ (80019f0 <main+0xf2c>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800190e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
               kf_isbl_pos_est.x, kf_isbl_pos_est.y, kf_isbl_pos_est.z,
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <main+0xf2c>)
 8001914:	edd3 6a01 	vldr	s13, [r3, #4]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001918:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
               kf_isbl_pos_est.x, kf_isbl_pos_est.y, kf_isbl_pos_est.z,
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <main+0xf2c>)
 800191e:	edd3 5a02 	vldr	s11, [r3, #8]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001922:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
               kf_comb_pos_est.x, kf_comb_pos_est.y, kf_comb_pos_est.z,
 8001926:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <main+0xf28>)
 8001928:	edd3 4a00 	vldr	s9, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800192c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
               kf_comb_pos_est.x, kf_comb_pos_est.y, kf_comb_pos_est.z,
 8001930:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <main+0xf28>)
 8001932:	edd3 3a01 	vldr	s7, [r3, #4]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001936:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
               kf_comb_pos_est.x, kf_comb_pos_est.y, kf_comb_pos_est.z,
 800193a:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <main+0xf28>)
 800193c:	edd3 2a02 	vldr	s5, [r3, #8]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001940:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
               raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z,
 8001944:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <main+0xf1c>)
 8001946:	edd3 1a00 	vldr	s3, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800194a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
               raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z,
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <main+0xf1c>)
 8001950:	edd3 0a01 	vldr	s1, [r3, #4]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001954:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
               raw_isbl_pos_est.x, raw_isbl_pos_est.y, raw_isbl_pos_est.z,
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <main+0xf1c>)
 800195a:	ed93 8a02 	vldr	s16, [r3, #8]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800195e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
               newAngles.roll, newAngles.pitch, newAngles.yaw,
 8001962:	f248 03b0 	movw	r3, #32944	@ 0x80b0
 8001966:	443b      	add	r3, r7
 8001968:	ed93 9a00 	vldr	s18, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800196c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
               newAngles.roll, newAngles.pitch, newAngles.yaw,
 8001970:	f248 03b4 	movw	r3, #32948	@ 0x80b4
 8001974:	443b      	add	r3, r7
 8001976:	ed93 aa00 	vldr	s20, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800197a:	eeb7 aaca 	vcvt.f64.f32	d10, s20
               newAngles.roll, newAngles.pitch, newAngles.yaw,
 800197e:	f248 03b8 	movw	r3, #32952	@ 0x80b8
 8001982:	443b      	add	r3, r7
 8001984:	ed93 ba00 	vldr	s22, [r3]
      snprintf(orientationString, sizeof(orientationString), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8001988:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 800198c:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 8001990:	443b      	add	r3, r7
 8001992:	ed93 ca00 	vldr	s24, [r3]
 8001996:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 800199a:	f248 03f4 	movw	r3, #33012	@ 0x80f4
 800199e:	443b      	add	r3, r7
 80019a0:	ed93 da00 	vldr	s26, [r3]
 80019a4:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 80019a8:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 80019ac:	443b      	add	r3, r7
 80019ae:	ed93 ea00 	vldr	s28, [r3]
 80019b2:	eeb7 eace 	vcvt.f64.f32	d14, s28
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <main+0xf30>)
 80019b8:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 80019bc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80019c0:	443b      	add	r3, r7
 80019c2:	ed8d eb1c 	vstr	d14, [sp, #112]	@ 0x70
 80019c6:	e017      	b.n	80019f8 <main+0xf34>
 80019c8:	24000808 	.word	0x24000808
 80019cc:	2400080c 	.word	0x2400080c
 80019d0:	47800000 	.word	0x47800000
 80019d4:	4d832156 	.word	0x4d832156
 80019d8:	24000810 	.word	0x24000810
 80019dc:	240005f8 	.word	0x240005f8
 80019e0:	24004a8c 	.word	0x24004a8c
 80019e4:	24004aec 	.word	0x24004aec
 80019e8:	447a0000 	.word	0x447a0000
 80019ec:	24004a74 	.word	0x24004a74
 80019f0:	24004a80 	.word	0x24004a80
 80019f4:	ffff7ed8 	.word	0xffff7ed8
 80019f8:	ed8d db1a 	vstr	d13, [sp, #104]	@ 0x68
 80019fc:	ed8d cb18 	vstr	d12, [sp, #96]	@ 0x60
 8001a00:	ed8d bb16 	vstr	d11, [sp, #88]	@ 0x58
 8001a04:	ed8d ab14 	vstr	d10, [sp, #80]	@ 0x50
 8001a08:	ed8d 9b12 	vstr	d9, [sp, #72]	@ 0x48
 8001a0c:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
 8001a10:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8001a14:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8001a18:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8001a1c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001a20:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001a24:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001a28:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001a2c:	ed8d 7b00 	vstr	d7, [sp]
 8001a30:	4a9f      	ldr	r2, [pc, #636]	@ (8001cb0 <main+0x11ec>)
 8001a32:	2178      	movs	r1, #120	@ 0x78
 8001a34:	4618      	mov	r0, r3
 8001a36:	f018 fa3d 	bl	8019eb4 <sniprintf>
               true_x, true_y, true_z);
      HAL_UART_Transmit(&huart4, (uint8_t*)orientationString, strlen(orientationString), 200);
 8001a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cb4 <main+0x11f0>)
 8001a3c:	f503 4301 	add.w	r3, r3, #33024	@ 0x8100
 8001a40:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001a44:	443b      	add	r3, r7
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fcb2 	bl	80003b0 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4998      	ldr	r1, [pc, #608]	@ (8001cb4 <main+0x11f0>)
 8001a52:	f248 1328 	movw	r3, #33064	@ 0x8128
 8001a56:	440b      	add	r3, r1
 8001a58:	19d9      	adds	r1, r3, r7
 8001a5a:	23c8      	movs	r3, #200	@ 0xc8
 8001a5c:	4896      	ldr	r0, [pc, #600]	@ (8001cb8 <main+0x11f4>)
 8001a5e:	f011 f855 	bl	8012b0c <HAL_UART_Transmit>

      // get the next fossl_x value, the true x position of the FoSSL platform (will be removed when
      // transitioning to full system with depth sensor)
      float receivedValue;
      char confirmString[3];
      bad_depth_cnt = 0;
 8001a62:	4b96      	ldr	r3, [pc, #600]	@ (8001cbc <main+0x11f8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
      HAL_StatusTypeDef rxStatus = receiveRobustFloat(&huart4, &receivedValue);
 8001a68:	f248 037c 	movw	r3, #32892	@ 0x807c
 8001a6c:	443b      	add	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4891      	ldr	r0, [pc, #580]	@ (8001cb8 <main+0x11f4>)
 8001a72:	f004 fdd9 	bl	8006628 <receiveRobustFloat>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f248 1213 	movw	r2, #33043	@ 0x8113
 8001a7c:	443a      	add	r2, r7
 8001a7e:	7013      	strb	r3, [r2, #0]
      if (rxStatus == HAL_OK) {
 8001a80:	f248 1313 	movw	r3, #33043	@ 0x8113
 8001a84:	443b      	add	r3, r7
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d169      	bne.n	8001b60 <main+0x109c>
        fossl_x = receivedValue;
 8001a8c:	f248 037c 	movw	r3, #32892	@ 0x807c
 8001a90:	443b      	add	r3, r7
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8a      	ldr	r2, [pc, #552]	@ (8001cc0 <main+0x11fc>)
 8001a96:	6013      	str	r3, [r2, #0]
        snprintf(confirmString, sizeof(confirmString), "1");
 8001a98:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001a9c:	443b      	add	r3, r7
 8001a9e:	4a89      	ldr	r2, [pc, #548]	@ (8001cc4 <main+0x1200>)
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f018 fa06 	bl	8019eb4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t*)confirmString, strlen(confirmString), 200);
 8001aa8:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001aac:	443b      	add	r3, r7
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fc7e 	bl	80003b0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f248 0178 	movw	r1, #32888	@ 0x8078
 8001abc:	4439      	add	r1, r7
 8001abe:	23c8      	movs	r3, #200	@ 0xc8
 8001ac0:	487d      	ldr	r0, [pc, #500]	@ (8001cb8 <main+0x11f4>)
 8001ac2:	f011 f823 	bl	8012b0c <HAL_UART_Transmit>
      }

      // if first transmission doesn't work, then try again twice
      while ((rxStatus != HAL_OK) && (bad_depth_cnt < 3)){
 8001ac6:	e04b      	b.n	8001b60 <main+0x109c>
        snprintf(confirmString, sizeof(confirmString), "0");
 8001ac8:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001acc:	443b      	add	r3, r7
 8001ace:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc8 <main+0x1204>)
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f018 f9ee 	bl	8019eb4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t*)confirmString, strlen(confirmString), 200);
 8001ad8:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001adc:	443b      	add	r3, r7
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fc66 	bl	80003b0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f248 0178 	movw	r1, #32888	@ 0x8078
 8001aec:	4439      	add	r1, r7
 8001aee:	23c8      	movs	r3, #200	@ 0xc8
 8001af0:	4871      	ldr	r0, [pc, #452]	@ (8001cb8 <main+0x11f4>)
 8001af2:	f011 f80b 	bl	8012b0c <HAL_UART_Transmit>
        rxStatus = receiveRobustFloat(&huart4, &receivedValue);
 8001af6:	f248 037c 	movw	r3, #32892	@ 0x807c
 8001afa:	443b      	add	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	486e      	ldr	r0, [pc, #440]	@ (8001cb8 <main+0x11f4>)
 8001b00:	f004 fd92 	bl	8006628 <receiveRobustFloat>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f248 1213 	movw	r2, #33043	@ 0x8113
 8001b0a:	443a      	add	r2, r7
 8001b0c:	7013      	strb	r3, [r2, #0]
        if (rxStatus == HAL_OK) {
 8001b0e:	f248 1313 	movw	r3, #33043	@ 0x8113
 8001b12:	443b      	add	r3, r7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11d      	bne.n	8001b56 <main+0x1092>
          fossl_x = receivedValue;
 8001b1a:	f248 037c 	movw	r3, #32892	@ 0x807c
 8001b1e:	443b      	add	r3, r7
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a67      	ldr	r2, [pc, #412]	@ (8001cc0 <main+0x11fc>)
 8001b24:	6013      	str	r3, [r2, #0]
          snprintf(confirmString, sizeof(confirmString), "1");
 8001b26:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001b2a:	443b      	add	r3, r7
 8001b2c:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <main+0x1200>)
 8001b2e:	2103      	movs	r1, #3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f018 f9bf 	bl	8019eb4 <sniprintf>
          HAL_UART_Transmit(&huart4, (uint8_t*)confirmString, strlen(confirmString), 200);
 8001b36:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001b3a:	443b      	add	r3, r7
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc37 	bl	80003b0 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	f248 0178 	movw	r1, #32888	@ 0x8078
 8001b4a:	4439      	add	r1, r7
 8001b4c:	23c8      	movs	r3, #200	@ 0xc8
 8001b4e:	485a      	ldr	r0, [pc, #360]	@ (8001cb8 <main+0x11f4>)
 8001b50:	f010 ffdc 	bl	8012b0c <HAL_UART_Transmit>
 8001b54:	e004      	b.n	8001b60 <main+0x109c>
        } else {
          bad_depth_cnt += 1;
 8001b56:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <main+0x11f8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a57      	ldr	r2, [pc, #348]	@ (8001cbc <main+0x11f8>)
 8001b5e:	6013      	str	r3, [r2, #0]
      while ((rxStatus != HAL_OK) && (bad_depth_cnt < 3)){
 8001b60:	f248 1313 	movw	r3, #33043	@ 0x8113
 8001b64:	443b      	add	r3, r7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <main+0x10b0>
 8001b6c:	4b53      	ldr	r3, [pc, #332]	@ (8001cbc <main+0x11f8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	dda9      	ble.n	8001ac8 <main+0x1004>
      }

      // if all three transmissions failed, let FoSSl know (sending 1 means good send, 0 means bad send,
      // -1 means all three failed and to stop trying). in this case, previous FoSSL value is used and the
      // next measurement is thrown out
      if (bad_depth_cnt >= 3){
 8001b74:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <main+0x11f8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	dd16      	ble.n	8001baa <main+0x10e6>
        snprintf(confirmString, sizeof(confirmString), "-1");
 8001b7c:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001b80:	443b      	add	r3, r7
 8001b82:	4a52      	ldr	r2, [pc, #328]	@ (8001ccc <main+0x1208>)
 8001b84:	2103      	movs	r1, #3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f018 f994 	bl	8019eb4 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t*)confirmString, strlen(confirmString), 200);
 8001b8c:	f248 0378 	movw	r3, #32888	@ 0x8078
 8001b90:	443b      	add	r3, r7
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc0c 	bl	80003b0 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f248 0178 	movw	r1, #32888	@ 0x8078
 8001ba0:	4439      	add	r1, r7
 8001ba2:	23c8      	movs	r3, #200	@ 0xc8
 8001ba4:	4844      	ldr	r0, [pc, #272]	@ (8001cb8 <main+0x11f4>)
 8001ba6:	f010 ffb1 	bl	8012b0c <HAL_UART_Transmit>
      }

      // reset the position estimate
      raw_isbl_pos_est.x = 0;
 8001baa:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <main+0x120c>)
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
      raw_isbl_pos_est.y = 0;
 8001bb2:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <main+0x120c>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
      raw_isbl_pos_est.z = 0;
 8001bba:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <main+0x120c>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]

      // reset the accumulated velocity values
      v_corrected.x = 0;
 8001bc2:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <main+0x1210>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
      v_corrected.y = 0;
 8001bca:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <main+0x1210>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
      v_corrected.z = 0;
 8001bd2:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <main+0x1210>)
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
      delta_x_imu.x = 0;
 8001bda:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <main+0x1214>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
      delta_x_imu.y = 0;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <main+0x1214>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
      delta_x_imu.z = 0;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <main+0x1214>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
      v_corrected_last_stable.x = 0;
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <main+0x1218>)
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
      v_corrected_last_stable.y = 0;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <main+0x1218>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
      v_corrected_last_stable.z = 0;
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <main+0x1218>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
      imu_i = 0;
 8001c0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <main+0x121c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
      last_stable_i = 0;
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <main+0x1220>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

      // reset the measured time shift array
      memset(measured_time_shifts, 0, sizeof(measured_time_shifts));
 8001c16:	220c      	movs	r2, #12
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4833      	ldr	r0, [pc, #204]	@ (8001ce8 <main+0x1224>)
 8001c1c:	f018 fa76 	bl	801a10c <memset>

      // free the rotated mic array to prevent memory leak
      freeMicArray(rotated_mic_array);
 8001c20:	f248 03fc 	movw	r3, #33020	@ 0x80fc
 8001c24:	443b      	add	r3, r7
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f001 f8a2 	bl	8002d70 <freeMicArray>
      rotated_mic_array = NULL;  // Set to NULL to avoid using after free
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f248 02fc 	movw	r2, #33020	@ 0x80fc
 8001c32:	443a      	add	r2, r7
 8001c34:	6013      	str	r3, [r2, #0]

      // reset all ADC buffers
      memset(adc_buf, 0, sizeof(adc_buf));
 8001c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	482b      	ldr	r0, [pc, #172]	@ (8001cec <main+0x1228>)
 8001c3e:	f018 fa65 	bl	801a10c <memset>
      memset(trig_buf, 0, sizeof(trig_buf));
 8001c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c46:	2100      	movs	r1, #0
 8001c48:	4829      	ldr	r0, [pc, #164]	@ (8001cf0 <main+0x122c>)
 8001c4a:	f018 fa5f 	bl	801a10c <memset>

      // turn off LEDs for debugging
      HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);  // Turn off green LED
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	4828      	ldr	r0, [pc, #160]	@ (8001cf4 <main+0x1230>)
 8001c54:	f00b f89e 	bl	800cd94 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);  // Turn off yellow LED
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4826      	ldr	r0, [pc, #152]	@ (8001cf8 <main+0x1234>)
 8001c5e:	f00b f899 	bl	800cd94 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);  // Turn off red LED
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c68:	4822      	ldr	r0, [pc, #136]	@ (8001cf4 <main+0x1230>)
 8001c6a:	f00b f893 	bl	800cd94 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);  // Turn off LED on Pin E2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	4821      	ldr	r0, [pc, #132]	@ (8001cf8 <main+0x1234>)
 8001c74:	f00b f88e 	bl	800cd94 <HAL_GPIO_WritePin>

      // return to the trigger state
      state = 1;
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <main+0x1238>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]

      // restart the DMA from ADCs and the timer that controls the ADCs
      HAL_ADC_Start(&hadc2);
 8001c7e:	4820      	ldr	r0, [pc, #128]	@ (8001d00 <main+0x123c>)
 8001c80:	f006 f8f0 	bl	8007e64 <HAL_ADC_Start>
      HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)trig_buf, TRIG_BUF_LEN * NUM_MIC / 2);
 8001c84:	2280      	movs	r2, #128	@ 0x80
 8001c86:	491a      	ldr	r1, [pc, #104]	@ (8001cf0 <main+0x122c>)
 8001c88:	481e      	ldr	r0, [pc, #120]	@ (8001d04 <main+0x1240>)
 8001c8a:	f007 fc7b 	bl	8009584 <HAL_ADCEx_MultiModeStart_DMA>
      HAL_TIM_Base_Start_IT(&htim3);
 8001c8e:	481e      	ldr	r0, [pc, #120]	@ (8001d08 <main+0x1244>)
 8001c90:	f010 f9fc 	bl	801208c <HAL_TIM_Base_Start_IT>

      // add a delay to account for moving to the next position
      if (!stationary) HAL_Delay(2000);
 8001c94:	f248 130c 	movw	r3, #33036	@ 0x810c
 8001c98:	443b      	add	r3, r7
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47e af67 	bne.w	8000b70 <main+0xac>
 8001ca2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ca6:	f005 fbc7 	bl	8007438 <HAL_Delay>
    if (state == 0){
 8001caa:	f7fe bf61 	b.w	8000b70 <main+0xac>
 8001cae:	bf00      	nop
 8001cb0:	0801e240 	.word	0x0801e240
 8001cb4:	ffff7ed8 	.word	0xffff7ed8
 8001cb8:	24000644 	.word	0x24000644
 8001cbc:	24004b30 	.word	0x24004b30
 8001cc0:	24004b2c 	.word	0x24004b2c
 8001cc4:	0801e28c 	.word	0x0801e28c
 8001cc8:	0801e290 	.word	0x0801e290
 8001ccc:	0801e294 	.word	0x0801e294
 8001cd0:	24004a8c 	.word	0x24004a8c
 8001cd4:	24004af8 	.word	0x24004af8
 8001cd8:	24004aec 	.word	0x24004aec
 8001cdc:	24004b04 	.word	0x24004b04
 8001ce0:	2400000c 	.word	0x2400000c
 8001ce4:	240007f4 	.word	0x240007f4
 8001ce8:	24004a5c 	.word	0x24004a5c
 8001cec:	24000814 	.word	0x24000814
 8001cf0:	24004814 	.word	0x24004814
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	58021000 	.word	0x58021000
 8001cfc:	240007e4 	.word	0x240007e4
 8001d00:	24000374 	.word	0x24000374
 8001d04:	24000304 	.word	0x24000304
 8001d08:	24000560 	.word	0x24000560

08001d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b09c      	sub	sp, #112	@ 0x70
 8001d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	224c      	movs	r2, #76	@ 0x4c
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f018 f9f6 	bl	801a10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2220      	movs	r2, #32
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f018 f9f0 	bl	801a10c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f00c fd51 	bl	800e7d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <SystemClock_Config+0xdc>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001de8 <SystemClock_Config+0xdc>)
 8001d3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d40:	6193      	str	r3, [r2, #24]
 8001d42:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <SystemClock_Config+0xdc>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d4e:	bf00      	nop
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <SystemClock_Config+0xdc>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d5c:	d1f8      	bne.n	8001d50 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001d5e:	2321      	movs	r3, #33	@ 0x21
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d62:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d70:	2302      	movs	r3, #2
 8001d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001d78:	f240 1313 	movw	r3, #275	@ 0x113
 8001d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d82:	2304      	movs	r3, #4
 8001d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d86:	2302      	movs	r3, #2
 8001d88:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00c fd54 	bl	800e848 <HAL_RCC_OscConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001da6:	f004 fd2d 	bl	8006804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001daa:	233f      	movs	r3, #63	@ 0x3f
 8001dac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dae:	2303      	movs	r3, #3
 8001db0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001db6:	2308      	movs	r3, #8
 8001db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001dba:	2340      	movs	r3, #64	@ 0x40
 8001dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001dbe:	2340      	movs	r3, #64	@ 0x40
 8001dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001dc8:	2340      	movs	r3, #64	@ 0x40
 8001dca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2103      	movs	r1, #3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00d f913 	bl	800effc <HAL_RCC_ClockConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ddc:	f004 fd12 	bl	8006804 <Error_Handler>
  }
}
 8001de0:	bf00      	nop
 8001de2:	3770      	adds	r7, #112	@ 0x70
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	58024800 	.word	0x58024800

08001dec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0ae      	sub	sp, #184	@ 0xb8
 8001df0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	22b8      	movs	r2, #184	@ 0xb8
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f018 f987 	bl	801a10c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 8001e0e:	2319      	movs	r3, #25
 8001e10:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e1e:	23c0      	movs	r3, #192	@ 0xc0
 8001e20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00d fc6e 	bl	800f714 <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001e3e:	f004 fce1 	bl	8006804 <Error_Handler>
  }
}
 8001e42:	bf00      	nop
 8001e44:	37b8      	adds	r7, #184	@ 0xb8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	@ 0x30
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2224      	movs	r2, #36	@ 0x24
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f018 f951 	bl	801a10c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f64 <MX_ADC1_Init+0x118>)
 8001e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e70:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e76:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e7c:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e82:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e84:	2208      	movs	r2, #8
 8001e86:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e88:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e8e:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001ea4:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001eba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ece:	4824      	ldr	r0, [pc, #144]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001ed0:	f005 fdc0 	bl	8007a54 <HAL_ADC_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001eda:	f004 fc93 	bl	8006804 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001ede:	2306      	movs	r3, #6
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8001ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481b      	ldr	r0, [pc, #108]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001ef4:	f007 fc58 	bl	80097a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001efe:	f004 fc81 	bl	8006804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_ADC1_Init+0x11c>)
 8001f04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f06:	2306      	movs	r3, #6
 8001f08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f0e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f14:	2304      	movs	r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001f28:	f006 fabe 	bl	80084a8 <HAL_ADC_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001f32:	f004 fc67 	bl	8006804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f36:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <MX_ADC1_Init+0x120>)
 8001f38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3e:	463b      	mov	r3, r7
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <MX_ADC1_Init+0x114>)
 8001f44:	f006 fab0 	bl	80084a8 <HAL_ADC_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001f4e:	f004 fc59 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;  /* ADC and DMA configured in resolution 32 bits to match with both ADC master and slave resolution */
 8001f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* USER CODE END ADC1_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	@ 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	24000304 	.word	0x24000304
 8001f64:	40022000 	.word	0x40022000
 8001f68:	3ef08000 	.word	0x3ef08000
 8001f6c:	2a000400 	.word	0x2a000400

08001f70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2224      	movs	r2, #36	@ 0x24
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f018 f8c5 	bl	801a10c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001f84:	4a3c      	ldr	r2, [pc, #240]	@ (8002078 <MX_ADC2_Init+0x108>)
 8001f86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f88:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001f90:	2208      	movs	r2, #8
 8001f92:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f94:	4b37      	ldr	r3, [pc, #220]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f9a:	4b36      	ldr	r3, [pc, #216]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fae:	2202      	movs	r2, #2
 8001fb0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fb2:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001fce:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fd6:	4827      	ldr	r0, [pc, #156]	@ (8002074 <MX_ADC2_Init+0x104>)
 8001fd8:	f005 fd3c 	bl	8007a54 <HAL_ADC_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8001fe2:	f004 fc0f 	bl	8006804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <MX_ADC2_Init+0x10c>)
 8001fe8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fea:	2306      	movs	r3, #6
 8001fec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ff2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ff6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	481a      	ldr	r0, [pc, #104]	@ (8002074 <MX_ADC2_Init+0x104>)
 800200c:	f006 fa4c 	bl	80084a8 <HAL_ADC_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002016:	f004 fbf5 	bl	8006804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <MX_ADC2_Init+0x110>)
 800201c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800201e:	230c      	movs	r3, #12
 8002020:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4813      	ldr	r0, [pc, #76]	@ (8002074 <MX_ADC2_Init+0x104>)
 8002028:	f006 fa3e 	bl	80084a8 <HAL_ADC_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8002032:	f004 fbe7 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
//  hadc2.Init = hadc1.Init;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <MX_ADC2_Init+0x104>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800203c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002044:	480f      	ldr	r0, [pc, #60]	@ (8002084 <MX_ADC2_Init+0x114>)
 8002046:	f007 fa39 	bl	80094bc <HAL_ADCEx_Calibration_Start>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_ADC2_Init+0xe4>
  {
    /* Calibration Error */
    Error_Handler();
 8002050:	f004 fbd8 	bl	8006804 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8002054:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002058:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <MX_ADC2_Init+0x104>)
 800205e:	f007 fa2d 	bl	80094bc <HAL_ADCEx_Calibration_Start>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC2_Init+0xfc>
  {
    /* Calibration Error */
    Error_Handler();
 8002068:	f004 fbcc 	bl	8006804 <Error_Handler>
  }

  /* USER CODE END ADC2_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000374 	.word	0x24000374
 8002078:	40022100 	.word	0x40022100
 800207c:	14f00020 	.word	0x14f00020
 8002080:	4b840000 	.word	0x4b840000
 8002084:	24000304 	.word	0x24000304

08002088 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <MX_ETH_Init+0x80>)
 800208e:	4a1f      	ldr	r2, [pc, #124]	@ (800210c <MX_ETH_Init+0x84>)
 8002090:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002092:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <MX_ETH_Init+0x88>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_ETH_Init+0x88>)
 800209a:	2280      	movs	r2, #128	@ 0x80
 800209c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800209e:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <MX_ETH_Init+0x88>)
 80020a0:	22e1      	movs	r2, #225	@ 0xe1
 80020a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_ETH_Init+0x88>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_ETH_Init+0x88>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_ETH_Init+0x88>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <MX_ETH_Init+0x80>)
 80020b8:	4a15      	ldr	r2, [pc, #84]	@ (8002110 <MX_ETH_Init+0x88>)
 80020ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <MX_ETH_Init+0x80>)
 80020be:	2201      	movs	r2, #1
 80020c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <MX_ETH_Init+0x80>)
 80020c4:	4a13      	ldr	r2, [pc, #76]	@ (8002114 <MX_ETH_Init+0x8c>)
 80020c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <MX_ETH_Init+0x80>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <MX_ETH_Init+0x90>)
 80020cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <MX_ETH_Init+0x80>)
 80020d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80020d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80020d6:	480c      	ldr	r0, [pc, #48]	@ (8002108 <MX_ETH_Init+0x80>)
 80020d8:	f00a f880 	bl	800c1dc <HAL_ETH_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80020e2:	f004 fb8f 	bl	8006804 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020e6:	2238      	movs	r2, #56	@ 0x38
 80020e8:	2100      	movs	r1, #0
 80020ea:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_ETH_Init+0x94>)
 80020ec:	f018 f80e 	bl	801a10c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <MX_ETH_Init+0x94>)
 80020f2:	2221      	movs	r2, #33	@ 0x21
 80020f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <MX_ETH_Init+0x94>)
 80020f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <MX_ETH_Init+0x94>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2400045c 	.word	0x2400045c
 800210c:	40028000 	.word	0x40028000
 8002110:	24004b54 	.word	0x24004b54
 8002114:	24000250 	.word	0x24000250
 8002118:	240001f0 	.word	0x240001f0
 800211c:	240002cc 	.word	0x240002cc

08002120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <MX_I2C1_Init+0x78>)
 8002128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_I2C1_Init+0x74>)
 800212c:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <MX_I2C1_Init+0x7c>)
 800212e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002138:	2201      	movs	r2, #1
 800213a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_I2C1_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <MX_I2C1_Init+0x74>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800215a:	480e      	ldr	r0, [pc, #56]	@ (8002194 <MX_I2C1_Init+0x74>)
 800215c:	f00a fe4e 	bl	800cdfc <HAL_I2C_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002166:	f004 fb4d 	bl	8006804 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216a:	2100      	movs	r1, #0
 800216c:	4809      	ldr	r0, [pc, #36]	@ (8002194 <MX_I2C1_Init+0x74>)
 800216e:	f00c fa99 	bl	800e6a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002178:	f004 fb44 	bl	8006804 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_I2C1_Init+0x74>)
 8002180:	f00c fadb 	bl	800e73a <HAL_I2CEx_ConfigDigitalFilter>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800218a:	f004 fb3b 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2400050c 	.word	0x2400050c
 8002198:	40005400 	.word	0x40005400
 800219c:	00d049fb 	.word	0x00d049fb

080021a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <MX_TIM3_Init+0x98>)
 80021c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 323-1;
 80021d0:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021d2:	f44f 72a1 	mov.w	r2, #322	@ 0x142
 80021d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021e4:	4813      	ldr	r0, [pc, #76]	@ (8002234 <MX_TIM3_Init+0x94>)
 80021e6:	f00f fe7b 	bl	8011ee0 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80021f0:	f004 fb08 	bl	8006804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	4619      	mov	r1, r3
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <MX_TIM3_Init+0x94>)
 8002202:	f010 f8ff 	bl	8012404 <HAL_TIM_ConfigClockSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800220c:	f004 fafa 	bl	8006804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002210:	2320      	movs	r3, #32
 8002212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	@ (8002234 <MX_TIM3_Init+0x94>)
 800221e:	f010 fb6b 	bl	80128f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002228:	f004 faec 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	24000560 	.word	0x24000560
 8002238:	40000400 	.word	0x40000400

0800223c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_TIM13_Init+0x40>)
 8002242:	4a0f      	ldr	r2, [pc, #60]	@ (8002280 <MX_TIM13_Init+0x44>)
 8002244:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 4096-1;
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <MX_TIM13_Init+0x40>)
 8002248:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800224c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MX_TIM13_Init+0x40>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65536-1;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <MX_TIM13_Init+0x40>)
 8002256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800225a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <MX_TIM13_Init+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <MX_TIM13_Init+0x40>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	@ (800227c <MX_TIM13_Init+0x40>)
 800226a:	f00f fe39 	bl	8011ee0 <HAL_TIM_Base_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002274:	f004 fac6 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	240005ac 	.word	0x240005ac
 8002280:	40001c00 	.word	0x40001c00

08002284 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <MX_TIM14_Init+0x40>)
 800228a:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <MX_TIM14_Init+0x44>)
 800228c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 65536-1;
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <MX_TIM14_Init+0x40>)
 8002290:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002294:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <MX_TIM14_Init+0x40>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65536-1;
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <MX_TIM14_Init+0x40>)
 800229e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a4:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <MX_TIM14_Init+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <MX_TIM14_Init+0x40>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <MX_TIM14_Init+0x40>)
 80022b2:	f00f fe15 	bl	8011ee0 <HAL_TIM_Base_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80022bc:	f004 faa2 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	240005f8 	.word	0x240005f8
 80022c8:	40002000 	.word	0x40002000

080022cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022d0:	4b22      	ldr	r3, [pc, #136]	@ (800235c <MX_UART4_Init+0x90>)
 80022d2:	4a23      	ldr	r2, [pc, #140]	@ (8002360 <MX_UART4_Init+0x94>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <MX_UART4_Init+0x90>)
 80022d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <MX_UART4_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <MX_UART4_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <MX_UART4_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <MX_UART4_Init+0x90>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <MX_UART4_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <MX_UART4_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <MX_UART4_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <MX_UART4_Init+0x90>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <MX_UART4_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002314:	4811      	ldr	r0, [pc, #68]	@ (800235c <MX_UART4_Init+0x90>)
 8002316:	f010 fba9 	bl	8012a6c <HAL_UART_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002320:	f004 fa70 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002324:	2100      	movs	r1, #0
 8002326:	480d      	ldr	r0, [pc, #52]	@ (800235c <MX_UART4_Init+0x90>)
 8002328:	f011 fe0b 	bl	8013f42 <HAL_UARTEx_SetTxFifoThreshold>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002332:	f004 fa67 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002336:	2100      	movs	r1, #0
 8002338:	4808      	ldr	r0, [pc, #32]	@ (800235c <MX_UART4_Init+0x90>)
 800233a:	f011 fe40 	bl	8013fbe <HAL_UARTEx_SetRxFifoThreshold>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002344:	f004 fa5e 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002348:	4804      	ldr	r0, [pc, #16]	@ (800235c <MX_UART4_Init+0x90>)
 800234a:	f011 fdc1 	bl	8013ed0 <HAL_UARTEx_DisableFifoMode>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002354:	f004 fa56 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	24000644 	.word	0x24000644
 8002360:	40004c00 	.word	0x40004c00

08002364 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002368:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 800236a:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <MX_USART3_UART_Init+0x94>)
 800236c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800236e:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 8002370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002376:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800237c:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 800238a:	220c      	movs	r2, #12
 800238c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a6:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ac:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023ae:	f010 fb5d 	bl	8012a6c <HAL_UART_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80023b8:	f004 fa24 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023bc:	2100      	movs	r1, #0
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023c0:	f011 fdbf 	bl	8013f42 <HAL_UARTEx_SetTxFifoThreshold>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023ca:	f004 fa1b 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ce:	2100      	movs	r1, #0
 80023d0:	4808      	ldr	r0, [pc, #32]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023d2:	f011 fdf4 	bl	8013fbe <HAL_UARTEx_SetRxFifoThreshold>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023dc:	f004 fa12 	bl	8006804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023e0:	4804      	ldr	r0, [pc, #16]	@ (80023f4 <MX_USART3_UART_Init+0x90>)
 80023e2:	f011 fd75 	bl	8013ed0 <HAL_UARTEx_DisableFifoMode>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023ec:	f004 fa0a 	bl	8006804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	240006d8 	.word	0x240006d8
 80023f8:	40004800 	.word	0x40004800

080023fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_DMA_Init+0x4c>)
 8002414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002418:	4a0f      	ldr	r2, [pc, #60]	@ (8002458 <MX_DMA_Init+0x4c>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <MX_DMA_Init+0x4c>)
 8002424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	200b      	movs	r0, #11
 8002436:	f007 fb74 	bl	8009b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800243a:	200b      	movs	r0, #11
 800243c:	f007 fb8b 	bl	8009b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	200d      	movs	r0, #13
 8002446:	f007 fb6c 	bl	8009b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800244a:	200d      	movs	r0, #13
 800244c:	f007 fb83 	bl	8009b56 <HAL_NVIC_EnableIRQ>

}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	58024400 	.word	0x58024400

0800245c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	@ 0x30
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002472:	4b7c      	ldr	r3, [pc, #496]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002478:	4a7a      	ldr	r2, [pc, #488]	@ (8002664 <MX_GPIO_Init+0x208>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002482:	4b78      	ldr	r3, [pc, #480]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002490:	4b74      	ldr	r3, [pc, #464]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002496:	4a73      	ldr	r2, [pc, #460]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a0:	4b70      	ldr	r3, [pc, #448]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024be:	4b69      	ldr	r3, [pc, #420]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d2:	4a64      	ldr	r2, [pc, #400]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002664 <MX_GPIO_Init+0x208>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002508:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <MX_GPIO_Init+0x208>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	4a55      	ldr	r2, [pc, #340]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002518:	4b52      	ldr	r3, [pc, #328]	@ (8002664 <MX_GPIO_Init+0x208>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002526:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800252c:	4a4d      	ldr	r2, [pc, #308]	@ (8002664 <MX_GPIO_Init+0x208>)
 800252e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002536:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <MX_GPIO_Init+0x208>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	2106      	movs	r1, #6
 8002548:	4847      	ldr	r0, [pc, #284]	@ (8002668 <MX_GPIO_Init+0x20c>)
 800254a:	f00a fc23 	bl	800cd94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002554:	4845      	ldr	r0, [pc, #276]	@ (800266c <MX_GPIO_Init+0x210>)
 8002556:	f00a fc1d 	bl	800cd94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002560:	4843      	ldr	r0, [pc, #268]	@ (8002670 <MX_GPIO_Init+0x214>)
 8002562:	f00a fc17 	bl	800cd94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED_YELLOW_Pin;
 8002566:	2306      	movs	r3, #6
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	483a      	ldr	r0, [pc, #232]	@ (8002668 <MX_GPIO_Init+0x20c>)
 800257e:	f00a fa61 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800258c:	2302      	movs	r3, #2
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4837      	ldr	r0, [pc, #220]	@ (8002674 <MX_GPIO_Init+0x218>)
 8002598:	f00a fa54 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800259c:	f244 0301 	movw	r3, #16385	@ 0x4001
 80025a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	482d      	ldr	r0, [pc, #180]	@ (800266c <MX_GPIO_Init+0x210>)
 80025b6:	f00a fa45 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80025ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	4827      	ldr	r0, [pc, #156]	@ (8002670 <MX_GPIO_Init+0x214>)
 80025d4:	f00a fa36 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4822      	ldr	r0, [pc, #136]	@ (8002678 <MX_GPIO_Init+0x21c>)
 80025ee:	f00a fa29 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80025f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	481d      	ldr	r0, [pc, #116]	@ (800267c <MX_GPIO_Init+0x220>)
 8002608:	f00a fa1c 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800260c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800261e:	230a      	movs	r3, #10
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	4619      	mov	r1, r3
 8002628:	4814      	ldr	r0, [pc, #80]	@ (800267c <MX_GPIO_Init+0x220>)
 800262a:	f00a fa0b 	bl	800ca44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002634:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	4809      	ldr	r0, [pc, #36]	@ (800266c <MX_GPIO_Init+0x210>)
 8002646:	f00a f9fd 	bl	800ca44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable and set EXTI Line8 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2101      	movs	r1, #1
 800264e:	2017      	movs	r0, #23
 8002650:	f007 fa67 	bl	8009b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002654:	2017      	movs	r0, #23
 8002656:	f007 fa7e 	bl	8009b56 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 800265a:	bf00      	nop
 800265c:	3730      	adds	r7, #48	@ 0x30
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	58024400 	.word	0x58024400
 8002668:	58021000 	.word	0x58021000
 800266c:	58020400 	.word	0x58020400
 8002670:	58020c00 	.word	0x58020c00
 8002674:	58020800 	.word	0x58020800
 8002678:	58021800 	.word	0x58021800
 800267c:	58020000 	.word	0x58020000

08002680 <HAL_ADC_ConvCpltCallback>:
 *
 * Second, if we are in the full recording state (state 2), we transition to
 * the data processing state (state 3), since the adc_buf is full and we've
 * collected all our data.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b094      	sub	sp, #80	@ 0x50
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  // if we're in the trigger state, then trig_buf is full and needs to be tested
  if (state == 1){
 8002688:	4bb4      	ldr	r3, [pc, #720]	@ (800295c <HAL_ADC_ConvCpltCallback+0x2dc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 81a9 	bne.w	80029e4 <HAL_ADC_ConvCpltCallback+0x364>

  	// calculate mean for each microphone
  	float mic0_mean = 0, mic1_mean = 0, mic2_mean = 0, mic3_mean = 0;
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	643b      	str	r3, [r7, #64]	@ 0x40
  	for (int i = 0; i < TRIG_BUF_LEN * NUM_MIC/2; i += NUM_MIC/2) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ae:	e040      	b.n	8002732 <HAL_ADC_ConvCpltCallback+0xb2>
			mic0_mean += (float)adc1conv(trig_buf[i]);
 80026b0:	4aab      	ldr	r2, [pc, #684]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80026b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80026c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ca:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			mic1_mean += (float)adc2conv(trig_buf[i]);
 80026ce:	4aa4      	ldr	r2, [pc, #656]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
			mic2_mean += (float)adc1conv(trig_buf[i+1]);
 80026ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a9b      	ldr	r2, [pc, #620]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002700:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002708:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			mic3_mean += (float)adc2conv(trig_buf[i+1]);
 800270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270e:	3301      	adds	r3, #1
 8002710:	4a93      	ldr	r2, [pc, #588]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002720:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002728:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  	for (int i = 0; i < TRIG_BUF_LEN * NUM_MIC/2; i += NUM_MIC/2) {
 800272c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800272e:	3302      	adds	r3, #2
 8002730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002734:	2b7f      	cmp	r3, #127	@ 0x7f
 8002736:	ddbb      	ble.n	80026b0 <HAL_ADC_ConvCpltCallback+0x30>
  	}
  	mic0_mean /= (float)TRIG_BUF_LEN;
 8002738:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800273c:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8002964 <HAL_ADC_ConvCpltCallback+0x2e4>
 8002740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002744:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  	mic1_mean /= (float)TRIG_BUF_LEN;
 8002748:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800274c:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8002964 <HAL_ADC_ConvCpltCallback+0x2e4>
 8002750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002754:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  	mic2_mean /= (float)TRIG_BUF_LEN;
 8002758:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800275c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8002964 <HAL_ADC_ConvCpltCallback+0x2e4>
 8002760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002764:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  	mic3_mean /= (float)TRIG_BUF_LEN;
 8002768:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800276c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002964 <HAL_ADC_ConvCpltCallback+0x2e4>
 8002770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002774:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // check if NUM_THRES_ROW values in a row from any microphone exceed TRIG_THRES
		int exceedsThresholdmic0 = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
		int exceedsThresholdmic1 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
		int exceedsThresholdmic2 = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
		int exceedsThresholdmic3 = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int loopLen = TRIG_BUF_LEN - NUM_THRES_ROW;  /**< length of the for() loop for detecting if the trigger threshold has been exceeded */
 8002788:	233b      	movs	r3, #59	@ 0x3b
 800278a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < loopLen; i += 1) {
 800278c:	2300      	movs	r3, #0
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002790:	e0b6      	b.n	8002900 <HAL_ADC_ConvCpltCallback+0x280>
      int thres_count_mic0 = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
			int thres_count_mic1 = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
			int thres_count_mic2 = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
			int thres_count_mic3 = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]

      // check if the next NUM_THRES_ROWS values for the current microphone exceed TRIG_THRES
      // remember that trig_buf stores interleaved values, so for the case of 4 mics and NUM_THRES_ROWS = 5,
      // the first loop should test the values trig_buf[0], trig_buf[4], trig_buf[8], ... trig_buf[16]
	    for (int t = 0; t < NUM_THRES_ROW; t++) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e084      	b.n	80028b2 <HAL_ADC_ConvCpltCallback+0x232>
				thres_count_mic0 += fabsf((float)adc1conv(trig_buf[i*NUM_MIC/2 + t*NUM_MIC/2 + 0]) - mic0_mean) > TRIG_THRES;
 80027a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4413      	add	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80027c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c8:	eef0 7ae7 	vabs.f32	s15, s15
 80027cc:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002968 <HAL_ADC_ConvCpltCallback+0x2e8>
 80027d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	bfcc      	ite	gt
 80027da:	2301      	movgt	r3, #1
 80027dc:	2300      	movle	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	4413      	add	r3, r2
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
				thres_count_mic1 += fabsf((float)adc2conv(trig_buf[i*NUM_MIC/2 + t*NUM_MIC/2 + 0]) - mic1_mean) > TRIG_THRES;
 80027e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4a5b      	ldr	r2, [pc, #364]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002800:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002808:	eef0 7ae7 	vabs.f32	s15, s15
 800280c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002968 <HAL_ADC_ConvCpltCallback+0x2e8>
 8002810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	bfcc      	ite	gt
 800281a:	2301      	movgt	r3, #1
 800281c:	2300      	movle	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	4413      	add	r3, r2
 8002826:	623b      	str	r3, [r7, #32]
				thres_count_mic2 += fabsf((float)adc1conv(trig_buf[i*NUM_MIC/2 + t*NUM_MIC/2 + 1]) - mic2_mean) > TRIG_THRES;
 8002828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	3301      	adds	r3, #1
 8002832:	4a4b      	ldr	r2, [pc, #300]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	b29b      	uxth	r3, r3
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002842:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284a:	eef0 7ae7 	vabs.f32	s15, s15
 800284e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002968 <HAL_ADC_ConvCpltCallback+0x2e8>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	bfcc      	ite	gt
 800285c:	2301      	movgt	r3, #1
 800285e:	2300      	movle	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
				thres_count_mic3 += fabsf((float)adc2conv(trig_buf[i*NUM_MIC/2 + t*NUM_MIC/2 + 1]) - mic3_mean) > TRIG_THRES;
 800286a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	3301      	adds	r3, #1
 8002874:	4a3a      	ldr	r2, [pc, #232]	@ (8002960 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002884:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	eef0 7ae7 	vabs.f32	s15, s15
 8002890:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002968 <HAL_ADC_ConvCpltCallback+0x2e8>
 8002894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	bfcc      	ite	gt
 800289e:	2301      	movgt	r3, #1
 80028a0:	2300      	movle	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
	    for (int t = 0; t < NUM_THRES_ROW; t++) {
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	f77f af77 	ble.w	80027a8 <HAL_ADC_ConvCpltCallback+0x128>
	    }

      if (thres_count_mic0 == NUM_THRES_ROW) exceedsThresholdmic0 = 1;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConvCpltCallback+0x244>
 80028c0:	2301      	movs	r3, #1
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (thres_count_mic1 == NUM_THRES_ROW) exceedsThresholdmic1 = 1;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConvCpltCallback+0x24e>
 80028ca:	2301      	movs	r3, #1
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (thres_count_mic2 == NUM_THRES_ROW) exceedsThresholdmic2 = 1;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConvCpltCallback+0x258>
 80028d4:	2301      	movs	r3, #1
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
      if (thres_count_mic3 == NUM_THRES_ROW) exceedsThresholdmic3 = 1;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConvCpltCallback+0x262>
 80028de:	2301      	movs	r3, #1
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      // If all mics have been checked, we can break the loop
			if (exceedsThresholdmic0 && exceedsThresholdmic1 && exceedsThresholdmic2 && exceedsThresholdmic3) {
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_ADC_ConvCpltCallback+0x27a>
 80028e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_ADC_ConvCpltCallback+0x27a>
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_ADC_ConvCpltCallback+0x27a>
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <HAL_ADC_ConvCpltCallback+0x28c>
    for (int i = 0; i < loopLen; i += 1) {
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	3301      	adds	r3, #1
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	429a      	cmp	r2, r3
 8002906:	f6ff af44 	blt.w	8002792 <HAL_ADC_ConvCpltCallback+0x112>
 800290a:	e000      	b.n	800290e <HAL_ADC_ConvCpltCallback+0x28e>
					break;
 800290c:	bf00      	nop
			}
    }

    // mic0 controls the green LED
    if (exceedsThresholdmic0) {
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_ADC_ConvCpltCallback+0x2a0>
        HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);    // Turn on green LED
 8002914:	2201      	movs	r2, #1
 8002916:	2101      	movs	r1, #1
 8002918:	4814      	ldr	r0, [pc, #80]	@ (800296c <HAL_ADC_ConvCpltCallback+0x2ec>)
 800291a:	f00a fa3b 	bl	800cd94 <HAL_GPIO_WritePin>
 800291e:	e004      	b.n	800292a <HAL_ADC_ConvCpltCallback+0x2aa>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);  // Turn off green LED
 8002920:	2200      	movs	r2, #0
 8002922:	2101      	movs	r1, #1
 8002924:	4811      	ldr	r0, [pc, #68]	@ (800296c <HAL_ADC_ConvCpltCallback+0x2ec>)
 8002926:	f00a fa35 	bl	800cd94 <HAL_GPIO_WritePin>
    }

    // mic1 controls the yellow LED
    if (exceedsThresholdmic1) {
 800292a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_ADC_ConvCpltCallback+0x2bc>
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);    // Turn on yellow LED
 8002930:	2201      	movs	r2, #1
 8002932:	2102      	movs	r1, #2
 8002934:	480e      	ldr	r0, [pc, #56]	@ (8002970 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8002936:	f00a fa2d 	bl	800cd94 <HAL_GPIO_WritePin>
 800293a:	e004      	b.n	8002946 <HAL_ADC_ConvCpltCallback+0x2c6>
    } else {
        HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);  // Turn off yellow LED
 800293c:	2200      	movs	r2, #0
 800293e:	2102      	movs	r1, #2
 8002940:	480b      	ldr	r0, [pc, #44]	@ (8002970 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8002942:	f00a fa27 	bl	800cd94 <HAL_GPIO_WritePin>
    }

    // mic2 controls the red LED
    if (exceedsThresholdmic2) {
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_ADC_ConvCpltCallback+0x2f4>
        HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);    // Turn on red LED
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002952:	4806      	ldr	r0, [pc, #24]	@ (800296c <HAL_ADC_ConvCpltCallback+0x2ec>)
 8002954:	f00a fa1e 	bl	800cd94 <HAL_GPIO_WritePin>
 8002958:	e012      	b.n	8002980 <HAL_ADC_ConvCpltCallback+0x300>
 800295a:	bf00      	nop
 800295c:	240007e4 	.word	0x240007e4
 8002960:	24004814 	.word	0x24004814
 8002964:	42800000 	.word	0x42800000
 8002968:	42480000 	.word	0x42480000
 800296c:	58020400 	.word	0x58020400
 8002970:	58021000 	.word	0x58021000
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);  // Turn off red LED
 8002974:	2200      	movs	r2, #0
 8002976:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800297a:	4820      	ldr	r0, [pc, #128]	@ (80029fc <HAL_ADC_ConvCpltCallback+0x37c>)
 800297c:	f00a fa0a 	bl	800cd94 <HAL_GPIO_WritePin>
    }

    // mic3 controls the LED on Pin E2
    if (exceedsThresholdmic3) {
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_ADC_ConvCpltCallback+0x312>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);     // Turn on LED on Pin E2
 8002986:	2201      	movs	r2, #1
 8002988:	2104      	movs	r1, #4
 800298a:	481d      	ldr	r0, [pc, #116]	@ (8002a00 <HAL_ADC_ConvCpltCallback+0x380>)
 800298c:	f00a fa02 	bl	800cd94 <HAL_GPIO_WritePin>
 8002990:	e004      	b.n	800299c <HAL_ADC_ConvCpltCallback+0x31c>
    } else {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);   // Turn off LED on Pin E2
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	481a      	ldr	r0, [pc, #104]	@ (8002a00 <HAL_ADC_ConvCpltCallback+0x380>)
 8002998:	f00a f9fc 	bl	800cd94 <HAL_GPIO_WritePin>
    }

    // Check how many microphones exceeded the threshold
    int exceedsThreshold = exceedsThresholdmic0 + exceedsThresholdmic1 + exceedsThresholdmic2 + exceedsThresholdmic3;
 800299c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	441a      	add	r2, r3
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	4413      	add	r3, r2
 80029a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

    // if at least two microphones exceeded the threshold, move to the full recording state
    if (exceedsThreshold > 1) {
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	dd0f      	ble.n	80029d2 <HAL_ADC_ConvCpltCallback+0x352>
        state = 2;                // transition to full recording state
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0x384>)
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]
        recording = 1;            // set recording flag to 1, system is now recording a long chunk and should not be interrupted
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_ADC_ConvCpltCallback+0x388>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
        HAL_ADC_Start(&hadc2);    // start the slave ADC
 80029be:	4813      	ldr	r0, [pc, #76]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0x38c>)
 80029c0:	f005 fa50 	bl	8007e64 <HAL_ADC_Start>

        // start the master ADC in DMA mode, write the ADC values to adc_buf
        HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN * NUM_MIC / 2);
 80029c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029c8:	4911      	ldr	r1, [pc, #68]	@ (8002a10 <HAL_ADC_ConvCpltCallback+0x390>)
 80029ca:	4812      	ldr	r0, [pc, #72]	@ (8002a14 <HAL_ADC_ConvCpltCallback+0x394>)
 80029cc:	f006 fdda 	bl	8009584 <HAL_ADCEx_MultiModeStart_DMA>
  // if we're in the full recording state, then adc_buf is full and we transition to the data processing state
  else if (state == 2){
    state = 3;
  }

}
 80029d0:	e00f      	b.n	80029f2 <HAL_ADC_ConvCpltCallback+0x372>
        HAL_ADC_Start(&hadc2);    // start the slave ADC
 80029d2:	480e      	ldr	r0, [pc, #56]	@ (8002a0c <HAL_ADC_ConvCpltCallback+0x38c>)
 80029d4:	f005 fa46 	bl	8007e64 <HAL_ADC_Start>
        HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)trig_buf, TRIG_BUF_LEN * NUM_MIC / 2);
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <HAL_ADC_ConvCpltCallback+0x398>)
 80029dc:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <HAL_ADC_ConvCpltCallback+0x394>)
 80029de:	f006 fdd1 	bl	8009584 <HAL_ADCEx_MultiModeStart_DMA>
}
 80029e2:	e006      	b.n	80029f2 <HAL_ADC_ConvCpltCallback+0x372>
  else if (state == 2){
 80029e4:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0x384>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d102      	bne.n	80029f2 <HAL_ADC_ConvCpltCallback+0x372>
    state = 3;
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_ADC_ConvCpltCallback+0x384>)
 80029ee:	2203      	movs	r2, #3
 80029f0:	701a      	strb	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	3750      	adds	r7, #80	@ 0x50
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	58020400 	.word	0x58020400
 8002a00:	58021000 	.word	0x58021000
 8002a04:	240007e4 	.word	0x240007e4
 8002a08:	240007e8 	.word	0x240007e8
 8002a0c:	24000374 	.word	0x24000374
 8002a10:	24000814 	.word	0x24000814
 8002a14:	24000304 	.word	0x24000304
 8002a18:	24004814 	.word	0x24004814

08002a1c <calculate_time_shift>:
 *    - Calculate the time shift based on the index of the max value
 *    - Return the time shift in seconds
 *
 * This function is called a total of (NUM_MIC - 1) times.
 */
float32_t calculate_time_shift(float32_t *micA_buf, float32_t *micB_buf) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	f5ad 3dc0 	sub.w	sp, sp, #98304	@ 0x18000
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	f107 0320 	add.w	r3, r7, #32
 8002a2a:	f843 0c1c 	str.w	r0, [r3, #-28]
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	f843 1c20 	str.w	r1, [r3, #-32]
  float32_t fftBuf2Out[FFT_BUF_LEN];  /**< stores output of second FFT computation */
  float32_t ifftBufIn[FFT_BUF_LEN];   /**< stores input to inverse FFT computation */
  float32_t ifftRealOut[FFT_BUF_LEN]; /**< stores output of inverse FFT computation */

  // reset buffers to 0
  memset(fftBufIn, 0, sizeof(fftBufIn));
 8002a36:	4bb3      	ldr	r3, [pc, #716]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002a38:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002a3c:	f103 0320 	add.w	r3, r3, #32
 8002a40:	443b      	add	r3, r7
 8002a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f017 fb5f 	bl	801a10c <memset>
  memset(fftBuf1Out, 0, sizeof(fftBuf1Out));
 8002a4e:	4bae      	ldr	r3, [pc, #696]	@ (8002d08 <calculate_time_shift+0x2ec>)
 8002a50:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002a54:	f103 0320 	add.w	r3, r3, #32
 8002a58:	443b      	add	r3, r7
 8002a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f017 fb53 	bl	801a10c <memset>
  memset(fftBuf2Out, 0, sizeof(fftBuf2Out));
 8002a66:	4ba9      	ldr	r3, [pc, #676]	@ (8002d0c <calculate_time_shift+0x2f0>)
 8002a68:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002a6c:	f103 0320 	add.w	r3, r3, #32
 8002a70:	443b      	add	r3, r7
 8002a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f017 fb47 	bl	801a10c <memset>
  memset(ifftBufIn, 0, sizeof(ifftBufIn));
 8002a7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002a80:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002a84:	f103 0320 	add.w	r3, r3, #32
 8002a88:	443b      	add	r3, r7
 8002a8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f017 fb3b 	bl	801a10c <memset>
  memset(ifftRealOut, 0, sizeof(ifftRealOut));
 8002a96:	4b9f      	ldr	r3, [pc, #636]	@ (8002d14 <calculate_time_shift+0x2f8>)
 8002a98:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002a9c:	f103 0320 	add.w	r3, r3, #32
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f017 fb2f 	bl	801a10c <memset>

  // load micA values into fftBufIn (remaining values zeros for zero-padding)
  memcpy(fftBufIn, micA_buf, ADC_BUF_LEN * sizeof(float32_t));
 8002aae:	f107 0320 	add.w	r3, r7, #32
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4b93      	ldr	r3, [pc, #588]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002ab6:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002aba:	f103 0320 	add.w	r3, r3, #32
 8002abe:	443b      	add	r3, r7
 8002ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac4:	f851 1c1c 	ldr.w	r1, [r1, #-28]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f017 fbce 	bl	801a26a <memcpy>

  // perform real fft on zero-padded micA values
  arm_rfft_fast_f32(&fftHandler, fftBufIn, fftBuf1Out, 0);
 8002ace:	4a8e      	ldr	r2, [pc, #568]	@ (8002d08 <calculate_time_shift+0x2ec>)
 8002ad0:	4b91      	ldr	r3, [pc, #580]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	19da      	adds	r2, r3, r7
 8002ad6:	498b      	ldr	r1, [pc, #556]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002ada:	440b      	add	r3, r1
 8002adc:	19d9      	adds	r1, r3, r7
 8002ade:	2300      	movs	r3, #0
 8002ae0:	488e      	ldr	r0, [pc, #568]	@ (8002d1c <calculate_time_shift+0x300>)
 8002ae2:	f013 fe97 	bl	8016814 <arm_rfft_fast_f32>

  // reset fftBufIn
  memset(fftBufIn, 0, sizeof(fftBufIn));
 8002ae6:	4b87      	ldr	r3, [pc, #540]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002ae8:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002aec:	f103 0320 	add.w	r3, r3, #32
 8002af0:	443b      	add	r3, r7
 8002af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f017 fb07 	bl	801a10c <memset>

  // load micB values into fftBufIn (remaining values zeros for zero-padding)
  memcpy(fftBufIn, micB_buf, ADC_BUF_LEN * sizeof(float32_t));
 8002afe:	f107 0320 	add.w	r3, r7, #32
 8002b02:	4619      	mov	r1, r3
 8002b04:	4b7f      	ldr	r3, [pc, #508]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002b06:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002b0a:	f103 0320 	add.w	r3, r3, #32
 8002b0e:	443b      	add	r3, r7
 8002b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b14:	f851 1c20 	ldr.w	r1, [r1, #-32]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f017 fba6 	bl	801a26a <memcpy>

  // perform real fft on zero-padded micB values, put result into temporary buf
  arm_rfft_fast_f32(&fftHandler, fftBufIn, ifftBufIn, 0);
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002b20:	4b7d      	ldr	r3, [pc, #500]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b22:	4413      	add	r3, r2
 8002b24:	19da      	adds	r2, r3, r7
 8002b26:	4977      	ldr	r1, [pc, #476]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002b28:	4b7b      	ldr	r3, [pc, #492]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b2a:	440b      	add	r3, r1
 8002b2c:	19d9      	adds	r1, r3, r7
 8002b2e:	2300      	movs	r3, #0
 8002b30:	487a      	ldr	r0, [pc, #488]	@ (8002d1c <calculate_time_shift+0x300>)
 8002b32:	f013 fe6f 	bl	8016814 <arm_rfft_fast_f32>

  // calculate complex conjugate of micB real fft output (required for cross-correlation)
  arm_cmplx_conj_f32(ifftBufIn, fftBuf2Out, FFT_BUF_LEN);
 8002b36:	4975      	ldr	r1, [pc, #468]	@ (8002d0c <calculate_time_shift+0x2f0>)
 8002b38:	4b77      	ldr	r3, [pc, #476]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b3a:	440b      	add	r3, r1
 8002b3c:	19d9      	adds	r1, r3, r7
 8002b3e:	4b74      	ldr	r3, [pc, #464]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002b40:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002b44:	f103 0320 	add.w	r3, r3, #32
 8002b48:	443b      	add	r3, r7
 8002b4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f014 fece 	bl	80178f0 <arm_cmplx_conj_f32>

  // reset temporary buf
  memset(ifftBufIn, 0, sizeof(ifftBufIn));
 8002b54:	4b6e      	ldr	r3, [pc, #440]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002b56:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002b5a:	f103 0320 	add.w	r3, r3, #32
 8002b5e:	443b      	add	r3, r7
 8002b60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f017 fad0 	bl	801a10c <memset>

  // complex multiplication of the two fft output bufs
  arm_cmplx_mult_cmplx_f32(fftBuf1Out, fftBuf2Out, ifftBufIn, FFT_BUF_LEN);
 8002b6c:	4a68      	ldr	r2, [pc, #416]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b70:	4413      	add	r3, r2
 8002b72:	19da      	adds	r2, r3, r7
 8002b74:	4965      	ldr	r1, [pc, #404]	@ (8002d0c <calculate_time_shift+0x2f0>)
 8002b76:	4b68      	ldr	r3, [pc, #416]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b78:	440b      	add	r3, r1
 8002b7a:	19d9      	adds	r1, r3, r7
 8002b7c:	4862      	ldr	r0, [pc, #392]	@ (8002d08 <calculate_time_shift+0x2ec>)
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b80:	4403      	add	r3, r0
 8002b82:	19d8      	adds	r0, r3, r7
 8002b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b88:	f014 fde8 	bl	801775c <arm_cmplx_mult_cmplx_f32>

  // perform inverse real fft on multiplication result
  arm_rfft_fast_f32(&fftHandler, ifftBufIn, ifftRealOut, 1);
 8002b8c:	4a61      	ldr	r2, [pc, #388]	@ (8002d14 <calculate_time_shift+0x2f8>)
 8002b8e:	4b62      	ldr	r3, [pc, #392]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b90:	4413      	add	r3, r2
 8002b92:	19da      	adds	r2, r3, r7
 8002b94:	495e      	ldr	r1, [pc, #376]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002b96:	4b60      	ldr	r3, [pc, #384]	@ (8002d18 <calculate_time_shift+0x2fc>)
 8002b98:	440b      	add	r3, r1
 8002b9a:	19d9      	adds	r1, r3, r7
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	485f      	ldr	r0, [pc, #380]	@ (8002d1c <calculate_time_shift+0x300>)
 8002ba0:	f013 fe38 	bl	8016814 <arm_rfft_fast_f32>

  // find argmax((ifft_output)) to find time shift between signals
  int maxIndex = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d20 <calculate_time_shift+0x304>)
 8002ba8:	443a      	add	r2, r7
 8002baa:	6013      	str	r3, [r2, #0]
  float32_t maxVal = 0.0f;
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d24 <calculate_time_shift+0x308>)
 8002bb2:	443a      	add	r2, r7
 8002bb4:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < FFT_BUF_LEN; i++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002bba:	443a      	add	r2, r7
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e02c      	b.n	8002c1a <calculate_time_shift+0x1fe>
    float32_t curVal = (ifftRealOut[i]);
 8002bc0:	f107 0320 	add.w	r3, r7, #32
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b58      	ldr	r3, [pc, #352]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002bc8:	443b      	add	r3, r7
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b18      	subs	r3, #24
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <calculate_time_shift+0x310>)
 8002bd6:	443a      	add	r2, r7
 8002bd8:	6013      	str	r3, [r2, #0]
    if (curVal > maxVal) {
 8002bda:	4b54      	ldr	r3, [pc, #336]	@ (8002d2c <calculate_time_shift+0x310>)
 8002bdc:	443b      	add	r3, r7
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <calculate_time_shift+0x308>)
 8002be4:	443b      	add	r3, r7
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	dd0b      	ble.n	8002c0c <calculate_time_shift+0x1f0>
      maxVal = curVal;
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d2c <calculate_time_shift+0x310>)
 8002bf6:	443b      	add	r3, r7
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8002d24 <calculate_time_shift+0x308>)
 8002bfc:	443a      	add	r2, r7
 8002bfe:	6013      	str	r3, [r2, #0]
      maxIndex = i;
 8002c00:	4b49      	ldr	r3, [pc, #292]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002c02:	443b      	add	r3, r7
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a46      	ldr	r2, [pc, #280]	@ (8002d20 <calculate_time_shift+0x304>)
 8002c08:	443a      	add	r2, r7
 8002c0a:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < FFT_BUF_LEN; i++) {
 8002c0c:	4b46      	ldr	r3, [pc, #280]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002c0e:	443b      	add	r3, r7
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a44      	ldr	r2, [pc, #272]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002c16:	443a      	add	r2, r7
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <calculate_time_shift+0x30c>)
 8002c1c:	443b      	add	r3, r7
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c24:	dbcc      	blt.n	8002bc0 <calculate_time_shift+0x1a4>
    }
  }

  // shift is maxIndex if maxIndex < 0.5*fft_len, otherwise is maxIndex - fft_len
  float32_t adj_index = (maxIndex < FFT_BUF_LEN/2) ? (float)(maxIndex) : (float)(-FFT_BUF_LEN + maxIndex);
 8002c26:	4b3e      	ldr	r3, [pc, #248]	@ (8002d20 <calculate_time_shift+0x304>)
 8002c28:	443b      	add	r3, r7
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c30:	da07      	bge.n	8002c42 <calculate_time_shift+0x226>
 8002c32:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <calculate_time_shift+0x304>)
 8002c34:	443b      	add	r3, r7
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c40:	e008      	b.n	8002c54 <calculate_time_shift+0x238>
 8002c42:	4b37      	ldr	r3, [pc, #220]	@ (8002d20 <calculate_time_shift+0x304>)
 8002c44:	443b      	add	r3, r7
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <calculate_time_shift+0x314>)
 8002c56:	443b      	add	r3, r7
 8002c58:	edc3 7a00 	vstr	s15, [r3]

  // convert shift index to seconds (275MHz / 323 ADC clock)
  float32_t shift = adj_index / (275000000 / 323);
 8002c5c:	4b34      	ldr	r3, [pc, #208]	@ (8002d30 <calculate_time_shift+0x314>)
 8002c5e:	443b      	add	r3, r7
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002d34 <calculate_time_shift+0x318>
 8002c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6c:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <calculate_time_shift+0x31c>)
 8002c6e:	443b      	add	r3, r7
 8002c70:	edc3 7a00 	vstr	s15, [r3]

  // reset fft bufs
  memset(fftBufIn, 0, sizeof(fftBufIn));
 8002c74:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <calculate_time_shift+0x2e8>)
 8002c76:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002c7a:	f103 0320 	add.w	r3, r3, #32
 8002c7e:	443b      	add	r3, r7
 8002c80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f017 fa40 	bl	801a10c <memset>
  memset(fftBuf1Out, 0, sizeof(fftBuf1Out));
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <calculate_time_shift+0x2ec>)
 8002c8e:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002c92:	f103 0320 	add.w	r3, r3, #32
 8002c96:	443b      	add	r3, r7
 8002c98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f017 fa34 	bl	801a10c <memset>
  memset(fftBuf2Out, 0, sizeof(fftBuf2Out));
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <calculate_time_shift+0x2f0>)
 8002ca6:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002caa:	f103 0320 	add.w	r3, r3, #32
 8002cae:	443b      	add	r3, r7
 8002cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f017 fa28 	bl	801a10c <memset>
  memset(ifftBufIn, 0, sizeof(ifftBufIn));
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <calculate_time_shift+0x2f4>)
 8002cbe:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002cc2:	f103 0320 	add.w	r3, r3, #32
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f017 fa1c 	bl	801a10c <memset>
  memset(ifftRealOut, 0, sizeof(ifftRealOut));
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <calculate_time_shift+0x2f8>)
 8002cd6:	f503 33c0 	add.w	r3, r3, #98304	@ 0x18000
 8002cda:	f103 0320 	add.w	r3, r3, #32
 8002cde:	443b      	add	r3, r7
 8002ce0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f017 fa10 	bl	801a10c <memset>

  return shift;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <calculate_time_shift+0x31c>)
 8002cee:	443b      	add	r3, r7
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	ee07 3a90 	vmov	s15, r3
}
 8002cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfa:	f507 37c0 	add.w	r7, r7, #98304	@ 0x18000
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	ffffbfe8 	.word	0xffffbfe8
 8002d08:	ffff7fe8 	.word	0xffff7fe8
 8002d0c:	fffeffe8 	.word	0xfffeffe8
 8002d10:	fffebfe8 	.word	0xfffebfe8
 8002d14:	fffe7fe8 	.word	0xfffe7fe8
 8002d18:	00018020 	.word	0x00018020
 8002d1c:	24004a44 	.word	0x24004a44
 8002d20:	0001801c 	.word	0x0001801c
 8002d24:	00018018 	.word	0x00018018
 8002d28:	00018014 	.word	0x00018014
 8002d2c:	00018008 	.word	0x00018008
 8002d30:	00018010 	.word	0x00018010
 8002d34:	494fdc10 	.word	0x494fdc10
 8002d38:	0001800c 	.word	0x0001800c

08002d3c <createMicArray>:
 * @return mic_array Pointer to MicArray_t struct
 *
 * This function creates a new MicArray_t struct with a specified number of mics. Note that it does not
 * assign coordinates to the mics; that is done with the function caclulate_base_points.
 */
MicArray_t* createMicArray(uint32_t num_mics) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    MicArray_t* mic_array = (MicArray_t*)malloc(sizeof(MicArray_t) + num_mics * sizeof(Point3D));
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4618      	mov	r0, r3
 8002d52:	f015 f9f1 	bl	8018138 <malloc>
 8002d56:	4603      	mov	r3, r0
 8002d58:	60fb      	str	r3, [r7, #12]
    if (mic_array != NULL) {
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <createMicArray+0x2a>
        mic_array->num_mics = num_mics;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
    }
    return mic_array;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <freeMicArray>:
 * @param mic_array The pointer to the MicArray_t struct to be freed
 *
 * This function takes in a MicArray_t struct and frees the memory. This is essential to prevent memory
 * leaks when creating rotated mic arrays.
 */
void freeMicArray(MicArray_t* mic_array) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    if (mic_array != NULL) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <freeMicArray+0x14>
        free(mic_array);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f015 f9e2 	bl	8018148 <free>
    }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <calculate_base_points>:
 *          v
 *         +z
 *
 * The baseline parameter is the distance from any microphone to the center (e.g. x -> 2 straight-line distance)
 */
void calculate_base_points(MicArray_t* mic_array, float baseline) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b095      	sub	sp, #84	@ 0x54
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	ed87 0a00 	vstr	s0, [r7]
    // convert the baseline to a YZ spacing factor
    const float factor = baseline / 1.414f;
 8002d98:	ed97 7a00 	vldr	s14, [r7]
 8002d9c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002e80 <calculate_base_points+0xf4>
 8002da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // set coordinates for each microphone
    mic_array->base_points[0] = (Point3D){0.0f, -factor, -factor};
 8002da8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002dac:	eeb1 7a67 	vneg.f32	s14, s15
 8002db0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002db4:	eef1 7a67 	vneg.f32	s15, s15
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	ed83 7a02 	vstr	s14, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	edc3 7a03 	vstr	s15, [r3, #12]
    mic_array->base_points[1] = (Point3D){0.0f, -factor,  factor};
 8002dcc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002dd0:	eef1 7a67 	vneg.f32	s15, s15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edc3 7a05 	vstr	s15, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002de6:	619a      	str	r2, [r3, #24]
    mic_array->base_points[2] = (Point3D){0.0f,  factor,  factor};
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002df4:	621a      	str	r2, [r3, #32]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    mic_array->base_points[3] = (Point3D){0.0f,  factor, -factor};
 8002dfc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002e00:	eef1 7a67 	vneg.f32	s15, s15
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    // if there are more than 4 microphones, set their coordinates to (0,0,0)
    // note: this implementation only uses 4, so this is just for error catching
    for (uint32_t i = 4; i < mic_array->num_mics; i++) {
 8002e18:	2304      	movs	r3, #4
 8002e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e1c:	e023      	b.n	8002e66 <calculate_base_points+0xda>
        mic_array->base_points[i] = (Point3D){0.0f, 0.0f, 0.0f};
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3308      	adds	r3, #8
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	330c      	adds	r3, #12
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 4; i < mic_array->num_mics; i++) {
 8002e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e62:	3301      	adds	r3, #1
 8002e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3d6      	bcc.n	8002e1e <calculate_base_points+0x92>
    }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3754      	adds	r7, #84	@ 0x54
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	3fb4fdf4 	.word	0x3fb4fdf4

08002e84 <rotateMicArray>:
 * It is imperative that the freeMicArray() function is called after the rotated mic array has been used in the main
 * loop. Otherwise, each time this function gets called, it will create a new MicArray_t struct and memory will run out.
 * It may be desired to change this function and take in an additional MicArray_t as a parameter, so that the process
 * is more clear to the user.
 */
MicArray_t* rotateMicArray(MicArray_t* original_mic_array, Quaternion quat) {
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6178      	str	r0, [r7, #20]
 8002e8c:	eeb0 6a40 	vmov.f32	s12, s0
 8002e90:	eef0 6a60 	vmov.f32	s13, s1
 8002e94:	eeb0 7a41 	vmov.f32	s14, s2
 8002e98:	eef0 7a61 	vmov.f32	s15, s3
 8002e9c:	ed87 6a01 	vstr	s12, [r7, #4]
 8002ea0:	edc7 6a02 	vstr	s13, [r7, #8]
 8002ea4:	ed87 7a03 	vstr	s14, [r7, #12]
 8002ea8:	edc7 7a04 	vstr	s15, [r7, #16]
    if (original_mic_array == NULL) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <rotateMicArray+0x32>
        return NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e04e      	b.n	8002f54 <rotateMicArray+0xd0>
    }

    MicArray_t* rotated_mic_array = createMicArray(original_mic_array->num_mics);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff3e 	bl	8002d3c <createMicArray>
 8002ec0:	61b8      	str	r0, [r7, #24]
    if (rotated_mic_array == NULL) {
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <rotateMicArray+0x48>
        return NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e043      	b.n	8002f54 <rotateMicArray+0xd0>
    }

    for (uint32_t i = 0; i < original_mic_array->num_mics; i++) {
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e03a      	b.n	8002f48 <rotateMicArray+0xc4>
        rotated_mic_array->base_points[i] = rotatePoint(original_mic_array->base_points[i], quat);
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	18cc      	adds	r4, r1, r3
 8002ee0:	edd7 4a01 	vldr	s9, [r7, #4]
 8002ee4:	ed97 5a02 	vldr	s10, [r7, #8]
 8002ee8:	edd7 5a03 	vldr	s11, [r7, #12]
 8002eec:	ed97 6a04 	vldr	s12, [r7, #16]
 8002ef0:	6979      	ldr	r1, [r7, #20]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f0a:	eef0 1a64 	vmov.f32	s3, s9
 8002f0e:	eeb0 2a45 	vmov.f32	s4, s10
 8002f12:	eef0 2a65 	vmov.f32	s5, s11
 8002f16:	eeb0 3a46 	vmov.f32	s6, s12
 8002f1a:	eeb0 0a66 	vmov.f32	s0, s13
 8002f1e:	eef0 0a47 	vmov.f32	s1, s14
 8002f22:	eeb0 1a67 	vmov.f32	s2, s15
 8002f26:	f002 fafb 	bl	8005520 <rotatePoint>
 8002f2a:	eef0 6a40 	vmov.f32	s13, s0
 8002f2e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f32:	eef0 7a41 	vmov.f32	s15, s2
 8002f36:	edc4 6a01 	vstr	s13, [r4, #4]
 8002f3a:	ed84 7a02 	vstr	s14, [r4, #8]
 8002f3e:	edc4 7a03 	vstr	s15, [r4, #12]
    for (uint32_t i = 0; i < original_mic_array->num_mics; i++) {
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3301      	adds	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3bf      	bcc.n	8002ed2 <rotateMicArray+0x4e>
    }

    return rotated_mic_array;
 8002f52:	69bb      	ldr	r3, [r7, #24]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3724      	adds	r7, #36	@ 0x24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}

08002f5c <hooke_jeeves_search_2d>:
 *    - The residual returned is less than min_residual
 *    - The spacing is set to less than min_spacing
 *
 * More on the theory of HJS can be found in my thesis text.
 */
Point3D hooke_jeeves_search_2d(MicArray_t* mic_array, Point3D init_pos_est, float32_t measured_time_shifts[], int max_iter, float32_t min_residual, float32_t min_spacing, float32_t scale_factor) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0a6      	sub	sp, #152	@ 0x98
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6378      	str	r0, [r7, #52]	@ 0x34
 8002f64:	eef0 6a40 	vmov.f32	s13, s0
 8002f68:	eeb0 7a60 	vmov.f32	s14, s1
 8002f6c:	eef0 7a41 	vmov.f32	s15, s2
 8002f70:	6279      	str	r1, [r7, #36]	@ 0x24
 8002f72:	623a      	str	r2, [r7, #32]
 8002f74:	edc7 1a07 	vstr	s3, [r7, #28]
 8002f78:	ed87 2a06 	vstr	s4, [r7, #24]
 8002f7c:	edc7 2a05 	vstr	s5, [r7, #20]
 8002f80:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002f84:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8002f88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	Point3D pos_est = init_pos_est;       /**< best position estimate */
 8002f8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f90:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Point3D new_pos_est = init_pos_est;   /**< new position estimate for this iteration */
 8002f9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f9e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float32_t residual = 1e9;             /**< residual for current position estimate */
 8002fa8:	4bbf      	ldr	r3, [pc, #764]	@ (80032a8 <hooke_jeeves_search_2d+0x34c>)
 8002faa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float32_t residual_arr[4];            /**< list of residuals for testing new directions */
  float32_t prev_residual = 1e10;       /**< residual for previous position estiamte */
 8002fae:	4bbf      	ldr	r3, [pc, #764]	@ (80032ac <hooke_jeeves_search_2d+0x350>)
 8002fb0:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t spacing = 2;                /**< step size for new position estimates in best direction, in meters */
 8002fb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int new_dir_index = 0;                /**< index of direction with lowest residual */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int new_dir_flag = 0;                 /**< flag sets to 1 if new direction should be chosen */
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int iter = 0;                         /**< current iteration of HJS */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int dy = 0;                           /**< direction modifier for y-axis */
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int dz = 0;                           /**< direction modifier for z-axis */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  while ((iter < max_iter) && (residual > min_residual) && (spacing > min_spacing)){
 8002fd6:	e135      	b.n	8003244 <hooke_jeeves_search_2d+0x2e8>

    // if first iteration or previous movement gave a worse residual, choose a new direction
    if (new_dir_flag){
 8002fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80e3 	beq.w	80031a8 <hooke_jeeves_search_2d+0x24c>

      // every time a new direction is chosen, spacing is reduced by 1/scale_factor
      // set scale_factor between (1,2]
      spacing /= scale_factor;
 8002fe2:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8002fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fee:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

      // test evenly spaced angles and save the residuals for moving "spacing" distance in each direction
      int d_idx = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      for (int dy_ = -1; dy_ <= 1; dy_ += 2){
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ffc:	e02f      	b.n	800305e <hooke_jeeves_search_2d+0x102>
        new_pos_est.y = pos_est.y + (dy_) * spacing;
 8002ffe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800300c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003018:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        new_pos_est.z = pos_est.z;
 800301c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301e:	653b      	str	r3, [r7, #80]	@ 0x50
        residual_arr[d_idx] = calculate_residual(mic_array, new_pos_est, measured_time_shifts);
 8003020:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003024:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003028:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800302c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302e:	eeb0 0a66 	vmov.f32	s0, s13
 8003032:	eef0 0a47 	vmov.f32	s1, s14
 8003036:	eeb0 1a67 	vmov.f32	s2, s15
 800303a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800303c:	f000 f938 	bl	80032b0 <calculate_residual>
 8003040:	eef0 7a40 	vmov.f32	s15, s0
 8003044:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3398      	adds	r3, #152	@ 0x98
 800304a:	443b      	add	r3, r7
 800304c:	3b60      	subs	r3, #96	@ 0x60
 800304e:	edc3 7a00 	vstr	s15, [r3]
        d_idx ++;
 8003052:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003054:	3301      	adds	r3, #1
 8003056:	67fb      	str	r3, [r7, #124]	@ 0x7c
      for (int dy_ = -1; dy_ <= 1; dy_ += 2){
 8003058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800305a:	3302      	adds	r3, #2
 800305c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800305e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003060:	2b01      	cmp	r3, #1
 8003062:	ddcc      	ble.n	8002ffe <hooke_jeeves_search_2d+0xa2>
      }
      for (int dz_ = -1; dz_ <= 1; dz_ += 2){
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	677b      	str	r3, [r7, #116]	@ 0x74
 800306a:	e02f      	b.n	80030cc <hooke_jeeves_search_2d+0x170>
        new_pos_est.y = pos_est.y;
 800306c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        new_pos_est.z = pos_est.z + (dz_) * spacing;
 8003070:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800307e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        residual_arr[d_idx] = calculate_residual(mic_array, new_pos_est, measured_time_shifts);
 800308e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003092:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003096:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800309a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800309c:	eeb0 0a66 	vmov.f32	s0, s13
 80030a0:	eef0 0a47 	vmov.f32	s1, s14
 80030a4:	eeb0 1a67 	vmov.f32	s2, s15
 80030a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80030aa:	f000 f901 	bl	80032b0 <calculate_residual>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3398      	adds	r3, #152	@ 0x98
 80030b8:	443b      	add	r3, r7
 80030ba:	3b60      	subs	r3, #96	@ 0x60
 80030bc:	edc3 7a00 	vstr	s15, [r3]
        d_idx ++;
 80030c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030c2:	3301      	adds	r3, #1
 80030c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      for (int dz_ = -1; dz_ <= 1; dz_ += 2){
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	3302      	adds	r3, #2
 80030ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80030cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	ddcc      	ble.n	800306c <hooke_jeeves_search_2d+0x110>
      }

      // find direction that gives smallest residual
      new_dir_index = arg_min(residual_arr, d_idx);
 80030d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fa51 	bl	8003580 <arg_min>
 80030de:	66f8      	str	r0, [r7, #108]	@ 0x6c

      // if that direction has a smaller residual than the previous residual, move in that direction
      if (residual_arr[new_dir_index] < residual){
 80030e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3398      	adds	r3, #152	@ 0x98
 80030e6:	443b      	add	r3, r7
 80030e8:	3b60      	subs	r3, #96	@ 0x60
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80030f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	dd51      	ble.n	80031a0 <hooke_jeeves_search_2d+0x244>
        residual = residual_arr[new_dir_index];
 80030fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3398      	adds	r3, #152	@ 0x98
 8003102:	443b      	add	r3, r7
 8003104:	3b60      	subs	r3, #96	@ 0x60
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        // determine what the new direction is
        if (new_dir_index < 2) {
 800310c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800310e:	2b01      	cmp	r3, #1
 8003110:	dc0d      	bgt.n	800312e <hooke_jeeves_search_2d+0x1d2>
          dy = (new_dir_index % 2) * 2 - 1;
 8003112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003114:	2b00      	cmp	r3, #0
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	bfb8      	it	lt
 800311c:	425b      	neglt	r3, r3
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          dz = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800312c:	e00d      	b.n	800314a <hooke_jeeves_search_2d+0x1ee>
        } else {
          dy = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          dz = ((new_dir_index - 2) % 2) * 2 - 1;
 8003134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003136:	3b02      	subs	r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	bfb8      	it	lt
 8003140:	425b      	neglt	r3, r3
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        }

        // calculate new position based on that direction
        new_pos_est.y = pos_est.y + (dy) * spacing;
 800314a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800315a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800315e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        new_pos_est.z = pos_est.z + (dz) * spacing;
 800316a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800316e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800317a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800317e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003186:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

        // save as new best position estimate
        pos_est = new_pos_est;
 800318a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800318e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003192:	ca07      	ldmia	r2, {r0, r1, r2}
 8003194:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // start moving in that direction until improvement stops
        new_dir_flag = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800319e:	e04c      	b.n	800323a <hooke_jeeves_search_2d+0x2de>
      }

      // otherwise, scale down again
      else{
        new_dir_flag = 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031a6:	e048      	b.n	800323a <hooke_jeeves_search_2d+0x2de>
    }

    // otherwise, continue in that direction
    else{
      // calculate residual from moving in that direction with current spacing
      prev_residual = residual;
 80031a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ac:	673b      	str	r3, [r7, #112]	@ 0x70
      new_pos_est.y = pos_est.y + (dy) * spacing;
 80031ae:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80031b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031be:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80031c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ca:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
      new_pos_est.z = pos_est.z + (dz) * spacing;
 80031ce:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80031d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031de:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80031e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ea:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
      residual = calculate_residual(mic_array, new_pos_est, measured_time_shifts);
 80031ee:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80031f2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80031f6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80031fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003200:	eef0 0a47 	vmov.f32	s1, s14
 8003204:	eeb0 1a67 	vmov.f32	s2, s15
 8003208:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800320a:	f000 f851 	bl	80032b0 <calculate_residual>
 800320e:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94

      // if new residual is smaller than previous residual, keep moving in that direction
      if (prev_residual > residual){
 8003212:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003216:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800321a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	dd07      	ble.n	8003234 <hooke_jeeves_search_2d+0x2d8>
        pos_est = new_pos_est;
 8003224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003228:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800322c:	ca07      	ldmia	r2, {r0, r1, r2}
 800322e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003232:	e002      	b.n	800323a <hooke_jeeves_search_2d+0x2de>
      }

      // otherwise, choose a new direction next iteration
      else{
        new_dir_flag = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      }
    }

    iter++;
 800323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323e:	3301      	adds	r3, #1
 8003240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while ((iter < max_iter) && (residual > min_residual) && (spacing > min_spacing)){
 8003244:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	429a      	cmp	r2, r3
 800324c:	da12      	bge.n	8003274 <hooke_jeeves_search_2d+0x318>
 800324e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003252:	edd7 7a07 	vldr	s15, [r7, #28]
 8003256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	dd09      	ble.n	8003274 <hooke_jeeves_search_2d+0x318>
 8003260:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003264:	edd7 7a06 	vldr	s15, [r7, #24]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	f73f aeb2 	bgt.w	8002fd8 <hooke_jeeves_search_2d+0x7c>
  }

  // once an exit condition has been satisfied, break the loop and return the current position estimate
  return pos_est;
 8003274:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003278:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800327c:	ca07      	ldmia	r2, {r0, r1, r2}
 800327e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003282:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003284:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003288:	ee06 1a90 	vmov	s13, r1
 800328c:	ee07 2a10 	vmov	s14, r2
 8003290:	ee07 3a90 	vmov	s15, r3
}
 8003294:	eeb0 0a66 	vmov.f32	s0, s13
 8003298:	eef0 0a47 	vmov.f32	s1, s14
 800329c:	eeb0 1a67 	vmov.f32	s2, s15
 80032a0:	3798      	adds	r7, #152	@ 0x98
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	4e6e6b28 	.word	0x4e6e6b28
 80032ac:	501502f9 	.word	0x501502f9

080032b0 <calculate_residual>:
 *
 * Essentially, this function takes the target point and mic array positions, and computes what time shifts would be seen if
 * the transmitter was truly at that test point. The residual is the sum of squared differences of the measured and calculated
 * time shifts (calculated refers to being calculated for that particular test point).
 */
float32_t calculate_residual(MicArray_t* mic_array, Point3D target_point, float32_t measured_time_shifts[]) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6178      	str	r0, [r7, #20]
 80032b8:	eef0 6a40 	vmov.f32	s13, s0
 80032bc:	eeb0 7a60 	vmov.f32	s14, s1
 80032c0:	eef0 7a41 	vmov.f32	s15, s2
 80032c4:	6079      	str	r1, [r7, #4]
 80032c6:	edc7 6a02 	vstr	s13, [r7, #8]
 80032ca:	ed87 7a03 	vstr	s14, [r7, #12]
 80032ce:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t toa0 = 0;   /**< time of arrival for first mic */
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t toaN = 0;   /**< time of arrival for Nth mic */
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  float32_t* target_time_shifts = malloc((mic_array->num_mics - 1) * sizeof(float32_t));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f014 ff26 	bl	8018138 <malloc>
 80032ec:	4603      	mov	r3, r0
 80032ee:	61fb      	str	r3, [r7, #28]

  toa0 = calculate_toa(mic_array->base_points[0], target_point, sound_speed_mps);
 80032f0:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <calculate_residual+0x160>)
 80032f2:	edd3 4a00 	vldr	s9, [r3]
 80032f6:	ed97 5a02 	vldr	s10, [r7, #8]
 80032fa:	edd7 5a03 	vldr	s11, [r7, #12]
 80032fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	edd3 6a01 	vldr	s13, [r3, #4]
 8003308:	ed93 7a02 	vldr	s14, [r3, #8]
 800330c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003310:	eeb0 3a64 	vmov.f32	s6, s9
 8003314:	eef0 1a45 	vmov.f32	s3, s10
 8003318:	eeb0 2a65 	vmov.f32	s4, s11
 800331c:	eef0 2a46 	vmov.f32	s5, s12
 8003320:	eeb0 0a66 	vmov.f32	s0, s13
 8003324:	eef0 0a47 	vmov.f32	s1, s14
 8003328:	eeb0 1a67 	vmov.f32	s2, s15
 800332c:	f000 f8b5 	bl	800349a <calculate_toa>
 8003330:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

  // for each mic, calculate the time of arrival (distance from target point to that mic times speed of sound)
  // for underwater implementation, sound speed is not constant and depends on depth, temp, and salinity - this would need to
  // be modified to account for those factors
  for (int i = 1; i < mic_array->num_mics; i++) {
 8003334:	2301      	movs	r3, #1
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003338:	e039      	b.n	80033ae <calculate_residual+0xfe>
      toaN = calculate_toa(mic_array->base_points[i], target_point, sound_speed_mps);
 800333a:	4b35      	ldr	r3, [pc, #212]	@ (8003410 <calculate_residual+0x160>)
 800333c:	edd3 4a00 	vldr	s9, [r3]
 8003340:	ed97 5a02 	vldr	s10, [r7, #8]
 8003344:	edd7 5a03 	vldr	s11, [r7, #12]
 8003348:	ed97 6a04 	vldr	s12, [r7, #16]
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	edd3 6a01 	vldr	s13, [r3, #4]
 800335e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003362:	edd3 7a03 	vldr	s15, [r3, #12]
 8003366:	eeb0 3a64 	vmov.f32	s6, s9
 800336a:	eef0 1a45 	vmov.f32	s3, s10
 800336e:	eeb0 2a65 	vmov.f32	s4, s11
 8003372:	eef0 2a46 	vmov.f32	s5, s12
 8003376:	eeb0 0a66 	vmov.f32	s0, s13
 800337a:	eef0 0a47 	vmov.f32	s1, s14
 800337e:	eeb0 1a67 	vmov.f32	s2, s15
 8003382:	f000 f88a 	bl	800349a <calculate_toa>
 8003386:	ed87 0a08 	vstr	s0, [r7, #32]

      // the time shift is the time of arrival to the first mic minus the time of arrival to the Nth mic
      target_time_shifts[i-1] = toa0 - toaN;
 800338a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800339c:	edd7 7a08 	vldr	s15, [r7, #32]
 80033a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a4:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < mic_array->num_mics; i++) {
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	3301      	adds	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8c0      	bhi.n	800333a <calculate_residual+0x8a>
  }

  // calculate the residual by taking the sum of squared differences between the time shift arrays
  float32_t residual = calculate_squared_diff(measured_time_shifts, target_time_shifts, mic_array->num_mics - 1);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3b01      	subs	r3, #1
 80033be:	461a      	mov	r2, r3
 80033c0:	69f9      	ldr	r1, [r7, #28]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f828 	bl	8003418 <calculate_squared_diff>
 80033c8:	ed87 0a06 	vstr	s0, [r7, #24]

  // save the calculated time shifts into a global array (for debugging / comparing to the real estimates)
  // future work: implement the residual for the final estimate into the Kalman filter to increase uncertainty?
  for (int i = 0; i < mic_array->num_mics - 1; i++) {
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033d0:	e00c      	b.n	80033ec <calculate_residual+0x13c>
      calcd_time_shifts[i] = target_time_shifts[i];
 80033d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	490d      	ldr	r1, [pc, #52]	@ (8003414 <calculate_residual+0x164>)
 80033de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < mic_array->num_mics - 1; i++) {
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	3301      	adds	r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8ec      	bhi.n	80033d2 <calculate_residual+0x122>
  }

  // make sure to free the memory for the target time shift array to avoid memory leak
  free(target_time_shifts);
 80033f8:	69f8      	ldr	r0, [r7, #28]
 80033fa:	f014 fea5 	bl	8018148 <free>
  return residual;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	ee07 3a90 	vmov	s15, r3
}
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	3730      	adds	r7, #48	@ 0x30
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	24000000 	.word	0x24000000
 8003414:	24004a68 	.word	0x24004a68

08003418 <calculate_squared_diff>:
 * @param measured_data The first list, usually measured data
 * @param target_data The second list, usually target/calculated data
 * @param data_len The number of entries in each list
 * @return squared_diff The sum of squared differences between the two lists
 */
float32_t calculate_squared_diff(float32_t measured_data[], float32_t target_data[], int data_len){
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  float32_t squared_diff = 0;
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < data_len; i++){
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	e026      	b.n	800347e <calculate_squared_diff+0x66>
    squared_diff += ((measured_data[i] - target_data[i])*(measured_data[i] - target_data[i]));
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	ed93 7a00 	vldr	s14, [r3]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4413      	add	r3, r2
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	edd3 6a00 	vldr	s13, [r3]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	4413      	add	r3, r2
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a05 	vstr	s15, [r7, #20]
  for (int i = 0; i < data_len; i++){
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3301      	adds	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	dbd4      	blt.n	8003430 <calculate_squared_diff+0x18>
  }
  return squared_diff;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <calculate_toa>:
 * @param sound_speed_mps The speed of sound in meters per second
 * @return toa Time of arrival between the two points
 *
 * This function assume a constant speed of sound, which is not valid for large changes in depth in water.
 */
float32_t calculate_toa(Point3D pointA, Point3D pointB, float32_t sound_speed_mps) {
 800349a:	b580      	push	{r7, lr}
 800349c:	b090      	sub	sp, #64	@ 0x40
 800349e:	af00      	add	r7, sp, #0
 80034a0:	eeb0 5a40 	vmov.f32	s10, s0
 80034a4:	eef0 5a60 	vmov.f32	s11, s1
 80034a8:	eeb0 6a41 	vmov.f32	s12, s2
 80034ac:	eef0 6a61 	vmov.f32	s13, s3
 80034b0:	eeb0 7a42 	vmov.f32	s14, s4
 80034b4:	eef0 7a62 	vmov.f32	s15, s5
 80034b8:	ed87 3a01 	vstr	s6, [r7, #4]
 80034bc:	ed87 5a05 	vstr	s10, [r7, #20]
 80034c0:	edc7 5a06 	vstr	s11, [r7, #24]
 80034c4:	ed87 6a07 	vstr	s12, [r7, #28]
 80034c8:	edc7 6a02 	vstr	s13, [r7, #8]
 80034cc:	ed87 7a03 	vstr	s14, [r7, #12]
 80034d0:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t xA = pointA.x;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t yA = pointA.y;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
  float32_t zA = pointA.z;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
  float32_t xB = pointB.x;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	633b      	str	r3, [r7, #48]	@ 0x30
  float32_t yB = pointB.y;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float32_t zB = pointB.z;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  float32_t euclidean_dist = sqrt((xA-xB)*(xA-xB) + (yA-yB)*(yA-yB) + (zA-zB)*(zA-zB));
 80034ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80034f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80034f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034f8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80034fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003500:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003508:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800350c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003510:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003514:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8003518:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800351c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003528:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800352c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003530:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003534:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8003538:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800353c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800354c:	eeb0 0b47 	vmov.f64	d0, d7
 8003550:	f019 f992 	bl	801c878 <sqrt>
 8003554:	eeb0 7b40 	vmov.f64	d7, d0
 8003558:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800355c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float32_t toa = euclidean_dist / sound_speed_mps;
 8003560:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003564:	ed97 7a01 	vldr	s14, [r7, #4]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	edc7 7a08 	vstr	s15, [r7, #32]
  return toa;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	ee07 3a90 	vmov	s15, r3
}
 8003576:	eeb0 0a67 	vmov.f32	s0, s15
 800357a:	3740      	adds	r7, #64	@ 0x40
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <arg_min>:
 * @brief Finds the index of the minimum value of a list
 * @param data_array The data list to be searched
 * @param dat_len The length of the data list
 * @return minIndex The index of the minimum value of the list
 */
int arg_min(float32_t data_array[], int data_len){
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  float32_t minValue = 1e10;
 800358a:	4b15      	ldr	r3, [pc, #84]	@ (80035e0 <arg_min+0x60>)
 800358c:	617b      	str	r3, [r7, #20]
  int minIndex = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < data_len; i++) {
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e017      	b.n	80035c8 <arg_min+0x48>
    if (data_array[i] < minValue) {
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80035a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd07      	ble.n	80035c2 <arg_min+0x42>
      minValue = data_array[i];
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
      minIndex = i;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < data_len; i++) {
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbe3      	blt.n	8003598 <arg_min+0x18>
    }
  }
  return minIndex;
 80035d0:	693b      	ldr	r3, [r7, #16]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	501502f9 	.word	0x501502f9

080035e4 <lsm6dsox_write>:
 *
 * Written by STMicroelectronics, from documentation here:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lsm6dsox_STdC
 */
static int32_t lsm6dsox_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af04      	add	r7, sp, #16
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	460b      	mov	r3, r1
 80035f2:	72fb      	strb	r3, [r7, #11]
 80035f4:	4613      	mov	r3, r2
 80035f6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSOX_I2C_ADD_L, reg,
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003600:	9302      	str	r3, [sp, #8]
 8003602:	893b      	ldrh	r3, [r7, #8]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2301      	movs	r3, #1
 800360c:	21d5      	movs	r1, #213	@ 0xd5
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f009 fc90 	bl	800cf34 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	return 0;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <lsm6dsox_read>:
 *
 * Written by STMicroelectronics, from documentation here:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lsm6dsox_STdC
 */
static int32_t lsm6dsox_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b088      	sub	sp, #32
 8003622:	af04      	add	r7, sp, #16
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	461a      	mov	r2, r3
 800362a:	460b      	mov	r3, r1
 800362c:	72fb      	strb	r3, [r7, #11]
 800362e:	4613      	mov	r3, r2
 8003630:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSOX_I2C_ADD_L, reg,
 8003632:	7afb      	ldrb	r3, [r7, #11]
 8003634:	b29a      	uxth	r2, r3
 8003636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800363a:	9302      	str	r3, [sp, #8]
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2301      	movs	r3, #1
 8003646:	21d5      	movs	r1, #213	@ 0xd5
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f009 fd87 	bl	800d15c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <lsm6dsox_read_data_drdy_handler>:
 *    - Positive X-axis of IMU points between the negative Y and positive Z axes of the iSBL array
 *    - Positive Y-axis of IMU points between the negative Y and negative Z axes of the iSBL array
 *    - Positive Z-axis of IMU points towards the positive X axis of the iSBL array
 */
void lsm6dsox_read_data_drdy_handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	ed2d 8b02 	vpush	{d8}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsox_xl_flag_data_ready_get(&dev_ctx, &reg);
 8003662:	1dfb      	adds	r3, r7, #7
 8003664:	4619      	mov	r1, r3
 8003666:	489c      	ldr	r0, [pc, #624]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 8003668:	f011 fb9e 	bl	8014da8 <lsm6dsox_xl_flag_data_ready_get>

	if (reg) {
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d06d      	beq.n	800374e <lsm6dsox_read_data_drdy_handler+0xf6>
	    /* Read acceleration field data */
	    memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003672:	2206      	movs	r2, #6
 8003674:	2100      	movs	r1, #0
 8003676:	4899      	ldr	r0, [pc, #612]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 8003678:	f016 fd48 	bl	801a10c <memset>
	    lsm6dsox_acceleration_raw_get(&dev_ctx, data_raw_acceleration);                               // Note: acceleration data is negative by default
 800367c:	4997      	ldr	r1, [pc, #604]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 800367e:	4896      	ldr	r0, [pc, #600]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 8003680:	f011 fc47 	bl	8014f12 <lsm6dsox_acceleration_raw_get>
	    acceleration_g[0] = -lsm6dsox_from_fs4_to_mg(data_raw_acceleration[2]) / 1000.0;              // Z-axis reading to X
 8003684:	4b95      	ldr	r3, [pc, #596]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 8003686:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	f010 ff96 	bl	80145bc <lsm6dsox_from_fs4_to_mg>
 8003690:	eef0 7a40 	vmov.f32	s15, s0
 8003694:	eef1 7a67 	vneg.f32	s15, s15
 8003698:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800369c:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 80036a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036a8:	4b8d      	ldr	r3, [pc, #564]	@ (80038e0 <lsm6dsox_read_data_drdy_handler+0x288>)
 80036aa:	edc3 7a00 	vstr	s15, [r3]
	    acceleration_g[1] = 0.7071 * (lsm6dsox_from_fs4_to_mg(data_raw_acceleration[0]) / 1000.0 +
 80036ae:	4b8b      	ldr	r3, [pc, #556]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 80036b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f010 ff81 	bl	80145bc <lsm6dsox_from_fs4_to_mg>
 80036ba:	eef0 7a40 	vmov.f32	s15, s0
 80036be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036c2:	ed9f 6b81 	vldr	d6, [pc, #516]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 80036c6:	ee87 8b06 	vdiv.f64	d8, d7, d6
	                                  lsm6dsox_from_fs4_to_mg(data_raw_acceleration[1]) / 1000.0);    // Combination of X and Y to Y
 80036ca:	4b84      	ldr	r3, [pc, #528]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 80036cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f010 ff73 	bl	80145bc <lsm6dsox_from_fs4_to_mg>
 80036d6:	eef0 7a40 	vmov.f32	s15, s0
 80036da:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80036de:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 80036e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
	    acceleration_g[1] = 0.7071 * (lsm6dsox_from_fs4_to_mg(data_raw_acceleration[0]) / 1000.0 +
 80036e6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80036ea:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 80038d0 <lsm6dsox_read_data_drdy_handler+0x278>
 80036ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036f6:	4b7a      	ldr	r3, [pc, #488]	@ (80038e0 <lsm6dsox_read_data_drdy_handler+0x288>)
 80036f8:	edc3 7a01 	vstr	s15, [r3, #4]
	    acceleration_g[2] = 0.7071 * (-lsm6dsox_from_fs4_to_mg(data_raw_acceleration[0]) / 1000.0 -
 80036fc:	4b77      	ldr	r3, [pc, #476]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 80036fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003702:	4618      	mov	r0, r3
 8003704:	f010 ff5a 	bl	80145bc <lsm6dsox_from_fs4_to_mg>
 8003708:	eef0 7a40 	vmov.f32	s15, s0
 800370c:	eef1 7a67 	vneg.f32	s15, s15
 8003710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003714:	ed9f 6b6c 	vldr	d6, [pc, #432]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 8003718:	ee87 8b06 	vdiv.f64	d8, d7, d6
	                                  -lsm6dsox_from_fs4_to_mg(data_raw_acceleration[1]) / 1000.0);   // Combination of X and Y to Z
 800371c:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <lsm6dsox_read_data_drdy_handler+0x284>)
 800371e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003722:	4618      	mov	r0, r3
 8003724:	f010 ff4a 	bl	80145bc <lsm6dsox_from_fs4_to_mg>
 8003728:	eef0 7a40 	vmov.f32	s15, s0
 800372c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003730:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 8003734:	ee86 7b05 	vdiv.f64	d7, d6, d5
	    acceleration_g[2] = 0.7071 * (-lsm6dsox_from_fs4_to_mg(data_raw_acceleration[0]) / 1000.0 -
 8003738:	ee38 7b07 	vadd.f64	d7, d8, d7
 800373c:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 80038d0 <lsm6dsox_read_data_drdy_handler+0x278>
 8003740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003744:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003748:	4b65      	ldr	r3, [pc, #404]	@ (80038e0 <lsm6dsox_read_data_drdy_handler+0x288>)
 800374a:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	lsm6dsox_gy_flag_data_ready_get(&dev_ctx, &reg);
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	4619      	mov	r1, r3
 8003752:	4861      	ldr	r0, [pc, #388]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 8003754:	f011 fb41 	bl	8014dda <lsm6dsox_gy_flag_data_ready_get>

	if (reg) {
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8093 	beq.w	8003886 <lsm6dsox_read_data_drdy_handler+0x22e>
	    /* Read angular rate field data */
	    memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003760:	2206      	movs	r2, #6
 8003762:	2100      	movs	r1, #0
 8003764:	485f      	ldr	r0, [pc, #380]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 8003766:	f016 fcd1 	bl	801a10c <memset>
	    lsm6dsox_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 800376a:	495e      	ldr	r1, [pc, #376]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 800376c:	485a      	ldr	r0, [pc, #360]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 800376e:	f011 fb88 	bl	8014e82 <lsm6dsox_angular_rate_raw_get>
	    angular_rate_dps[0] = lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[2]) / 1000.0;              // Z-axis reading to X
 8003772:	4b5c      	ldr	r3, [pc, #368]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 8003774:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f010 ff37 	bl	80145ec <lsm6dsox_from_fs1000_to_mdps>
 800377e:	eef0 7a40 	vmov.f32	s15, s0
 8003782:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003786:	ed9f 5b50 	vldr	d5, [pc, #320]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 800378a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800378e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003792:	4b55      	ldr	r3, [pc, #340]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003794:	edc3 7a00 	vstr	s15, [r3]
	    angular_rate_dps[1] = 0.7071 * (-lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[0]) / 1000.0 +
 8003798:	4b52      	ldr	r3, [pc, #328]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 800379a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379e:	4618      	mov	r0, r3
 80037a0:	f010 ff24 	bl	80145ec <lsm6dsox_from_fs1000_to_mdps>
 80037a4:	eef0 7a40 	vmov.f32	s15, s0
 80037a8:	eef1 7a67 	vneg.f32	s15, s15
 80037ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037b0:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 80037b4:	ee87 8b06 	vdiv.f64	d8, d7, d6
	                                    -lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[1]) / 1000.0);  // Combination of X and Y to Y
 80037b8:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 80037ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037be:	4618      	mov	r0, r3
 80037c0:	f010 ff14 	bl	80145ec <lsm6dsox_from_fs1000_to_mdps>
 80037c4:	eef0 7a40 	vmov.f32	s15, s0
 80037c8:	eef1 7a67 	vneg.f32	s15, s15
 80037cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80037d0:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 80037d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
	    angular_rate_dps[1] = 0.7071 * (-lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[0]) / 1000.0 +
 80037d8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80037dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 80038d0 <lsm6dsox_read_data_drdy_handler+0x278>
 80037e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037e8:	4b3f      	ldr	r3, [pc, #252]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 80037ea:	edc3 7a01 	vstr	s15, [r3, #4]
	    angular_rate_dps[2] = 0.7071 * (lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[0]) / 1000.0 -
 80037ee:	4b3d      	ldr	r3, [pc, #244]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 80037f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f010 fef9 	bl	80145ec <lsm6dsox_from_fs1000_to_mdps>
 80037fa:	eef0 7a40 	vmov.f32	s15, s0
 80037fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003802:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 8003806:	ee87 8b06 	vdiv.f64	d8, d7, d6
	                                    lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[1]) / 1000.0);   // Combination of X and Y to Z
 800380a:	4b36      	ldr	r3, [pc, #216]	@ (80038e4 <lsm6dsox_read_data_drdy_handler+0x28c>)
 800380c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003810:	4618      	mov	r0, r3
 8003812:	f010 feeb 	bl	80145ec <lsm6dsox_from_fs1000_to_mdps>
 8003816:	eef0 7a40 	vmov.f32	s15, s0
 800381a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800381e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 80038c8 <lsm6dsox_read_data_drdy_handler+0x270>
 8003822:	ee86 7b05 	vdiv.f64	d7, d6, d5
	    angular_rate_dps[2] = 0.7071 * (lsm6dsox_from_fs1000_to_mdps(data_raw_angular_rate[0]) / 1000.0 -
 8003826:	ee38 7b47 	vsub.f64	d7, d8, d7
 800382a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80038d0 <lsm6dsox_read_data_drdy_handler+0x278>
 800382e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003832:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003836:	4b2c      	ldr	r3, [pc, #176]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003838:	edc3 7a02 	vstr	s15, [r3, #8]

	    if (imu_calibrated){
 800383c:	4b2b      	ldr	r3, [pc, #172]	@ (80038ec <lsm6dsox_read_data_drdy_handler+0x294>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <lsm6dsox_read_data_drdy_handler+0x22e>

				// Apply gyroscope calibration only if it has already been calibrated
				angular_rate_dps[0] += g_cal[0];
 8003844:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <lsm6dsox_read_data_drdy_handler+0x298>)
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003854:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003856:	edc3 7a00 	vstr	s15, [r3]
				angular_rate_dps[1] += g_cal[1];
 800385a:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 800385c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003860:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <lsm6dsox_read_data_drdy_handler+0x298>)
 8003862:	edd3 7a01 	vldr	s15, [r3, #4]
 8003866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386a:	4b1f      	ldr	r3, [pc, #124]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 800386c:	edc3 7a01 	vstr	s15, [r3, #4]
				angular_rate_dps[2] += g_cal[2];
 8003870:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003872:	ed93 7a02 	vldr	s14, [r3, #8]
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <lsm6dsox_read_data_drdy_handler+0x298>)
 8003878:	edd3 7a02 	vldr	s15, [r3, #8]
 800387c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <lsm6dsox_read_data_drdy_handler+0x290>)
 8003882:	edc3 7a02 	vstr	s15, [r3, #8]
	    }
	}

	lsm6dsox_temp_flag_data_ready_get(&dev_ctx, &reg);
 8003886:	1dfb      	adds	r3, r7, #7
 8003888:	4619      	mov	r1, r3
 800388a:	4813      	ldr	r0, [pc, #76]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 800388c:	f011 fabe 	bl	8014e0c <lsm6dsox_temp_flag_data_ready_get>

	if (reg) {
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d011      	beq.n	80038ba <lsm6dsox_read_data_drdy_handler+0x262>
		/* Read temperature data */
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8003896:	4b17      	ldr	r3, [pc, #92]	@ (80038f4 <lsm6dsox_read_data_drdy_handler+0x29c>)
 8003898:	2200      	movs	r2, #0
 800389a:	801a      	strh	r2, [r3, #0]
		lsm6dsox_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800389c:	4915      	ldr	r1, [pc, #84]	@ (80038f4 <lsm6dsox_read_data_drdy_handler+0x29c>)
 800389e:	480e      	ldr	r0, [pc, #56]	@ (80038d8 <lsm6dsox_read_data_drdy_handler+0x280>)
 80038a0:	f011 facd 	bl	8014e3e <lsm6dsox_temperature_raw_get>
		temperature_degC = lsm6dsox_from_lsb_to_celsius(
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <lsm6dsox_read_data_drdy_handler+0x29c>)
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f010 feb6 	bl	801461c <lsm6dsox_from_lsb_to_celsius>
 80038b0:	eef0 7a40 	vmov.f32	s15, s0
 80038b4:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <lsm6dsox_read_data_drdy_handler+0x2a0>)
 80038b6:	edc3 7a00 	vstr	s15, [r3]
												 data_raw_temperature);
	}
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	ecbd 8b02 	vpop	{d8}
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	00000000 	.word	0x00000000
 80038cc:	408f4000 	.word	0x408f4000
 80038d0:	2de00d1b 	.word	0x2de00d1b
 80038d4:	3fe6a090 	.word	0x3fe6a090
 80038d8:	24004b34 	.word	0x24004b34
 80038dc:	24004a98 	.word	0x24004a98
 80038e0:	24004ab0 	.word	0x24004ab0
 80038e4:	24004aa0 	.word	0x24004aa0
 80038e8:	24004abc 	.word	0x24004abc
 80038ec:	240007e7 	.word	0x240007e7
 80038f0:	24004adc 	.word	0x24004adc
 80038f4:	24004aae 	.word	0x24004aae
 80038f8:	24004ad4 	.word	0x24004ad4

080038fc <lsm6dsox_read_data_drdy>:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lsm6dsox_STdC
 *
 * Set data rates and sensitivities here.
 */
void lsm6dsox_read_data_drdy(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
  lsm6dsox_pin_int2_route_t int2_route;
  lsm6dsox_status_reg_t status;
  uint8_t reg;

  /* Initialize mems driver interface */
  dev_ctx.write_reg = lsm6dsox_write;
 8003902:	4b43      	ldr	r3, [pc, #268]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003904:	4a43      	ldr	r2, [pc, #268]	@ (8003a14 <lsm6dsox_read_data_drdy+0x118>)
 8003906:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = lsm6dsox_read;
 8003908:	4b41      	ldr	r3, [pc, #260]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 800390a:	4a43      	ldr	r2, [pc, #268]	@ (8003a18 <lsm6dsox_read_data_drdy+0x11c>)
 800390c:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 800390e:	4b40      	ldr	r3, [pc, #256]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003910:	4a42      	ldr	r2, [pc, #264]	@ (8003a1c <lsm6dsox_read_data_drdy+0x120>)
 8003912:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8003914:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003916:	4a42      	ldr	r2, [pc, #264]	@ (8003a20 <lsm6dsox_read_data_drdy+0x124>)
 8003918:	60da      	str	r2, [r3, #12]

  /* Wait sensor boot time */
  platform_delay(100);
 800391a:	2064      	movs	r0, #100	@ 0x64
 800391c:	f000 f9b0 	bl	8003c80 <platform_delay>

  /* Check device ID */
  lsm6dsox_device_id_get(&dev_ctx, &whoamI);
 8003920:	4940      	ldr	r1, [pc, #256]	@ (8003a24 <lsm6dsox_read_data_drdy+0x128>)
 8003922:	483b      	ldr	r0, [pc, #236]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003924:	f011 fb63 	bl	8014fee <lsm6dsox_device_id_get>
  if (whoamI != LSM6DSOX_ID){
 8003928:	4b3e      	ldr	r3, [pc, #248]	@ (8003a24 <lsm6dsox_read_data_drdy+0x128>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b6c      	cmp	r3, #108	@ 0x6c
 800392e:	d001      	beq.n	8003934 <lsm6dsox_read_data_drdy+0x38>
      while (1){
          NVIC_SystemReset();
 8003930:	f7fd f8b2 	bl	8000a98 <__NVIC_SystemReset>
      }
  }

  /* Restore default configuration */
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003934:	2101      	movs	r1, #1
 8003936:	4836      	ldr	r0, [pc, #216]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003938:	f011 fb6a 	bl	8015010 <lsm6dsox_reset_set>
  do {
      lsm6dsox_reset_get(&dev_ctx, &rst);
 800393c:	493a      	ldr	r1, [pc, #232]	@ (8003a28 <lsm6dsox_read_data_drdy+0x12c>)
 800393e:	4834      	ldr	r0, [pc, #208]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003940:	f011 fb8c 	bl	801505c <lsm6dsox_reset_get>
  } while (rst);
 8003944:	4b38      	ldr	r3, [pc, #224]	@ (8003a28 <lsm6dsox_read_data_drdy+0x12c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f7      	bne.n	800393c <lsm6dsox_read_data_drdy+0x40>

  /* Disable I3C interface */
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 800394c:	2180      	movs	r1, #128	@ 0x80
 800394e:	4830      	ldr	r0, [pc, #192]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003950:	f011 fb9d 	bl	801508e <lsm6dsox_i3c_disable_set>

//  /* Enable Block Data Update */
//  lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);

  lsm6dsox_pin_int2_route_get(&dev_ctx, NULL, &int2_route);
 8003954:	f107 0308 	add.w	r3, r7, #8
 8003958:	461a      	mov	r2, r3
 800395a:	2100      	movs	r1, #0
 800395c:	482c      	ldr	r0, [pc, #176]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 800395e:	f012 fb28 	bl	8015fb2 <lsm6dsox_pin_int2_route_get>
//  int2_route.drdy_xl = PROPERTY_ENABLE;
  int2_route.drdy_g = PROPERTY_ENABLE;  // Enable gyro data ready interrupt
 8003962:	7a3b      	ldrb	r3, [r7, #8]
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	723b      	strb	r3, [r7, #8]
  lsm6dsox_pin_int2_route_set(&dev_ctx, NULL, int2_route);
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	cb0c      	ldmia	r3, {r2, r3}
 8003970:	2100      	movs	r1, #0
 8003972:	4827      	ldr	r0, [pc, #156]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003974:	f011 ff3a 	bl	80157ec <lsm6dsox_pin_int2_route_set>

  /* Set Output Data Rate */
  lsm6dsox_xl_power_mode_set(&dev_ctx, LSM6DSOX_HIGH_PERFORMANCE_MD);
 8003978:	2100      	movs	r1, #0
 800397a:	4825      	ldr	r0, [pc, #148]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 800397c:	f011 f998 	bl	8014cb0 <lsm6dsox_xl_power_mode_set>
  lsm6dsox_gy_power_mode_set(&dev_ctx, LSM6DSOX_GY_HIGH_PERFORMANCE);
 8003980:	2100      	movs	r1, #0
 8003982:	4823      	ldr	r0, [pc, #140]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003984:	f011 f9d9 	bl	8014d3a <lsm6dsox_gy_power_mode_set>
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_208Hz);
 8003988:	2105      	movs	r1, #5
 800398a:	4821      	ldr	r0, [pc, #132]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 800398c:	f010 fe88 	bl	80146a0 <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_208Hz);
 8003990:	2105      	movs	r1, #5
 8003992:	481f      	ldr	r0, [pc, #124]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 8003994:	f011 f81a 	bl	80149cc <lsm6dsox_gy_data_rate_set>

  /* Set full scale */
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_4g);
 8003998:	2102      	movs	r1, #2
 800399a:	481d      	ldr	r0, [pc, #116]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 800399c:	f010 fe5a 	bl	8014654 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_1000dps);
 80039a0:	2104      	movs	r1, #4
 80039a2:	481b      	ldr	r0, [pc, #108]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 80039a4:	f010 ffec 	bl	8014980 <lsm6dsox_gy_full_scale_set>

  // Disable FIFO
	lsm6dsox_fifo_mode_set(&dev_ctx, LSM6DSOX_BYPASS_MODE);
 80039a8:	2100      	movs	r1, #0
 80039aa:	4819      	ldr	r0, [pc, #100]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 80039ac:	f011 fc12 	bl	80151d4 <lsm6dsox_fifo_mode_set>

  // Set interrupt to pulsed mode
  lsm6dsox_int_notification_set(&dev_ctx, LSM6DSOX_ALL_INT_PULSED);
 80039b0:	2100      	movs	r1, #0
 80039b2:	4817      	ldr	r0, [pc, #92]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 80039b4:	f011 fbb1 	bl	801511a <lsm6dsox_int_notification_set>

  /* Check if gyro is enabled */
  lsm6dsox_read_reg(&dev_ctx, LSM6DSOX_CTRL2_G, &reg, 1);
 80039b8:	1cfa      	adds	r2, r7, #3
 80039ba:	2301      	movs	r3, #1
 80039bc:	2111      	movs	r1, #17
 80039be:	4814      	ldr	r0, [pc, #80]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 80039c0:	f010 fdc0 	bl	8014544 <lsm6dsox_read_reg>
  if ((reg & 0xF0) == 0) {
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <lsm6dsox_read_data_drdy+0xd8>
      printf("Gyro is not enabled!\n");
 80039ce:	4817      	ldr	r0, [pc, #92]	@ (8003a2c <lsm6dsox_read_data_drdy+0x130>)
 80039d0:	f016 fa68 	bl	8019ea4 <puts>
  }

  /* Wait for a moment */
  platform_delay(3000);
 80039d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039d8:	f000 f952 	bl	8003c80 <platform_delay>

  /* Check status */
  lsm6dsox_status_reg_get(&dev_ctx, &status);
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	480b      	ldr	r0, [pc, #44]	@ (8003a10 <lsm6dsox_read_data_drdy+0x114>)
 80039e2:	f011 f9d0 	bl	8014d86 <lsm6dsox_status_reg_get>
  printf("Status: XL_DA: %d, GY_DA: %d\n", status.xlda, status.gda);
 80039e6:	793b      	ldrb	r3, [r7, #4]
 80039e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	793b      	ldrb	r3, [r7, #4]
 80039f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	480d      	ldr	r0, [pc, #52]	@ (8003a30 <lsm6dsox_read_data_drdy+0x134>)
 80039fc:	f016 f9ea 	bl	8019dd4 <iprintf>

  imu_rdy = 1;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <lsm6dsox_read_data_drdy+0x138>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	24004b34 	.word	0x24004b34
 8003a14:	080035e5 	.word	0x080035e5
 8003a18:	0800361f 	.word	0x0800361f
 8003a1c:	08003c81 	.word	0x08003c81
 8003a20:	2400050c 	.word	0x2400050c
 8003a24:	24004ad8 	.word	0x24004ad8
 8003a28:	24004ad9 	.word	0x24004ad9
 8003a2c:	0801e298 	.word	0x0801e298
 8003a30:	0801e2b0 	.word	0x0801e2b0
 8003a34:	240007e5 	.word	0x240007e5

08003a38 <lis3mdl_write>:
 *
 * Written by STMicroelectronics, from documentation here:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lis3mdl_STdC
 */
static int32_t lis3mdl_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	461a      	mov	r2, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	72fb      	strb	r3, [r7, #11]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LIS3MDL_I2C_ADD_L, reg,
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	893b      	ldrh	r3, [r7, #8]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2139      	movs	r1, #57	@ 0x39
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f009 fa66 	bl	800cf34 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <lis3mdl_read>:
 *
 * Written by STMicroelectronics, from documentation here:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lis3mdl_STdC
 */
static int32_t lis3mdl_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af04      	add	r7, sp, #16
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	460b      	mov	r3, r1
 8003a80:	72fb      	strb	r3, [r7, #11]
 8003a82:	4613      	mov	r3, r2
 8003a84:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LIS3MDL_I2C_ADD_L, reg,
 8003a86:	7afb      	ldrb	r3, [r7, #11]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2139      	movs	r1, #57	@ 0x39
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f009 fb5d 	bl	800d15c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0000      	movs	r0, r0
	...

08003ab0 <lis3mdl_read_data_drdy_handler>:
 *    - Positive X-axis of IMU points between the negative Y and positive Z axes of the iSBL array
 *    - Positive Y-axis of IMU points between the negative Y and negative Z axes of the iSBL array
 *    - Positive Z-axis of IMU points towards the positive X axis of the iSBL array
 */
void lis3mdl_read_data_drdy_handler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	ed2d 8b02 	vpush	{d8}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
//	char *exceeds_info;
//	lis3mdl_int_src_t source;
	/* Read output only if new value is available
	 * It's also possible to use interrupt pin for trigger
	 */
	lis3mdl_mag_data_ready_get(&dev_ctx_m, &reg);
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	4619      	mov	r1, r3
 8003abe:	4830      	ldr	r0, [pc, #192]	@ (8003b80 <lis3mdl_read_data_drdy_handler+0xd0>)
 8003ac0:	f010 fc3e 	bl	8014340 <lis3mdl_mag_data_ready_get>

	if (reg) {
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04f      	beq.n	8003b6a <lis3mdl_read_data_drdy_handler+0xba>
	    /* Read magnetic field data */
	    memset(data_raw_magnetic, 0x00, 3 * sizeof(int16_t));
 8003aca:	2206      	movs	r2, #6
 8003acc:	2100      	movs	r1, #0
 8003ace:	482d      	ldr	r0, [pc, #180]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003ad0:	f016 fb1c 	bl	801a10c <memset>
	    lis3mdl_magnetic_raw_get(&dev_ctx_m, data_raw_magnetic);
 8003ad4:	492b      	ldr	r1, [pc, #172]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003ad6:	482a      	ldr	r0, [pc, #168]	@ (8003b80 <lis3mdl_read_data_drdy_handler+0xd0>)
 8003ad8:	f010 fc4b 	bl	8014372 <lis3mdl_magnetic_raw_get>
	    magnetic_G[0] = lis3mdl_from_fs4_to_gauss(data_raw_magnetic[2]);              // Z-axis reading to X
 8003adc:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003ade:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f010 fb34 	bl	8014150 <lis3mdl_from_fs4_to_gauss>
 8003ae8:	eef0 7a40 	vmov.f32	s15, s0
 8003aec:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <lis3mdl_read_data_drdy_handler+0xd8>)
 8003aee:	edc3 7a00 	vstr	s15, [r3]
	    magnetic_G[1] = 0.7071 * (-lis3mdl_from_fs4_to_gauss(data_raw_magnetic[0]) +
 8003af2:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f010 fb29 	bl	8014150 <lis3mdl_from_fs4_to_gauss>
 8003afe:	eef0 7a40 	vmov.f32	s15, s0
 8003b02:	eeb1 8a67 	vneg.f32	s16, s15
	                              -lis3mdl_from_fs4_to_gauss(data_raw_magnetic[1]));  // Combination of X and Y to Y
 8003b06:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003b08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f010 fb1f 	bl	8014150 <lis3mdl_from_fs4_to_gauss>
 8003b12:	eef0 7a40 	vmov.f32	s15, s0
	    magnetic_G[1] = 0.7071 * (-lis3mdl_from_fs4_to_gauss(data_raw_magnetic[0]) +
 8003b16:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b1e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8003b78 <lis3mdl_read_data_drdy_handler+0xc8>
 8003b22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b2a:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <lis3mdl_read_data_drdy_handler+0xd8>)
 8003b2c:	edc3 7a01 	vstr	s15, [r3, #4]
	    magnetic_G[2] = 0.7071 * (lis3mdl_from_fs4_to_gauss(data_raw_magnetic[0]) -
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f010 fb0a 	bl	8014150 <lis3mdl_from_fs4_to_gauss>
 8003b3c:	eeb0 8a40 	vmov.f32	s16, s0
	                              lis3mdl_from_fs4_to_gauss(data_raw_magnetic[1]));   // Combination of X and Y to Z
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <lis3mdl_read_data_drdy_handler+0xd4>)
 8003b42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f010 fb02 	bl	8014150 <lis3mdl_from_fs4_to_gauss>
 8003b4c:	eef0 7a40 	vmov.f32	s15, s0
	    magnetic_G[2] = 0.7071 * (lis3mdl_from_fs4_to_gauss(data_raw_magnetic[0]) -
 8003b50:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003b54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b58:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8003b78 <lis3mdl_read_data_drdy_handler+0xc8>
 8003b5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <lis3mdl_read_data_drdy_handler+0xd8>)
 8003b66:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	ecbd 8b02 	vpop	{d8}
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2de00d1b 	.word	0x2de00d1b
 8003b7c:	3fe6a090 	.word	0x3fe6a090
 8003b80:	24004b44 	.word	0x24004b44
 8003b84:	24004aa8 	.word	0x24004aa8
 8003b88:	24004ac8 	.word	0x24004ac8

08003b8c <lis3mdl_read_data_drdy>:
 * @see https://github.com/STMicroelectronics/STMems_Standard_C_drivers/tree/master/lis3mdl_STdC
 *
 * Set data rate and sensitivity here.
 */
void lis3mdl_read_data_drdy(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
  lis3mdl_int_cfg_t int_ctrl;
  dev_ctx_m.write_reg = lis3mdl_write;
 8003b92:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003b94:	4a33      	ldr	r2, [pc, #204]	@ (8003c64 <lis3mdl_read_data_drdy+0xd8>)
 8003b96:	601a      	str	r2, [r3, #0]
  dev_ctx_m.read_reg = lis3mdl_read;
 8003b98:	4b31      	ldr	r3, [pc, #196]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003b9a:	4a33      	ldr	r2, [pc, #204]	@ (8003c68 <lis3mdl_read_data_drdy+0xdc>)
 8003b9c:	605a      	str	r2, [r3, #4]
  dev_ctx_m.mdelay = platform_delay;
 8003b9e:	4b30      	ldr	r3, [pc, #192]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003ba0:	4a32      	ldr	r2, [pc, #200]	@ (8003c6c <lis3mdl_read_data_drdy+0xe0>)
 8003ba2:	609a      	str	r2, [r3, #8]
  dev_ctx_m.handle = &SENSOR_BUS;
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003ba6:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <lis3mdl_read_data_drdy+0xe4>)
 8003ba8:	60da      	str	r2, [r3, #12]
  /* Wait sensor boot time */
  platform_delay(100);
 8003baa:	2064      	movs	r0, #100	@ 0x64
 8003bac:	f000 f868 	bl	8003c80 <platform_delay>
  /* Check device ID */
  lis3mdl_device_id_get(&dev_ctx_m, &whoamI);
 8003bb0:	4930      	ldr	r1, [pc, #192]	@ (8003c74 <lis3mdl_read_data_drdy+0xe8>)
 8003bb2:	482b      	ldr	r0, [pc, #172]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003bb4:	f010 fc25 	bl	8014402 <lis3mdl_device_id_get>

  if (whoamI != LIS3MDL_ID) {
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c74 <lis3mdl_read_data_drdy+0xe8>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b3d      	cmp	r3, #61	@ 0x3d
 8003bbe:	d001      	beq.n	8003bc4 <lis3mdl_read_data_drdy+0x38>
    while (1) {
      /* manage here device not found */
    	NVIC_SystemReset();
 8003bc0:	f7fc ff6a 	bl	8000a98 <__NVIC_SystemReset>
    }
  }

  /* Restore default configuration */
  lis3mdl_reset_set(&dev_ctx_m, PROPERTY_ENABLE);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4826      	ldr	r0, [pc, #152]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003bc8:	f010 fc2c 	bl	8014424 <lis3mdl_reset_set>

  do {
    lis3mdl_reset_get(&dev_ctx_m, &rst);
 8003bcc:	492a      	ldr	r1, [pc, #168]	@ (8003c78 <lis3mdl_read_data_drdy+0xec>)
 8003bce:	4824      	ldr	r0, [pc, #144]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003bd0:	f010 fc4e 	bl	8014470 <lis3mdl_reset_get>
  } while (rst);
 8003bd4:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <lis3mdl_read_data_drdy+0xec>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f7      	bne.n	8003bcc <lis3mdl_read_data_drdy+0x40>

  /* Enable Block Data Update */
  lis3mdl_block_data_update_set(&dev_ctx_m, PROPERTY_ENABLE);
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4820      	ldr	r0, [pc, #128]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003be0:	f010 fb88 	bl	80142f4 <lis3mdl_block_data_update_set>
  /* Set Output Data Rate */
  lis3mdl_data_rate_set(&dev_ctx_m, LIS3MDL_HP_80Hz);
 8003be4:	212e      	movs	r1, #46	@ 0x2e
 8003be6:	481e      	ldr	r0, [pc, #120]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003be8:	f010 facc 	bl	8014184 <lis3mdl_data_rate_set>
  /* Set full scale */
  lis3mdl_full_scale_set(&dev_ctx_m, LIS3MDL_4_GAUSS);
 8003bec:	2100      	movs	r1, #0
 8003bee:	481c      	ldr	r0, [pc, #112]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003bf0:	f010 fb34 	bl	801425c <lis3mdl_full_scale_set>
  /* Enable temperature sensor */
  lis3mdl_temperature_meas_set(&dev_ctx_m, PROPERTY_ENABLE);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	481a      	ldr	r0, [pc, #104]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003bf8:	f010 fb0a 	bl	8014210 <lis3mdl_temperature_meas_set>
  /* Set device in continuous mode */
  lis3mdl_operating_mode_set(&dev_ctx_m, LIS3MDL_CONTINUOUS_MODE);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4818      	ldr	r0, [pc, #96]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003c00:	f010 fb52 	bl	80142a8 <lis3mdl_operating_mode_set>
  /* Enable interrupt generation on interrupt */
  lis3mdl_int_generation_set(&dev_ctx_m, PROPERTY_ENABLE);
 8003c04:	2101      	movs	r1, #1
 8003c06:	4816      	ldr	r0, [pc, #88]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003c08:	f010 fc5b 	bl	80144c2 <lis3mdl_int_generation_set>
  /* Set interrupt threshold
   *
   * The sample code exploits a threshold and notify it by
   * hardware through the INT/DRDY pin
   */
  lis3mdl_int_threshold_set(&dev_ctx_m, mag_threshold);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <lis3mdl_read_data_drdy+0xf0>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	4813      	ldr	r0, [pc, #76]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003c14:	f010 fc7b 	bl	801450e <lis3mdl_int_threshold_set>
  int_ctrl.iea = PROPERTY_DISABLE;
 8003c18:	793b      	ldrb	r3, [r7, #4]
 8003c1a:	f36f 0382 	bfc	r3, #2, #1
 8003c1e:	713b      	strb	r3, [r7, #4]
  int_ctrl.ien = PROPERTY_DISABLE;
 8003c20:	793b      	ldrb	r3, [r7, #4]
 8003c22:	f36f 0300 	bfc	r3, #0, #1
 8003c26:	713b      	strb	r3, [r7, #4]
  int_ctrl.lir = PROPERTY_DISABLE;
 8003c28:	793b      	ldrb	r3, [r7, #4]
 8003c2a:	f36f 0341 	bfc	r3, #1, #1
 8003c2e:	713b      	strb	r3, [r7, #4]
  int_ctrl.zien = PROPERTY_DISABLE;
 8003c30:	793b      	ldrb	r3, [r7, #4]
 8003c32:	f36f 1345 	bfc	r3, #5, #1
 8003c36:	713b      	strb	r3, [r7, #4]
  int_ctrl.yien = PROPERTY_DISABLE;
 8003c38:	793b      	ldrb	r3, [r7, #4]
 8003c3a:	f36f 1386 	bfc	r3, #6, #1
 8003c3e:	713b      	strb	r3, [r7, #4]
  int_ctrl.xien = PROPERTY_DISABLE;
 8003c40:	793b      	ldrb	r3, [r7, #4]
 8003c42:	f36f 13c7 	bfc	r3, #7, #1
 8003c46:	713b      	strb	r3, [r7, #4]
  lis3mdl_int_config_set(&dev_ctx_m, &int_ctrl);
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4804      	ldr	r0, [pc, #16]	@ (8003c60 <lis3mdl_read_data_drdy+0xd4>)
 8003c4e:	f010 fc28 	bl	80144a2 <lis3mdl_int_config_set>
  HAL_Delay(1);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f003 fbf0 	bl	8007438 <HAL_Delay>
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	24004b44 	.word	0x24004b44
 8003c64:	08003a39 	.word	0x08003a39
 8003c68:	08003a73 	.word	0x08003a73
 8003c6c:	08003c81 	.word	0x08003c81
 8003c70:	2400050c 	.word	0x2400050c
 8003c74:	24004ad8 	.word	0x24004ad8
 8003c78:	24004ad9 	.word	0x24004ad9
 8003c7c:	24000008 	.word	0x24000008

08003c80 <platform_delay>:
/**
 * @brief Delay function for this platform (STM32)
 * @param ms Time delay in ms
 */
static void platform_delay(uint32_t ms)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f003 fbd5 	bl	8007438 <HAL_Delay>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <gyro_calibration>:
/**
 * @brief Calibrates the gyroscope (system must be stationary when called!)
 * @param g_cal X, Y, and Z calibration constants for gyroscope (will be filled when program is run)
 * @param num_item Number of readings to take (and average over)
 */
void gyro_calibration(float g_cal[3], int num_iter){
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < num_iter; i++){
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e02f      	b.n	8003d08 <gyro_calibration+0x70>
		while (!data_rdy);
 8003ca8:	bf00      	nop
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <gyro_calibration+0xe0>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0fb      	beq.n	8003caa <gyro_calibration+0x12>
		g_cal[0] -= angular_rate_dps[0];
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	ed93 7a00 	vldr	s14, [r3]
 8003cb8:	4b30      	ldr	r3, [pc, #192]	@ (8003d7c <gyro_calibration+0xe4>)
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	edc3 7a00 	vstr	s15, [r3]
		g_cal[1] -= angular_rate_dps[1];
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	ed93 7a00 	vldr	s14, [r3]
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <gyro_calibration+0xe4>)
 8003cd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	edc3 7a00 	vstr	s15, [r3]
		g_cal[2] -= angular_rate_dps[2];
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	ed93 7a00 	vldr	s14, [r3]
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <gyro_calibration+0xe4>)
 8003cec:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf8:	edc3 7a00 	vstr	s15, [r3]
		data_rdy = 0;
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d78 <gyro_calibration+0xe0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < num_iter; i++){
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dbcb      	blt.n	8003ca8 <gyro_calibration+0x10>
	}
	g_cal[0] /= (float)num_iter;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	edd3 6a00 	vldr	s13, [r3]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	edc3 7a00 	vstr	s15, [r3]
	g_cal[1] /= (float)num_iter;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	edd3 6a00 	vldr	s13, [r3]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d44:	edc3 7a00 	vstr	s15, [r3]
	g_cal[2] /= (float)num_iter;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	edd3 6a00 	vldr	s13, [r3]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d62:	edc3 7a00 	vstr	s15, [r3]
	imu_calibrated = 1;
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <gyro_calibration+0xe8>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	240007e6 	.word	0x240007e6
 8003d7c:	24004abc 	.word	0x24004abc
 8003d80:	240007e7 	.word	0x240007e7

08003d84 <init_imu>:
 *
 * This function runs the initialization routines for the LIS3MDL magnetometer and LSM6DSOX accelerometer and
 * gyroscope. Then, it runs the gyroscope calibration routine over 256 readings to remove gyroscope biases
 * from future readings.
 */
void init_imu(void){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  lis3mdl_read_data_drdy();
 8003d88:	f7ff ff00 	bl	8003b8c <lis3mdl_read_data_drdy>
  lsm6dsox_read_data_drdy();
 8003d8c:	f7ff fdb6 	bl	80038fc <lsm6dsox_read_data_drdy>
  lis3mdl_read_data_drdy_handler();
 8003d90:	f7ff fe8e 	bl	8003ab0 <lis3mdl_read_data_drdy_handler>
  lsm6dsox_read_data_drdy_handler();
 8003d94:	f7ff fc60 	bl	8003658 <lsm6dsox_read_data_drdy_handler>
  gyro_calibration(g_cal, 256);
 8003d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d9c:	4802      	ldr	r0, [pc, #8]	@ (8003da8 <init_imu+0x24>)
 8003d9e:	f7ff ff7b 	bl	8003c98 <gyro_calibration>
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24004adc 	.word	0x24004adc
 8003dac:	00000000 	.word	0x00000000

08003db0 <update_filter>:
 *
 * See my thesis text and the original Madgwick paper for the theory implemented into this function.
 *
 * @see https://x-io.co.uk/open-source-imu-and-ahrs-algorithms/
 */
void update_filter(void){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b0c4      	sub	sp, #272	@ 0x110
 8003db4:	af00      	add	r7, sp, #0
	// calculate the time taken since the last update
	timestamp = __HAL_TIM_GET_COUNTER(&htim13);
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <update_filter+0x2c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <update_filter+0x30>)
 8003dbe:	6013      	str	r3, [r2, #0]
	uint32_t diff_ticks;
	if (timestamp >= previousTimestamp) {
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <update_filter+0x30>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <update_filter+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d30d      	bcc.n	8003de8 <update_filter+0x38>
			diff_ticks = timestamp - previousTimestamp;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <update_filter+0x30>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <update_filter+0x34>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003dda:	e00e      	b.n	8003dfa <update_filter+0x4a>
 8003ddc:	240005ac 	.word	0x240005ac
 8003de0:	240007fc 	.word	0x240007fc
 8003de4:	24000800 	.word	0x24000800
	} else {
			diff_ticks = (65536 - previousTimestamp) + timestamp;
 8003de8:	4be1      	ldr	r3, [pc, #900]	@ (8004170 <update_filter+0x3c0>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4be1      	ldr	r3, [pc, #900]	@ (8004174 <update_filter+0x3c4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003df6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	}
	deltat = (float)diff_ticks * 4096.0f / 275000.0f;
 8003dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8004178 <update_filter+0x3c8>
 8003e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e0e:	eddf 6adb 	vldr	s13, [pc, #876]	@ 800417c <update_filter+0x3cc>
 8003e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e16:	4bda      	ldr	r3, [pc, #872]	@ (8004180 <update_filter+0x3d0>)
 8003e18:	edc3 7a00 	vstr	s15, [r3]
	previousTimestamp = __HAL_TIM_GET_COUNTER(&htim13);
 8003e1c:	4bd9      	ldr	r3, [pc, #868]	@ (8004184 <update_filter+0x3d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	4ad4      	ldr	r2, [pc, #848]	@ (8004174 <update_filter+0x3c4>)
 8003e24:	6013      	str	r3, [r2, #0]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// get raw data
	float ax = acceleration_g[0];
 8003e26:	4bd8      	ldr	r3, [pc, #864]	@ (8004188 <update_filter+0x3d8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	float ay = acceleration_g[1];
 8003e2e:	4bd6      	ldr	r3, [pc, #856]	@ (8004188 <update_filter+0x3d8>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	float az = acceleration_g[2];
 8003e36:	4bd4      	ldr	r3, [pc, #848]	@ (8004188 <update_filter+0x3d8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	float gx = angular_rate_dps[0] * 3.14159 / 180.0;
 8003e3e:	4bd3      	ldr	r3, [pc, #844]	@ (800418c <update_filter+0x3dc>)
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e48:	ed9f 6bc5 	vldr	d6, [pc, #788]	@ 8004160 <update_filter+0x3b0>
 8003e4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e50:	ed9f 5bc5 	vldr	d5, [pc, #788]	@ 8004168 <update_filter+0x3b8>
 8003e54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e5c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	float gy = angular_rate_dps[1] * 3.14159 / 180.0;
 8003e60:	4bca      	ldr	r3, [pc, #808]	@ (800418c <update_filter+0x3dc>)
 8003e62:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e6a:	ed9f 6bbd 	vldr	d6, [pc, #756]	@ 8004160 <update_filter+0x3b0>
 8003e6e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e72:	ed9f 5bbd 	vldr	d5, [pc, #756]	@ 8004168 <update_filter+0x3b8>
 8003e76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e7e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
	float gz = angular_rate_dps[2] * 3.14159 / 180.0;
 8003e82:	4bc2      	ldr	r3, [pc, #776]	@ (800418c <update_filter+0x3dc>)
 8003e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e8c:	ed9f 6bb4 	vldr	d6, [pc, #720]	@ 8004160 <update_filter+0x3b0>
 8003e90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003e94:	ed9f 5bb4 	vldr	d5, [pc, #720]	@ 8004168 <update_filter+0x3b8>
 8003e98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ea0:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
	float mx = magnetic_G[0];
 8003ea4:	4bba      	ldr	r3, [pc, #744]	@ (8004190 <update_filter+0x3e0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	float my = magnetic_G[1];
 8003eac:	4bb8      	ldr	r3, [pc, #736]	@ (8004190 <update_filter+0x3e0>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	float mz = magnetic_G[2];
 8003eb4:	4bb6      	ldr	r3, [pc, #728]	@ (8004190 <update_filter+0x3e0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

  // rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003ebc:	4bb5      	ldr	r3, [pc, #724]	@ (8004194 <update_filter+0x3e4>)
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	eeb1 7a67 	vneg.f32	s14, s15
 8003ec6:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ece:	4bb2      	ldr	r3, [pc, #712]	@ (8004198 <update_filter+0x3e8>)
 8003ed0:	edd3 6a00 	vldr	s13, [r3]
 8003ed4:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8003ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee0:	4bae      	ldr	r3, [pc, #696]	@ (800419c <update_filter+0x3ec>)
 8003ee2:	edd3 6a00 	vldr	s13, [r3]
 8003ee6:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efa:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003efe:	4ba8      	ldr	r3, [pc, #672]	@ (80041a0 <update_filter+0x3f0>)
 8003f00:	ed93 7a00 	vldr	s14, [r3]
 8003f04:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0c:	4ba2      	ldr	r3, [pc, #648]	@ (8004198 <update_filter+0x3e8>)
 8003f0e:	edd3 6a00 	vldr	s13, [r3]
 8003f12:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f1e:	4b9f      	ldr	r3, [pc, #636]	@ (800419c <update_filter+0x3ec>)
 8003f20:	edd3 6a00 	vldr	s13, [r3]
 8003f24:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8003f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f38:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003f3c:	4b98      	ldr	r3, [pc, #608]	@ (80041a0 <update_filter+0x3f0>)
 8003f3e:	ed93 7a00 	vldr	s14, [r3]
 8003f42:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8003f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4a:	4b92      	ldr	r3, [pc, #584]	@ (8004194 <update_filter+0x3e4>)
 8003f4c:	edd3 6a00 	vldr	s13, [r3]
 8003f50:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <update_filter+0x3ec>)
 8003f5e:	edd3 6a00 	vldr	s13, [r3]
 8003f62:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f76:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003f7a:	4b89      	ldr	r3, [pc, #548]	@ (80041a0 <update_filter+0x3f0>)
 8003f7c:	ed93 7a00 	vldr	s14, [r3]
 8003f80:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8003f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f88:	4b82      	ldr	r3, [pc, #520]	@ (8004194 <update_filter+0x3e4>)
 8003f8a:	edd3 6a00 	vldr	s13, [r3]
 8003f8e:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8003f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004198 <update_filter+0x3e8>)
 8003f9c:	edd3 6a00 	vldr	s13, [r3]
 8003fa0:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8003fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb4:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8

	// normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003fb8:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8003fbc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003fc0:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8003fc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fcc:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8003fd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	f001 fd6a 	bl	8005ab4 <invSqrt>
 8003fe0:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	ax *= recipNorm;
 8003fe4:	ed97 7a42 	vldr	s14, [r7, #264]	@ 0x108
 8003fe8:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8003fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff0:	edc7 7a42 	vstr	s15, [r7, #264]	@ 0x108
	ay *= recipNorm;
 8003ff4:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003ff8:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8003ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004000:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	az *= recipNorm;
 8004004:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8004008:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 800400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004010:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100

	// normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8004014:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004018:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800401c:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8004020:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004028:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 800402c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004034:	eeb0 0a67 	vmov.f32	s0, s15
 8004038:	f001 fd3c 	bl	8005ab4 <invSqrt>
 800403c:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	mx *= recipNorm;
 8004040:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8004044:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
	my *= recipNorm;
 8004050:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 8004054:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
	mz *= recipNorm;
 8004060:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 8004064:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406c:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8

	// auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 8004070:	4b4b      	ldr	r3, [pc, #300]	@ (80041a0 <update_filter+0x3f0>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800407a:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
	_2q0my = 2.0f * q0 * my;
 8004086:	4b46      	ldr	r3, [pc, #280]	@ (80041a0 <update_filter+0x3f0>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004090:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
	_2q0mz = 2.0f * q0 * mz;
 800409c:	4b40      	ldr	r3, [pc, #256]	@ (80041a0 <update_filter+0x3f0>)
 800409e:	edd3 7a00 	vldr	s15, [r3]
 80040a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040a6:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
	_2q1mx = 2.0f * q1 * mx;
 80040b2:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <update_filter+0x3e4>)
 80040b4:	edd3 7a00 	vldr	s15, [r3]
 80040b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040bc:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	_2q0 = 2.0f * q0;
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <update_filter+0x3f0>)
 80040ca:	edd3 7a00 	vldr	s15, [r3]
 80040ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040d2:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	_2q1 = 2.0f * q1;
 80040d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004194 <update_filter+0x3e4>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040e0:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
	_2q2 = 2.0f * q2;
 80040e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004198 <update_filter+0x3e8>)
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040ee:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
	_2q3 = 2.0f * q3;
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <update_filter+0x3ec>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040fc:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	_2q0q2 = 2.0f * q0 * q2;
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <update_filter+0x3f0>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800410a:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <update_filter+0x3e8>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004114:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	_2q2q3 = 2.0f * q2 * q3;
 8004118:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <update_filter+0x3e8>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004122:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <update_filter+0x3ec>)
 8004124:	edd3 7a00 	vldr	s15, [r3]
 8004128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	q0q0 = q0 * q0;
 8004130:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <update_filter+0x3f0>)
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <update_filter+0x3f0>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004140:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	q0q1 = q0 * q1;
 8004144:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <update_filter+0x3f0>)
 8004146:	ed93 7a00 	vldr	s14, [r3]
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <update_filter+0x3e4>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004154:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	q0q2 = q0 * q2;
 8004158:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <update_filter+0x3f0>)
 800415a:	ed93 7a00 	vldr	s14, [r3]
 800415e:	e021      	b.n	80041a4 <update_filter+0x3f4>
 8004160:	f01b866e 	.word	0xf01b866e
 8004164:	400921f9 	.word	0x400921f9
 8004168:	00000000 	.word	0x00000000
 800416c:	40668000 	.word	0x40668000
 8004170:	240007fc 	.word	0x240007fc
 8004174:	24000800 	.word	0x24000800
 8004178:	45800000 	.word	0x45800000
 800417c:	48864700 	.word	0x48864700
 8004180:	24000804 	.word	0x24000804
 8004184:	240005ac 	.word	0x240005ac
 8004188:	24004ab0 	.word	0x24004ab0
 800418c:	24004abc 	.word	0x24004abc
 8004190:	24004ac8 	.word	0x24004ac8
 8004194:	24004b20 	.word	0x24004b20
 8004198:	24004b24 	.word	0x24004b24
 800419c:	24004b28 	.word	0x24004b28
 80041a0:	24000010 	.word	0x24000010
 80041a4:	4bed      	ldr	r3, [pc, #948]	@ (800455c <update_filter+0x7ac>)
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ae:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	q0q3 = q0 * q3;
 80041b2:	4beb      	ldr	r3, [pc, #940]	@ (8004560 <update_filter+0x7b0>)
 80041b4:	ed93 7a00 	vldr	s14, [r3]
 80041b8:	4bea      	ldr	r3, [pc, #936]	@ (8004564 <update_filter+0x7b4>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	q1q1 = q1 * q1;
 80041c6:	4be8      	ldr	r3, [pc, #928]	@ (8004568 <update_filter+0x7b8>)
 80041c8:	ed93 7a00 	vldr	s14, [r3]
 80041cc:	4be6      	ldr	r3, [pc, #920]	@ (8004568 <update_filter+0x7b8>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	q1q2 = q1 * q2;
 80041da:	4be3      	ldr	r3, [pc, #908]	@ (8004568 <update_filter+0x7b8>)
 80041dc:	ed93 7a00 	vldr	s14, [r3]
 80041e0:	4bde      	ldr	r3, [pc, #888]	@ (800455c <update_filter+0x7ac>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	q1q3 = q1 * q3;
 80041ee:	4bde      	ldr	r3, [pc, #888]	@ (8004568 <update_filter+0x7b8>)
 80041f0:	ed93 7a00 	vldr	s14, [r3]
 80041f4:	4bdb      	ldr	r3, [pc, #876]	@ (8004564 <update_filter+0x7b4>)
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	q2q2 = q2 * q2;
 8004202:	4bd6      	ldr	r3, [pc, #856]	@ (800455c <update_filter+0x7ac>)
 8004204:	ed93 7a00 	vldr	s14, [r3]
 8004208:	4bd4      	ldr	r3, [pc, #848]	@ (800455c <update_filter+0x7ac>)
 800420a:	edd3 7a00 	vldr	s15, [r3]
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	q2q3 = q2 * q3;
 8004216:	4bd1      	ldr	r3, [pc, #836]	@ (800455c <update_filter+0x7ac>)
 8004218:	ed93 7a00 	vldr	s14, [r3]
 800421c:	4bd1      	ldr	r3, [pc, #836]	@ (8004564 <update_filter+0x7b4>)
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	q3q3 = q3 * q3;
 800422a:	4bce      	ldr	r3, [pc, #824]	@ (8004564 <update_filter+0x7b4>)
 800422c:	ed93 7a00 	vldr	s14, [r3]
 8004230:	4bcc      	ldr	r3, [pc, #816]	@ (8004564 <update_filter+0x7b4>)
 8004232:	edd3 7a00 	vldr	s15, [r3]
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84

	// reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800423e:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8004242:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800424a:	4bc6      	ldr	r3, [pc, #792]	@ (8004564 <update_filter+0x7b4>)
 800424c:	edd3 6a00 	vldr	s13, [r3]
 8004250:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8004254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800425c:	4bbf      	ldr	r3, [pc, #764]	@ (800455c <update_filter+0x7ac>)
 800425e:	edd3 6a00 	vldr	s13, [r3]
 8004262:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8004266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800426a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800426e:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8004272:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800427a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800427e:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8004282:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8004286:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800428a:	4bb4      	ldr	r3, [pc, #720]	@ (800455c <update_filter+0x7ac>)
 800428c:	edd3 7a00 	vldr	s15, [r3]
 8004290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004298:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 800429c:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80042a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042a4:	4baf      	ldr	r3, [pc, #700]	@ (8004564 <update_filter+0x7b4>)
 80042a6:	edd3 7a00 	vldr	s15, [r3]
 80042aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042b2:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 80042b6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80042ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042c2:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 80042c6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80042ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80042d6:	4ba3      	ldr	r3, [pc, #652]	@ (8004564 <update_filter+0x7b4>)
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80042e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042e4:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 80042e8:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80042ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004568 <update_filter+0x7b8>)
 80042f6:	edd3 6a00 	vldr	s13, [r3]
 80042fa:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 80042fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004306:	4b95      	ldr	r3, [pc, #596]	@ (800455c <update_filter+0x7ac>)
 8004308:	edd3 6a00 	vldr	s13, [r3]
 800430c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8004310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004318:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 800431c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004328:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 800432c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004338:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 800433c:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8004340:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004344:	4b87      	ldr	r3, [pc, #540]	@ (8004564 <update_filter+0x7b4>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800434e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004352:	edd7 6a3b 	vldr	s13, [r7, #236]	@ 0xec
 8004356:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800435a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800435e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004362:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	_2bx = sqrt(hx * hx + hy * hy);
 8004366:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800436a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800436e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8004372:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800437e:	eeb0 0b47 	vmov.f64	d0, d7
 8004382:	f018 fa79 	bl	801c878 <sqrt>
 8004386:	eeb0 7b40 	vmov.f64	d7, d0
 800438a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800438e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8004392:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8004396:	eeb1 7a67 	vneg.f32	s14, s15
 800439a:	4b70      	ldr	r3, [pc, #448]	@ (800455c <update_filter+0x7ac>)
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a4:	4b70      	ldr	r3, [pc, #448]	@ (8004568 <update_filter+0x7b8>)
 80043a6:	edd3 6a00 	vldr	s13, [r3]
 80043aa:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 80043ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b6:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 80043ba:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80043be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c6:	4b67      	ldr	r3, [pc, #412]	@ (8004564 <update_filter+0x7b4>)
 80043c8:	edd3 6a00 	vldr	s13, [r3]
 80043cc:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80043d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043d8:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 80043dc:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80043e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043e8:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 80043ec:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80043f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004564 <update_filter+0x7b4>)
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004402:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 8004406:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800440a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800440e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004412:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
 8004416:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800441a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800441e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004422:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	_4bx = 2.0f * _2bx;
 8004426:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800442a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800442e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	_4bz = 2.0f * _2bz;
 8004432:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800443a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	// gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800443e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004442:	eeb1 7a67 	vneg.f32	s14, s15
 8004446:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800444a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800444e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004452:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004456:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 800445a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800445e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004462:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004466:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800446a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800446e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004472:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8004476:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800447a:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800447e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004486:	4b35      	ldr	r3, [pc, #212]	@ (800455c <update_filter+0x7ac>)
 8004488:	edd3 6a00 	vldr	s13, [r3]
 800448c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004490:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004494:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004498:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800449c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80044a0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80044a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80044a8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80044ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80044b0:	edd7 5a24 	vldr	s11, [r7, #144]	@ 0x90
 80044b4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80044b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80044bc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80044c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80044c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80044c8:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 80044cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80044d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80044dc:	eef1 6a67 	vneg.f32	s13, s15
 80044e0:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <update_filter+0x7b4>)
 80044e2:	edd3 7a00 	vldr	s15, [r3]
 80044e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <update_filter+0x7b8>)
 80044ec:	ed93 6a00 	vldr	s12, [r3]
 80044f0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80044f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80044f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044fc:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8004500:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004504:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004508:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800450c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004510:	edd7 5a29 	vldr	s11, [r7, #164]	@ 0xa4
 8004514:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004518:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800451c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004520:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004524:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004528:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800452c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004538:	4b08      	ldr	r3, [pc, #32]	@ (800455c <update_filter+0x7ac>)
 800453a:	edd3 6a00 	vldr	s13, [r3]
 800453e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004542:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004546:	ed97 6a28 	vldr	s12, [r7, #160]	@ 0xa0
 800454a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800454e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004552:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004556:	ee26 6a27 	vmul.f32	s12, s12, s15
 800455a:	e007      	b.n	800456c <update_filter+0x7bc>
 800455c:	24004b24 	.word	0x24004b24
 8004560:	24000010 	.word	0x24000010
 8004564:	24004b28 	.word	0x24004b28
 8004568:	24004b20 	.word	0x24004b20
 800456c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004570:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004574:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004578:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800457c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004580:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004584:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004588:	ee36 6a27 	vadd.f32	s12, s12, s15
 800458c:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8004590:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045a0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80045a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80045a8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80045ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045b0:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 80045b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045b8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80045c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80045c8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80045cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80045d0:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80045d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80045d8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80045dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045e4:	4bf4      	ldr	r3, [pc, #976]	@ (80049b8 <update_filter+0xc08>)
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80045ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80045f2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80045f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80045fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004602:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004606:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800460a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800460e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8004612:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461e:	4be7      	ldr	r3, [pc, #924]	@ (80049bc <update_filter+0xc0c>)
 8004620:	edd3 6a00 	vldr	s13, [r3]
 8004624:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800462c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004630:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004634:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004638:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800463c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004640:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004644:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004648:	edd7 5a24 	vldr	s11, [r7, #144]	@ 0x90
 800464c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8004650:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004654:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004658:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800465c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004660:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004664:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800466c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004670:	4bd3      	ldr	r3, [pc, #844]	@ (80049c0 <update_filter+0xc10>)
 8004672:	edd3 6a00 	vldr	s13, [r3]
 8004676:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800467a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800467e:	4bd1      	ldr	r3, [pc, #836]	@ (80049c4 <update_filter+0xc14>)
 8004680:	ed93 6a00 	vldr	s12, [r3]
 8004684:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004688:	ee66 7a27 	vmul.f32	s15, s12, s15
 800468c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004690:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8004694:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004698:	ee36 6a67 	vsub.f32	s12, s12, s15
 800469c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80046a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80046a4:	edd7 5a29 	vldr	s11, [r7, #164]	@ 0xa4
 80046a8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80046ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80046b0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80046b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80046b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80046bc:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80046c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80046c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046cc:	4bbb      	ldr	r3, [pc, #748]	@ (80049bc <update_filter+0xc0c>)
 80046ce:	edd3 6a00 	vldr	s13, [r3]
 80046d2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80046d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046da:	4bb7      	ldr	r3, [pc, #732]	@ (80049b8 <update_filter+0xc08>)
 80046dc:	ed93 6a00 	vldr	s12, [r3]
 80046e0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80046e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80046e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80046ec:	ed97 6a28 	vldr	s12, [r7, #160]	@ 0xa0
 80046f0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80046f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80046f8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80046fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004700:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004704:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004708:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800470c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004710:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004714:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004718:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800471c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004720:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8004724:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004730:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004734:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8004738:	eeb1 7a67 	vneg.f32	s14, s15
 800473c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004740:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004744:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004748:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800474c:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 8004750:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004754:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004758:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800475c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004760:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004764:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004768:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 800476c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004770:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8004774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800477c:	4b90      	ldr	r3, [pc, #576]	@ (80049c0 <update_filter+0xc10>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004786:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800478a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800478e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004792:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004796:	ee36 6a67 	vsub.f32	s12, s12, s15
 800479a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800479e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047a6:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80047aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80047ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80047ba:	eef1 6a67 	vneg.f32	s13, s15
 80047be:	4b80      	ldr	r3, [pc, #512]	@ (80049c0 <update_filter+0xc10>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047c8:	4b7e      	ldr	r3, [pc, #504]	@ (80049c4 <update_filter+0xc14>)
 80047ca:	ed93 6a00 	vldr	s12, [r3]
 80047ce:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80047d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80047d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047da:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80047de:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80047e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80047ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047ee:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80047f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80047f6:	edd7 5a24 	vldr	s11, [r7, #144]	@ 0x90
 80047fa:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80047fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004802:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004806:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800480a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800480e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004812:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800481a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800481e:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <update_filter+0xc08>)
 8004820:	edd3 6a00 	vldr	s13, [r3]
 8004824:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800482c:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <update_filter+0xc0c>)
 800482e:	ed93 6a00 	vldr	s12, [r3]
 8004832:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004836:	ee66 7a27 	vmul.f32	s15, s12, s15
 800483a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800483e:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8004842:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004846:	ee36 6a67 	vsub.f32	s12, s12, s15
 800484a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800484e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004852:	edd7 5a29 	vldr	s11, [r7, #164]	@ 0xa4
 8004856:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800485a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800485e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004862:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004866:	ee36 6a27 	vadd.f32	s12, s12, s15
 800486a:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800486e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800487a:	4b52      	ldr	r3, [pc, #328]	@ (80049c4 <update_filter+0xc14>)
 800487c:	edd3 6a00 	vldr	s13, [r3]
 8004880:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004888:	4b4d      	ldr	r3, [pc, #308]	@ (80049c0 <update_filter+0xc10>)
 800488a:	ed93 6a00 	vldr	s12, [r3]
 800488e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8004892:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004896:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800489a:	ed97 6a28 	vldr	s12, [r7, #160]	@ 0xa0
 800489e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80048a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80048a6:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80048aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80048ae:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80048b2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80048b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80048ba:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80048be:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80048c2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80048c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80048ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80048ce:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80048d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80048d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048de:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80048e2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80048e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80048ea:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80048ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048f2:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 80048f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048fa:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80048fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004902:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8004906:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800490a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800490e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004912:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8004916:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800491a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800491e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004926:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800492a:	eef1 6a67 	vneg.f32	s13, s15
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <update_filter+0xc0c>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004938:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <update_filter+0xc08>)
 800493a:	ed93 6a00 	vldr	s12, [r3]
 800493e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004942:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004946:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800494a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800494e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004952:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004956:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800495a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800495e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004962:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004966:	edd7 5a24 	vldr	s11, [r7, #144]	@ 0x90
 800496a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800496e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004972:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004976:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800497a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800497e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004982:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800498a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800498e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004992:	eef1 6a67 	vneg.f32	s13, s15
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <update_filter+0xc14>)
 8004998:	edd3 7a00 	vldr	s15, [r3]
 800499c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049a0:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <update_filter+0xc10>)
 80049a2:	ed93 6a00 	vldr	s12, [r3]
 80049a6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80049aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80049ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80049b2:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 80049b6:	e007      	b.n	80049c8 <update_filter+0xc18>
 80049b8:	24004b20 	.word	0x24004b20
 80049bc:	24004b28 	.word	0x24004b28
 80049c0:	24004b24 	.word	0x24004b24
 80049c4:	24000010 	.word	0x24000010
 80049c8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80049cc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80049d0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80049d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80049d8:	edd7 5a29 	vldr	s11, [r7, #164]	@ 0xa4
 80049dc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80049e0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80049e4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80049e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80049ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049f0:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80049f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80049f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a00:	4be1      	ldr	r3, [pc, #900]	@ (8004d88 <update_filter+0xfd8>)
 8004a02:	edd3 6a00 	vldr	s13, [r3]
 8004a06:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004a0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a0e:	ed97 6a28 	vldr	s12, [r7, #160]	@ 0xa0
 8004a12:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004a16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a1a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8004a1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004a22:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004a26:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004a2a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004a2e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004a32:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004a36:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8004a3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004a3e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a42:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8004a46:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a52:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8004a56:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8004a5a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a5e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004a62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a6a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004a6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a76:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8004a7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	f001 f815 	bl	8005ab4 <invSqrt>
 8004a8a:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4

	// normalise step magnitude
	s0 *= recipNorm;
 8004a8e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8004a92:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	s1 *= recipNorm;
 8004a9e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8004aa2:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	s2 *= recipNorm;
 8004aae:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004ab2:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	s3 *= recipNorm;
 8004abe:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8004ac2:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

	// apply feedback step
	qDot1 -= beta * s0;
 8004ace:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8004ad2:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8004d8c <update_filter+0xfdc>
 8004ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ada:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8004ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae2:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	qDot2 -= beta * s1;
 8004ae6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004aea:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8004d8c <update_filter+0xfdc>
 8004aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afa:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
	qDot3 -= beta * s2;
 8004afe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004b02:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004d8c <update_filter+0xfdc>
 8004b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b0a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b12:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
	qDot4 -= beta * s3;
 8004b16:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8004b1a:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8004d8c <update_filter+0xfdc>
 8004b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b22:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8004b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2a:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8

	// integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * deltat / 1000;
 8004b2e:	4b98      	ldr	r3, [pc, #608]	@ (8004d90 <update_filter+0xfe0>)
 8004b30:	ed93 7a00 	vldr	s14, [r3]
 8004b34:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8004b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8004d94 <update_filter+0xfe4>
 8004b40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b44:	4b94      	ldr	r3, [pc, #592]	@ (8004d98 <update_filter+0xfe8>)
 8004b46:	edd3 7a00 	vldr	s15, [r3]
 8004b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4e:	4b92      	ldr	r3, [pc, #584]	@ (8004d98 <update_filter+0xfe8>)
 8004b50:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * deltat / 1000;
 8004b54:	4b8e      	ldr	r3, [pc, #568]	@ (8004d90 <update_filter+0xfe0>)
 8004b56:	ed93 7a00 	vldr	s14, [r3]
 8004b5a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004d94 <update_filter+0xfe4>
 8004b66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b6a:	4b87      	ldr	r3, [pc, #540]	@ (8004d88 <update_filter+0xfd8>)
 8004b6c:	edd3 7a00 	vldr	s15, [r3]
 8004b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b74:	4b84      	ldr	r3, [pc, #528]	@ (8004d88 <update_filter+0xfd8>)
 8004b76:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * deltat / 1000;
 8004b7a:	4b85      	ldr	r3, [pc, #532]	@ (8004d90 <update_filter+0xfe0>)
 8004b7c:	ed93 7a00 	vldr	s14, [r3]
 8004b80:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8004d94 <update_filter+0xfe4>
 8004b8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b90:	4b82      	ldr	r3, [pc, #520]	@ (8004d9c <update_filter+0xfec>)
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9a:	4b80      	ldr	r3, [pc, #512]	@ (8004d9c <update_filter+0xfec>)
 8004b9c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * deltat / 1000;
 8004ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8004d90 <update_filter+0xfe0>)
 8004ba2:	ed93 7a00 	vldr	s14, [r3]
 8004ba6:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8004d94 <update_filter+0xfe4>
 8004bb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8004da0 <update_filter+0xff0>)
 8004bb8:	edd3 7a00 	vldr	s15, [r3]
 8004bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc0:	4b77      	ldr	r3, [pc, #476]	@ (8004da0 <update_filter+0xff0>)
 8004bc2:	edc3 7a00 	vstr	s15, [r3]

	// normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004bc6:	4b74      	ldr	r3, [pc, #464]	@ (8004d98 <update_filter+0xfe8>)
 8004bc8:	ed93 7a00 	vldr	s14, [r3]
 8004bcc:	4b72      	ldr	r3, [pc, #456]	@ (8004d98 <update_filter+0xfe8>)
 8004bce:	edd3 7a00 	vldr	s15, [r3]
 8004bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8004d88 <update_filter+0xfd8>)
 8004bd8:	edd3 6a00 	vldr	s13, [r3]
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <update_filter+0xfd8>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bea:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <update_filter+0xfec>)
 8004bec:	edd3 6a00 	vldr	s13, [r3]
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <update_filter+0xfec>)
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bfe:	4b68      	ldr	r3, [pc, #416]	@ (8004da0 <update_filter+0xff0>)
 8004c00:	edd3 6a00 	vldr	s13, [r3]
 8004c04:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <update_filter+0xff0>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	f000 ff4d 	bl	8005ab4 <invSqrt>
 8004c1a:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
	q0 *= recipNorm;
 8004c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004d98 <update_filter+0xfe8>)
 8004c20:	ed93 7a00 	vldr	s14, [r3]
 8004c24:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8004d98 <update_filter+0xfe8>)
 8004c2e:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8004c32:	4b55      	ldr	r3, [pc, #340]	@ (8004d88 <update_filter+0xfd8>)
 8004c34:	ed93 7a00 	vldr	s14, [r3]
 8004c38:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c40:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <update_filter+0xfd8>)
 8004c42:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8004c46:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <update_filter+0xfec>)
 8004c48:	ed93 7a00 	vldr	s14, [r3]
 8004c4c:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c54:	4b51      	ldr	r3, [pc, #324]	@ (8004d9c <update_filter+0xfec>)
 8004c56:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8004c5a:	4b51      	ldr	r3, [pc, #324]	@ (8004da0 <update_filter+0xff0>)
 8004c5c:	ed93 7a00 	vldr	s14, [r3]
 8004c60:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c68:	4b4d      	ldr	r3, [pc, #308]	@ (8004da0 <update_filter+0xff0>)
 8004c6a:	edc3 7a00 	vstr	s15, [r3]

	// if the filter has converged, run the dead-reckoning procedure
	if (imu_i >= 0) {
 8004c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004da4 <update_filter+0xff4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f2c0 82dc 	blt.w	8005230 <update_filter+0x1480>
	  // find the magnitude of the acceleration readings and subtract the gravity vector
		float acc_mag_abs = fabsf(sqrtf(acceleration_g[0]*acceleration_g[0] + acceleration_g[1]*acceleration_g[1] + acceleration_g[2]*acceleration_g[2]) - 1);
 8004c78:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <update_filter+0xff8>)
 8004c7a:	ed93 7a00 	vldr	s14, [r3]
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004da8 <update_filter+0xff8>)
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c88:	4b47      	ldr	r3, [pc, #284]	@ (8004da8 <update_filter+0xff8>)
 8004c8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c8e:	4b46      	ldr	r3, [pc, #280]	@ (8004da8 <update_filter+0xff8>)
 8004c90:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c9c:	4b42      	ldr	r3, [pc, #264]	@ (8004da8 <update_filter+0xff8>)
 8004c9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ca2:	4b41      	ldr	r3, [pc, #260]	@ (8004da8 <update_filter+0xff8>)
 8004ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb4:	f017 fec6 	bl	801ca44 <sqrtf>
 8004cb8:	eef0 7a40 	vmov.f32	s15, s0
 8004cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cc4:	eef0 7ae7 	vabs.f32	s15, s15
 8004cc8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // extract the current orientation of the platform
    Quaternion quat_raw = {q0, q1, q2, q3};
 8004ccc:	4b32      	ldr	r3, [pc, #200]	@ (8004d98 <update_filter+0xfe8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8004d88 <update_filter+0xfd8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd8:	4b30      	ldr	r3, [pc, #192]	@ (8004d9c <update_filter+0xfec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cde:	4b30      	ldr	r3, [pc, #192]	@ (8004da0 <update_filter+0xff0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	653b      	str	r3, [r7, #80]	@ 0x50

    // create a quaternion to undo initial yaw rotation and apply it to the current quaternion
    Quaternion yaw_compensation = create_yaw_quaternion(init_yaw);
 8004ce4:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <update_filter+0xffc>)
 8004ce6:	edd3 7a00 	vldr	s15, [r3]
 8004cea:	eeb0 0a67 	vmov.f32	s0, s15
 8004cee:	f000 fdd1 	bl	8005894 <create_yaw_quaternion>
 8004cf2:	eeb0 6a40 	vmov.f32	s12, s0
 8004cf6:	eef0 6a60 	vmov.f32	s13, s1
 8004cfa:	eeb0 7a41 	vmov.f32	s14, s2
 8004cfe:	eef0 7a61 	vmov.f32	s15, s3
 8004d02:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8004d06:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8004d0a:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8004d0e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    Quaternion quat = multiply_quaternions(yaw_compensation, quat_raw);
 8004d12:	ed97 4a11 	vldr	s8, [r7, #68]	@ 0x44
 8004d16:	edd7 4a12 	vldr	s9, [r7, #72]	@ 0x48
 8004d1a:	ed97 5a13 	vldr	s10, [r7, #76]	@ 0x4c
 8004d1e:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8004d22:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8004d26:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004d2a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004d2e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004d32:	eeb0 2a44 	vmov.f32	s4, s8
 8004d36:	eef0 2a64 	vmov.f32	s5, s9
 8004d3a:	eeb0 3a45 	vmov.f32	s6, s10
 8004d3e:	eef0 3a65 	vmov.f32	s7, s11
 8004d42:	eeb0 0a46 	vmov.f32	s0, s12
 8004d46:	eef0 0a66 	vmov.f32	s1, s13
 8004d4a:	eeb0 1a47 	vmov.f32	s2, s14
 8004d4e:	eef0 1a67 	vmov.f32	s3, s15
 8004d52:	f000 fdec 	bl	800592e <multiply_quaternions>
 8004d56:	eeb0 6a40 	vmov.f32	s12, s0
 8004d5a:	eef0 6a60 	vmov.f32	s13, s1
 8004d5e:	eeb0 7a41 	vmov.f32	s14, s2
 8004d62:	eef0 7a61 	vmov.f32	s15, s3
 8004d66:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8004d6a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8004d6e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8004d72:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // normalize the result to ensure it's a valid rotation
    normalize_quaternion(&quat);
 8004d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fcde 	bl	800573c <normalize_quaternion>

    // rotate the accelerometer readings by the current quaternion to get the acceleration from the sensor frame to the global frame
		Point3D acc_temp = {acceleration_g[0], acceleration_g[1], acceleration_g[2]};
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <update_filter+0xff8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e013      	b.n	8004db0 <update_filter+0x1000>
 8004d88:	24004b20 	.word	0x24004b20
 8004d8c:	3de147ae 	.word	0x3de147ae
 8004d90:	24000804 	.word	0x24000804
 8004d94:	447a0000 	.word	0x447a0000
 8004d98:	24000010 	.word	0x24000010
 8004d9c:	24004b24 	.word	0x24004b24
 8004da0:	24004b28 	.word	0x24004b28
 8004da4:	2400000c 	.word	0x2400000c
 8004da8:	24004ab0 	.word	0x24004ab0
 8004dac:	24004ae8 	.word	0x24004ae8
 8004db0:	4b6d      	ldr	r3, [pc, #436]	@ (8004f68 <update_filter+0x11b8>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	4b6c      	ldr	r3, [pc, #432]	@ (8004f68 <update_filter+0x11b8>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	623b      	str	r3, [r7, #32]
		Point3D acc_corr_temp = rotatePoint(acc_temp, quat);
 8004dbc:	edd7 4a09 	vldr	s9, [r7, #36]	@ 0x24
 8004dc0:	ed97 5a0a 	vldr	s10, [r7, #40]	@ 0x28
 8004dc4:	edd7 5a0b 	vldr	s11, [r7, #44]	@ 0x2c
 8004dc8:	ed97 6a0c 	vldr	s12, [r7, #48]	@ 0x30
 8004dcc:	edd7 6a06 	vldr	s13, [r7, #24]
 8004dd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dd8:	eef0 1a64 	vmov.f32	s3, s9
 8004ddc:	eeb0 2a45 	vmov.f32	s4, s10
 8004de0:	eef0 2a65 	vmov.f32	s5, s11
 8004de4:	eeb0 3a46 	vmov.f32	s6, s12
 8004de8:	eeb0 0a66 	vmov.f32	s0, s13
 8004dec:	eef0 0a47 	vmov.f32	s1, s14
 8004df0:	eeb0 1a67 	vmov.f32	s2, s15
 8004df4:	f000 fb94 	bl	8005520 <rotatePoint>
 8004df8:	eef0 6a40 	vmov.f32	s13, s0
 8004dfc:	eeb0 7a60 	vmov.f32	s14, s1
 8004e00:	eef0 7a41 	vmov.f32	s15, s2
 8004e04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e0c:	edc3 6a00 	vstr	s13, [r3]
 8004e10:	ed83 7a01 	vstr	s14, [r3, #4]
 8004e14:	edc3 7a02 	vstr	s15, [r3, #8]

		// if the acceleration magnitude is greater than a threshold, then integrate the acceleration into a change in velocity
		if (acc_mag_abs > 0.04){
 8004e18:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e20:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8004f58 <update_filter+0x11a8>
 8004e24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2c:	dd6d      	ble.n	8004f0a <update_filter+0x115a>
			v_corrected.x -= (acc_corr_temp.x) * deltat/1000 * 9.81;    // acceleration is in g's, convert to m/s^2
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f6c <update_filter+0x11bc>)
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e40:	ed93 7a00 	vldr	s14, [r3]
 8004e44:	4b4a      	ldr	r3, [pc, #296]	@ (8004f70 <update_filter+0x11c0>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e4e:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8004f74 <update_filter+0x11c4>
 8004e52:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8004e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e5a:	ed9f 5b41 	vldr	d5, [pc, #260]	@ 8004f60 <update_filter+0x11b0>
 8004e5e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004e62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e6a:	4b40      	ldr	r3, [pc, #256]	@ (8004f6c <update_filter+0x11bc>)
 8004e6c:	edc3 7a00 	vstr	s15, [r3]
			v_corrected.y -= (acc_corr_temp.y) * deltat/1000 * 9.81;
 8004e70:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <update_filter+0x11bc>)
 8004e72:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e86:	4b3a      	ldr	r3, [pc, #232]	@ (8004f70 <update_filter+0x11c0>)
 8004e88:	edd3 7a00 	vldr	s15, [r3]
 8004e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e90:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8004f74 <update_filter+0x11c4>
 8004e94:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8004e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004e9c:	ed9f 5b30 	vldr	d5, [pc, #192]	@ 8004f60 <update_filter+0x11b0>
 8004ea0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004ea4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ea8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004eac:	4b2f      	ldr	r3, [pc, #188]	@ (8004f6c <update_filter+0x11bc>)
 8004eae:	edc3 7a01 	vstr	s15, [r3, #4]
			v_corrected.z -= (acc_corr_temp.z - 1) * deltat/1000 * 9.81;
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f6c <update_filter+0x11bc>)
 8004eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ebc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ecc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <update_filter+0x11c0>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eda:	eddf 5a26 	vldr	s11, [pc, #152]	@ 8004f74 <update_filter+0x11c4>
 8004ede:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8004ee2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ee6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004f60 <update_filter+0x11b0>
 8004eea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004eee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ef2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f6c <update_filter+0x11bc>)
 8004ef8:	edc3 7a02 	vstr	s15, [r3, #8]
			acc_stable_cnt = 0;
 8004efc:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <update_filter+0x11c8>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
			acc_stable_flag = 1;
 8004f02:	4b1e      	ldr	r3, [pc, #120]	@ (8004f7c <update_filter+0x11cc>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e138      	b.n	800517c <update_filter+0x13cc>
		}

		// otherwise, the IMU is stable
		else{
			acc_stable_cnt++;
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <update_filter+0x11c8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <update_filter+0x11c8>)
 8004f12:	6013      	str	r3, [r2, #0]

			// if the IMU has been stable for a set number of filter updates, then consider it to be stationary and account for velocity drift
			if ((acc_stable_cnt >= 20) && acc_stable_flag){
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <update_filter+0x11c8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b13      	cmp	r3, #19
 8004f1a:	f340 811b 	ble.w	8005154 <update_filter+0x13a4>
 8004f1e:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <update_filter+0x11cc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8116 	beq.w	8005154 <update_filter+0x13a4>

			  // find how many filter updates have passed since the last time the IMU was last stable
				float i_diff = (imu_i > last_stable_i) ? (float) imu_i - last_stable_i : (float) 10000 - last_stable_i + imu_i;
 8004f28:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <update_filter+0x11d0>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <update_filter+0x11d4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	dd29      	ble.n	8004f88 <update_filter+0x11d8>
 8004f34:	4b12      	ldr	r3, [pc, #72]	@ (8004f80 <update_filter+0x11d0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f40:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <update_filter+0x11d4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f50:	e02c      	b.n	8004fac <update_filter+0x11fc>
 8004f52:	bf00      	nop
 8004f54:	f3af 8000 	nop.w
 8004f58:	47ae147b 	.word	0x47ae147b
 8004f5c:	3fa47ae1 	.word	0x3fa47ae1
 8004f60:	51eb851f 	.word	0x51eb851f
 8004f64:	40239eb8 	.word	0x40239eb8
 8004f68:	24004ab0 	.word	0x24004ab0
 8004f6c:	24004af8 	.word	0x24004af8
 8004f70:	24000804 	.word	0x24000804
 8004f74:	447a0000 	.word	0x447a0000
 8004f78:	240007f0 	.word	0x240007f0
 8004f7c:	240007f8 	.word	0x240007f8
 8004f80:	2400000c 	.word	0x2400000c
 8004f84:	240007f4 	.word	0x240007f4
 8004f88:	4bb1      	ldr	r3, [pc, #708]	@ (8005250 <update_filter+0x14a0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f94:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8005254 <update_filter+0x14a4>
 8004f98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f9c:	4bae      	ldr	r3, [pc, #696]	@ (8005258 <update_filter+0x14a8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fac:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				i_diff += 1;
 8004fb0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8004fb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fbc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
				i_diff -= (float) acc_stable_cnt;
 8004fc0:	4ba6      	ldr	r3, [pc, #664]	@ (800525c <update_filter+0x14ac>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fcc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8004fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

				// if the system has integrated acceleration properly, and assuming that "stationary" (aka, the accelerometer has not registered any
				// significant accelerations) means that the velocity is zero, then account for the drift in velocity over time
				Point3D v_int_drift;
				v_int_drift.x = v_corrected.x - v_corrected_last_stable.x;  // the current velocity should be the same as the last stable velocity,
 8004fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8005260 <update_filter+0x14b0>)
 8004fda:	ed93 7a00 	vldr	s14, [r3]
 8004fde:	4ba1      	ldr	r3, [pc, #644]	@ (8005264 <update_filter+0x14b4>)
 8004fe0:	edd3 7a00 	vldr	s15, [r3]
 8004fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fe8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004ff0:	edc3 7a00 	vstr	s15, [r3]
				v_int_drift.y = v_corrected.y - v_corrected_last_stable.y;  // assuming that the integration was without errors; this drift term
 8004ff4:	4b9a      	ldr	r3, [pc, #616]	@ (8005260 <update_filter+0x14b0>)
 8004ff6:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ffa:	4b9a      	ldr	r3, [pc, #616]	@ (8005264 <update_filter+0x14b4>)
 8004ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005008:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800500c:	edc3 7a01 	vstr	s15, [r3, #4]
				v_int_drift.z = v_corrected.z - v_corrected_last_stable.z;  // accounts for the velocity drift since then
 8005010:	4b93      	ldr	r3, [pc, #588]	@ (8005260 <update_filter+0x14b0>)
 8005012:	ed93 7a02 	vldr	s14, [r3, #8]
 8005016:	4b93      	ldr	r3, [pc, #588]	@ (8005264 <update_filter+0x14b4>)
 8005018:	edd3 7a02 	vldr	s15, [r3, #8]
 800501c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005020:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005024:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005028:	edc3 7a02 	vstr	s15, [r3, #8]
				// in order to remove the velocity drift from the delta_x estimate, we need to account for the fact that velocity gets integrated into
				// the change of position. we essentially want to remove the area underneath the delta_x curve that results in the velocity drift.
				// the area is a triangle with width i_diff and height v_int_drift, plus a rectangle with width acc_stable_cnt and height v_int_drift.
				// since the deltat value is not constant, we want to use the average deltat (which happens to be sampleFreq) to convert the x-axis from
				// sample number to time in seconds
				delta_x_imu.x -= (v_int_drift.x * ((i_diff / 2) + (float)acc_stable_cnt) / sampleFreq);
 800502c:	4b8e      	ldr	r3, [pc, #568]	@ (8005268 <update_filter+0x14b8>)
 800502e:	ed93 7a00 	vldr	s14, [r3]
 8005032:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005036:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800503a:	edd3 6a00 	vldr	s13, [r3]
 800503e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005042:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8005046:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800504a:	4b84      	ldr	r3, [pc, #528]	@ (800525c <update_filter+0x14ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005056:	ee76 7a27 	vadd.f32	s15, s12, s15
 800505a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800505e:	ed9f 6a83 	vldr	s12, [pc, #524]	@ 800526c <update_filter+0x14bc>
 8005062:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <update_filter+0x14b8>)
 800506c:	edc3 7a00 	vstr	s15, [r3]
				delta_x_imu.y -= (v_int_drift.y * ((i_diff / 2) + (float)acc_stable_cnt) / sampleFreq);
 8005070:	4b7d      	ldr	r3, [pc, #500]	@ (8005268 <update_filter+0x14b8>)
 8005072:	ed93 7a01 	vldr	s14, [r3, #4]
 8005076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800507a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800507e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005082:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005086:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800508a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800508e:	4b73      	ldr	r3, [pc, #460]	@ (800525c <update_filter+0x14ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800509e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050a2:	ed9f 6a72 	vldr	s12, [pc, #456]	@ 800526c <update_filter+0x14bc>
 80050a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80050aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005268 <update_filter+0x14b8>)
 80050b0:	edc3 7a01 	vstr	s15, [r3, #4]
				delta_x_imu.z -= (v_int_drift.z * ((i_diff / 2) + (float)acc_stable_cnt) / sampleFreq);
 80050b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005268 <update_filter+0x14b8>)
 80050b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80050ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80050c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80050c6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80050ca:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80050ce:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80050d2:	4b62      	ldr	r3, [pc, #392]	@ (800525c <update_filter+0x14ac>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80050e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050e6:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 800526c <update_filter+0x14bc>
 80050ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80050ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f2:	4b5d      	ldr	r3, [pc, #372]	@ (8005268 <update_filter+0x14b8>)
 80050f4:	edc3 7a02 	vstr	s15, [r3, #8]
				v_corrected.x -= v_int_drift.x;
 80050f8:	4b59      	ldr	r3, [pc, #356]	@ (8005260 <update_filter+0x14b0>)
 80050fa:	ed93 7a00 	vldr	s14, [r3]
 80050fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005102:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510e:	4b54      	ldr	r3, [pc, #336]	@ (8005260 <update_filter+0x14b0>)
 8005110:	edc3 7a00 	vstr	s15, [r3]
				v_corrected.y -= v_int_drift.y;
 8005114:	4b52      	ldr	r3, [pc, #328]	@ (8005260 <update_filter+0x14b0>)
 8005116:	ed93 7a01 	vldr	s14, [r3, #4]
 800511a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800511e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005122:	edd3 7a01 	vldr	s15, [r3, #4]
 8005126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800512a:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <update_filter+0x14b0>)
 800512c:	edc3 7a01 	vstr	s15, [r3, #4]
				v_corrected.z -= v_int_drift.z;
 8005130:	4b4b      	ldr	r3, [pc, #300]	@ (8005260 <update_filter+0x14b0>)
 8005132:	ed93 7a02 	vldr	s14, [r3, #8]
 8005136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800513a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800513e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005146:	4b46      	ldr	r3, [pc, #280]	@ (8005260 <update_filter+0x14b0>)
 8005148:	edc3 7a02 	vstr	s15, [r3, #8]
				acc_stable_flag = 0;  // until the system is unstable again, don't reaccount for velocity drift
 800514c:	4b48      	ldr	r3, [pc, #288]	@ (8005270 <update_filter+0x14c0>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
			if ((acc_stable_cnt >= 20) && acc_stable_flag){
 8005152:	e013      	b.n	800517c <update_filter+0x13cc>
			}

			// if the IMU is stable and has already accounted for velocity drift, then save the current iteration as the last stable iteration
			// note: v_corrected_last_stable is always 0 based on how this algorithm is set up (assumes stationary means zero velocity), however
			// it is left in just in case future versions of the code want to assume a "stable IMU" means zero velocity
			else if (!acc_stable_flag){
 8005154:	4b46      	ldr	r3, [pc, #280]	@ (8005270 <update_filter+0x14c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10f      	bne.n	800517c <update_filter+0x13cc>
				last_stable_i = imu_i;
 800515c:	4b3e      	ldr	r3, [pc, #248]	@ (8005258 <update_filter+0x14a8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3b      	ldr	r2, [pc, #236]	@ (8005250 <update_filter+0x14a0>)
 8005162:	6013      	str	r3, [r2, #0]
				v_corrected_last_stable.x = v_corrected.x;
 8005164:	4b3e      	ldr	r3, [pc, #248]	@ (8005260 <update_filter+0x14b0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3e      	ldr	r2, [pc, #248]	@ (8005264 <update_filter+0x14b4>)
 800516a:	6013      	str	r3, [r2, #0]
				v_corrected_last_stable.y = v_corrected.y;
 800516c:	4b3c      	ldr	r3, [pc, #240]	@ (8005260 <update_filter+0x14b0>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <update_filter+0x14b4>)
 8005172:	6053      	str	r3, [r2, #4]
				v_corrected_last_stable.z = v_corrected.z;
 8005174:	4b3a      	ldr	r3, [pc, #232]	@ (8005260 <update_filter+0x14b0>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a3a      	ldr	r2, [pc, #232]	@ (8005264 <update_filter+0x14b4>)
 800517a:	6093      	str	r3, [r2, #8]
			}
		}

		// integrate the corrected velocity into a change in position
		delta_x_imu.x += v_corrected.x * deltat/1000 * 9.81;
 800517c:	4b3a      	ldr	r3, [pc, #232]	@ (8005268 <update_filter+0x14b8>)
 800517e:	edd3 7a00 	vldr	s15, [r3]
 8005182:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005186:	4b36      	ldr	r3, [pc, #216]	@ (8005260 <update_filter+0x14b0>)
 8005188:	ed93 7a00 	vldr	s14, [r3]
 800518c:	4b39      	ldr	r3, [pc, #228]	@ (8005274 <update_filter+0x14c4>)
 800518e:	edd3 7a00 	vldr	s15, [r3]
 8005192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005196:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8005278 <update_filter+0x14c8>
 800519a:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800519e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051a2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8005248 <update_filter+0x1498>
 80051a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80051aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80051b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005268 <update_filter+0x14b8>)
 80051b4:	edc3 7a00 	vstr	s15, [r3]
		delta_x_imu.y += v_corrected.y * deltat/1000 * 9.81;
 80051b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <update_filter+0x14b8>)
 80051ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80051be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80051c2:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <update_filter+0x14b0>)
 80051c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80051c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <update_filter+0x14c4>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d2:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8005278 <update_filter+0x14c8>
 80051d6:	eec7 7a25 	vdiv.f32	s15, s14, s11
 80051da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051de:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8005248 <update_filter+0x1498>
 80051e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80051e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80051ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <update_filter+0x14b8>)
 80051f0:	edc3 7a01 	vstr	s15, [r3, #4]
		delta_x_imu.z += v_corrected.z * deltat/1000 * 9.81;
 80051f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <update_filter+0x14b8>)
 80051f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80051fa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80051fe:	4b18      	ldr	r3, [pc, #96]	@ (8005260 <update_filter+0x14b0>)
 8005200:	ed93 7a02 	vldr	s14, [r3, #8]
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <update_filter+0x14c4>)
 8005206:	edd3 7a00 	vldr	s15, [r3]
 800520a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800520e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005278 <update_filter+0x14c8>
 8005212:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8005216:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800521a:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8005248 <update_filter+0x1498>
 800521e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005222:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005226:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800522a:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <update_filter+0x14b8>)
 800522c:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	// prevent the imu counter from going to infinity
	if (imu_i < 9999) {
 8005230:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <update_filter+0x14a8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f242 720e 	movw	r2, #9998	@ 0x270e
 8005238:	4293      	cmp	r3, r2
 800523a:	dc1f      	bgt.n	800527c <update_filter+0x14cc>
		imu_i++;
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <update_filter+0x14a8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a05      	ldr	r2, [pc, #20]	@ (8005258 <update_filter+0x14a8>)
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01c      	b.n	8005282 <update_filter+0x14d2>
 8005248:	51eb851f 	.word	0x51eb851f
 800524c:	40239eb8 	.word	0x40239eb8
 8005250:	240007f4 	.word	0x240007f4
 8005254:	461c4000 	.word	0x461c4000
 8005258:	2400000c 	.word	0x2400000c
 800525c:	240007f0 	.word	0x240007f0
 8005260:	24004af8 	.word	0x24004af8
 8005264:	24004b04 	.word	0x24004b04
 8005268:	24004aec 	.word	0x24004aec
 800526c:	43500000 	.word	0x43500000
 8005270:	240007f8 	.word	0x240007f8
 8005274:	24000804 	.word	0x24000804
 8005278:	447a0000 	.word	0x447a0000
	}
	else{
 		imu_i = 0;
 800527c:	4b23      	ldr	r3, [pc, #140]	@ (800530c <update_filter+0x155c>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
	}

	// if the filter has converged, set the initial quaternion
  if (imu_i == -1){
 8005282:	4b22      	ldr	r3, [pc, #136]	@ (800530c <update_filter+0x155c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d139      	bne.n	8005300 <update_filter+0x1550>
  	initQuat.w = q0;
 800528c:	4b20      	ldr	r3, [pc, #128]	@ (8005310 <update_filter+0x1560>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a20      	ldr	r2, [pc, #128]	@ (8005314 <update_filter+0x1564>)
 8005292:	6013      	str	r3, [r2, #0]
  	initQuat.x = -q1;
 8005294:	4b20      	ldr	r3, [pc, #128]	@ (8005318 <update_filter+0x1568>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	eef1 7a67 	vneg.f32	s15, s15
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <update_filter+0x1564>)
 80052a0:	edc3 7a01 	vstr	s15, [r3, #4]
  	initQuat.y = -q2;
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <update_filter+0x156c>)
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	eef1 7a67 	vneg.f32	s15, s15
 80052ae:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <update_filter+0x1564>)
 80052b0:	edc3 7a02 	vstr	s15, [r3, #8]
  	initQuat.z = -q3;
 80052b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <update_filter+0x1570>)
 80052b6:	edd3 7a00 	vldr	s15, [r3]
 80052ba:	eef1 7a67 	vneg.f32	s15, s15
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <update_filter+0x1564>)
 80052c0:	edc3 7a03 	vstr	s15, [r3, #12]
  	init_yaw = extract_yaw(initQuat);
 80052c4:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <update_filter+0x1564>)
 80052c6:	ed93 6a00 	vldr	s12, [r3]
 80052ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80052ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80052d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80052d6:	eeb0 0a46 	vmov.f32	s0, s12
 80052da:	eef0 0a66 	vmov.f32	s1, s13
 80052de:	eeb0 1a47 	vmov.f32	s2, s14
 80052e2:	eef0 1a67 	vmov.f32	s3, s15
 80052e6:	f000 fa8b 	bl	8005800 <extract_yaw>
 80052ea:	eef0 7a40 	vmov.f32	s15, s0
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <update_filter+0x1574>)
 80052f0:	edc3 7a00 	vstr	s15, [r3]
  	imu_init_set = 1;
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <update_filter+0x1578>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
  	imu_i = 0;
 80052fa:	4b04      	ldr	r3, [pc, #16]	@ (800530c <update_filter+0x155c>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
  }
}
 8005300:	bf00      	nop
 8005302:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2400000c 	.word	0x2400000c
 8005310:	24000010 	.word	0x24000010
 8005314:	24004b10 	.word	0x24004b10
 8005318:	24004b20 	.word	0x24004b20
 800531c:	24004b24 	.word	0x24004b24
 8005320:	24004b28 	.word	0x24004b28
 8005324:	24004ae8 	.word	0x24004ae8
 8005328:	240007ec 	.word	0x240007ec
 800532c:	00000000 	.word	0x00000000

08005330 <QuaternionToEulerAngles>:
 * @return angles Euler angle representation (3-2-1)
 *
 * Source:
 * @see https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html
 */
EulerAngles QuaternionToEulerAngles(Quaternion q) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b094      	sub	sp, #80	@ 0x50
 8005334:	af00      	add	r7, sp, #0
 8005336:	eeb0 6a40 	vmov.f32	s12, s0
 800533a:	eef0 6a60 	vmov.f32	s13, s1
 800533e:	eeb0 7a41 	vmov.f32	s14, s2
 8005342:	eef0 7a61 	vmov.f32	s15, s3
 8005346:	ed87 6a04 	vstr	s12, [r7, #16]
 800534a:	edc7 6a05 	vstr	s13, [r7, #20]
 800534e:	ed87 7a06 	vstr	s14, [r7, #24]
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
    EulerAngles angles;

    // roll (x-axis rotation)
    float32_t sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
 8005356:	ed97 7a04 	vldr	s14, [r7, #16]
 800535a:	edd7 7a05 	vldr	s15, [r7, #20]
 800535e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005362:	edd7 6a06 	vldr	s13, [r7, #24]
 8005366:	edd7 7a07 	vldr	s15, [r7, #28]
 800536a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800536e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005372:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005376:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float32_t cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
 800537a:	ed97 7a05 	vldr	s14, [r7, #20]
 800537e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005386:	edd7 6a06 	vldr	s13, [r7, #24]
 800538a:	edd7 7a06 	vldr	s15, [r7, #24]
 800538e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800539a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800539e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    angles.roll = atan2f(sinr_cosp, cosr_cosp) * 180.0f / M_PI;
 80053a6:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 80053aa:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80053ae:	f017 fb47 	bl	801ca40 <atan2f>
 80053b2:	eef0 7a40 	vmov.f32	s15, s0
 80053b6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005518 <QuaternionToEulerAngles+0x1e8>
 80053ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80053c2:	ed9f 5b53 	vldr	d5, [pc, #332]	@ 8005510 <QuaternionToEulerAngles+0x1e0>
 80053c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80053ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // pitch (y-axis rotation)
    float32_t sinp = 2 * (q.w * q.y - q.z * q.x);
 80053d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80053d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80053da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053de:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80053e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053f2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    if (fabsf(sinp) >= 1)
 80053f6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80053fa:	eef0 7ae7 	vabs.f32	s15, s15
 80053fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540a:	db16      	blt.n	800543a <QuaternionToEulerAngles+0x10a>
        angles.pitch = copysignf(90.0f, sinp) * 180.0f / M_PI; // use 90 degrees if out of range
 800540c:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8005410:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 800551c <QuaternionToEulerAngles+0x1ec>
 8005414:	f014 ff46 	bl	801a2a4 <copysignf>
 8005418:	eef0 7a40 	vmov.f32	s15, s0
 800541c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005518 <QuaternionToEulerAngles+0x1e8>
 8005420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005424:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005428:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8005510 <QuaternionToEulerAngles+0x1e0>
 800542c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005430:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005434:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8005438:	e013      	b.n	8005462 <QuaternionToEulerAngles+0x132>
    else
        angles.pitch = asinf(sinp) * 180.0f / M_PI;
 800543a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800543e:	f017 fad3 	bl	801c9e8 <asinf>
 8005442:	eef0 7a40 	vmov.f32	s15, s0
 8005446:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005518 <QuaternionToEulerAngles+0x1e8>
 800544a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005452:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8005510 <QuaternionToEulerAngles+0x1e0>
 8005456:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800545a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800545e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // yaw (z-axis rotation)
    float32_t siny_cosp = 2 * (q.w * q.z + q.x * q.y);
 8005462:	ed97 7a04 	vldr	s14, [r7, #16]
 8005466:	edd7 7a07 	vldr	s15, [r7, #28]
 800546a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800546e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005472:	edd7 7a06 	vldr	s15, [r7, #24]
 8005476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800547a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005482:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float32_t cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
 8005486:	ed97 7a06 	vldr	s14, [r7, #24]
 800548a:	edd7 7a06 	vldr	s15, [r7, #24]
 800548e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005492:	edd7 6a07 	vldr	s13, [r7, #28]
 8005496:	edd7 7a07 	vldr	s15, [r7, #28]
 800549a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800549e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ae:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    angles.yaw = atan2f(siny_cosp, cosy_cosp) * 180.0f / M_PI;
 80054b2:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 80054b6:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80054ba:	f017 fac1 	bl	801ca40 <atan2f>
 80054be:	eef0 7a40 	vmov.f32	s15, s0
 80054c2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005518 <QuaternionToEulerAngles+0x1e8>
 80054c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80054ce:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8005510 <QuaternionToEulerAngles+0x1e0>
 80054d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80054d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80054da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    return angles;
 80054de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80054e2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80054e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80054e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	ee06 1a90 	vmov	s13, r1
 80054f6:	ee07 2a10 	vmov	s14, r2
 80054fa:	ee07 3a90 	vmov	s15, r3
}
 80054fe:	eeb0 0a66 	vmov.f32	s0, s13
 8005502:	eef0 0a47 	vmov.f32	s1, s14
 8005506:	eeb0 1a67 	vmov.f32	s2, s15
 800550a:	3750      	adds	r7, #80	@ 0x50
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	54442d18 	.word	0x54442d18
 8005514:	400921fb 	.word	0x400921fb
 8005518:	43340000 	.word	0x43340000
 800551c:	42b40000 	.word	0x42b40000

08005520 <rotatePoint>:
 * @return rotated Rotated 3D point
 *
 * Source:
 * @see https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html
 */
Point3D rotatePoint(Point3D point, Quaternion q) {
 8005520:	b480      	push	{r7}
 8005522:	b09b      	sub	sp, #108	@ 0x6c
 8005524:	af00      	add	r7, sp, #0
 8005526:	eef0 4a40 	vmov.f32	s9, s0
 800552a:	eeb0 5a60 	vmov.f32	s10, s1
 800552e:	eef0 5a41 	vmov.f32	s11, s2
 8005532:	eeb0 6a61 	vmov.f32	s12, s3
 8005536:	eef0 6a42 	vmov.f32	s13, s4
 800553a:	eeb0 7a62 	vmov.f32	s14, s5
 800553e:	eef0 7a43 	vmov.f32	s15, s6
 8005542:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8005546:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 800554a:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 800554e:	ed87 6a05 	vstr	s12, [r7, #20]
 8005552:	edc7 6a06 	vstr	s13, [r7, #24]
 8005556:	ed87 7a07 	vstr	s14, [r7, #28]
 800555a:	edc7 7a08 	vstr	s15, [r7, #32]
  Point3D rotated;
  float x = point.x, y = point.y, z = point.z;
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	667b      	str	r3, [r7, #100]	@ 0x64
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	663b      	str	r3, [r7, #96]	@ 0x60
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005568:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// First multiplication: q * v
	float tw = -q.x*x - q.y*y - q.z*z;
 800556a:	edd7 7a06 	vldr	s15, [r7, #24]
 800556e:	eeb1 7a67 	vneg.f32	s14, s15
 8005572:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800557a:	edd7 6a07 	vldr	s13, [r7, #28]
 800557e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005586:	ee37 7a67 	vsub.f32	s14, s14, s15
 800558a:	edd7 6a08 	vldr	s13, [r7, #32]
 800558e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	float tx =  q.w*x + q.y*z - q.z*y;
 800559e:	ed97 7a05 	vldr	s14, [r7, #20]
 80055a2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80055a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ae:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80055b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ba:	edd7 6a08 	vldr	s13, [r7, #32]
 80055be:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80055c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	float ty =  q.w*y - q.x*z + q.z*x;
 80055ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80055d2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80055d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055da:	edd7 6a06 	vldr	s13, [r7, #24]
 80055de:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80055e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80055ee:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80055f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055fa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	float tz =  q.w*z + q.x*y - q.y*x;
 80055fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8005602:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800560a:	edd7 6a06 	vldr	s13, [r7, #24]
 800560e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800561a:	edd7 6a07 	vldr	s13, [r7, #28]
 800561e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	// Second multiplication: (q * v) * q^-1
	// Note: for a unit quaternion, q^-1 = conjugate of q = (q.w, -q.x, -q.y, -q.z)
	rotated.x = tw*(-q.x) + tx*q.w + ty*(-q.z) - tz*(-q.y);
 800562e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005632:	eeb1 7a67 	vneg.f32	s14, s15
 8005636:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800563a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800563e:	edd7 6a05 	vldr	s13, [r7, #20]
 8005642:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800564e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005652:	eef1 6a67 	vneg.f32	s13, s15
 8005656:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800565a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005662:	edd7 6a07 	vldr	s13, [r7, #28]
 8005666:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800566a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800566e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005672:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	rotated.y = tw*(-q.y) - tx*(-q.z) + ty*q.w + tz*(-q.x);
 8005676:	edd7 7a07 	vldr	s15, [r7, #28]
 800567a:	eeb1 7a67 	vneg.f32	s14, s15
 800567e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005686:	edd7 6a08 	vldr	s13, [r7, #32]
 800568a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005696:	edd7 6a05 	vldr	s13, [r7, #20]
 800569a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800569e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80056aa:	eef1 6a67 	vneg.f32	s13, s15
 80056ae:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80056b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ba:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	rotated.z = tw*(-q.z) + tx*(-q.y) - ty*(-q.x) + tz*q.w;
 80056be:	edd7 7a08 	vldr	s15, [r7, #32]
 80056c2:	eeb1 7a67 	vneg.f32	s14, s15
 80056c6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80056ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80056d2:	eef1 6a67 	vneg.f32	s13, s15
 80056d6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80056da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80056e6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80056ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80056f6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80056fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005702:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	return rotated;
 8005706:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800570a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800570e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005710:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005714:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571a:	ee06 1a90 	vmov	s13, r1
 800571e:	ee07 2a10 	vmov	s14, r2
 8005722:	ee07 3a90 	vmov	s15, r3
}
 8005726:	eeb0 0a66 	vmov.f32	s0, s13
 800572a:	eef0 0a47 	vmov.f32	s1, s14
 800572e:	eeb0 1a67 	vmov.f32	s2, s15
 8005732:	376c      	adds	r7, #108	@ 0x6c
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <normalize_quaternion>:

/**
 * @brief Normalizes a quaternion by its magnitude
 * @param q Pointer to quaternion struct
 */
void normalize_quaternion(Quaternion* q) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    float magnitude = sqrt(q->w*q->w + q->x*q->x + q->y*q->y + q->z*q->z);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	ed93 7a00 	vldr	s14, [r3]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	edd3 7a00 	vldr	s15, [r3]
 8005750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	edd3 6a01 	vldr	s13, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	edd3 6a02 	vldr	s13, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	edd3 7a02 	vldr	s15, [r3, #8]
 8005774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	edd3 7a03 	vldr	s15, [r3, #12]
 8005788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800578c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005794:	eeb0 0b47 	vmov.f64	d0, d7
 8005798:	f017 f86e 	bl	801c878 <sqrt>
 800579c:	eeb0 7b40 	vmov.f64	d7, d0
 80057a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057a4:	edc7 7a03 	vstr	s15, [r7, #12]
    q->w /= magnitude;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	edd3 6a00 	vldr	s13, [r3]
 80057ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80057b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	edc3 7a00 	vstr	s15, [r3]
    q->x /= magnitude;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	edd3 6a01 	vldr	s13, [r3, #4]
 80057c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y /= magnitude;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80057d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80057da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z /= magnitude;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80057ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80057ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <extract_yaw>:
 * @return yaw Angle in radians
 *
 * Source:
 * @see https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html
 */
float extract_yaw(Quaternion q) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	eeb0 6a40 	vmov.f32	s12, s0
 800580a:	eef0 6a60 	vmov.f32	s13, s1
 800580e:	eeb0 7a41 	vmov.f32	s14, s2
 8005812:	eef0 7a61 	vmov.f32	s15, s3
 8005816:	ed87 6a00 	vstr	s12, [r7]
 800581a:	edc7 6a01 	vstr	s13, [r7, #4]
 800581e:	ed87 7a02 	vstr	s14, [r7, #8]
 8005822:	edc7 7a03 	vstr	s15, [r7, #12]
    return atan2(2.0f * (q.w * q.z + q.x * q.y),
 8005826:	ed97 7a00 	vldr	s14, [r7]
 800582a:	edd7 7a03 	vldr	s15, [r7, #12]
 800582e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005832:	edd7 6a01 	vldr	s13, [r7, #4]
 8005836:	edd7 7a02 	vldr	s15, [r7, #8]
 800583a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800583e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005842:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                 1.0f - 2.0f * (q.y * q.y + q.z * q.z));
 800584a:	ed97 6a02 	vldr	s12, [r7, #8]
 800584e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005852:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005856:	edd7 5a03 	vldr	s11, [r7, #12]
 800585a:	edd7 6a03 	vldr	s13, [r7, #12]
 800585e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8005862:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005866:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800586a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800586e:	ee76 6a66 	vsub.f32	s13, s12, s13
    return atan2(2.0f * (q.w * q.z + q.x * q.y),
 8005872:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005876:	eeb0 1b46 	vmov.f64	d1, d6
 800587a:	eeb0 0b47 	vmov.f64	d0, d7
 800587e:	f016 fff9 	bl	801c874 <atan2>
 8005882:	eeb0 7b40 	vmov.f64	d7, d0
 8005886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800588a:	eeb0 0a67 	vmov.f32	s0, s15
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <create_yaw_quaternion>:
/**
 * @brief Creates a quaternion from a yaw rotation
 * @param yaw Angle in radians
 * @return q Quaternion with yaw-only rotation
 */
Quaternion create_yaw_quaternion(float yaw) {
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b08f      	sub	sp, #60	@ 0x3c
 8005898:	af00      	add	r7, sp, #0
 800589a:	ed87 0a05 	vstr	s0, [r7, #20]
    Quaternion q;
    q.w = cos(yaw / 2.0f);
 800589e:	ed97 7a05 	vldr	s14, [r7, #20]
 80058a2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80058a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058ae:	eeb0 0b47 	vmov.f64	d0, d7
 80058b2:	f017 f801 	bl	801c8b8 <cos>
 80058b6:	eeb0 7b40 	vmov.f64	d7, d0
 80058ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058be:	edc7 7a06 	vstr	s15, [r7, #24]
    q.x = 0.0f;
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
    q.y = 0.0f;
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	623b      	str	r3, [r7, #32]
    q.z = sin(yaw / 2.0f);
 80058ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80058d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80058d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80058de:	eeb0 0b47 	vmov.f64	d0, d7
 80058e2:	f017 f835 	bl	801c950 <sin>
 80058e6:	eeb0 7b40 	vmov.f64	d7, d0
 80058ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80058ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return q;
 80058f2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80058f6:	f107 0318 	add.w	r3, r7, #24
 80058fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005908:	ee06 0a10 	vmov	s12, r0
 800590c:	ee06 1a90 	vmov	s13, r1
 8005910:	ee07 2a10 	vmov	s14, r2
 8005914:	ee07 3a90 	vmov	s15, r3
}
 8005918:	eeb0 0a46 	vmov.f32	s0, s12
 800591c:	eef0 0a66 	vmov.f32	s1, s13
 8005920:	eeb0 1a47 	vmov.f32	s2, s14
 8005924:	eef0 1a67 	vmov.f32	s3, s15
 8005928:	373c      	adds	r7, #60	@ 0x3c
 800592a:	46bd      	mov	sp, r7
 800592c:	bd90      	pop	{r4, r7, pc}

0800592e <multiply_quaternions>:
 * @return result q1*q2
 *
 * Source:
 * @see https://danceswithcode.net/engineeringnotes/quaternions/quaternions.html
 */
Quaternion multiply_quaternions(Quaternion q1, Quaternion q2) {
 800592e:	b490      	push	{r4, r7}
 8005930:	b094      	sub	sp, #80	@ 0x50
 8005932:	af00      	add	r7, sp, #0
 8005934:	eeb0 4a40 	vmov.f32	s8, s0
 8005938:	eef0 4a60 	vmov.f32	s9, s1
 800593c:	eeb0 5a41 	vmov.f32	s10, s2
 8005940:	eef0 5a61 	vmov.f32	s11, s3
 8005944:	eeb0 6a42 	vmov.f32	s12, s4
 8005948:	eef0 6a62 	vmov.f32	s13, s5
 800594c:	eeb0 7a43 	vmov.f32	s14, s6
 8005950:	eef0 7a63 	vmov.f32	s15, s7
 8005954:	ed87 4a08 	vstr	s8, [r7, #32]
 8005958:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 800595c:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8005960:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8005964:	ed87 6a04 	vstr	s12, [r7, #16]
 8005968:	edc7 6a05 	vstr	s13, [r7, #20]
 800596c:	ed87 7a06 	vstr	s14, [r7, #24]
 8005970:	edc7 7a07 	vstr	s15, [r7, #28]
    Quaternion result;
    result.w = q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z;
 8005974:	ed97 7a08 	vldr	s14, [r7, #32]
 8005978:	edd7 7a04 	vldr	s15, [r7, #16]
 800597c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005980:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005984:	edd7 7a05 	vldr	s15, [r7, #20]
 8005988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800598c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005990:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005994:	edd7 7a06 	vldr	s15, [r7, #24]
 8005998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800599c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059a0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80059a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80059a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    result.x = q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y;
 80059b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80059b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80059bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80059c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059d0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80059d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80059d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e0:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80059e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80059e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    result.y = q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x;
 80059f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80059f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80059fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a00:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a10:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005a14:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a20:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8005a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a30:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.z = q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w;
 8005a34:	ed97 7a08 	vldr	s14, [r7, #32]
 8005a38:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a40:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a44:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a50:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a60:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8005a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a70:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    return result;
 8005a74:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8005a78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005a82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005a84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a8a:	ee06 0a10 	vmov	s12, r0
 8005a8e:	ee06 1a90 	vmov	s13, r1
 8005a92:	ee07 2a10 	vmov	s14, r2
 8005a96:	ee07 3a90 	vmov	s15, r3
}
 8005a9a:	eeb0 0a46 	vmov.f32	s0, s12
 8005a9e:	eef0 0a66 	vmov.f32	s1, s13
 8005aa2:	eeb0 1a47 	vmov.f32	s2, s14
 8005aa6:	eef0 1a67 	vmov.f32	s3, s15
 8005aaa:	3750      	adds	r7, #80	@ 0x50
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc90      	pop	{r4, r7}
 8005ab0:	4770      	bx	lr
	...

08005ab4 <invSqrt>:
 * @param x Input value
 * @return Inverse square root of input value
 *
 * Credit goes to Seb Madgwick
 */
float invSqrt(float x) {
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8005abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ac2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aca:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 8005ad2:	f107 0310 	add.w	r3, r7, #16
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	105a      	asrs	r2, r3, #1
 8005ade:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <invSqrt+0x74>)
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 8005ae4:	f107 030c 	add.w	r3, r7, #12
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8005aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8005af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b00:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005b04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b10:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	ee07 3a90 	vmov	s15, r3
}
 8005b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	5f3759df 	.word	0x5f3759df

08005b2c <randn>:
 * random number following a normal distribution.
 *
 * @see https://www.columbia.edu/~ks20/4404-16-Fall/Simulation-LCG.pdf
 * @see https://medium.com/mti-technology/how-to-generate-gaussian-samples-3951f2203ab0
 */
float randn(float mean, float stddev) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8005b36:	edc7 0a00 	vstr	s1, [r7]
    static uint32_t seed = 1;
    static int have_spare = 0;
    static float spare;
    float u, v, s, mul;

    if (have_spare) {
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c6c <randn+0x140>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <randn+0x34>
        have_spare = 0;
 8005b42:	4b4a      	ldr	r3, [pc, #296]	@ (8005c6c <randn+0x140>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
        return mean + stddev * spare;
 8005b48:	4b49      	ldr	r3, [pc, #292]	@ (8005c70 <randn+0x144>)
 8005b4a:	ed93 7a00 	vldr	s14, [r3]
 8005b4e:	edd7 7a00 	vldr	s15, [r7]
 8005b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5e:	e07f      	b.n	8005c60 <randn+0x134>
    }

    do {
        // Generate two uniform random numbers between -1 and 1
        seed = 1664525 * seed + 1013904223; // Linear congruential generator
 8005b60:	4b44      	ldr	r3, [pc, #272]	@ (8005c74 <randn+0x148>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a44      	ldr	r2, [pc, #272]	@ (8005c78 <randn+0x14c>)
 8005b66:	fb03 f202 	mul.w	r2, r3, r2
 8005b6a:	4b44      	ldr	r3, [pc, #272]	@ (8005c7c <randn+0x150>)
 8005b6c:	4413      	add	r3, r2
 8005b6e:	4a41      	ldr	r2, [pc, #260]	@ (8005c74 <randn+0x148>)
 8005b70:	6013      	str	r3, [r2, #0]
        u = ((float)seed / UINT32_MAX) * 2 - 1;
 8005b72:	4b40      	ldr	r3, [pc, #256]	@ (8005c74 <randn+0x148>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b7e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005c80 <randn+0x154>
 8005b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b92:	edc7 7a05 	vstr	s15, [r7, #20]
        seed = 1664525 * seed + 1013904223;
 8005b96:	4b37      	ldr	r3, [pc, #220]	@ (8005c74 <randn+0x148>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a37      	ldr	r2, [pc, #220]	@ (8005c78 <randn+0x14c>)
 8005b9c:	fb03 f202 	mul.w	r2, r3, r2
 8005ba0:	4b36      	ldr	r3, [pc, #216]	@ (8005c7c <randn+0x150>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	4a33      	ldr	r2, [pc, #204]	@ (8005c74 <randn+0x148>)
 8005ba6:	6013      	str	r3, [r2, #0]
        v = ((float)seed / UINT32_MAX) * 2 - 1;
 8005ba8:	4b32      	ldr	r3, [pc, #200]	@ (8005c74 <randn+0x148>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bb4:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005c80 <randn+0x154>
 8005bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bc8:	edc7 7a04 	vstr	s15, [r7, #16]
        s = u * u + v * v;
 8005bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bd0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be0:	edc7 7a03 	vstr	s15, [r7, #12]
    } while (s >= 1 || s == 0);
 8005be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf4:	dab4      	bge.n	8005b60 <randn+0x34>
 8005bf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	d0ad      	beq.n	8005b60 <randn+0x34>

    mul = sqrtf(-2.0f * logf(s) / s);
 8005c04:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c08:	f016 ff42 	bl	801ca90 <logf>
 8005c0c:	eef0 7a40 	vmov.f32	s15, s0
 8005c10:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c20:	eeb0 0a66 	vmov.f32	s0, s13
 8005c24:	f016 ff0e 	bl	801ca44 <sqrtf>
 8005c28:	ed87 0a02 	vstr	s0, [r7, #8]
    spare = v * mul;
 8005c2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c30:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c38:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <randn+0x144>)
 8005c3a:	edc3 7a00 	vstr	s15, [r3]
    have_spare = 1;
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c6c <randn+0x140>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

    return mean + stddev * u * mul;
 8005c44:	ed97 7a00 	vldr	s14, [r7]
 8005c48:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005c60:	eeb0 0a67 	vmov.f32	s0, s15
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	24004b5c 	.word	0x24004b5c
 8005c70:	24004b60 	.word	0x24004b60
 8005c74:	24000014 	.word	0x24000014
 8005c78:	0019660d 	.word	0x0019660d
 8005c7c:	3c6ef35f 	.word	0x3c6ef35f
 8005c80:	4f800000 	.word	0x4f800000

08005c84 <create_kalman_filter>:
 * @param meas_dim Dimension of measurement vector
 * @return kf Pointer to Kalman filter struct
 *
 * This function
 */
KalmanFilter* create_kalman_filter(size_t state_dim, size_t meas_dim) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
    KalmanFilter* kf = (KalmanFilter*)malloc(sizeof(KalmanFilter));
 8005c8e:	205c      	movs	r0, #92	@ 0x5c
 8005c90:	f012 fa52 	bl	8018138 <malloc>
 8005c94:	4603      	mov	r3, r0
 8005c96:	60fb      	str	r3, [r7, #12]
    if (kf == NULL) return NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <create_kalman_filter+0x1e>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e09d      	b.n	8005dde <create_kalman_filter+0x15a>

    kf->state_dim = state_dim;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    kf->meas_dim = meas_dim;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	659a      	str	r2, [r3, #88]	@ 0x58

    kf->x_data = (float32_t*)malloc(state_dim * sizeof(float32_t));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f012 fa40 	bl	8018138 <malloc>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    kf->P_data = (float32_t*)malloc(state_dim * state_dim * sizeof(float32_t));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	fb03 f303 	mul.w	r3, r3, r3
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f012 fa35 	bl	8018138 <malloc>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->F_data = (float32_t*)malloc(state_dim * state_dim * sizeof(float32_t));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	fb03 f303 	mul.w	r3, r3, r3
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f012 fa2a 	bl	8018138 <malloc>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->H_data = (float32_t*)malloc(meas_dim * state_dim * sizeof(float32_t));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f012 fa1e 	bl	8018138 <malloc>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	645a      	str	r2, [r3, #68]	@ 0x44
    kf->Q_data = (float32_t*)malloc(state_dim * state_dim * sizeof(float32_t));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	fb03 f303 	mul.w	r3, r3, r3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f012 fa13 	bl	8018138 <malloc>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->R_data = (float32_t*)malloc(meas_dim * meas_dim * sizeof(float32_t));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	fb03 f303 	mul.w	r3, r3, r3
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f012 fa08 	bl	8018138 <malloc>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->K_data = (float32_t*)malloc(state_dim * meas_dim * sizeof(float32_t));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f012 f9fc 	bl	8018138 <malloc>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	651a      	str	r2, [r3, #80]	@ 0x50

    // Initialize matrices
    arm_mat_init_f32(&kf->x, state_dim, 1, kf->x_data);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	b299      	uxth	r1, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	2201      	movs	r2, #1
 8005d54:	f011 fc92 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, kf->P_data);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f103 0008 	add.w	r0, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	b299      	uxth	r1, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6a:	f011 fc87 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->F, state_dim, state_dim, kf->F_data);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f103 0010 	add.w	r0, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	b299      	uxth	r1, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	f011 fc7c 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, meas_dim, state_dim, kf->H_data);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f103 0018 	add.w	r0, r3, #24
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	b299      	uxth	r1, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f011 fc71 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, kf->Q_data);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f103 0020 	add.w	r0, r3, #32
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	b299      	uxth	r1, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dac:	f011 fc66 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, meas_dim, meas_dim, kf->R_data);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	b299      	uxth	r1, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc2:	f011 fc5b 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, state_dim, meas_dim, kf->K_data);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	b299      	uxth	r1, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	f011 fc50 	bl	801767c <arm_mat_init_f32>

    return kf;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <kalman_filter_init>:
 * @param Q_values Pointer to initial Q values list
 * @param R_values Pointer to initial R values list
 */
void kalman_filter_init(KalmanFilter* kf, float32_t* x_values, float32_t* P_values,
                        float32_t* F_values, float32_t* H_values,
                        float32_t* Q_values, float32_t* R_values) {
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
    memcpy(kf->x_data, x_values, kf->state_dim * sizeof(float32_t));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	f014 fa32 	bl	801a26a <memcpy>
    memcpy(kf->P_data, P_values, kf->state_dim * kf->state_dim * sizeof(float32_t));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	f014 fa25 	bl	801a26a <memcpy>
    memcpy(kf->F_data, F_values, kf->state_dim * kf->state_dim * sizeof(float32_t));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	461a      	mov	r2, r3
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	f014 fa18 	bl	801a26a <memcpy>
    memcpy(kf->H_data, H_values, kf->meas_dim * kf->state_dim * sizeof(float32_t));
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	f014 fa0b 	bl	801a26a <memcpy>
    memcpy(kf->Q_data, Q_values, kf->state_dim * kf->state_dim * sizeof(float32_t));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	461a      	mov	r2, r3
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	f014 f9fe 	bl	801a26a <memcpy>
    memcpy(kf->R_data, R_values, kf->meas_dim * kf->meas_dim * sizeof(float32_t));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	461a      	mov	r2, r3
 8005e82:	6a39      	ldr	r1, [r7, #32]
 8005e84:	f014 f9f1 	bl	801a26a <memcpy>
}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <kalman_filter_predict>:
 *
 * For Kalman filter theory, read my thesis text or the source below.
 *
 * @see https://thekalmanfilter.com/kalman-filter-explained-simply/
 */
void kalman_filter_predict(KalmanFilter* kf) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	@ 0x30
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    // Temporary matrices
    float32_t* temp_state = (float32_t*)malloc(kf->state_dim * sizeof(float32_t));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f012 f94a 	bl	8018138 <malloc>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t* temp_cov = (float32_t*)malloc(kf->state_dim * kf->state_dim * sizeof(float32_t));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f012 f93e 	bl	8018138 <malloc>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t* temp_F_transpose = (float32_t*)malloc(kf->state_dim * kf->state_dim * sizeof(float32_t));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005ec8:	fb02 f303 	mul.w	r3, r2, r3
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f012 f932 	bl	8018138 <malloc>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    arm_matrix_instance_f32 temp_state_mat, temp_cov_mat, F_transpose_mat;
    arm_mat_init_f32(&temp_state_mat, kf->state_dim, 1, temp_state);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	b299      	uxth	r1, r3
 8005ede:	f107 001c 	add.w	r0, r7, #28
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f011 fbc9 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&temp_cov_mat, kf->state_dim, kf->state_dim, temp_cov);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	b299      	uxth	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f107 0014 	add.w	r0, r7, #20
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	f011 fbbe 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&F_transpose_mat, kf->state_dim, kf->state_dim, temp_F_transpose);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f04:	b299      	uxth	r1, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f107 000c 	add.w	r0, r7, #12
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	f011 fbb3 	bl	801767c <arm_mat_init_f32>

    // x = F * x
    arm_mat_mult_f32(&kf->F, &kf->x, &temp_state_mat);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3310      	adds	r3, #16
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	f107 021c 	add.w	r2, r7, #28
 8005f20:	4618      	mov	r0, r3
 8005f22:	f011 f973 	bl	801720c <arm_mat_mult_f32>
    memcpy(kf->x_data, temp_state, kf->state_dim * sizeof(float32_t));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	461a      	mov	r2, r3
 8005f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f34:	f014 f999 	bl	801a26a <memcpy>

    // P = F * P * F^T + Q
    arm_mat_mult_f32(&kf->F, &kf->P, &temp_cov_mat);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f103 0010 	add.w	r0, r3, #16
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3308      	adds	r3, #8
 8005f42:	f107 0214 	add.w	r2, r7, #20
 8005f46:	4619      	mov	r1, r3
 8005f48:	f011 f960 	bl	801720c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->F, &F_transpose_mat);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3310      	adds	r3, #16
 8005f50:	f107 020c 	add.w	r2, r7, #12
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f011 f842 	bl	8016fe0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp_cov_mat, &F_transpose_mat, &kf->P);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f103 0208 	add.w	r2, r3, #8
 8005f62:	f107 010c 	add.w	r1, r7, #12
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f011 f94e 	bl	801720c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0008 	add.w	r0, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0120 	add.w	r1, r3, #32
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	461a      	mov	r2, r3
 8005f82:	f011 fb7f 	bl	8017684 <arm_mat_add_f32>

    free(temp_state);
 8005f86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f88:	f012 f8de 	bl	8018148 <free>
    free(temp_cov);
 8005f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8e:	f012 f8db 	bl	8018148 <free>
    free(temp_F_transpose);
 8005f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f94:	f012 f8d8 	bl	8018148 <free>
}
 8005f98:	bf00      	nop
 8005f9a:	3730      	adds	r7, #48	@ 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <kalman_filter_update>:
 *
 * For Kalman filter theory, read my thesis text or the source below.
 *
 * @see https://thekalmanfilter.com/kalman-filter-explained-simply/
 */
void kalman_filter_update(KalmanFilter* kf, float32_t* measurement) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b09e      	sub	sp, #120	@ 0x78
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
    // Temporary matrices
    float32_t* temp_state = (float32_t*)malloc(kf->state_dim * sizeof(float32_t));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f012 f8c1 	bl	8018138 <malloc>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	677b      	str	r3, [r7, #116]	@ 0x74
    float32_t* temp_measure = (float32_t*)malloc(kf->meas_dim * sizeof(float32_t));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f012 f8b9 	bl	8018138 <malloc>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	673b      	str	r3, [r7, #112]	@ 0x70
    float32_t* temp_H_P = (float32_t*)malloc(kf->meas_dim * kf->state_dim * sizeof(float32_t));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f012 f8ad 	bl	8018138 <malloc>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    float32_t* temp_H_transpose = (float32_t*)malloc(kf->state_dim * kf->meas_dim * sizeof(float32_t));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f012 f8a1 	bl	8018138 <malloc>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
    float32_t* temp_P_H_transpose = (float32_t*)malloc(kf->state_dim * kf->meas_dim * sizeof(float32_t));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4618      	mov	r0, r3
 800600a:	f012 f895 	bl	8018138 <malloc>
 800600e:	4603      	mov	r3, r0
 8006010:	667b      	str	r3, [r7, #100]	@ 0x64
    float32_t* temp_S = (float32_t*)malloc(kf->meas_dim * kf->meas_dim * sizeof(float32_t));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4618      	mov	r0, r3
 8006022:	f012 f889 	bl	8018138 <malloc>
 8006026:	4603      	mov	r3, r0
 8006028:	663b      	str	r3, [r7, #96]	@ 0x60
    float32_t* temp_S_inv = (float32_t*)malloc(kf->meas_dim * kf->meas_dim * sizeof(float32_t));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f012 f87d 	bl	8018138 <malloc>
 800603e:	4603      	mov	r3, r0
 8006040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    float32_t* temp_K_H = (float32_t*)malloc(kf->state_dim * kf->state_dim * sizeof(float32_t));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4618      	mov	r0, r3
 8006052:	f012 f871 	bl	8018138 <malloc>
 8006056:	4603      	mov	r3, r0
 8006058:	65bb      	str	r3, [r7, #88]	@ 0x58
    float32_t* temp_K_H_P = (float32_t*)malloc(kf->state_dim * kf->state_dim * sizeof(float32_t));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f012 f865 	bl	8018138 <malloc>
 800606e:	4603      	mov	r3, r0
 8006070:	657b      	str	r3, [r7, #84]	@ 0x54

    arm_matrix_instance_f32 temp_state_mat, temp_measure_mat, temp_H_P_mat, H_transpose_mat, P_H_transpose_mat, S_mat, S_inv_mat, K_H_mat, K_H_P_mat;

    arm_mat_init_f32(&temp_state_mat, kf->state_dim, 1, temp_state);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	b299      	uxth	r1, r3
 8006078:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800607c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800607e:	2201      	movs	r2, #1
 8006080:	f011 fafc 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&temp_measure_mat, kf->meas_dim, 1, temp_measure);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	b299      	uxth	r1, r3
 800608a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800608e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006090:	2201      	movs	r2, #1
 8006092:	f011 faf3 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&temp_H_P_mat, kf->meas_dim, kf->state_dim, temp_H_P);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609a:	b299      	uxth	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80060a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a8:	f011 fae8 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&H_transpose_mat, kf->state_dim, kf->meas_dim, temp_H_transpose);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	b299      	uxth	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80060bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060be:	f011 fadd 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&P_H_transpose_mat, kf->state_dim, kf->meas_dim, temp_P_H_transpose);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c6:	b299      	uxth	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80060d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d4:	f011 fad2 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&S_mat, kf->meas_dim, kf->meas_dim, temp_S);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060dc:	b299      	uxth	r1, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80060e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060ea:	f011 fac7 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&S_inv_mat, kf->meas_dim, kf->meas_dim, temp_S_inv);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f2:	b299      	uxth	r1, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	f107 001c 	add.w	r0, r7, #28
 80060fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006100:	f011 fabc 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&K_H_mat, kf->state_dim, kf->state_dim, temp_K_H);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	b299      	uxth	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610e:	b29a      	uxth	r2, r3
 8006110:	f107 0014 	add.w	r0, r7, #20
 8006114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006116:	f011 fab1 	bl	801767c <arm_mat_init_f32>
    arm_mat_init_f32(&K_H_P_mat, kf->state_dim, kf->state_dim, temp_K_H_P);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	b299      	uxth	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	b29a      	uxth	r2, r3
 8006126:	f107 000c 	add.w	r0, r7, #12
 800612a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612c:	f011 faa6 	bl	801767c <arm_mat_init_f32>

    // y = z - H * x
    arm_mat_mult_f32(&kf->H, &kf->x, &temp_measure_mat);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3318      	adds	r3, #24
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800613a:	4618      	mov	r0, r3
 800613c:	f011 f866 	bl	801720c <arm_mat_mult_f32>
    arm_sub_f32(measurement, temp_measure, temp_measure, kf->meas_dim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006144:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006146:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006148:	6838      	ldr	r0, [r7, #0]
 800614a:	f011 fc2d 	bl	80179a8 <arm_sub_f32>

    // S = H * P * H^T + R
    arm_mat_mult_f32(&kf->H, &kf->P, &temp_H_P_mat);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 0018 	add.w	r0, r3, #24
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3308      	adds	r3, #8
 8006158:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800615c:	4619      	mov	r1, r3
 800615e:	f011 f855 	bl	801720c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->H, &H_transpose_mat);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3318      	adds	r3, #24
 8006166:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f010 ff37 	bl	8016fe0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp_H_P_mat, &H_transpose_mat, &S_mat);
 8006172:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006176:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800617a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800617e:	4618      	mov	r0, r3
 8006180:	f011 f844 	bl	801720c <arm_mat_mult_f32>
    arm_mat_add_f32(&S_mat, &kf->R, &S_mat);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800618a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800618e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f011 fa76 	bl	8017684 <arm_mat_add_f32>

    // K = P * H^T * S^-1
    arm_mat_inverse_f32(&S_mat, &S_inv_mat);
 8006198:	f107 021c 	add.w	r2, r7, #28
 800619c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f011 f948 	bl	8017438 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->P, &H_transpose_mat, &P_H_transpose_mat);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3308      	adds	r3, #8
 80061ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80061b0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80061b4:	4618      	mov	r0, r3
 80061b6:	f011 f829 	bl	801720c <arm_mat_mult_f32>
    arm_mat_mult_f32(&P_H_transpose_mat, &S_inv_mat, &kf->K);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061c0:	f107 011c 	add.w	r1, r7, #28
 80061c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80061c8:	4618      	mov	r0, r3
 80061ca:	f011 f81f 	bl	801720c <arm_mat_mult_f32>

    // x = x + K * y
    arm_mat_mult_f32(&kf->K, &temp_measure_mat, &temp_state_mat);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3330      	adds	r3, #48	@ 0x30
 80061d2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80061d6:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80061da:	4618      	mov	r0, r3
 80061dc:	f011 f816 	bl	801720c <arm_mat_mult_f32>
    arm_add_f32(kf->x_data, temp_state, kf->x_data, kf->state_dim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ec:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80061ee:	f011 fc35 	bl	8017a5c <arm_add_f32>

    // P = (I - K * H) * P
    arm_mat_mult_f32(&kf->K, &kf->H, &K_H_mat);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3318      	adds	r3, #24
 80061fc:	f107 0214 	add.w	r2, r7, #20
 8006200:	4619      	mov	r1, r3
 8006202:	f011 f803 	bl	801720c <arm_mat_mult_f32>
    arm_mat_mult_f32(&K_H_mat, &kf->P, &K_H_P_mat);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f103 0108 	add.w	r1, r3, #8
 800620c:	f107 020c 	add.w	r2, r7, #12
 8006210:	f107 0314 	add.w	r3, r7, #20
 8006214:	4618      	mov	r0, r3
 8006216:	f010 fff9 	bl	801720c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->P, &K_H_P_mat, &kf->P);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f103 0008 	add.w	r0, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f103 0208 	add.w	r2, r3, #8
 8006226:	f107 030c 	add.w	r3, r7, #12
 800622a:	4619      	mov	r1, r3
 800622c:	f010 ff82 	bl	8017134 <arm_mat_sub_f32>

    free(temp_state);
 8006230:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006232:	f011 ff89 	bl	8018148 <free>
    free(temp_measure);
 8006236:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006238:	f011 ff86 	bl	8018148 <free>
    free(temp_H_P);
 800623c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800623e:	f011 ff83 	bl	8018148 <free>
    free(temp_H_transpose);
 8006242:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006244:	f011 ff80 	bl	8018148 <free>
    free(temp_P_H_transpose);
 8006248:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800624a:	f011 ff7d 	bl	8018148 <free>
    free(temp_S);
 800624e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006250:	f011 ff7a 	bl	8018148 <free>
    free(temp_S_inv);
 8006254:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006256:	f011 ff77 	bl	8018148 <free>
    free(temp_K_H);
 800625a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800625c:	f011 ff74 	bl	8018148 <free>
    free(temp_K_H_P);
 8006260:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006262:	f011 ff71 	bl	8018148 <free>
}
 8006266:	bf00      	nop
 8006268:	3778      	adds	r7, #120	@ 0x78
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <init_kalman_filter_combined>:
 * @brief Initializes the Kalman filter for the combined system (iSBL + dead reckoning)
 * @return kf Pointer to combined Kalman filter struct
 *
 * This function houses the initial matrices for the combined KF.  It creates a Kalman filter struct with these matrices.
 */
KalmanFilter* init_kalman_filter_combined(void) {
 8006270:	b580      	push	{r7, lr}
 8006272:	f5ad 7d40 	sub.w	sp, sp, #768	@ 0x300
 8006276:	af04      	add	r7, sp, #16
    float32_t x_values[6] = {0, 0, 0, 0, 0, 0};
 8006278:	f507 7335 	add.w	r3, r7, #724	@ 0x2d4
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	611a      	str	r2, [r3, #16]
 8006288:	615a      	str	r2, [r3, #20]

    float32_t P_values[6 * 6] = {
 800628a:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800628e:	2290      	movs	r2, #144	@ 0x90
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f013 ff3a 	bl	801a10c <memset>
 8006298:	4b67      	ldr	r3, [pc, #412]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 800629a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800629e:	4b66      	ldr	r3, [pc, #408]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 80062a0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80062a4:	4b64      	ldr	r3, [pc, #400]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 80062a6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80062aa:	4b63      	ldr	r3, [pc, #396]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 80062ac:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80062b0:	4b61      	ldr	r3, [pc, #388]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 80062b2:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80062b6:	4b60      	ldr	r3, [pc, #384]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 80062b8:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
        0, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 10, 0,
        0, 0, 0, 0, 0, 10
    };

    float32_t F_values[6 * 6] = {
 80062bc:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80062c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80062c4:	4a5d      	ldr	r2, [pc, #372]	@ (800643c <init_kalman_filter_combined+0x1cc>)
 80062c6:	4618      	mov	r0, r3
 80062c8:	4611      	mov	r1, r2
 80062ca:	2390      	movs	r3, #144	@ 0x90
 80062cc:	461a      	mov	r2, r3
 80062ce:	f013 ffcc 	bl	801a26a <memcpy>
        0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 1
    };

    float32_t H_values[6 * 6] = {
 80062d2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80062d6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80062da:	4618      	mov	r0, r3
 80062dc:	2390      	movs	r3, #144	@ 0x90
 80062de:	461a      	mov	r2, r3
 80062e0:	2100      	movs	r1, #0
 80062e2:	f013 ff13 	bl	801a10c <memset>
 80062e6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80062ea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80062ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80062f8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80062fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006300:	61da      	str	r2, [r3, #28]
 8006302:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006306:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800630a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006310:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006314:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8006318:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800631c:	655a      	str	r2, [r3, #84]	@ 0x54
 800631e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006322:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8006326:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800632a:	671a      	str	r2, [r3, #112]	@ 0x70
 800632c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006330:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8006334:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 1
    };

    float32_t Q_values[6 * 6] = {
 800633c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006340:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006344:	4618      	mov	r0, r3
 8006346:	2390      	movs	r3, #144	@ 0x90
 8006348:	461a      	mov	r2, r3
 800634a:	2100      	movs	r1, #0
 800634c:	f013 fede 	bl	801a10c <memset>
 8006350:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006354:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006358:	4a39      	ldr	r2, [pc, #228]	@ (8006440 <init_kalman_filter_combined+0x1d0>)
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006360:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006364:	4a36      	ldr	r2, [pc, #216]	@ (8006440 <init_kalman_filter_combined+0x1d0>)
 8006366:	61da      	str	r2, [r3, #28]
 8006368:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800636c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006370:	4a33      	ldr	r2, [pc, #204]	@ (8006440 <init_kalman_filter_combined+0x1d0>)
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38
 8006374:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006378:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800637c:	4a2e      	ldr	r2, [pc, #184]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 800637e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006380:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006384:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006388:	4a2b      	ldr	r2, [pc, #172]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 800638a:	671a      	str	r2, [r3, #112]	@ 0x70
 800638c:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8006390:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8006394:	4a28      	ldr	r2, [pc, #160]	@ (8006438 <init_kalman_filter_combined+0x1c8>)
 8006396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        0, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 10, 0,
        0, 0, 0, 0, 0, 10
    };

    float32_t R_values[6 * 6] = {
 800639a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 800639e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063a2:	4618      	mov	r0, r3
 80063a4:	2390      	movs	r3, #144	@ 0x90
 80063a6:	461a      	mov	r2, r3
 80063a8:	2100      	movs	r1, #0
 80063aa:	f013 feaf 	bl	801a10c <memset>
 80063ae:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063b2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063b6:	4a23      	ldr	r2, [pc, #140]	@ (8006444 <init_kalman_filter_combined+0x1d4>)
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063be:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063c2:	4a20      	ldr	r2, [pc, #128]	@ (8006444 <init_kalman_filter_combined+0x1d4>)
 80063c4:	61da      	str	r2, [r3, #28]
 80063c6:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063ca:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006444 <init_kalman_filter_combined+0x1d4>)
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80063d2:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063d6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063da:	4a1b      	ldr	r2, [pc, #108]	@ (8006448 <init_kalman_filter_combined+0x1d8>)
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80063de:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063e2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063e6:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <init_kalman_filter_combined+0x1d8>)
 80063e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80063ea:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80063ee:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80063f2:	4a15      	ldr	r2, [pc, #84]	@ (8006448 <init_kalman_filter_combined+0x1d8>)
 80063f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        0, 0, 0, 10000, 0, 0,
        0, 0, 0, 0, 10000, 0,
        0, 0, 0, 0, 0, 10000
    };

    KalmanFilter* kf = create_kalman_filter(6, 6);
 80063f8:	2106      	movs	r1, #6
 80063fa:	2006      	movs	r0, #6
 80063fc:	f7ff fc42 	bl	8005c84 <create_kalman_filter>
 8006400:	f8c7 02ec 	str.w	r0, [r7, #748]	@ 0x2ec
    kalman_filter_init(kf, x_values, P_values, F_values, H_values, Q_values, R_values);
 8006404:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 8006408:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 800640c:	f507 7135 	add.w	r1, r7, #724	@ 0x2d4
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	4603      	mov	r3, r0
 8006422:	f8d7 02ec 	ldr.w	r0, [r7, #748]	@ 0x2ec
 8006426:	f7ff fcde 	bl	8005de6 <kalman_filter_init>
    return kf;
 800642a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
}
 800642e:	4618      	mov	r0, r3
 8006430:	f507 773c 	add.w	r7, r7, #752	@ 0x2f0
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	41200000 	.word	0x41200000
 800643c:	0801e2d0 	.word	0x0801e2d0
 8006440:	3dcccccd 	.word	0x3dcccccd
 8006444:	447a0000 	.word	0x447a0000
 8006448:	461c4000 	.word	0x461c4000

0800644c <init_kalman_filter_isbl>:
 * @return kf Pointer to combined Kalman filter struct
 *
 * This function houses the initial matrices for the acoustic positioning system-only KF.
 * It creates a Kalman filter struct with these matrices.
 */
KalmanFilter* init_kalman_filter_isbl() {
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8006452:	af04      	add	r7, sp, #16
    float32_t x_values[6] = {0, 0, 0, 0, 0, 0};
 8006454:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	609a      	str	r2, [r3, #8]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	611a      	str	r2, [r3, #16]
 8006464:	615a      	str	r2, [r3, #20]

    float32_t P_values[6 * 6] = {
 8006466:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800646a:	2290      	movs	r2, #144	@ 0x90
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f013 fe4c 	bl	801a10c <memset>
 8006474:	4b4b      	ldr	r3, [pc, #300]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 8006476:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800647a:	4b4a      	ldr	r3, [pc, #296]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 800647c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8006480:	4b48      	ldr	r3, [pc, #288]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 8006482:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006486:	4b47      	ldr	r3, [pc, #284]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 8006488:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800648c:	4b45      	ldr	r3, [pc, #276]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 800648e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8006492:	4b44      	ldr	r3, [pc, #272]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 8006494:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
        0, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 10, 0,
        0, 0, 0, 0, 0, 10
    };

    float32_t F_values[6 * 6] = {
 8006498:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800649c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80064a0:	4a41      	ldr	r2, [pc, #260]	@ (80065a8 <init_kalman_filter_isbl+0x15c>)
 80064a2:	4618      	mov	r0, r3
 80064a4:	4611      	mov	r1, r2
 80064a6:	2390      	movs	r3, #144	@ 0x90
 80064a8:	461a      	mov	r2, r3
 80064aa:	f013 fede 	bl	801a26a <memcpy>
        0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 1
    };

    float32_t H_values[3 * 6] = {
 80064ae:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80064b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80064b6:	4618      	mov	r0, r3
 80064b8:	2348      	movs	r3, #72	@ 0x48
 80064ba:	461a      	mov	r2, r3
 80064bc:	2100      	movs	r1, #0
 80064be:	f013 fe25 	bl	801a10c <memset>
 80064c2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80064c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80064ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80064d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80064d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064dc:	61da      	str	r2, [r3, #28]
 80064de:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80064e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80064e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064ea:	639a      	str	r2, [r3, #56]	@ 0x38
        1, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0
    };

    float32_t Q_values[6 * 6] = {
 80064ec:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80064f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80064f4:	4618      	mov	r0, r3
 80064f6:	2390      	movs	r3, #144	@ 0x90
 80064f8:	461a      	mov	r2, r3
 80064fa:	2100      	movs	r1, #0
 80064fc:	f013 fe06 	bl	801a10c <memset>
 8006500:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006504:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006508:	4a28      	ldr	r2, [pc, #160]	@ (80065ac <init_kalman_filter_isbl+0x160>)
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006510:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006514:	4a25      	ldr	r2, [pc, #148]	@ (80065ac <init_kalman_filter_isbl+0x160>)
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800651c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006520:	4a22      	ldr	r2, [pc, #136]	@ (80065ac <init_kalman_filter_isbl+0x160>)
 8006522:	639a      	str	r2, [r3, #56]	@ 0x38
 8006524:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006528:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800652c:	4a1d      	ldr	r2, [pc, #116]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 800652e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006530:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006534:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006538:	4a1a      	ldr	r2, [pc, #104]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 800653a:	671a      	str	r2, [r3, #112]	@ 0x70
 800653c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8006540:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <init_kalman_filter_isbl+0x158>)
 8006546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        0, 0, 0, 10, 0, 0,
        0, 0, 0, 0, 10, 0,
        0, 0, 0, 0, 0, 10
    };

    float32_t R_values[3 * 3] = {
 800654a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800654e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8006552:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <init_kalman_filter_isbl+0x164>)
 8006554:	461c      	mov	r4, r3
 8006556:	4615      	mov	r5, r2
 8006558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800655e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	6023      	str	r3, [r4, #0]
        1000, 0, 0,
        0, 1000, 0,
        0, 0, 1000
    };

    KalmanFilter* kf = create_kalman_filter(6, 3);
 8006564:	2103      	movs	r1, #3
 8006566:	2006      	movs	r0, #6
 8006568:	f7ff fb8c 	bl	8005c84 <create_kalman_filter>
 800656c:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
    kalman_filter_init(kf, x_values, P_values, F_values, H_values, Q_values, R_values);
 8006570:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8006574:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 8006578:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 800657c:	463b      	mov	r3, r7
 800657e:	9302      	str	r3, [sp, #8]
 8006580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4603      	mov	r3, r0
 800658e:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 8006592:	f7ff fc28 	bl	8005de6 <kalman_filter_init>
    return kf;
 8006596:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
}
 800659a:	4618      	mov	r0, r3
 800659c:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bdb0      	pop	{r4, r5, r7, pc}
 80065a4:	41200000 	.word	0x41200000
 80065a8:	0801e2d0 	.word	0x0801e2d0
 80065ac:	3dcccccd 	.word	0x3dcccccd
 80065b0:	0801e360 	.word	0x0801e360

080065b4 <update_kalman_matrices>:
 * This function updates the matrices for both Kalman filter structs to incorporate a non-constant delta_time.
 * The derivations for the Kalman filter matrices can be found in my thesis, but essentially some matrices have
 * state transition matrices and state-to-measurement matrices with a dt term. This allows for updating that term
 * (which is relatively constant, within 3-5 seconds usually).
 */
void update_kalman_matrices(KalmanFilter* kf_combined, KalmanFilter* kf_isbl, float32_t dt) {
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	ed87 0a01 	vstr	s0, [r7, #4]
    // Update F matrix for all KalmanFilters
    // Assuming F is a 6x6 matrix for all filters
    kf_combined->F_data[3] = dt;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	330c      	adds	r3, #12
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]
    kf_combined->F_data[10] = dt;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	3328      	adds	r3, #40	@ 0x28
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
    kf_combined->F_data[17] = dt;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	3344      	adds	r3, #68	@ 0x44
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]

    kf_isbl->F_data[3] = dt;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	330c      	adds	r3, #12
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
    kf_isbl->F_data[10] = dt;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	3328      	adds	r3, #40	@ 0x28
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
    kf_isbl->F_data[17] = dt;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	3344      	adds	r3, #68	@ 0x44
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]

    // Update H matrix for combined KF (6x6)
    kf_combined->H_data[21] = dt;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	3354      	adds	r3, #84	@ 0x54
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
    kf_combined->H_data[28] = dt;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	3370      	adds	r3, #112	@ 0x70
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
    kf_combined->H_data[35] = dt;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	338c      	adds	r3, #140	@ 0x8c
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	601a      	str	r2, [r3, #0]

    // No update needed for ISBL KF H matrix
}
 800661c:	bf00      	nop
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <receiveRobustFloat>:
 * @return status Status of reception
 *
 * This function implements a checksum and start/end characters to receive a float value over a poor UART connection.
 * In testing, the received message kept getting corrupted, and it was very important to have a good value sent.
 */
HAL_StatusTypeDef receiveRobustFloat(UART_HandleTypeDef *huart, float *result) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b09a      	sub	sp, #104	@ 0x68
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
    char buffer[MAX_MESSAGE_LENGTH] = {0};
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	f107 0310 	add.w	r3, r7, #16
 800663a:	222e      	movs	r2, #46	@ 0x2e
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f013 fd64 	bl	801a10c <memset>
    int bufferIndex = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	667b      	str	r3, [r7, #100]	@ 0x64
    int timeout = 2000;  // 1 second timeout
 8006648:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800664c:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t startTime = HAL_GetTick();
 800664e:	f000 fee7 	bl	8007420 <HAL_GetTick>
 8006652:	6578      	str	r0, [r7, #84]	@ 0x54
    HAL_StatusTypeDef status;
    char receivedChar;

    // clear any leftover data in the buffer
    while (HAL_UART_Receive(huart, (uint8_t*)&receivedChar, 1, 1) == HAL_OK) {
 8006654:	bf00      	nop
 8006656:	f107 010b 	add.w	r1, r7, #11
 800665a:	2301      	movs	r3, #1
 800665c:	2201      	movs	r2, #1
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f00c fae2 	bl	8012c28 <HAL_UART_Receive>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f5      	beq.n	8006656 <receiveRobustFloat+0x2e>
        // Do nothing, just empty the buffer
    }

    // wait for start marker
    do {
        status = HAL_UART_Receive(huart, (uint8_t*)&receivedChar, 1, timeout);
 800666a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666c:	f107 010b 	add.w	r1, r7, #11
 8006670:	2201      	movs	r2, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f00c fad8 	bl	8012c28 <HAL_UART_Receive>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (HAL_GetTick() - startTime > timeout) {
 800667e:	f000 fecf 	bl	8007420 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006686:	1ad2      	subs	r2, r2, r3
 8006688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668a:	429a      	cmp	r2, r3
 800668c:	d901      	bls.n	8006692 <receiveRobustFloat+0x6a>
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e07f      	b.n	8006792 <receiveRobustFloat+0x16a>
        }
    } while (status == HAL_OK && receivedChar != START_MARKER);
 8006692:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <receiveRobustFloat+0x78>
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	2b3c      	cmp	r3, #60	@ 0x3c
 800669e:	d1e4      	bne.n	800666a <receiveRobustFloat+0x42>

    // read until end marker
    do {
        status = HAL_UART_Receive(huart, (uint8_t*)&receivedChar, 1, timeout);
 80066a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066a2:	f107 010b 	add.w	r1, r7, #11
 80066a6:	2201      	movs	r2, #1
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f00c fabd 	bl	8012c28 <HAL_UART_Receive>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (status == HAL_OK && receivedChar != END_MARKER) {
 80066b4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10d      	bne.n	80066d8 <receiveRobustFloat+0xb0>
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	2b3e      	cmp	r3, #62	@ 0x3e
 80066c0:	d00a      	beq.n	80066d8 <receiveRobustFloat+0xb0>
            if (bufferIndex < MAX_MESSAGE_LENGTH - 1) {
 80066c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	dc07      	bgt.n	80066d8 <receiveRobustFloat+0xb0>
                buffer[bufferIndex++] = receivedChar;
 80066c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	667a      	str	r2, [r7, #100]	@ 0x64
 80066ce:	7afa      	ldrb	r2, [r7, #11]
 80066d0:	3368      	adds	r3, #104	@ 0x68
 80066d2:	443b      	add	r3, r7
 80066d4:	f803 2c5c 	strb.w	r2, [r3, #-92]
            }
        }
        if (HAL_GetTick() - startTime > timeout) {
 80066d8:	f000 fea2 	bl	8007420 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d901      	bls.n	80066ec <receiveRobustFloat+0xc4>
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e052      	b.n	8006792 <receiveRobustFloat+0x16a>
        }
    } while (status == HAL_OK && receivedChar != END_MARKER);
 80066ec:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <receiveRobustFloat+0xd2>
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80066f8:	d1d2      	bne.n	80066a0 <receiveRobustFloat+0x78>

    buffer[bufferIndex] = '\0';  // null-terminate the string
 80066fa:	f107 020c 	add.w	r2, r7, #12
 80066fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]

    // parse the message
    char *commaPos = strchr(buffer, ',');
 8006706:	f107 030c 	add.w	r3, r7, #12
 800670a:	212c      	movs	r1, #44	@ 0x2c
 800670c:	4618      	mov	r0, r3
 800670e:	f013 fd05 	bl	801a11c <strchr>
 8006712:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (commaPos == NULL) {
 8006714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <receiveRobustFloat+0xf6>
        return HAL_ERROR;  // no comma found, invalid format
 800671a:	2301      	movs	r3, #1
 800671c:	e039      	b.n	8006792 <receiveRobustFloat+0x16a>
    }

    *commaPos = '\0';  // split the string
 800671e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
    char *valueStr = buffer;
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	64bb      	str	r3, [r7, #72]	@ 0x48
    char *checksumStr = commaPos + 1;
 800672a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672c:	3301      	adds	r3, #1
 800672e:	647b      	str	r3, [r7, #68]	@ 0x44

    // calculate checksum
    int calculatedChecksum = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; valueStr[i] != '\0'; i++) {
 8006734:	2300      	movs	r3, #0
 8006736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006738:	e00a      	b.n	8006750 <receiveRobustFloat+0x128>
        calculatedChecksum += valueStr[i];
 800673a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800673c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800673e:	4413      	add	r3, r2
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006746:	4413      	add	r3, r2
 8006748:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; valueStr[i] != '\0'; i++) {
 800674a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800674c:	3301      	adds	r3, #1
 800674e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ee      	bne.n	800673a <receiveRobustFloat+0x112>
    }
    calculatedChecksum %= CHECKSUM_MODULUS;
 800675c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800675e:	425a      	negs	r2, r3
 8006760:	b2db      	uxtb	r3, r3
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	bf58      	it	pl
 8006766:	4253      	negpl	r3, r2
 8006768:	663b      	str	r3, [r7, #96]	@ 0x60

    // compare calculated and received checksum
    int receivedChecksum = atoi(checksumStr);
 800676a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800676c:	f011 fce0 	bl	8018130 <atoi>
 8006770:	6438      	str	r0, [r7, #64]	@ 0x40
    if (calculatedChecksum != receivedChecksum) {
 8006772:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006776:	429a      	cmp	r2, r3
 8006778:	d001      	beq.n	800677e <receiveRobustFloat+0x156>
        return HAL_ERROR;  // checksum mismatch
 800677a:	2301      	movs	r3, #1
 800677c:	e009      	b.n	8006792 <receiveRobustFloat+0x16a>
    }

    // parse the float value
    *result = strtof(valueStr, NULL);
 800677e:	2100      	movs	r1, #0
 8006780:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8006782:	f012 fb4d 	bl	8018e20 <strtof>
 8006786:	eef0 7a40 	vmov.f32	s15, s0
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3768      	adds	r7, #104	@ 0x68
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800679e:	2040      	movs	r0, #64	@ 0x40
 80067a0:	f006 fb11 	bl	800cdc6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80067a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80067a8:	f006 fb0d 	bl	800cdc6 <HAL_GPIO_EXTI_IRQHandler>
}
 80067ac:	bf00      	nop
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	80fb      	strh	r3, [r7, #6]
	if (imu_rdy){
 80067ba:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <HAL_GPIO_EXTI_Callback+0x44>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d014      	beq.n	80067ec <HAL_GPIO_EXTI_Callback+0x3c>
		if (GPIO_Pin == GPIO_PIN_8)
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c8:	d110      	bne.n	80067ec <HAL_GPIO_EXTI_Callback+0x3c>
		{
			lis3mdl_read_data_drdy_handler();
 80067ca:	f7fd f971 	bl	8003ab0 <lis3mdl_read_data_drdy_handler>
			lsm6dsox_read_data_drdy_handler();
 80067ce:	f7fc ff43 	bl	8003658 <lsm6dsox_read_data_drdy_handler>
			data_rdy = 1;
 80067d2:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_GPIO_EXTI_Callback+0x48>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
			if (imu_calibrated && !recording){
 80067d8:	4b08      	ldr	r3, [pc, #32]	@ (80067fc <HAL_GPIO_EXTI_Callback+0x4c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_GPIO_EXTI_Callback+0x3c>
 80067e0:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <HAL_GPIO_EXTI_Callback+0x50>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_GPIO_EXTI_Callback+0x3c>
				update_filter();
 80067e8:	f7fd fae2 	bl	8003db0 <update_filter>
			}
		}
	}
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	240007e5 	.word	0x240007e5
 80067f8:	240007e6 	.word	0x240007e6
 80067fc:	240007e7 	.word	0x240007e7
 8006800:	240007e8 	.word	0x240007e8

08006804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006808:	b672      	cpsid	i
}
 800680a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <Error_Handler+0x8>

08006810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006816:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_MspInit+0x30>)
 8006818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800681c:	4a08      	ldr	r2, [pc, #32]	@ (8006840 <HAL_MspInit+0x30>)
 800681e:	f043 0302 	orr.w	r3, r3, #2
 8006822:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006826:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_MspInit+0x30>)
 8006828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	58024400 	.word	0x58024400

08006844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08e      	sub	sp, #56	@ 0x38
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800684c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	609a      	str	r2, [r3, #8]
 8006858:	60da      	str	r2, [r3, #12]
 800685a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a74      	ldr	r2, [pc, #464]	@ (8006a34 <HAL_ADC_MspInit+0x1f0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 8087 	bne.w	8006976 <HAL_ADC_MspInit+0x132>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006868:	4b73      	ldr	r3, [pc, #460]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	4a72      	ldr	r2, [pc, #456]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 8006870:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006872:	4b71      	ldr	r3, [pc, #452]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d10e      	bne.n	8006898 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800687a:	4b70      	ldr	r3, [pc, #448]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 800687c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006880:	4a6e      	ldr	r2, [pc, #440]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 8006882:	f043 0320 	orr.w	r3, r3, #32
 8006886:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800688a:	4b6c      	ldr	r3, [pc, #432]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 800688c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006898:	4b68      	ldr	r3, [pc, #416]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 800689a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800689e:	4a67      	ldr	r2, [pc, #412]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80068a0:	f043 0304 	orr.w	r3, r3, #4
 80068a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068a8:	4b64      	ldr	r3, [pc, #400]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80068aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b6:	4b61      	ldr	r3, [pc, #388]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80068b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068bc:	4a5f      	ldr	r2, [pc, #380]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068c6:	4b5d      	ldr	r3, [pc, #372]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80068c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80068d4:	2301      	movs	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068d8:	2303      	movs	r3, #3
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068e4:	4619      	mov	r1, r3
 80068e6:	4856      	ldr	r0, [pc, #344]	@ (8006a40 <HAL_ADC_MspInit+0x1fc>)
 80068e8:	f006 f8ac 	bl	800ca44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80068ec:	2308      	movs	r3, #8
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068f0:	2303      	movs	r3, #3
 80068f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068fc:	4619      	mov	r1, r3
 80068fe:	4851      	ldr	r0, [pc, #324]	@ (8006a44 <HAL_ADC_MspInit+0x200>)
 8006900:	f006 f8a0 	bl	800ca44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8006904:	4b50      	ldr	r3, [pc, #320]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006906:	4a51      	ldr	r2, [pc, #324]	@ (8006a4c <HAL_ADC_MspInit+0x208>)
 8006908:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800690a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800690c:	2209      	movs	r2, #9
 800690e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006910:	4b4d      	ldr	r3, [pc, #308]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006916:	4b4c      	ldr	r3, [pc, #304]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006918:	2200      	movs	r2, #0
 800691a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800691c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800691e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006922:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006924:	4b48      	ldr	r3, [pc, #288]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006926:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800692a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800692c:	4b46      	ldr	r3, [pc, #280]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800692e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006932:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006934:	4b44      	ldr	r3, [pc, #272]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006936:	2200      	movs	r2, #0
 8006938:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800693a:	4b43      	ldr	r3, [pc, #268]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800693c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006940:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006942:	4b41      	ldr	r3, [pc, #260]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006944:	2200      	movs	r2, #0
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006948:	483f      	ldr	r0, [pc, #252]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800694a:	f003 f91f 	bl	8009b8c <HAL_DMA_Init>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8006954:	f7ff ff56 	bl	8006804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 800695c:	659a      	str	r2, [r3, #88]	@ 0x58
 800695e:	4a3a      	ldr	r2, [pc, #232]	@ (8006a48 <HAL_ADC_MspInit+0x204>)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	2012      	movs	r0, #18
 800696a:	f003 f8da 	bl	8009b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800696e:	2012      	movs	r0, #18
 8006970:	f003 f8f1 	bl	8009b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006974:	e05a      	b.n	8006a2c <HAL_ADC_MspInit+0x1e8>
  else if(hadc->Instance==ADC2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a35      	ldr	r2, [pc, #212]	@ (8006a50 <HAL_ADC_MspInit+0x20c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d155      	bne.n	8006a2c <HAL_ADC_MspInit+0x1e8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006980:	4b2d      	ldr	r3, [pc, #180]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a2c      	ldr	r2, [pc, #176]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 8006988:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800698a:	4b2b      	ldr	r3, [pc, #172]	@ (8006a38 <HAL_ADC_MspInit+0x1f4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d10e      	bne.n	80069b0 <HAL_ADC_MspInit+0x16c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006992:	4b2a      	ldr	r3, [pc, #168]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 8006994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006998:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 800699a:	f043 0320 	orr.w	r3, r3, #32
 800699e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80069a2:	4b26      	ldr	r3, [pc, #152]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b0:	4b22      	ldr	r3, [pc, #136]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b6:	4a21      	ldr	r2, [pc, #132]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069c0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ce:	4b1b      	ldr	r3, [pc, #108]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069d4:	4a19      	ldr	r2, [pc, #100]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069d6:	f043 0302 	orr.w	r3, r3, #2
 80069da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069de:	4b17      	ldr	r3, [pc, #92]	@ (8006a3c <HAL_ADC_MspInit+0x1f8>)
 80069e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80069ec:	2310      	movs	r3, #16
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069f0:	2303      	movs	r3, #3
 80069f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069fc:	4619      	mov	r1, r3
 80069fe:	4811      	ldr	r0, [pc, #68]	@ (8006a44 <HAL_ADC_MspInit+0x200>)
 8006a00:	f006 f820 	bl	800ca44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006a04:	2302      	movs	r3, #2
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a14:	4619      	mov	r1, r3
 8006a16:	480f      	ldr	r0, [pc, #60]	@ (8006a54 <HAL_ADC_MspInit+0x210>)
 8006a18:	f006 f814 	bl	800ca44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	2012      	movs	r0, #18
 8006a22:	f003 f87e 	bl	8009b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006a26:	2012      	movs	r0, #18
 8006a28:	f003 f895 	bl	8009b56 <HAL_NVIC_EnableIRQ>
}
 8006a2c:	bf00      	nop
 8006a2e:	3738      	adds	r7, #56	@ 0x38
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40022000 	.word	0x40022000
 8006a38:	24004b64 	.word	0x24004b64
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	58020800 	.word	0x58020800
 8006a44:	58020000 	.word	0x58020000
 8006a48:	240003e4 	.word	0x240003e4
 8006a4c:	40020010 	.word	0x40020010
 8006a50:	40022100 	.word	0x40022100
 8006a54:	58020400 	.word	0x58020400

08006a58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08e      	sub	sp, #56	@ 0x38
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a59      	ldr	r2, [pc, #356]	@ (8006bdc <HAL_ETH_MspInit+0x184>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	f040 80ab 	bne.w	8006bd2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006a7c:	4b58      	ldr	r3, [pc, #352]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a82:	4a57      	ldr	r2, [pc, #348]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a8c:	4b54      	ldr	r3, [pc, #336]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006a9a:	4b51      	ldr	r3, [pc, #324]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006ab8:	4b49      	ldr	r3, [pc, #292]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006abe:	4a48      	ldr	r2, [pc, #288]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006ac8:	4b45      	ldr	r3, [pc, #276]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad6:	4b42      	ldr	r3, [pc, #264]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006adc:	4a40      	ldr	r2, [pc, #256]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af4:	4b3a      	ldr	r3, [pc, #232]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006afa:	4a39      	ldr	r2, [pc, #228]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b04:	4b36      	ldr	r3, [pc, #216]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b12:	4b33      	ldr	r3, [pc, #204]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b18:	4a31      	ldr	r2, [pc, #196]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b1a:	f043 0302 	orr.w	r3, r3, #2
 8006b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b22:	4b2f      	ldr	r3, [pc, #188]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b30:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b36:	4a2a      	ldr	r2, [pc, #168]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b40:	4b27      	ldr	r3, [pc, #156]	@ (8006be0 <HAL_ETH_MspInit+0x188>)
 8006b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006b4e:	2332      	movs	r3, #50	@ 0x32
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b52:	2302      	movs	r3, #2
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b5e:	230b      	movs	r3, #11
 8006b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b66:	4619      	mov	r1, r3
 8006b68:	481e      	ldr	r0, [pc, #120]	@ (8006be4 <HAL_ETH_MspInit+0x18c>)
 8006b6a:	f005 ff6b 	bl	800ca44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006b6e:	2386      	movs	r3, #134	@ 0x86
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b72:	2302      	movs	r3, #2
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b7e:	230b      	movs	r3, #11
 8006b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b86:	4619      	mov	r1, r3
 8006b88:	4817      	ldr	r0, [pc, #92]	@ (8006be8 <HAL_ETH_MspInit+0x190>)
 8006b8a:	f005 ff5b 	bl	800ca44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b94:	2302      	movs	r3, #2
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ba0:	230b      	movs	r3, #11
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4810      	ldr	r0, [pc, #64]	@ (8006bec <HAL_ETH_MspInit+0x194>)
 8006bac:	f005 ff4a 	bl	800ca44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006bb0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006bc2:	230b      	movs	r3, #11
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4808      	ldr	r0, [pc, #32]	@ (8006bf0 <HAL_ETH_MspInit+0x198>)
 8006bce:	f005 ff39 	bl	800ca44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006bd2:	bf00      	nop
 8006bd4:	3738      	adds	r7, #56	@ 0x38
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40028000 	.word	0x40028000
 8006be0:	58024400 	.word	0x58024400
 8006be4:	58020800 	.word	0x58020800
 8006be8:	58020000 	.word	0x58020000
 8006bec:	58020400 	.word	0x58020400
 8006bf0:	58021800 	.word	0x58021800

08006bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0b8      	sub	sp, #224	@ 0xe0
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bfc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	605a      	str	r2, [r3, #4]
 8006c06:	609a      	str	r2, [r3, #8]
 8006c08:	60da      	str	r2, [r3, #12]
 8006c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	22b8      	movs	r2, #184	@ 0xb8
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f013 fa79 	bl	801a10c <memset>
  if(hi2c->Instance==I2C1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006cdc <HAL_I2C_MspInit+0xe8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d156      	bne.n	8006cd2 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006c24:	f04f 0208 	mov.w	r2, #8
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c36:	f107 0310 	add.w	r3, r7, #16
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f008 fd6a 	bl	800f714 <HAL_RCCEx_PeriphCLKConfig>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8006c46:	f7ff fddd 	bl	8006804 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4a:	4b25      	ldr	r3, [pc, #148]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c50:	4a23      	ldr	r2, [pc, #140]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006c52:	f043 0302 	orr.w	r3, r3, #2
 8006c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8006c68:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8006c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c70:	2312      	movs	r3, #18
 8006c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c82:	2304      	movs	r3, #4
 8006c84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4815      	ldr	r0, [pc, #84]	@ (8006ce4 <HAL_I2C_MspInit+0xf0>)
 8006c90:	f005 fed8 	bl	800ca44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c94:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c9a:	4a11      	ldr	r2, [pc, #68]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006c9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce0 <HAL_I2C_MspInit+0xec>)
 8006ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	201f      	movs	r0, #31
 8006cb8:	f002 ff33 	bl	8009b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006cbc:	201f      	movs	r0, #31
 8006cbe:	f002 ff4a 	bl	8009b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	2020      	movs	r0, #32
 8006cc8:	f002 ff2b 	bl	8009b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006ccc:	2020      	movs	r0, #32
 8006cce:	f002 ff42 	bl	8009b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006cd2:	bf00      	nop
 8006cd4:	37e0      	adds	r7, #224	@ 0xe0
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40005400 	.word	0x40005400
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	58020400 	.word	0x58020400

08006ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a23      	ldr	r2, [pc, #140]	@ (8006d84 <HAL_TIM_Base_MspInit+0x9c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d117      	bne.n	8006d2a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cfa:	4b23      	ldr	r3, [pc, #140]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d00:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d02:	f043 0302 	orr.w	r3, r3, #2
 8006d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	201d      	movs	r0, #29
 8006d1e:	f002 ff00 	bl	8009b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006d22:	201d      	movs	r0, #29
 8006d24:	f002 ff17 	bl	8009b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006d28:	e028      	b.n	8006d7c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM13)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <HAL_TIM_Base_MspInit+0xa4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10f      	bne.n	8006d54 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006d34:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d3a:	4a13      	ldr	r2, [pc, #76]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d44:	4b10      	ldr	r3, [pc, #64]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
}
 8006d52:	e013      	b.n	8006d7c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM14)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0d      	ldr	r2, [pc, #52]	@ (8006d90 <HAL_TIM_Base_MspInit+0xa8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d64:	4a08      	ldr	r2, [pc, #32]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d6e:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <HAL_TIM_Base_MspInit+0xa0>)
 8006d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40000400 	.word	0x40000400
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	40001c00 	.word	0x40001c00
 8006d90:	40002000 	.word	0x40002000

08006d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b0ba      	sub	sp, #232	@ 0xe8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006dac:	f107 0318 	add.w	r3, r7, #24
 8006db0:	22b8      	movs	r2, #184	@ 0xb8
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f013 f9a9 	bl	801a10c <memset>
  if(huart->Instance==UART4)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a63      	ldr	r2, [pc, #396]	@ (8006f4c <HAL_UART_MspInit+0x1b8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d146      	bne.n	8006e52 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006dc4:	f04f 0202 	mov.w	r2, #2
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f008 fc9a 	bl	800f714 <HAL_RCCEx_PeriphCLKConfig>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8006de6:	f7ff fd0d 	bl	8006804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006dea:	4b59      	ldr	r3, [pc, #356]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006df0:	4a57      	ldr	r2, [pc, #348]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006df2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006dfa:	4b55      	ldr	r3, [pc, #340]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e08:	4b51      	ldr	r3, [pc, #324]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e0e:	4a50      	ldr	r2, [pc, #320]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e10:	f043 0308 	orr.w	r3, r3, #8
 8006e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e18:	4b4d      	ldr	r3, [pc, #308]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e26:	2303      	movs	r3, #3
 8006e28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006e3e:	2308      	movs	r3, #8
 8006e40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4842      	ldr	r0, [pc, #264]	@ (8006f54 <HAL_UART_MspInit+0x1c0>)
 8006e4c:	f005 fdfa 	bl	800ca44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006e50:	e078      	b.n	8006f44 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a40      	ldr	r2, [pc, #256]	@ (8006f58 <HAL_UART_MspInit+0x1c4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d173      	bne.n	8006f44 <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e5c:	f04f 0202 	mov.w	r2, #2
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e6e:	f107 0318 	add.w	r3, r7, #24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f008 fc4e 	bl	800f714 <HAL_RCCEx_PeriphCLKConfig>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8006e7e:	f7ff fcc1 	bl	8006804 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e82:	4b33      	ldr	r3, [pc, #204]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e88:	4a31      	ldr	r2, [pc, #196]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006e92:	4b2f      	ldr	r3, [pc, #188]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006ea8:	f043 0308 	orr.w	r3, r3, #8
 8006eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006eb0:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <HAL_UART_MspInit+0x1bc>)
 8006eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8006ebe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ed8:	2307      	movs	r3, #7
 8006eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ede:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	481b      	ldr	r0, [pc, #108]	@ (8006f54 <HAL_UART_MspInit+0x1c0>)
 8006ee6:	f005 fdad 	bl	800ca44 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006eea:	4b1c      	ldr	r3, [pc, #112]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006eec:	4a1c      	ldr	r2, [pc, #112]	@ (8006f60 <HAL_UART_MspInit+0x1cc>)
 8006eee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006ef2:	222e      	movs	r2, #46	@ 0x2e
 8006ef4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ef6:	4b19      	ldr	r3, [pc, #100]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006ef8:	2240      	movs	r2, #64	@ 0x40
 8006efa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f02:	4b16      	ldr	r3, [pc, #88]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f0a:	4b14      	ldr	r3, [pc, #80]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f10:	4b12      	ldr	r3, [pc, #72]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006f16:	4b11      	ldr	r3, [pc, #68]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f22:	4b0e      	ldr	r3, [pc, #56]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006f28:	480c      	ldr	r0, [pc, #48]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f2a:	f002 fe2f 	bl	8009b8c <HAL_DMA_Init>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8006f34:	f7ff fc66 	bl	8006804 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a08      	ldr	r2, [pc, #32]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006f3e:	4a07      	ldr	r2, [pc, #28]	@ (8006f5c <HAL_UART_MspInit+0x1c8>)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006f44:	bf00      	nop
 8006f46:	37e8      	adds	r7, #232	@ 0xe8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40004c00 	.word	0x40004c00
 8006f50:	58024400 	.word	0x58024400
 8006f54:	58020c00 	.word	0x58020c00
 8006f58:	40004800 	.word	0x40004800
 8006f5c:	2400076c 	.word	0x2400076c
 8006f60:	40020040 	.word	0x40020040

08006f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <NMI_Handler+0x4>

08006f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <HardFault_Handler+0x4>

08006f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <MemManage_Handler+0x4>

08006f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f80:	bf00      	nop
 8006f82:	e7fd      	b.n	8006f80 <BusFault_Handler+0x4>

08006f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <UsageFault_Handler+0x4>

08006f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fba:	f000 fa1d 	bl	80073f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006fc8:	4802      	ldr	r0, [pc, #8]	@ (8006fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8006fca:	f003 fde7 	bl	800ab9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	240003e4 	.word	0x240003e4

08006fd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006fdc:	4802      	ldr	r0, [pc, #8]	@ (8006fe8 <DMA1_Stream2_IRQHandler+0x10>)
 8006fde:	f003 fddd 	bl	800ab9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006fe2:	bf00      	nop
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2400076c 	.word	0x2400076c

08006fec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006ff0:	4803      	ldr	r0, [pc, #12]	@ (8007000 <ADC_IRQHandler+0x14>)
 8006ff2:	f001 f801 	bl	8007ff8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006ff6:	4803      	ldr	r0, [pc, #12]	@ (8007004 <ADC_IRQHandler+0x18>)
 8006ff8:	f000 fffe 	bl	8007ff8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	24000304 	.word	0x24000304
 8007004:	24000374 	.word	0x24000374

08007008 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800700c:	4802      	ldr	r0, [pc, #8]	@ (8007018 <TIM3_IRQHandler+0x10>)
 800700e:	f00b f8f2 	bl	80121f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	24000560 	.word	0x24000560

0800701c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007020:	4802      	ldr	r0, [pc, #8]	@ (800702c <I2C1_EV_IRQHandler+0x10>)
 8007022:	f006 f9b5 	bl	800d390 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2400050c 	.word	0x2400050c

08007030 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007034:	4802      	ldr	r0, [pc, #8]	@ (8007040 <I2C1_ER_IRQHandler+0x10>)
 8007036:	f006 f9c5 	bl	800d3c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2400050c 	.word	0x2400050c

08007044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  return 1;
 8007048:	2301      	movs	r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <_kill>:

int _kill(int pid, int sig)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800705e:	f013 f8d7 	bl	801a210 <__errno>
 8007062:	4603      	mov	r3, r0
 8007064:	2216      	movs	r2, #22
 8007066:	601a      	str	r2, [r3, #0]
  return -1;
 8007068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <_exit>:

void _exit (int status)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800707c:	f04f 31ff 	mov.w	r1, #4294967295
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff ffe7 	bl	8007054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <_exit+0x12>

0800708a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e00a      	b.n	80070b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800709c:	f3af 8000 	nop.w
 80070a0:	4601      	mov	r1, r0
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	60ba      	str	r2, [r7, #8]
 80070a8:	b2ca      	uxtb	r2, r1
 80070aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3301      	adds	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	dbf0      	blt.n	800709c <_read+0x12>
  }

  return len;
 80070ba:	687b      	ldr	r3, [r7, #4]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e009      	b.n	80070ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	60ba      	str	r2, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	3301      	adds	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	dbf1      	blt.n	80070d6 <_write+0x12>
  }
  return len;
 80070f2:	687b      	ldr	r3, [r7, #4]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <_close>:

int _close(int file)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007124:	605a      	str	r2, [r3, #4]
  return 0;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <_isatty>:

int _isatty(int file)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800713c:	2301      	movs	r3, #1
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800716c:	4a14      	ldr	r2, [pc, #80]	@ (80071c0 <_sbrk+0x5c>)
 800716e:	4b15      	ldr	r3, [pc, #84]	@ (80071c4 <_sbrk+0x60>)
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007178:	4b13      	ldr	r3, [pc, #76]	@ (80071c8 <_sbrk+0x64>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007180:	4b11      	ldr	r3, [pc, #68]	@ (80071c8 <_sbrk+0x64>)
 8007182:	4a12      	ldr	r2, [pc, #72]	@ (80071cc <_sbrk+0x68>)
 8007184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007186:	4b10      	ldr	r3, [pc, #64]	@ (80071c8 <_sbrk+0x64>)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d207      	bcs.n	80071a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007194:	f013 f83c 	bl	801a210 <__errno>
 8007198:	4603      	mov	r3, r0
 800719a:	220c      	movs	r2, #12
 800719c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800719e:	f04f 33ff 	mov.w	r3, #4294967295
 80071a2:	e009      	b.n	80071b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071a4:	4b08      	ldr	r3, [pc, #32]	@ (80071c8 <_sbrk+0x64>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071aa:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <_sbrk+0x64>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	4a05      	ldr	r2, [pc, #20]	@ (80071c8 <_sbrk+0x64>)
 80071b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	24050000 	.word	0x24050000
 80071c4:	00000400 	.word	0x00000400
 80071c8:	24004b68 	.word	0x24004b68
 80071cc:	24004cc0 	.word	0x24004cc0

080071d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80071d4:	4b32      	ldr	r3, [pc, #200]	@ (80072a0 <SystemInit+0xd0>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071da:	4a31      	ldr	r2, [pc, #196]	@ (80072a0 <SystemInit+0xd0>)
 80071dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80071e4:	4b2f      	ldr	r3, [pc, #188]	@ (80072a4 <SystemInit+0xd4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d807      	bhi.n	8007200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80071f0:	4b2c      	ldr	r3, [pc, #176]	@ (80072a4 <SystemInit+0xd4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f023 030f 	bic.w	r3, r3, #15
 80071f8:	4a2a      	ldr	r2, [pc, #168]	@ (80072a4 <SystemInit+0xd4>)
 80071fa:	f043 0307 	orr.w	r3, r3, #7
 80071fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007200:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <SystemInit+0xd8>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a28      	ldr	r2, [pc, #160]	@ (80072a8 <SystemInit+0xd8>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800720c:	4b26      	ldr	r3, [pc, #152]	@ (80072a8 <SystemInit+0xd8>)
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007212:	4b25      	ldr	r3, [pc, #148]	@ (80072a8 <SystemInit+0xd8>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4924      	ldr	r1, [pc, #144]	@ (80072a8 <SystemInit+0xd8>)
 8007218:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <SystemInit+0xdc>)
 800721a:	4013      	ands	r3, r2
 800721c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800721e:	4b21      	ldr	r3, [pc, #132]	@ (80072a4 <SystemInit+0xd4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800722a:	4b1e      	ldr	r3, [pc, #120]	@ (80072a4 <SystemInit+0xd4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 030f 	bic.w	r3, r3, #15
 8007232:	4a1c      	ldr	r2, [pc, #112]	@ (80072a4 <SystemInit+0xd4>)
 8007234:	f043 0307 	orr.w	r3, r3, #7
 8007238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800723a:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <SystemInit+0xd8>)
 800723c:	2200      	movs	r2, #0
 800723e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007240:	4b19      	ldr	r3, [pc, #100]	@ (80072a8 <SystemInit+0xd8>)
 8007242:	2200      	movs	r2, #0
 8007244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007246:	4b18      	ldr	r3, [pc, #96]	@ (80072a8 <SystemInit+0xd8>)
 8007248:	2200      	movs	r2, #0
 800724a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800724c:	4b16      	ldr	r3, [pc, #88]	@ (80072a8 <SystemInit+0xd8>)
 800724e:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <SystemInit+0xe0>)
 8007250:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007252:	4b15      	ldr	r3, [pc, #84]	@ (80072a8 <SystemInit+0xd8>)
 8007254:	4a17      	ldr	r2, [pc, #92]	@ (80072b4 <SystemInit+0xe4>)
 8007256:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007258:	4b13      	ldr	r3, [pc, #76]	@ (80072a8 <SystemInit+0xd8>)
 800725a:	4a17      	ldr	r2, [pc, #92]	@ (80072b8 <SystemInit+0xe8>)
 800725c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800725e:	4b12      	ldr	r3, [pc, #72]	@ (80072a8 <SystemInit+0xd8>)
 8007260:	2200      	movs	r2, #0
 8007262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007264:	4b10      	ldr	r3, [pc, #64]	@ (80072a8 <SystemInit+0xd8>)
 8007266:	4a14      	ldr	r2, [pc, #80]	@ (80072b8 <SystemInit+0xe8>)
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800726a:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <SystemInit+0xd8>)
 800726c:	2200      	movs	r2, #0
 800726e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007270:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <SystemInit+0xd8>)
 8007272:	4a11      	ldr	r2, [pc, #68]	@ (80072b8 <SystemInit+0xe8>)
 8007274:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <SystemInit+0xd8>)
 8007278:	2200      	movs	r2, #0
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <SystemInit+0xd8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a09      	ldr	r2, [pc, #36]	@ (80072a8 <SystemInit+0xd8>)
 8007282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007288:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <SystemInit+0xd8>)
 800728a:	2200      	movs	r2, #0
 800728c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800728e:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <SystemInit+0xec>)
 8007290:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007294:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007296:	bf00      	nop
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	e000ed00 	.word	0xe000ed00
 80072a4:	52002000 	.word	0x52002000
 80072a8:	58024400 	.word	0x58024400
 80072ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80072b0:	02020200 	.word	0x02020200
 80072b4:	01ff0000 	.word	0x01ff0000
 80072b8:	01010280 	.word	0x01010280
 80072bc:	52004000 	.word	0x52004000

080072c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80072c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80072f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80072c4:	f7ff ff84 	bl	80071d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072c8:	480c      	ldr	r0, [pc, #48]	@ (80072fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80072ca:	490d      	ldr	r1, [pc, #52]	@ (8007300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80072cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80072ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072d0:	e002      	b.n	80072d8 <LoopCopyDataInit>

080072d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072d6:	3304      	adds	r3, #4

080072d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072dc:	d3f9      	bcc.n	80072d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072de:	4a0a      	ldr	r2, [pc, #40]	@ (8007308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80072e0:	4c0a      	ldr	r4, [pc, #40]	@ (800730c <LoopFillZerobss+0x22>)
  movs r3, #0
 80072e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072e4:	e001      	b.n	80072ea <LoopFillZerobss>

080072e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072e8:	3204      	adds	r2, #4

080072ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072ec:	d3fb      	bcc.n	80072e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072ee:	f012 ff95 	bl	801a21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072f2:	f7f9 fbe7 	bl	8000ac4 <main>
  bx  lr
 80072f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80072fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007300:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8007304:	0803c278 	.word	0x0803c278
  ldr r2, =_sbss
 8007308:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 800730c:	24004cbc 	.word	0x24004cbc

08007310 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007310:	e7fe      	b.n	8007310 <ADC3_IRQHandler>
	...

08007314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800731a:	2003      	movs	r0, #3
 800731c:	f002 fbf6 	bl	8009b0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007320:	f008 f822 	bl	800f368 <HAL_RCC_GetSysClockFreq>
 8007324:	4602      	mov	r2, r0
 8007326:	4b15      	ldr	r3, [pc, #84]	@ (800737c <HAL_Init+0x68>)
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	4913      	ldr	r1, [pc, #76]	@ (8007380 <HAL_Init+0x6c>)
 8007332:	5ccb      	ldrb	r3, [r1, r3]
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800733e:	4b0f      	ldr	r3, [pc, #60]	@ (800737c <HAL_Init+0x68>)
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	4a0e      	ldr	r2, [pc, #56]	@ (8007380 <HAL_Init+0x6c>)
 8007348:	5cd3      	ldrb	r3, [r2, r3]
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
 8007354:	4a0b      	ldr	r2, [pc, #44]	@ (8007384 <HAL_Init+0x70>)
 8007356:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007358:	4a0b      	ldr	r2, [pc, #44]	@ (8007388 <HAL_Init+0x74>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800735e:	2000      	movs	r0, #0
 8007360:	f000 f814 	bl	800738c <HAL_InitTick>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e002      	b.n	8007374 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800736e:	f7ff fa4f 	bl	8006810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	58024400 	.word	0x58024400
 8007380:	0801e384 	.word	0x0801e384
 8007384:	2400001c 	.word	0x2400001c
 8007388:	24000018 	.word	0x24000018

0800738c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007394:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <HAL_InitTick+0x60>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e021      	b.n	80073e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80073a0:	4b13      	ldr	r3, [pc, #76]	@ (80073f0 <HAL_InitTick+0x64>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4b11      	ldr	r3, [pc, #68]	@ (80073ec <HAL_InitTick+0x60>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	4619      	mov	r1, r3
 80073aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	4618      	mov	r0, r3
 80073b8:	f002 fbdb 	bl	8009b72 <HAL_SYSTICK_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e00e      	b.n	80073e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b0f      	cmp	r3, #15
 80073ca:	d80a      	bhi.n	80073e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073cc:	2200      	movs	r2, #0
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	f002 fba5 	bl	8009b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073d8:	4a06      	ldr	r2, [pc, #24]	@ (80073f4 <HAL_InitTick+0x68>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e000      	b.n	80073e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	24000024 	.word	0x24000024
 80073f0:	24000018 	.word	0x24000018
 80073f4:	24000020 	.word	0x24000020

080073f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <HAL_IncTick+0x20>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	4b06      	ldr	r3, [pc, #24]	@ (800741c <HAL_IncTick+0x24>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4413      	add	r3, r2
 8007408:	4a04      	ldr	r2, [pc, #16]	@ (800741c <HAL_IncTick+0x24>)
 800740a:	6013      	str	r3, [r2, #0]
}
 800740c:	bf00      	nop
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	24000024 	.word	0x24000024
 800741c:	24004b6c 	.word	0x24004b6c

08007420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  return uwTick;
 8007424:	4b03      	ldr	r3, [pc, #12]	@ (8007434 <HAL_GetTick+0x14>)
 8007426:	681b      	ldr	r3, [r3, #0]
}
 8007428:	4618      	mov	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	24004b6c 	.word	0x24004b6c

08007438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007440:	f7ff ffee 	bl	8007420 <HAL_GetTick>
 8007444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d005      	beq.n	800745e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007452:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <HAL_Delay+0x44>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800745e:	bf00      	nop
 8007460:	f7ff ffde 	bl	8007420 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d8f7      	bhi.n	8007460 <HAL_Delay+0x28>
  {
  }
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	24000024 	.word	0x24000024

08007480 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007488:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8007490:	4904      	ldr	r1, [pc, #16]	@ (80074a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4313      	orrs	r3, r2
 8007496:	604b      	str	r3, [r1, #4]
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	58000400 	.word	0x58000400

080074a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	609a      	str	r2, [r3, #8]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	609a      	str	r2, [r3, #8]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3360      	adds	r3, #96	@ 0x60
 8007522:	461a      	mov	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a10      	ldr	r2, [pc, #64]	@ (8007570 <LL_ADC_SetOffset+0x60>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d10b      	bne.n	800754c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	4313      	orrs	r3, r2
 8007542:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800754a:	e00b      	b.n	8007564 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	430b      	orrs	r3, r1
 800755e:	431a      	orrs	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	58026000 	.word	0x58026000

08007574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3360      	adds	r3, #96	@ 0x60
 8007582:	461a      	mov	r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	431a      	orrs	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	611a      	str	r2, [r3, #16]
}
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007614 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00e      	beq.n	8007606 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3360      	adds	r3, #96	@ 0x60
 80075ec:	461a      	mov	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	431a      	orrs	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	601a      	str	r2, [r3, #0]
  }
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	58026000 	.word	0x58026000

08007618 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a0c      	ldr	r2, [pc, #48]	@ (8007658 <LL_ADC_SetOffsetSaturation+0x40>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d10e      	bne.n	800764a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3360      	adds	r3, #96	@ 0x60
 8007630:	461a      	mov	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	431a      	orrs	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800764a:	bf00      	nop
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	58026000 	.word	0x58026000

0800765c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a0c      	ldr	r2, [pc, #48]	@ (800769c <LL_ADC_SetOffsetSign+0x40>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10e      	bne.n	800768e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3360      	adds	r3, #96	@ 0x60
 8007674:	461a      	mov	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	431a      	orrs	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	58026000 	.word	0x58026000

080076a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3360      	adds	r3, #96	@ 0x60
 80076b0:	461a      	mov	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <LL_ADC_SetOffsetState+0x50>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d108      	bne.n	80076d4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80076d2:	e007      	b.n	80076e4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	431a      	orrs	r2, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	58026000 	.word	0x58026000

080076f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800771a:	b480      	push	{r7}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3330      	adds	r3, #48	@ 0x30
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	4413      	add	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	211f      	movs	r1, #31
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	401a      	ands	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	0e9b      	lsrs	r3, r3, #26
 8007752:	f003 011f 	and.w	r1, r3, #31
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	431a      	orrs	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3314      	adds	r3, #20
 80077a8:	461a      	mov	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	0e5b      	lsrs	r3, r3, #25
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	4413      	add	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	0d1b      	lsrs	r3, r3, #20
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2107      	movs	r1, #7
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	43db      	mvns	r3, r3
 80077cc:	401a      	ands	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	0d1b      	lsrs	r3, r3, #20
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	431a      	orrs	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007868 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d115      	bne.n	8007830 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007810:	43db      	mvns	r3, r3
 8007812:	401a      	ands	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0318 	and.w	r3, r3, #24
 800781a:	4914      	ldr	r1, [pc, #80]	@ (800786c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800781c:	40d9      	lsrs	r1, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	400b      	ands	r3, r1
 8007822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800782e:	e014      	b.n	800785a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800783c:	43db      	mvns	r3, r3
 800783e:	401a      	ands	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0318 	and.w	r3, r3, #24
 8007846:	4909      	ldr	r1, [pc, #36]	@ (800786c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007848:	40d9      	lsrs	r1, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	400b      	ands	r3, r1
 800784e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	58026000 	.word	0x58026000
 800786c:	000fffff 	.word	0x000fffff

08007870 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 031f 	and.w	r3, r3, #31
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6093      	str	r3, [r2, #8]
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	5fffffc0 	.word	0x5fffffc0

080078cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e0:	d101      	bne.n	80078e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <LL_ADC_EnableInternalRegulator+0x24>)
 8007902:	4013      	ands	r3, r2
 8007904:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	6fffffc0 	.word	0x6fffffc0

0800791c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007930:	d101      	bne.n	8007936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <LL_ADC_Enable+0x24>)
 8007952:	4013      	ands	r3, r2
 8007954:	f043 0201 	orr.w	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	7fffffc0 	.word	0x7fffffc0

0800796c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <LL_ADC_Disable+0x24>)
 800797a:	4013      	ands	r3, r2
 800797c:	f043 0202 	orr.w	r2, r3, #2
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	7fffffc0 	.word	0x7fffffc0

08007994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <LL_ADC_IsEnabled+0x18>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <LL_ADC_IsEnabled+0x1a>
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d101      	bne.n	80079d2 <LL_ADC_IsDisableOngoing+0x18>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <LL_ADC_IsDisableOngoing+0x1a>
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <LL_ADC_REG_StartConversion+0x24>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	f043 0204 	orr.w	r2, r3, #4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	7fffffc0 	.word	0x7fffffc0

08007a08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d101      	bne.n	8007a20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d101      	bne.n	8007a46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007a54:	b590      	push	{r4, r7, lr}
 8007a56:	b089      	sub	sp, #36	@ 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e1ee      	b.n	8007e4c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe fee1 	bl	8006844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff ff19 	bl	80078cc <LL_ADC_IsDeepPowerDownEnabled>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff feff 	bl	80078a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff ff34 	bl	800791c <LL_ADC_IsInternalRegulatorEnabled>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d114      	bne.n	8007ae4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff ff18 	bl	80078f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007ac4:	4b8e      	ldr	r3, [pc, #568]	@ (8007d00 <HAL_ADC_Init+0x2ac>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	099b      	lsrs	r3, r3, #6
 8007aca:	4a8e      	ldr	r2, [pc, #568]	@ (8007d04 <HAL_ADC_Init+0x2b0>)
 8007acc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad0:	099b      	lsrs	r3, r3, #6
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007ad6:	e002      	b.n	8007ade <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f9      	bne.n	8007ad8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ff17 	bl	800791c <LL_ADC_IsInternalRegulatorEnabled>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10d      	bne.n	8007b10 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af8:	f043 0210 	orr.w	r2, r3, #16
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b04:	f043 0201 	orr.w	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff ff77 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 8007b1a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 8188 	bne.w	8007e3a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 8184 	bne.w	8007e3a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007b3a:	f043 0202 	orr.w	r2, r3, #2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ff24 	bl	8007994 <LL_ADC_IsEnabled>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d136      	bne.n	8007bc0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a6c      	ldr	r2, [pc, #432]	@ (8007d08 <HAL_ADC_Init+0x2b4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <HAL_ADC_Init+0x112>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a6a      	ldr	r2, [pc, #424]	@ (8007d0c <HAL_ADC_Init+0x2b8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d10e      	bne.n	8007b84 <HAL_ADC_Init+0x130>
 8007b66:	4868      	ldr	r0, [pc, #416]	@ (8007d08 <HAL_ADC_Init+0x2b4>)
 8007b68:	f7ff ff14 	bl	8007994 <LL_ADC_IsEnabled>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4867      	ldr	r0, [pc, #412]	@ (8007d0c <HAL_ADC_Init+0x2b8>)
 8007b70:	f7ff ff10 	bl	8007994 <LL_ADC_IsEnabled>
 8007b74:	4603      	mov	r3, r0
 8007b76:	4323      	orrs	r3, r4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2301      	moveq	r3, #1
 8007b7e:	2300      	movne	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	e008      	b.n	8007b96 <HAL_ADC_Init+0x142>
 8007b84:	4862      	ldr	r0, [pc, #392]	@ (8007d10 <HAL_ADC_Init+0x2bc>)
 8007b86:	f7ff ff05 	bl	8007994 <LL_ADC_IsEnabled>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d012      	beq.n	8007bc0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8007d08 <HAL_ADC_Init+0x2b4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_ADC_Init+0x15a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a58      	ldr	r2, [pc, #352]	@ (8007d0c <HAL_ADC_Init+0x2b8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <HAL_ADC_Init+0x15e>
 8007bae:	4a59      	ldr	r2, [pc, #356]	@ (8007d14 <HAL_ADC_Init+0x2c0>)
 8007bb0:	e000      	b.n	8007bb4 <HAL_ADC_Init+0x160>
 8007bb2:	4a59      	ldr	r2, [pc, #356]	@ (8007d18 <HAL_ADC_Init+0x2c4>)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7ff fc74 	bl	80074a8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a52      	ldr	r2, [pc, #328]	@ (8007d10 <HAL_ADC_Init+0x2bc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d129      	bne.n	8007c1e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7e5b      	ldrb	r3, [r3, #25]
 8007bce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007bd4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007bda:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d013      	beq.n	8007c0c <HAL_ADC_Init+0x1b8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	2b0c      	cmp	r3, #12
 8007bea:	d00d      	beq.n	8007c08 <HAL_ADC_Init+0x1b4>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b1c      	cmp	r3, #28
 8007bf2:	d007      	beq.n	8007c04 <HAL_ADC_Init+0x1b0>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b18      	cmp	r3, #24
 8007bfa:	d101      	bne.n	8007c00 <HAL_ADC_Init+0x1ac>
 8007bfc:	2318      	movs	r3, #24
 8007bfe:	e006      	b.n	8007c0e <HAL_ADC_Init+0x1ba>
 8007c00:	2300      	movs	r3, #0
 8007c02:	e004      	b.n	8007c0e <HAL_ADC_Init+0x1ba>
 8007c04:	2310      	movs	r3, #16
 8007c06:	e002      	b.n	8007c0e <HAL_ADC_Init+0x1ba>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	e000      	b.n	8007c0e <HAL_ADC_Init+0x1ba>
 8007c0c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007c0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	e00e      	b.n	8007c3c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7e5b      	ldrb	r3, [r3, #25]
 8007c22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007c28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007c2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d106      	bne.n	8007c54 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	045b      	lsls	r3, r3, #17
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a26      	ldr	r2, [pc, #152]	@ (8007d10 <HAL_ADC_Init+0x2bc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d115      	bne.n	8007ca6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <HAL_ADC_Init+0x2c8>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	69b9      	ldr	r1, [r7, #24]
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	611a      	str	r2, [r3, #16]
 8007ca4:	e009      	b.n	8007cba <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	4b1c      	ldr	r3, [pc, #112]	@ (8007d20 <HAL_ADC_Init+0x2cc>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fea2 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 8007cc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff feaf 	bl	8007a2e <LL_ADC_INJ_IsConversionOngoing>
 8007cd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f040 808e 	bne.w	8007df6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 808a 	bne.w	8007df6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8007d10 <HAL_ADC_Init+0x2bc>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d11b      	bne.n	8007d24 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7e1b      	ldrb	r3, [r3, #24]
 8007cf0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007cf8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	e018      	b.n	8007d32 <HAL_ADC_Init+0x2de>
 8007d00:	24000018 	.word	0x24000018
 8007d04:	053e2d63 	.word	0x053e2d63
 8007d08:	40022000 	.word	0x40022000
 8007d0c:	40022100 	.word	0x40022100
 8007d10:	58026000 	.word	0x58026000
 8007d14:	40022300 	.word	0x40022300
 8007d18:	58026300 	.word	0x58026300
 8007d1c:	fff04007 	.word	0xfff04007
 8007d20:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	7e1b      	ldrb	r3, [r3, #24]
 8007d28:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	4b46      	ldr	r3, [pc, #280]	@ (8007e54 <HAL_ADC_Init+0x400>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	69b9      	ldr	r1, [r7, #24]
 8007d42:	430b      	orrs	r3, r1
 8007d44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d137      	bne.n	8007dc0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d54:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e58 <HAL_ADC_Init+0x404>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d116      	bne.n	8007d8e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	4b3d      	ldr	r3, [pc, #244]	@ (8007e5c <HAL_ADC_Init+0x408>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007d72:	4311      	orrs	r1, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d78:	4311      	orrs	r1, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	611a      	str	r2, [r3, #16]
 8007d8c:	e020      	b.n	8007dd0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	4b32      	ldr	r3, [pc, #200]	@ (8007e60 <HAL_ADC_Init+0x40c>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d9c:	3a01      	subs	r2, #1
 8007d9e:	0411      	lsls	r1, r2, #16
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007da4:	4311      	orrs	r1, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007daa:	4311      	orrs	r1, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007db0:	430a      	orrs	r2, r1
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	611a      	str	r2, [r3, #16]
 8007dbe:	e007      	b.n	8007dd0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1b      	ldr	r2, [pc, #108]	@ (8007e58 <HAL_ADC_Init+0x404>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d002      	beq.n	8007df6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fa07 	bl	8009204 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d10c      	bne.n	8007e18 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	f023 010f 	bic.w	r1, r3, #15
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e16:	e007      	b.n	8007e28 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 020f 	bic.w	r2, r2, #15
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	f043 0201 	orr.w	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	661a      	str	r2, [r3, #96]	@ 0x60
 8007e38:	e007      	b.n	8007e4a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e3e:	f043 0210 	orr.w	r2, r3, #16
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3724      	adds	r7, #36	@ 0x24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd90      	pop	{r4, r7, pc}
 8007e54:	ffffbffc 	.word	0xffffbffc
 8007e58:	58026000 	.word	0x58026000
 8007e5c:	fc00f81f 	.word	0xfc00f81f
 8007e60:	fc00f81e 	.word	0xfc00f81e

08007e64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5c      	ldr	r2, [pc, #368]	@ (8007fe4 <HAL_ADC_Start+0x180>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_ADC_Start+0x1c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8007fe8 <HAL_ADC_Start+0x184>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d101      	bne.n	8007e84 <HAL_ADC_Start+0x20>
 8007e80:	4b5a      	ldr	r3, [pc, #360]	@ (8007fec <HAL_ADC_Start+0x188>)
 8007e82:	e000      	b.n	8007e86 <HAL_ADC_Start+0x22>
 8007e84:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff0 <HAL_ADC_Start+0x18c>)
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fcf2 	bl	8007870 <LL_ADC_GetMultimode>
 8007e8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fdb8 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 809a 	bne.w	8007fd4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_ADC_Start+0x4a>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e095      	b.n	8007fda <HAL_ADC_Start+0x176>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f826 	bl	8008f08 <ADC_Enable>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 8081 	bne.w	8007fca <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ecc:	4b49      	ldr	r3, [pc, #292]	@ (8007ff4 <HAL_ADC_Start+0x190>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a42      	ldr	r2, [pc, #264]	@ (8007fe8 <HAL_ADC_Start+0x184>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d002      	beq.n	8007ee8 <HAL_ADC_Start+0x84>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	e000      	b.n	8007eea <HAL_ADC_Start+0x86>
 8007ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe4 <HAL_ADC_Start+0x180>)
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d002      	beq.n	8007ef8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d105      	bne.n	8007f04 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007efc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f10:	d106      	bne.n	8007f20 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f16:	f023 0206 	bic.w	r2, r3, #6
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	665a      	str	r2, [r3, #100]	@ 0x64
 8007f1e:	e002      	b.n	8007f26 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	221c      	movs	r2, #28
 8007f2c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe8 <HAL_ADC_Start+0x184>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d002      	beq.n	8007f46 <HAL_ADC_Start+0xe2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	e000      	b.n	8007f48 <HAL_ADC_Start+0xe4>
 8007f46:	4b27      	ldr	r3, [pc, #156]	@ (8007fe4 <HAL_ADC_Start+0x180>)
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d008      	beq.n	8007f62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	d002      	beq.n	8007f62 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d114      	bne.n	8007f8c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007f78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fd2b 	bl	80079e0 <LL_ADC_REG_StartConversion>
 8007f8a:	e025      	b.n	8007fd8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a12      	ldr	r2, [pc, #72]	@ (8007fe8 <HAL_ADC_Start+0x184>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d002      	beq.n	8007fa8 <HAL_ADC_Start+0x144>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	e000      	b.n	8007faa <HAL_ADC_Start+0x146>
 8007fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe4 <HAL_ADC_Start+0x180>)
 8007faa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00f      	beq.n	8007fd8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007fc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	661a      	str	r2, [r3, #96]	@ 0x60
 8007fc8:	e006      	b.n	8007fd8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007fd2:	e001      	b.n	8007fd8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40022000 	.word	0x40022000
 8007fe8:	40022100 	.word	0x40022100
 8007fec:	40022300 	.word	0x40022300
 8007ff0:	58026300 	.word	0x58026300
 8007ff4:	fffff0fe 	.word	0xfffff0fe

08007ff8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	@ 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008000:	2300      	movs	r3, #0
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a87      	ldr	r2, [pc, #540]	@ (8008238 <HAL_ADC_IRQHandler+0x240>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_ADC_IRQHandler+0x30>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a86      	ldr	r2, [pc, #536]	@ (800823c <HAL_ADC_IRQHandler+0x244>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d101      	bne.n	800802c <HAL_ADC_IRQHandler+0x34>
 8008028:	4b85      	ldr	r3, [pc, #532]	@ (8008240 <HAL_ADC_IRQHandler+0x248>)
 800802a:	e000      	b.n	800802e <HAL_ADC_IRQHandler+0x36>
 800802c:	4b85      	ldr	r3, [pc, #532]	@ (8008244 <HAL_ADC_IRQHandler+0x24c>)
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fc1e 	bl	8007870 <LL_ADC_GetMultimode>
 8008034:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <HAL_ADC_IRQHandler+0x78>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800805a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fb96 	bl	8009794 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2202      	movs	r2, #2
 800806e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <HAL_ADC_IRQHandler+0x8c>
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8083 	beq.w	8008196 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d07d      	beq.n	8008196 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fb1c 	bl	80076f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d062      	beq.n	8008188 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a5d      	ldr	r2, [pc, #372]	@ (800823c <HAL_ADC_IRQHandler+0x244>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d002      	beq.n	80080d2 <HAL_ADC_IRQHandler+0xda>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	e000      	b.n	80080d4 <HAL_ADC_IRQHandler+0xdc>
 80080d2:	4b59      	ldr	r3, [pc, #356]	@ (8008238 <HAL_ADC_IRQHandler+0x240>)
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	4293      	cmp	r3, r2
 80080da:	d008      	beq.n	80080ee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b05      	cmp	r3, #5
 80080e6:	d002      	beq.n	80080ee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d104      	bne.n	80080f8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	e00c      	b.n	8008112 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a4f      	ldr	r2, [pc, #316]	@ (800823c <HAL_ADC_IRQHandler+0x244>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d002      	beq.n	8008108 <HAL_ADC_IRQHandler+0x110>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	e000      	b.n	800810a <HAL_ADC_IRQHandler+0x112>
 8008108:	4b4b      	ldr	r3, [pc, #300]	@ (8008238 <HAL_ADC_IRQHandler+0x240>)
 800810a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d135      	bne.n	8008188 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b08      	cmp	r3, #8
 8008128:	d12e      	bne.n	8008188 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fc6a 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d11a      	bne.n	8008170 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 020c 	bic.w	r2, r2, #12
 8008148:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800815a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d112      	bne.n	8008188 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008166:	f043 0201 	orr.w	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	661a      	str	r2, [r3, #96]	@ 0x60
 800816e:	e00b      	b.n	8008188 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008174:	f043 0210 	orr.w	r2, r3, #16
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008180:	f043 0201 	orr.w	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7fa fa79 	bl	8002680 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	220c      	movs	r2, #12
 8008194:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <HAL_ADC_IRQHandler+0x1b2>
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80a0 	beq.w	80082f6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 809a 	beq.w	80082f6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fac7 	bl	8007772 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80081e4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fa82 	bl	80076f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80081f0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a11      	ldr	r2, [pc, #68]	@ (800823c <HAL_ADC_IRQHandler+0x244>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d002      	beq.n	8008202 <HAL_ADC_IRQHandler+0x20a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	e000      	b.n	8008204 <HAL_ADC_IRQHandler+0x20c>
 8008202:	4b0d      	ldr	r3, [pc, #52]	@ (8008238 <HAL_ADC_IRQHandler+0x240>)
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	4293      	cmp	r3, r2
 800820a:	d008      	beq.n	800821e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b06      	cmp	r3, #6
 8008216:	d002      	beq.n	800821e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2b07      	cmp	r3, #7
 800821c:	d104      	bne.n	8008228 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	623b      	str	r3, [r7, #32]
 8008226:	e014      	b.n	8008252 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a03      	ldr	r2, [pc, #12]	@ (800823c <HAL_ADC_IRQHandler+0x244>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00a      	beq.n	8008248 <HAL_ADC_IRQHandler+0x250>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	e008      	b.n	800824a <HAL_ADC_IRQHandler+0x252>
 8008238:	40022000 	.word	0x40022000
 800823c:	40022100 	.word	0x40022100
 8008240:	40022300 	.word	0x40022300
 8008244:	58026300 	.word	0x58026300
 8008248:	4b84      	ldr	r3, [pc, #528]	@ (800845c <HAL_ADC_IRQHandler+0x464>)
 800824a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d047      	beq.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_ADC_IRQHandler+0x27a>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d03f      	beq.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800826e:	2b00      	cmp	r3, #0
 8008270:	d13a      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	d133      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d12e      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fbcd 	bl	8007a2e <LL_ADC_INJ_IsConversionOngoing>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11a      	bne.n	80082d0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80082a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d112      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082c6:	f043 0201 	orr.w	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80082ce:	e00b      	b.n	80082e8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d4:	f043 0210 	orr.w	r2, r3, #16
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e0:	f043 0201 	orr.w	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fa2b 	bl	8009744 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2260      	movs	r2, #96	@ 0x60
 80082f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <HAL_ADC_IRQHandler+0x32c>
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8b2 	bl	8008480 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2280      	movs	r2, #128	@ 0x80
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800832a:	2b00      	cmp	r3, #0
 800832c:	d012      	beq.n	8008354 <HAL_ADC_IRQHandler+0x35c>
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00d      	beq.n	8008354 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800833c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fa11 	bl	800976c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008352:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800835a:	2b00      	cmp	r3, #0
 800835c:	d012      	beq.n	8008384 <HAL_ADC_IRQHandler+0x38c>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00d      	beq.n	8008384 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fa03 	bl	8009780 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008382:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	f003 0310 	and.w	r3, r3, #16
 800838a:	2b00      	cmp	r3, #0
 800838c:	d043      	beq.n	8008416 <HAL_ADC_IRQHandler+0x41e>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d03e      	beq.n	8008416 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80083a0:	2301      	movs	r3, #1
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a4:	e021      	b.n	80083ea <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d015      	beq.n	80083d8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	@ (800845c <HAL_ADC_IRQHandler+0x464>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d004      	beq.n	80083c0 <HAL_ADC_IRQHandler+0x3c8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a29      	ldr	r2, [pc, #164]	@ (8008460 <HAL_ADC_IRQHandler+0x468>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <HAL_ADC_IRQHandler+0x3cc>
 80083c0:	4b28      	ldr	r3, [pc, #160]	@ (8008464 <HAL_ADC_IRQHandler+0x46c>)
 80083c2:	e000      	b.n	80083c6 <HAL_ADC_IRQHandler+0x3ce>
 80083c4:	4b28      	ldr	r3, [pc, #160]	@ (8008468 <HAL_ADC_IRQHandler+0x470>)
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fa60 	bl	800788c <LL_ADC_GetMultiDMATransfer>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00b      	beq.n	80083ea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80083d2:	2301      	movs	r3, #1
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083d6:	e008      	b.n	80083ea <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80083e6:	2301      	movs	r3, #1
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d10e      	bne.n	800840e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008400:	f043 0202 	orr.w	r2, r3, #2
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f843 	bl	8008494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2210      	movs	r2, #16
 8008414:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800841c:	2b00      	cmp	r3, #0
 800841e:	d018      	beq.n	8008452 <HAL_ADC_IRQHandler+0x45a>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008426:	2b00      	cmp	r3, #0
 8008428:	d013      	beq.n	8008452 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800842e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843a:	f043 0208 	orr.w	r2, r3, #8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800844a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 f983 	bl	8009758 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008452:	bf00      	nop
 8008454:	3728      	adds	r7, #40	@ 0x28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	40022000 	.word	0x40022000
 8008460:	40022100 	.word	0x40022100
 8008464:	40022300 	.word	0x40022300
 8008468:	58026300 	.word	0x58026300

0800846c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b0b9      	sub	sp, #228	@ 0xe4
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084c2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4aab      	ldr	r2, [pc, #684]	@ (8008778 <HAL_ADC_ConfigChannel+0x2d0>)
 80084ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d102      	bne.n	80084dc <HAL_ADC_ConfigChannel+0x34>
 80084d6:	2302      	movs	r3, #2
 80084d8:	f000 bcfe 	b.w	8008ed8 <HAL_ADC_ConfigChannel+0xa30>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fa8d 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 84e2 	bne.w	8008eba <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db38      	blt.n	8008570 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a9e      	ldr	r2, [pc, #632]	@ (800877c <HAL_ADC_ConfigChannel+0x2d4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d033      	beq.n	8008570 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008510:	2b00      	cmp	r3, #0
 8008512:	d108      	bne.n	8008526 <HAL_ADC_ConfigChannel+0x7e>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	0e9b      	lsrs	r3, r3, #26
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	2201      	movs	r2, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	e01d      	b.n	8008562 <HAL_ADC_ConfigChannel+0xba>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008532:	fa93 f3a3 	rbit	r3, r3
 8008536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800853a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800853e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800854a:	2320      	movs	r3, #32
 800854c:	e004      	b.n	8008558 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008552:	fab3 f383 	clz	r3, r3
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 031f 	and.w	r3, r3, #31
 800855c:	2201      	movs	r2, #1
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	69d1      	ldr	r1, [r2, #28]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	430b      	orrs	r3, r1
 800856e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	6859      	ldr	r1, [r3, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	f7ff f8cc 	bl	800771a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fa3e 	bl	8007a08 <LL_ADC_REG_IsConversionOngoing>
 800858c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fa4a 	bl	8007a2e <LL_ADC_INJ_IsConversionOngoing>
 800859a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800859e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 8270 	bne.w	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80085a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 826b 	bne.w	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7ff f8ea 	bl	8007798 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a6c      	ldr	r2, [pc, #432]	@ (800877c <HAL_ADC_ConfigChannel+0x2d4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d10d      	bne.n	80085ea <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695a      	ldr	r2, [r3, #20]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	08db      	lsrs	r3, r3, #3
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085e8:	e032      	b.n	8008650 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80085ea:	4b65      	ldr	r3, [pc, #404]	@ (8008780 <HAL_ADC_ConfigChannel+0x2d8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80085f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085f6:	d10b      	bne.n	8008610 <HAL_ADC_ConfigChannel+0x168>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	695a      	ldr	r2, [r3, #20]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	089b      	lsrs	r3, r3, #2
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	e01d      	b.n	800864c <HAL_ADC_ConfigChannel+0x1a4>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <HAL_ADC_ConfigChannel+0x18e>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	695a      	ldr	r2, [r3, #20]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	089b      	lsrs	r3, r3, #2
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	e00a      	b.n	800864c <HAL_ADC_ConfigChannel+0x1a4>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	695a      	ldr	r2, [r3, #20]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	089b      	lsrs	r3, r3, #2
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b04      	cmp	r3, #4
 8008656:	d048      	beq.n	80086ea <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	6919      	ldr	r1, [r3, #16]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008668:	f7fe ff52 	bl	8007510 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a42      	ldr	r2, [pc, #264]	@ (800877c <HAL_ADC_ConfigChannel+0x2d4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d119      	bne.n	80086aa <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6919      	ldr	r1, [r3, #16]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	461a      	mov	r2, r3
 8008684:	f7fe ffea 	bl	800765c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6919      	ldr	r1, [r3, #16]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d102      	bne.n	80086a0 <HAL_ADC_ConfigChannel+0x1f8>
 800869a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800869e:	e000      	b.n	80086a2 <HAL_ADC_ConfigChannel+0x1fa>
 80086a0:	2300      	movs	r3, #0
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7fe ffb8 	bl	8007618 <LL_ADC_SetOffsetSaturation>
 80086a8:	e1ee      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6919      	ldr	r1, [r3, #16]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d102      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x21a>
 80086bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80086c0:	e000      	b.n	80086c4 <HAL_ADC_ConfigChannel+0x21c>
 80086c2:	2300      	movs	r3, #0
 80086c4:	461a      	mov	r2, r3
 80086c6:	f7fe ff85 	bl	80075d4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6919      	ldr	r1, [r3, #16]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	7e1b      	ldrb	r3, [r3, #24]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d102      	bne.n	80086e0 <HAL_ADC_ConfigChannel+0x238>
 80086da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80086de:	e000      	b.n	80086e2 <HAL_ADC_ConfigChannel+0x23a>
 80086e0:	2300      	movs	r3, #0
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7fe ff5c 	bl	80075a0 <LL_ADC_SetDataRightShift>
 80086e8:	e1ce      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a23      	ldr	r2, [pc, #140]	@ (800877c <HAL_ADC_ConfigChannel+0x2d4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	f040 8181 	bne.w	80089f8 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe ff39 	bl	8007574 <LL_ADC_GetOffsetChannel>
 8008702:	4603      	mov	r3, r0
 8008704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x27a>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ff2e 	bl	8007574 <LL_ADC_GetOffsetChannel>
 8008718:	4603      	mov	r3, r0
 800871a:	0e9b      	lsrs	r3, r3, #26
 800871c:	f003 021f 	and.w	r2, r3, #31
 8008720:	e01e      	b.n	8008760 <HAL_ADC_ConfigChannel+0x2b8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe ff23 	bl	8007574 <LL_ADC_GetOffsetChannel>
 800872e:	4603      	mov	r3, r0
 8008730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008738:	fa93 f3a3 	rbit	r3, r3
 800873c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8008740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008744:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8008748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8008750:	2320      	movs	r3, #32
 8008752:	e004      	b.n	800875e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8008754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008758:	fab3 f383 	clz	r3, r3
 800875c:	b2db      	uxtb	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <HAL_ADC_ConfigChannel+0x2dc>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	0e9b      	lsrs	r3, r3, #26
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	e01e      	b.n	80087b6 <HAL_ADC_ConfigChannel+0x30e>
 8008778:	47ff0000 	.word	0x47ff0000
 800877c:	58026000 	.word	0x58026000
 8008780:	5c001000 	.word	0x5c001000
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800878c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008790:	fa93 f3a3 	rbit	r3, r3
 8008794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800879c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80087a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80087a8:	2320      	movs	r3, #32
 80087aa:	e004      	b.n	80087b6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80087ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087b0:	fab3 f383 	clz	r3, r3
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d106      	bne.n	80087c8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe ff6c 	bl	80076a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fed0 	bl	8007574 <LL_ADC_GetOffsetChannel>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <HAL_ADC_ConfigChannel+0x34c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2101      	movs	r1, #1
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fec5 	bl	8007574 <LL_ADC_GetOffsetChannel>
 80087ea:	4603      	mov	r3, r0
 80087ec:	0e9b      	lsrs	r3, r3, #26
 80087ee:	f003 021f 	and.w	r2, r3, #31
 80087f2:	e01e      	b.n	8008832 <HAL_ADC_ConfigChannel+0x38a>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe feba 	bl	8007574 <LL_ADC_GetOffsetChannel>
 8008800:	4603      	mov	r3, r0
 8008802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800880a:	fa93 f3a3 	rbit	r3, r3
 800880e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8008812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800881a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8008822:	2320      	movs	r3, #32
 8008824:	e004      	b.n	8008830 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8008826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800882a:	fab3 f383 	clz	r3, r3
 800882e:	b2db      	uxtb	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800883a:	2b00      	cmp	r3, #0
 800883c:	d105      	bne.n	800884a <HAL_ADC_ConfigChannel+0x3a2>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	0e9b      	lsrs	r3, r3, #26
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	e018      	b.n	800887c <HAL_ADC_ConfigChannel+0x3d4>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008856:	fa93 f3a3 	rbit	r3, r3
 800885a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800885e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008862:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8008866:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800886e:	2320      	movs	r3, #32
 8008870:	e004      	b.n	800887c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8008872:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008876:	fab3 f383 	clz	r3, r3
 800887a:	b2db      	uxtb	r3, r3
 800887c:	429a      	cmp	r2, r3
 800887e:	d106      	bne.n	800888e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe ff09 	bl	80076a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2102      	movs	r1, #2
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fe6d 	bl	8007574 <LL_ADC_GetOffsetChannel>
 800889a:	4603      	mov	r3, r0
 800889c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <HAL_ADC_ConfigChannel+0x412>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2102      	movs	r1, #2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fe62 	bl	8007574 <LL_ADC_GetOffsetChannel>
 80088b0:	4603      	mov	r3, r0
 80088b2:	0e9b      	lsrs	r3, r3, #26
 80088b4:	f003 021f 	and.w	r2, r3, #31
 80088b8:	e01e      	b.n	80088f8 <HAL_ADC_ConfigChannel+0x450>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2102      	movs	r1, #2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fe57 	bl	8007574 <LL_ADC_GetOffsetChannel>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088d0:	fa93 f3a3 	rbit	r3, r3
 80088d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80088d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80088e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80088e8:	2320      	movs	r3, #32
 80088ea:	e004      	b.n	80088f6 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80088ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088f0:	fab3 f383 	clz	r3, r3
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008900:	2b00      	cmp	r3, #0
 8008902:	d105      	bne.n	8008910 <HAL_ADC_ConfigChannel+0x468>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	0e9b      	lsrs	r3, r3, #26
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	e014      	b.n	800893a <HAL_ADC_ConfigChannel+0x492>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008918:	fa93 f3a3 	rbit	r3, r3
 800891c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800891e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800892c:	2320      	movs	r3, #32
 800892e:	e004      	b.n	800893a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008934:	fab3 f383 	clz	r3, r3
 8008938:	b2db      	uxtb	r3, r3
 800893a:	429a      	cmp	r2, r3
 800893c:	d106      	bne.n	800894c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2200      	movs	r2, #0
 8008944:	2102      	movs	r1, #2
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe feaa 	bl	80076a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2103      	movs	r1, #3
 8008952:	4618      	mov	r0, r3
 8008954:	f7fe fe0e 	bl	8007574 <LL_ADC_GetOffsetChannel>
 8008958:	4603      	mov	r3, r0
 800895a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <HAL_ADC_ConfigChannel+0x4d0>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2103      	movs	r1, #3
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fe03 	bl	8007574 <LL_ADC_GetOffsetChannel>
 800896e:	4603      	mov	r3, r0
 8008970:	0e9b      	lsrs	r3, r3, #26
 8008972:	f003 021f 	and.w	r2, r3, #31
 8008976:	e017      	b.n	80089a8 <HAL_ADC_ConfigChannel+0x500>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2103      	movs	r1, #3
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fdf8 	bl	8007574 <LL_ADC_GetOffsetChannel>
 8008984:	4603      	mov	r3, r0
 8008986:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800898a:	fa93 f3a3 	rbit	r3, r3
 800898e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008992:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800899a:	2320      	movs	r3, #32
 800899c:	e003      	b.n	80089a6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800899e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a0:	fab3 f383 	clz	r3, r3
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <HAL_ADC_ConfigChannel+0x518>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	0e9b      	lsrs	r3, r3, #26
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	e011      	b.n	80089e4 <HAL_ADC_ConfigChannel+0x53c>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089c8:	fa93 f3a3 	rbit	r3, r3
 80089cc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80089ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80089d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80089d8:	2320      	movs	r3, #32
 80089da:	e003      	b.n	80089e4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80089dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089de:	fab3 f383 	clz	r3, r3
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d14f      	bne.n	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	2103      	movs	r1, #3
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fe55 	bl	80076a0 <LL_ADC_SetOffsetState>
 80089f6:	e047      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	069b      	lsls	r3, r3, #26
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d107      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008a1a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	069b      	lsls	r3, r3, #26
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d107      	bne.n	8008a40 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008a3e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	069b      	lsls	r3, r3, #26
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d107      	bne.n	8008a64 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008a62:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	069b      	lsls	r3, r3, #26
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d107      	bne.n	8008a88 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008a86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe ff81 	bl	8007994 <LL_ADC_IsEnabled>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f040 8219 	bne.w	8008ecc <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6819      	ldr	r1, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7fe fea2 	bl	80077f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4aa1      	ldr	r2, [pc, #644]	@ (8008d38 <HAL_ADC_ConfigChannel+0x890>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	f040 812e 	bne.w	8008d14 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <HAL_ADC_ConfigChannel+0x638>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	0e9b      	lsrs	r3, r3, #26
 8008ace:	3301      	adds	r3, #1
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	bf94      	ite	ls
 8008ad8:	2301      	movls	r3, #1
 8008ada:	2300      	movhi	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	e019      	b.n	8008b14 <HAL_ADC_ConfigChannel+0x66c>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ae8:	fa93 f3a3 	rbit	r3, r3
 8008aec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8008af8:	2320      	movs	r3, #32
 8008afa:	e003      	b.n	8008b04 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008afe:	fab3 f383 	clz	r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3301      	adds	r3, #1
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	bf94      	ite	ls
 8008b0e:	2301      	movls	r3, #1
 8008b10:	2300      	movhi	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d079      	beq.n	8008c0c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d107      	bne.n	8008b34 <HAL_ADC_ConfigChannel+0x68c>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	0e9b      	lsrs	r3, r3, #26
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	069b      	lsls	r3, r3, #26
 8008b2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008b32:	e015      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x6b8>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	fa93 f3a3 	rbit	r3, r3
 8008b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	e003      	b.n	8008b58 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b52:	fab3 f383 	clz	r3, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	3301      	adds	r3, #1
 8008b5a:	069b      	lsls	r3, r3, #26
 8008b5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <HAL_ADC_ConfigChannel+0x6d8>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	3301      	adds	r3, #1
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2101      	movs	r1, #1
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	e017      	b.n	8008bb0 <HAL_ADC_ConfigChannel+0x708>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b88:	fa93 f3a3 	rbit	r3, r3
 8008b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8008b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8008b98:	2320      	movs	r3, #32
 8008b9a:	e003      	b.n	8008ba4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9e:	fab3 f383 	clz	r3, r3
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	2101      	movs	r1, #1
 8008bac:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb0:	ea42 0103 	orr.w	r1, r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <HAL_ADC_ConfigChannel+0x72e>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	0e9b      	lsrs	r3, r3, #26
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	4613      	mov	r3, r2
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	4413      	add	r3, r2
 8008bd2:	051b      	lsls	r3, r3, #20
 8008bd4:	e018      	b.n	8008c08 <HAL_ADC_ConfigChannel+0x760>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bde:	fa93 f3a3 	rbit	r3, r3
 8008be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008bee:	2320      	movs	r3, #32
 8008bf0:	e003      	b.n	8008bfa <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	fab3 f383 	clz	r3, r3
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	f003 021f 	and.w	r2, r3, #31
 8008c00:	4613      	mov	r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	e07e      	b.n	8008d0a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <HAL_ADC_ConfigChannel+0x780>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	0e9b      	lsrs	r3, r3, #26
 8008c1e:	3301      	adds	r3, #1
 8008c20:	069b      	lsls	r3, r3, #26
 8008c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008c26:	e015      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x7ac>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	fa93 f3a3 	rbit	r3, r3
 8008c34:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008c40:	2320      	movs	r3, #32
 8008c42:	e003      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	fab3 f383 	clz	r3, r3
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	069b      	lsls	r3, r3, #26
 8008c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x7cc>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0e9b      	lsrs	r3, r3, #26
 8008c66:	3301      	adds	r3, #1
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c72:	e017      	b.n	8008ca4 <HAL_ADC_ConfigChannel+0x7fc>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	fa93 f3a3 	rbit	r3, r3
 8008c80:	61bb      	str	r3, [r7, #24]
  return result;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	e003      	b.n	8008c98 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	fab3 f383 	clz	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	ea42 0103 	orr.w	r1, r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0x828>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	0e9b      	lsrs	r3, r3, #26
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f003 021f 	and.w	r2, r3, #31
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3b1e      	subs	r3, #30
 8008cc8:	051b      	lsls	r3, r3, #20
 8008cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	e01b      	b.n	8008d08 <HAL_ADC_ConfigChannel+0x860>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	fa93 f3a3 	rbit	r3, r3
 8008cdc:	60fb      	str	r3, [r7, #12]
  return result;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8008ce8:	2320      	movs	r3, #32
 8008cea:	e003      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	fab3 f383 	clz	r3, r3
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	f003 021f 	and.w	r2, r3, #31
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	4413      	add	r3, r2
 8008d00:	3b1e      	subs	r3, #30
 8008d02:	051b      	lsls	r3, r3, #20
 8008d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	6892      	ldr	r2, [r2, #8]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f7fe fd42 	bl	8007798 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f280 80d7 	bge.w	8008ecc <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a06      	ldr	r2, [pc, #24]	@ (8008d3c <HAL_ADC_ConfigChannel+0x894>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d004      	beq.n	8008d32 <HAL_ADC_ConfigChannel+0x88a>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a04      	ldr	r2, [pc, #16]	@ (8008d40 <HAL_ADC_ConfigChannel+0x898>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d10a      	bne.n	8008d48 <HAL_ADC_ConfigChannel+0x8a0>
 8008d32:	4b04      	ldr	r3, [pc, #16]	@ (8008d44 <HAL_ADC_ConfigChannel+0x89c>)
 8008d34:	e009      	b.n	8008d4a <HAL_ADC_ConfigChannel+0x8a2>
 8008d36:	bf00      	nop
 8008d38:	47ff0000 	.word	0x47ff0000
 8008d3c:	40022000 	.word	0x40022000
 8008d40:	40022100 	.word	0x40022100
 8008d44:	40022300 	.word	0x40022300
 8008d48:	4b65      	ldr	r3, [pc, #404]	@ (8008ee0 <HAL_ADC_ConfigChannel+0xa38>)
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fbd2 	bl	80074f4 <LL_ADC_GetCommonPathInternalCh>
 8008d50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a62      	ldr	r2, [pc, #392]	@ (8008ee4 <HAL_ADC_ConfigChannel+0xa3c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_ADC_ConfigChannel+0x8c0>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a61      	ldr	r2, [pc, #388]	@ (8008ee8 <HAL_ADC_ConfigChannel+0xa40>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d10e      	bne.n	8008d86 <HAL_ADC_ConfigChannel+0x8de>
 8008d68:	485e      	ldr	r0, [pc, #376]	@ (8008ee4 <HAL_ADC_ConfigChannel+0xa3c>)
 8008d6a:	f7fe fe13 	bl	8007994 <LL_ADC_IsEnabled>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	485d      	ldr	r0, [pc, #372]	@ (8008ee8 <HAL_ADC_ConfigChannel+0xa40>)
 8008d72:	f7fe fe0f 	bl	8007994 <LL_ADC_IsEnabled>
 8008d76:	4603      	mov	r3, r0
 8008d78:	4323      	orrs	r3, r4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	e008      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x8f0>
 8008d86:	4859      	ldr	r0, [pc, #356]	@ (8008eec <HAL_ADC_ConfigChannel+0xa44>)
 8008d88:	f7fe fe04 	bl	8007994 <LL_ADC_IsEnabled>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bf0c      	ite	eq
 8008d92:	2301      	moveq	r3, #1
 8008d94:	2300      	movne	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8084 	beq.w	8008ea6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a53      	ldr	r2, [pc, #332]	@ (8008ef0 <HAL_ADC_ConfigChannel+0xa48>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d132      	bne.n	8008e0e <HAL_ADC_ConfigChannel+0x966>
 8008da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008dac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d12c      	bne.n	8008e0e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a4c      	ldr	r2, [pc, #304]	@ (8008eec <HAL_ADC_ConfigChannel+0xa44>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	f040 8086 	bne.w	8008ecc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a47      	ldr	r2, [pc, #284]	@ (8008ee4 <HAL_ADC_ConfigChannel+0xa3c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_ADC_ConfigChannel+0x92c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a46      	ldr	r2, [pc, #280]	@ (8008ee8 <HAL_ADC_ConfigChannel+0xa40>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d101      	bne.n	8008dd8 <HAL_ADC_ConfigChannel+0x930>
 8008dd4:	4a47      	ldr	r2, [pc, #284]	@ (8008ef4 <HAL_ADC_ConfigChannel+0xa4c>)
 8008dd6:	e000      	b.n	8008dda <HAL_ADC_ConfigChannel+0x932>
 8008dd8:	4a41      	ldr	r2, [pc, #260]	@ (8008ee0 <HAL_ADC_ConfigChannel+0xa38>)
 8008dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008dde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7fe fb72 	bl	80074ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008dea:	4b43      	ldr	r3, [pc, #268]	@ (8008ef8 <HAL_ADC_ConfigChannel+0xa50>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	099b      	lsrs	r3, r3, #6
 8008df0:	4a42      	ldr	r2, [pc, #264]	@ (8008efc <HAL_ADC_ConfigChannel+0xa54>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	3301      	adds	r3, #1
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008dfe:	e002      	b.n	8008e06 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f9      	bne.n	8008e00 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e0c:	e05e      	b.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a3b      	ldr	r2, [pc, #236]	@ (8008f00 <HAL_ADC_ConfigChannel+0xa58>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d120      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x9b2>
 8008e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11a      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a30      	ldr	r2, [pc, #192]	@ (8008eec <HAL_ADC_ConfigChannel+0xa44>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d14e      	bne.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a2c      	ldr	r2, [pc, #176]	@ (8008ee4 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <HAL_ADC_ConfigChannel+0x99a>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee8 <HAL_ADC_ConfigChannel+0xa40>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d101      	bne.n	8008e46 <HAL_ADC_ConfigChannel+0x99e>
 8008e42:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_ADC_ConfigChannel+0xa4c>)
 8008e44:	e000      	b.n	8008e48 <HAL_ADC_ConfigChannel+0x9a0>
 8008e46:	4a26      	ldr	r2, [pc, #152]	@ (8008ee0 <HAL_ADC_ConfigChannel+0xa38>)
 8008e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e50:	4619      	mov	r1, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	f7fe fb3b 	bl	80074ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e58:	e038      	b.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a29      	ldr	r2, [pc, #164]	@ (8008f04 <HAL_ADC_ConfigChannel+0xa5c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d133      	bne.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
 8008e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d12d      	bne.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1d      	ldr	r2, [pc, #116]	@ (8008eec <HAL_ADC_ConfigChannel+0xa44>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d128      	bne.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a19      	ldr	r2, [pc, #100]	@ (8008ee4 <HAL_ADC_ConfigChannel+0xa3c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d004      	beq.n	8008e8e <HAL_ADC_ConfigChannel+0x9e6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a17      	ldr	r2, [pc, #92]	@ (8008ee8 <HAL_ADC_ConfigChannel+0xa40>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d101      	bne.n	8008e92 <HAL_ADC_ConfigChannel+0x9ea>
 8008e8e:	4a19      	ldr	r2, [pc, #100]	@ (8008ef4 <HAL_ADC_ConfigChannel+0xa4c>)
 8008e90:	e000      	b.n	8008e94 <HAL_ADC_ConfigChannel+0x9ec>
 8008e92:	4a13      	ldr	r2, [pc, #76]	@ (8008ee0 <HAL_ADC_ConfigChannel+0xa38>)
 8008e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7fe fb15 	bl	80074ce <LL_ADC_SetCommonPathInternalCh>
 8008ea4:	e012      	b.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eaa:	f043 0220 	orr.w	r2, r3, #32
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8008eb8:	e008      	b.n	8008ecc <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ebe:	f043 0220 	orr.w	r2, r3, #32
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008ed4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	37e4      	adds	r7, #228	@ 0xe4
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	58026300 	.word	0x58026300
 8008ee4:	40022000 	.word	0x40022000
 8008ee8:	40022100 	.word	0x40022100
 8008eec:	58026000 	.word	0x58026000
 8008ef0:	c7520000 	.word	0xc7520000
 8008ef4:	40022300 	.word	0x40022300
 8008ef8:	24000018 	.word	0x24000018
 8008efc:	053e2d63 	.word	0x053e2d63
 8008f00:	c3210000 	.word	0xc3210000
 8008f04:	cb840000 	.word	0xcb840000

08008f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fd3d 	bl	8007994 <LL_ADC_IsEnabled>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d16e      	bne.n	8008ffe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689a      	ldr	r2, [r3, #8]
 8008f26:	4b38      	ldr	r3, [pc, #224]	@ (8009008 <ADC_Enable+0x100>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00d      	beq.n	8008f4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f32:	f043 0210 	orr.w	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f3e:	f043 0201 	orr.w	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e05a      	b.n	8009000 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fcf8 	bl	8007944 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008f54:	f7fe fa64 	bl	8007420 <HAL_GetTick>
 8008f58:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800900c <ADC_Enable+0x104>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d004      	beq.n	8008f6e <ADC_Enable+0x66>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a29      	ldr	r2, [pc, #164]	@ (8009010 <ADC_Enable+0x108>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d101      	bne.n	8008f72 <ADC_Enable+0x6a>
 8008f6e:	4b29      	ldr	r3, [pc, #164]	@ (8009014 <ADC_Enable+0x10c>)
 8008f70:	e000      	b.n	8008f74 <ADC_Enable+0x6c>
 8008f72:	4b29      	ldr	r3, [pc, #164]	@ (8009018 <ADC_Enable+0x110>)
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fc7b 	bl	8007870 <LL_ADC_GetMultimode>
 8008f7a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a23      	ldr	r2, [pc, #140]	@ (8009010 <ADC_Enable+0x108>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d002      	beq.n	8008f8c <ADC_Enable+0x84>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	e000      	b.n	8008f8e <ADC_Enable+0x86>
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800900c <ADC_Enable+0x104>)
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d02c      	beq.n	8008ff0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d130      	bne.n	8008ffe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f9c:	e028      	b.n	8008ff0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fcf6 	bl	8007994 <LL_ADC_IsEnabled>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fcc6 	bl	8007944 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008fb8:	f7fe fa32 	bl	8007420 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d914      	bls.n	8008ff0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d00d      	beq.n	8008ff0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd8:	f043 0210 	orr.w	r2, r3, #16
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fe4:	f043 0201 	orr.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e007      	b.n	8009000 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d1cf      	bne.n	8008f9e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	8000003f 	.word	0x8000003f
 800900c:	40022000 	.word	0x40022000
 8009010:	40022100 	.word	0x40022100
 8009014:	40022300 	.word	0x40022300
 8009018:	58026300 	.word	0x58026300

0800901c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fcc6 	bl	80079ba <LL_ADC_IsDisableOngoing>
 800902e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fcad 	bl	8007994 <LL_ADC_IsEnabled>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d047      	beq.n	80090d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d144      	bne.n	80090d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 030d 	and.w	r3, r3, #13
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10c      	bne.n	800906e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fc87 	bl	800796c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2203      	movs	r2, #3
 8009064:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009066:	f7fe f9db 	bl	8007420 <HAL_GetTick>
 800906a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800906c:	e029      	b.n	80090c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009072:	f043 0210 	orr.w	r2, r3, #16
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800907e:	f043 0201 	orr.w	r2, r3, #1
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e023      	b.n	80090d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800908a:	f7fe f9c9 	bl	8007420 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d914      	bls.n	80090c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090aa:	f043 0210 	orr.w	r2, r3, #16
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090b6:	f043 0201 	orr.w	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e007      	b.n	80090d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1dc      	bne.n	800908a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d14b      	bne.n	800918c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d021      	beq.n	8009152 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe faee 	bl	80076f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d032      	beq.n	8009184 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d12b      	bne.n	8009184 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800913c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d11f      	bne.n	8009184 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009148:	f043 0201 	orr.w	r2, r3, #1
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009150:	e018      	b.n	8009184 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0303 	and.w	r3, r3, #3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d111      	bne.n	8009184 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800917c:	f043 0201 	orr.w	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7f9 fa7b 	bl	8002680 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800918a:	e00e      	b.n	80091aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff f97b 	bl	8008494 <HAL_ADC_ErrorCallback>
}
 800919e:	e004      	b.n	80091aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff f953 	bl	800846c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ec:	f043 0204 	orr.w	r2, r3, #4
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff f94d 	bl	8008494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a6c      	ldr	r2, [pc, #432]	@ (80093c4 <ADC_ConfigureBoostMode+0x1c0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d004      	beq.n	8009220 <ADC_ConfigureBoostMode+0x1c>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a6b      	ldr	r2, [pc, #428]	@ (80093c8 <ADC_ConfigureBoostMode+0x1c4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d109      	bne.n	8009234 <ADC_ConfigureBoostMode+0x30>
 8009220:	4b6a      	ldr	r3, [pc, #424]	@ (80093cc <ADC_ConfigureBoostMode+0x1c8>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009228:	2b00      	cmp	r3, #0
 800922a:	bf14      	ite	ne
 800922c:	2301      	movne	r3, #1
 800922e:	2300      	moveq	r3, #0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	e008      	b.n	8009246 <ADC_ConfigureBoostMode+0x42>
 8009234:	4b66      	ldr	r3, [pc, #408]	@ (80093d0 <ADC_ConfigureBoostMode+0x1cc>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800923c:	2b00      	cmp	r3, #0
 800923e:	bf14      	ite	ne
 8009240:	2301      	movne	r3, #1
 8009242:	2300      	moveq	r3, #0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d01c      	beq.n	8009284 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800924a:	f006 fa07 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 800924e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009258:	d010      	beq.n	800927c <ADC_ConfigureBoostMode+0x78>
 800925a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800925e:	d873      	bhi.n	8009348 <ADC_ConfigureBoostMode+0x144>
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009264:	d002      	beq.n	800926c <ADC_ConfigureBoostMode+0x68>
 8009266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800926a:	d16d      	bne.n	8009348 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	0c1b      	lsrs	r3, r3, #16
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	60fb      	str	r3, [r7, #12]
        break;
 800927a:	e068      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	60fb      	str	r3, [r7, #12]
        break;
 8009282:	e064      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009284:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009288:	f04f 0100 	mov.w	r1, #0
 800928c:	f007 fbe2 	bl	8010a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8009290:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800929a:	d051      	beq.n	8009340 <ADC_ConfigureBoostMode+0x13c>
 800929c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80092a0:	d854      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80092a6:	d047      	beq.n	8009338 <ADC_ConfigureBoostMode+0x134>
 80092a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80092ac:	d84e      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80092b2:	d03d      	beq.n	8009330 <ADC_ConfigureBoostMode+0x12c>
 80092b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80092b8:	d848      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092be:	d033      	beq.n	8009328 <ADC_ConfigureBoostMode+0x124>
 80092c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092c4:	d842      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80092ca:	d029      	beq.n	8009320 <ADC_ConfigureBoostMode+0x11c>
 80092cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80092d0:	d83c      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80092d6:	d01a      	beq.n	800930e <ADC_ConfigureBoostMode+0x10a>
 80092d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80092dc:	d836      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80092e2:	d014      	beq.n	800930e <ADC_ConfigureBoostMode+0x10a>
 80092e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80092e8:	d830      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092ee:	d00e      	beq.n	800930e <ADC_ConfigureBoostMode+0x10a>
 80092f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f4:	d82a      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 80092f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80092fa:	d008      	beq.n	800930e <ADC_ConfigureBoostMode+0x10a>
 80092fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009300:	d824      	bhi.n	800934c <ADC_ConfigureBoostMode+0x148>
 8009302:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009306:	d002      	beq.n	800930e <ADC_ConfigureBoostMode+0x10a>
 8009308:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800930c:	d11e      	bne.n	800934c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	0c9b      	lsrs	r3, r3, #18
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	fbb2 f3f3 	udiv	r3, r2, r3
 800931c:	60fb      	str	r3, [r7, #12]
        break;
 800931e:	e016      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	091b      	lsrs	r3, r3, #4
 8009324:	60fb      	str	r3, [r7, #12]
        break;
 8009326:	e012      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	60fb      	str	r3, [r7, #12]
        break;
 800932e:	e00e      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	099b      	lsrs	r3, r3, #6
 8009334:	60fb      	str	r3, [r7, #12]
        break;
 8009336:	e00a      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	09db      	lsrs	r3, r3, #7
 800933c:	60fb      	str	r3, [r7, #12]
        break;
 800933e:	e006      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	60fb      	str	r3, [r7, #12]
        break;
 8009346:	e002      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
        break;
 8009348:	bf00      	nop
 800934a:	e000      	b.n	800934e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800934c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	085b      	lsrs	r3, r3, #1
 8009352:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4a1f      	ldr	r2, [pc, #124]	@ (80093d4 <ADC_ConfigureBoostMode+0x1d0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d808      	bhi.n	800936e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800936a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800936c:	e025      	b.n	80093ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4a19      	ldr	r2, [pc, #100]	@ (80093d8 <ADC_ConfigureBoostMode+0x1d4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d80a      	bhi.n	800938c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009388:	609a      	str	r2, [r3, #8]
}
 800938a:	e016      	b.n	80093ba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a13      	ldr	r2, [pc, #76]	@ (80093dc <ADC_ConfigureBoostMode+0x1d8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d80a      	bhi.n	80093aa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093a6:	609a      	str	r2, [r3, #8]
}
 80093a8:	e007      	b.n	80093ba <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80093b8:	609a      	str	r2, [r3, #8]
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40022000 	.word	0x40022000
 80093c8:	40022100 	.word	0x40022100
 80093cc:	40022300 	.word	0x40022300
 80093d0:	58026300 	.word	0x58026300
 80093d4:	005f5e10 	.word	0x005f5e10
 80093d8:	00bebc20 	.word	0x00bebc20
 80093dc:	017d7840 	.word	0x017d7840

080093e0 <LL_ADC_IsEnabled>:
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <LL_ADC_IsEnabled+0x18>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <LL_ADC_IsEnabled+0x1a>
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <LL_ADC_StartCalibration>:
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <LL_ADC_StartCalibration+0x38>)
 800941a:	4013      	ands	r3, r2
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009428:	430a      	orrs	r2, r1
 800942a:	4313      	orrs	r3, r2
 800942c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	609a      	str	r2, [r3, #8]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	3ffeffc0 	.word	0x3ffeffc0

08009444 <LL_ADC_IsCalibrationOnGoing>:
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009458:	d101      	bne.n	800945e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <LL_ADC_REG_StartConversion>:
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	4b05      	ldr	r3, [pc, #20]	@ (8009490 <LL_ADC_REG_StartConversion+0x24>)
 800947a:	4013      	ands	r3, r2
 800947c:	f043 0204 	orr.w	r2, r3, #4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	609a      	str	r2, [r3, #8]
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	7fffffc0 	.word	0x7fffffc0

08009494 <LL_ADC_REG_IsConversionOngoing>:
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d101      	bne.n	80094ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_ADCEx_Calibration_Start+0x1e>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e04c      	b.n	8009574 <HAL_ADCEx_Calibration_Start+0xb8>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fd9a 	bl	800901c <ADC_Disable>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d135      	bne.n	800955e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80094f6:	4b21      	ldr	r3, [pc, #132]	@ (800957c <HAL_ADCEx_Calibration_Start+0xc0>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	f043 0202 	orr.w	r2, r3, #2
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	68b9      	ldr	r1, [r7, #8]
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff ff7c 	bl	8009408 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009510:	e014      	b.n	800953c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	3301      	adds	r3, #1
 8009516:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	4a19      	ldr	r2, [pc, #100]	@ (8009580 <HAL_ADCEx_Calibration_Start+0xc4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d30d      	bcc.n	800953c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009524:	f023 0312 	bic.w	r3, r3, #18
 8009528:	f043 0210 	orr.w	r2, r3, #16
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e01b      	b.n	8009574 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff ff7f 	bl	8009444 <LL_ADC_IsCalibrationOnGoing>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e2      	bne.n	8009512 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009550:	f023 0303 	bic.w	r3, r3, #3
 8009554:	f043 0201 	orr.w	r2, r3, #1
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	661a      	str	r2, [r3, #96]	@ 0x60
 800955c:	e005      	b.n	800956a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009562:	f043 0210 	orr.w	r2, r3, #16
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	ffffeefd 	.word	0xffffeefd
 8009580:	25c3f800 	.word	0x25c3f800

08009584 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b0a2      	sub	sp, #136	@ 0x88
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff ff7d 	bl	8009494 <LL_ADC_REG_IsConversionOngoing>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80095a0:	2302      	movs	r3, #2
 80095a2:	e0bb      	b.n	800971c <HAL_ADCEx_MultiModeStart_DMA+0x198>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e0b4      	b.n	800971c <HAL_ADCEx_MultiModeStart_DMA+0x198>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a59      	ldr	r2, [pc, #356]	@ (8009724 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d002      	beq.n	80095ca <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	e000      	b.n	80095cc <HAL_ADCEx_MultiModeStart_DMA+0x48>
 80095ca:	4b57      	ldr	r3, [pc, #348]	@ (8009728 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d006      	beq.n	80095e2 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fc97 	bl	8008f08 <ADC_Enable>
 80095da:	4603      	mov	r3, r0
 80095dc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80095e0:	e02e      	b.n	8009640 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80095e2:	2300      	movs	r3, #0
 80095e4:	673b      	str	r3, [r7, #112]	@ 0x70
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	677b      	str	r3, [r7, #116]	@ 0x74
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009728 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d102      	bne.n	80095fa <HAL_ADCEx_MultiModeStart_DMA+0x76>
 80095f4:	4b4b      	ldr	r3, [pc, #300]	@ (8009724 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 80095f6:	613b      	str	r3, [r7, #16]
 80095f8:	e001      	b.n	80095fe <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 80095fa:	2300      	movs	r3, #0
 80095fc:	613b      	str	r3, [r7, #16]

      if (tmphadcSlave.Instance == NULL)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009608:	f043 0220 	orr.w	r2, r3, #32
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e07f      	b.n	800971c <HAL_ADCEx_MultiModeStart_DMA+0x198>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fc73 	bl	8008f08 <ADC_Enable>
 8009622:	4603      	mov	r3, r0
 8009624:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (tmp_hal_status == HAL_OK)
 8009628:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800962c:	2b00      	cmp	r3, #0
 800962e:	d107      	bne.n	8009640 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fc67 	bl	8008f08 <ADC_Enable>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8009640:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009644:	2b00      	cmp	r3, #0
 8009646:	d163      	bne.n	8009710 <HAL_ADCEx_MultiModeStart_DMA+0x18c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800964c:	4b37      	ldr	r3, [pc, #220]	@ (800972c <HAL_ADCEx_MultiModeStart_DMA+0x1a8>)
 800964e:	4013      	ands	r3, r2
 8009650:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009662:	4a33      	ldr	r2, [pc, #204]	@ (8009730 <HAL_ADCEx_MultiModeStart_DMA+0x1ac>)
 8009664:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966a:	4a32      	ldr	r2, [pc, #200]	@ (8009734 <HAL_ADCEx_MultiModeStart_DMA+0x1b0>)
 800966c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009672:	4a31      	ldr	r2, [pc, #196]	@ (8009738 <HAL_ADCEx_MultiModeStart_DMA+0x1b4>)
 8009674:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	221c      	movs	r2, #28
 800967c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f042 0210 	orr.w	r2, r2, #16
 8009694:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a22      	ldr	r2, [pc, #136]	@ (8009724 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d002      	beq.n	80096a6 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	e000      	b.n	80096a8 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 80096a6:	4b20      	ldr	r3, [pc, #128]	@ (8009728 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00d      	beq.n	80096cc <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3340      	adds	r3, #64	@ 0x40
 80096ba:	4619      	mov	r1, r3
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f000 fdbc 	bl	800a23c <HAL_DMA_Start_IT>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80096ca:	e025      	b.n	8009718 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <HAL_ADCEx_MultiModeStart_DMA+0x1a4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a12      	ldr	r2, [pc, #72]	@ (8009724 <HAL_ADCEx_MultiModeStart_DMA+0x1a0>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d101      	bne.n	80096e4 <HAL_ADCEx_MultiModeStart_DMA+0x160>
 80096e0:	4b16      	ldr	r3, [pc, #88]	@ (800973c <HAL_ADCEx_MultiModeStart_DMA+0x1b8>)
 80096e2:	e000      	b.n	80096e6 <HAL_ADCEx_MultiModeStart_DMA+0x162>
 80096e4:	4b16      	ldr	r3, [pc, #88]	@ (8009740 <HAL_ADCEx_MultiModeStart_DMA+0x1bc>)
 80096e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80096ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096f2:	330c      	adds	r3, #12
 80096f4:	4619      	mov	r1, r3
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f000 fd9f 	bl	800a23c <HAL_DMA_Start_IT>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff feaf 	bl	800946c <LL_ADC_REG_StartConversion>
 800970e:	e003      	b.n	8009718 <HAL_ADCEx_MultiModeStart_DMA+0x194>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8009718:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3788      	adds	r7, #136	@ 0x88
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40022100 	.word	0x40022100
 8009728:	40022000 	.word	0x40022000
 800972c:	fffff0fe 	.word	0xfffff0fe
 8009730:	080090db 	.word	0x080090db
 8009734:	080091b3 	.word	0x080091b3
 8009738:	080091cf 	.word	0x080091cf
 800973c:	40022300 	.word	0x40022300
 8009740:	58026300 	.word	0x58026300

08009744 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80097a8:	b590      	push	{r4, r7, lr}
 80097aa:	b0a3      	sub	sp, #140	@ 0x8c
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e0c1      	b.n	800994a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80097ce:	2300      	movs	r3, #0
 80097d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a5e      	ldr	r2, [pc, #376]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d102      	bne.n	80097e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80097e0:	4b5d      	ldr	r3, [pc, #372]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e001      	b.n	80097ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10b      	bne.n	8009808 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097f4:	f043 0220 	orr.w	r2, r3, #32
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e0a0      	b.n	800994a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fe42 	bl	8009494 <LL_ADC_REG_IsConversionOngoing>
 8009810:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fe3b 	bl	8009494 <LL_ADC_REG_IsConversionOngoing>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	f040 8081 	bne.w	8009928 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009826:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800982a:	2b00      	cmp	r3, #0
 800982c:	d17c      	bne.n	8009928 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a48      	ldr	r2, [pc, #288]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d004      	beq.n	8009842 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a46      	ldr	r2, [pc, #280]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d101      	bne.n	8009846 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009842:	4b46      	ldr	r3, [pc, #280]	@ (800995c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009844:	e000      	b.n	8009848 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009846:	4b46      	ldr	r3, [pc, #280]	@ (8009960 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009848:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d039      	beq.n	80098c6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	431a      	orrs	r2, r3
 8009860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009862:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a3a      	ldr	r2, [pc, #232]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d004      	beq.n	8009878 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a39      	ldr	r2, [pc, #228]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d10e      	bne.n	8009896 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009878:	4836      	ldr	r0, [pc, #216]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800987a:	f7ff fdb1 	bl	80093e0 <LL_ADC_IsEnabled>
 800987e:	4604      	mov	r4, r0
 8009880:	4835      	ldr	r0, [pc, #212]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009882:	f7ff fdad 	bl	80093e0 <LL_ADC_IsEnabled>
 8009886:	4603      	mov	r3, r0
 8009888:	4323      	orrs	r3, r4
 800988a:	2b00      	cmp	r3, #0
 800988c:	bf0c      	ite	eq
 800988e:	2301      	moveq	r3, #1
 8009890:	2300      	movne	r3, #0
 8009892:	b2db      	uxtb	r3, r3
 8009894:	e008      	b.n	80098a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009896:	4833      	ldr	r0, [pc, #204]	@ (8009964 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009898:	f7ff fda2 	bl	80093e0 <LL_ADC_IsEnabled>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bf0c      	ite	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	2300      	movne	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d047      	beq.n	800993c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80098ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009968 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80098b2:	4013      	ands	r3, r2
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	6811      	ldr	r1, [r2, #0]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	6892      	ldr	r2, [r2, #8]
 80098bc:	430a      	orrs	r2, r1
 80098be:	431a      	orrs	r2, r3
 80098c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80098c4:	e03a      	b.n	800993c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80098c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80098ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80098d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d004      	beq.n	80098e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d10e      	bne.n	8009904 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80098e6:	481b      	ldr	r0, [pc, #108]	@ (8009954 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80098e8:	f7ff fd7a 	bl	80093e0 <LL_ADC_IsEnabled>
 80098ec:	4604      	mov	r4, r0
 80098ee:	481a      	ldr	r0, [pc, #104]	@ (8009958 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80098f0:	f7ff fd76 	bl	80093e0 <LL_ADC_IsEnabled>
 80098f4:	4603      	mov	r3, r0
 80098f6:	4323      	orrs	r3, r4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bf0c      	ite	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2300      	movne	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e008      	b.n	8009916 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8009904:	4817      	ldr	r0, [pc, #92]	@ (8009964 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009906:	f7ff fd6b 	bl	80093e0 <LL_ADC_IsEnabled>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800991a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009920:	4013      	ands	r3, r2
 8009922:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009924:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009926:	e009      	b.n	800993c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800992c:	f043 0220 	orr.w	r2, r3, #32
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800993a:	e000      	b.n	800993e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800993c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009946:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800994a:	4618      	mov	r0, r3
 800994c:	378c      	adds	r7, #140	@ 0x8c
 800994e:	46bd      	mov	sp, r7
 8009950:	bd90      	pop	{r4, r7, pc}
 8009952:	bf00      	nop
 8009954:	40022000 	.word	0x40022000
 8009958:	40022100 	.word	0x40022100
 800995c:	40022300 	.word	0x40022300
 8009960:	58026300 	.word	0x58026300
 8009964:	58026000 	.word	0x58026000
 8009968:	fffff0e0 	.word	0xfffff0e0

0800996c <__NVIC_SetPriorityGrouping>:
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800997c:	4b0b      	ldr	r3, [pc, #44]	@ (80099ac <__NVIC_SetPriorityGrouping+0x40>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009988:	4013      	ands	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009994:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <__NVIC_SetPriorityGrouping+0x44>)
 8009996:	4313      	orrs	r3, r2
 8009998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800999a:	4a04      	ldr	r2, [pc, #16]	@ (80099ac <__NVIC_SetPriorityGrouping+0x40>)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	60d3      	str	r3, [r2, #12]
}
 80099a0:	bf00      	nop
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	e000ed00 	.word	0xe000ed00
 80099b0:	05fa0000 	.word	0x05fa0000

080099b4 <__NVIC_GetPriorityGrouping>:
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099b8:	4b04      	ldr	r3, [pc, #16]	@ (80099cc <__NVIC_GetPriorityGrouping+0x18>)
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	f003 0307 	and.w	r3, r3, #7
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	e000ed00 	.word	0xe000ed00

080099d0 <__NVIC_EnableIRQ>:
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80099da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	db0b      	blt.n	80099fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	f003 021f 	and.w	r2, r3, #31
 80099e8:	4907      	ldr	r1, [pc, #28]	@ (8009a08 <__NVIC_EnableIRQ+0x38>)
 80099ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	2001      	movs	r0, #1
 80099f2:	fa00 f202 	lsl.w	r2, r0, r2
 80099f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	e000e100 	.word	0xe000e100

08009a0c <__NVIC_SetPriority>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db0a      	blt.n	8009a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	490c      	ldr	r1, [pc, #48]	@ (8009a58 <__NVIC_SetPriority+0x4c>)
 8009a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a2a:	0112      	lsls	r2, r2, #4
 8009a2c:	b2d2      	uxtb	r2, r2
 8009a2e:	440b      	add	r3, r1
 8009a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a34:	e00a      	b.n	8009a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4908      	ldr	r1, [pc, #32]	@ (8009a5c <__NVIC_SetPriority+0x50>)
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	3b04      	subs	r3, #4
 8009a44:	0112      	lsls	r2, r2, #4
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	440b      	add	r3, r1
 8009a4a:	761a      	strb	r2, [r3, #24]
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	e000e100 	.word	0xe000e100
 8009a5c:	e000ed00 	.word	0xe000ed00

08009a60 <NVIC_EncodePriority>:
{
 8009a60:	b480      	push	{r7}
 8009a62:	b089      	sub	sp, #36	@ 0x24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f1c3 0307 	rsb	r3, r3, #7
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	bf28      	it	cs
 8009a7e:	2304      	movcs	r3, #4
 8009a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	3304      	adds	r3, #4
 8009a86:	2b06      	cmp	r3, #6
 8009a88:	d902      	bls.n	8009a90 <NVIC_EncodePriority+0x30>
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	3b03      	subs	r3, #3
 8009a8e:	e000      	b.n	8009a92 <NVIC_EncodePriority+0x32>
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a94:	f04f 32ff 	mov.w	r2, #4294967295
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	43da      	mvns	r2, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	401a      	ands	r2, r3
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab2:	43d9      	mvns	r1, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ab8:	4313      	orrs	r3, r2
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3724      	adds	r7, #36	@ 0x24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ad8:	d301      	bcc.n	8009ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009ada:	2301      	movs	r3, #1
 8009adc:	e00f      	b.n	8009afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ade:	4a0a      	ldr	r2, [pc, #40]	@ (8009b08 <SysTick_Config+0x40>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ae6:	210f      	movs	r1, #15
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	f7ff ff8e 	bl	8009a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009af0:	4b05      	ldr	r3, [pc, #20]	@ (8009b08 <SysTick_Config+0x40>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009af6:	4b04      	ldr	r3, [pc, #16]	@ (8009b08 <SysTick_Config+0x40>)
 8009af8:	2207      	movs	r2, #7
 8009afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	e000e010 	.word	0xe000e010

08009b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ff29 	bl	800996c <__NVIC_SetPriorityGrouping>
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	4603      	mov	r3, r0
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009b30:	f7ff ff40 	bl	80099b4 <__NVIC_GetPriorityGrouping>
 8009b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f7ff ff90 	bl	8009a60 <NVIC_EncodePriority>
 8009b40:	4602      	mov	r2, r0
 8009b42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff ff5f 	bl	8009a0c <__NVIC_SetPriority>
}
 8009b4e:	bf00      	nop
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff ff33 	bl	80099d0 <__NVIC_EnableIRQ>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ffa4 	bl	8009ac8 <SysTick_Config>
 8009b80:	4603      	mov	r3, r0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009b94:	f7fd fc44 	bl	8007420 <HAL_GetTick>
 8009b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e312      	b.n	800a1ca <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a66      	ldr	r2, [pc, #408]	@ (8009d44 <HAL_DMA_Init+0x1b8>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d04a      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a65      	ldr	r2, [pc, #404]	@ (8009d48 <HAL_DMA_Init+0x1bc>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d045      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a63      	ldr	r2, [pc, #396]	@ (8009d4c <HAL_DMA_Init+0x1c0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d040      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a62      	ldr	r2, [pc, #392]	@ (8009d50 <HAL_DMA_Init+0x1c4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d03b      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a60      	ldr	r2, [pc, #384]	@ (8009d54 <HAL_DMA_Init+0x1c8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d036      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a5f      	ldr	r2, [pc, #380]	@ (8009d58 <HAL_DMA_Init+0x1cc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d031      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a5d      	ldr	r2, [pc, #372]	@ (8009d5c <HAL_DMA_Init+0x1d0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d02c      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a5c      	ldr	r2, [pc, #368]	@ (8009d60 <HAL_DMA_Init+0x1d4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d027      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a5a      	ldr	r2, [pc, #360]	@ (8009d64 <HAL_DMA_Init+0x1d8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d022      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a59      	ldr	r2, [pc, #356]	@ (8009d68 <HAL_DMA_Init+0x1dc>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d01d      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a57      	ldr	r2, [pc, #348]	@ (8009d6c <HAL_DMA_Init+0x1e0>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d018      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a56      	ldr	r2, [pc, #344]	@ (8009d70 <HAL_DMA_Init+0x1e4>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d013      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a54      	ldr	r2, [pc, #336]	@ (8009d74 <HAL_DMA_Init+0x1e8>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00e      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a53      	ldr	r2, [pc, #332]	@ (8009d78 <HAL_DMA_Init+0x1ec>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d009      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a51      	ldr	r2, [pc, #324]	@ (8009d7c <HAL_DMA_Init+0x1f0>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d004      	beq.n	8009c44 <HAL_DMA_Init+0xb8>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a50      	ldr	r2, [pc, #320]	@ (8009d80 <HAL_DMA_Init+0x1f4>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d101      	bne.n	8009c48 <HAL_DMA_Init+0xbc>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_DMA_Init+0xbe>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 813c 	beq.w	8009ec8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a37      	ldr	r2, [pc, #220]	@ (8009d44 <HAL_DMA_Init+0x1b8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d04a      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a36      	ldr	r2, [pc, #216]	@ (8009d48 <HAL_DMA_Init+0x1bc>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d045      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a34      	ldr	r2, [pc, #208]	@ (8009d4c <HAL_DMA_Init+0x1c0>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d040      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a33      	ldr	r2, [pc, #204]	@ (8009d50 <HAL_DMA_Init+0x1c4>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d03b      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a31      	ldr	r2, [pc, #196]	@ (8009d54 <HAL_DMA_Init+0x1c8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d036      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a30      	ldr	r2, [pc, #192]	@ (8009d58 <HAL_DMA_Init+0x1cc>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d031      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8009d5c <HAL_DMA_Init+0x1d0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d02c      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a2d      	ldr	r2, [pc, #180]	@ (8009d60 <HAL_DMA_Init+0x1d4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d027      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8009d64 <HAL_DMA_Init+0x1d8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d022      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8009d68 <HAL_DMA_Init+0x1dc>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d01d      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a28      	ldr	r2, [pc, #160]	@ (8009d6c <HAL_DMA_Init+0x1e0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d018      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a27      	ldr	r2, [pc, #156]	@ (8009d70 <HAL_DMA_Init+0x1e4>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d013      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a25      	ldr	r2, [pc, #148]	@ (8009d74 <HAL_DMA_Init+0x1e8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d00e      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a24      	ldr	r2, [pc, #144]	@ (8009d78 <HAL_DMA_Init+0x1ec>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d009      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a22      	ldr	r2, [pc, #136]	@ (8009d7c <HAL_DMA_Init+0x1f0>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <HAL_DMA_Init+0x174>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a21      	ldr	r2, [pc, #132]	@ (8009d80 <HAL_DMA_Init+0x1f4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d108      	bne.n	8009d12 <HAL_DMA_Init+0x186>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e007      	b.n	8009d22 <HAL_DMA_Init+0x196>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0201 	bic.w	r2, r2, #1
 8009d20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009d22:	e02f      	b.n	8009d84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009d24:	f7fd fb7c 	bl	8007420 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	d928      	bls.n	8009d84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e242      	b.n	800a1ca <HAL_DMA_Init+0x63e>
 8009d44:	40020010 	.word	0x40020010
 8009d48:	40020028 	.word	0x40020028
 8009d4c:	40020040 	.word	0x40020040
 8009d50:	40020058 	.word	0x40020058
 8009d54:	40020070 	.word	0x40020070
 8009d58:	40020088 	.word	0x40020088
 8009d5c:	400200a0 	.word	0x400200a0
 8009d60:	400200b8 	.word	0x400200b8
 8009d64:	40020410 	.word	0x40020410
 8009d68:	40020428 	.word	0x40020428
 8009d6c:	40020440 	.word	0x40020440
 8009d70:	40020458 	.word	0x40020458
 8009d74:	40020470 	.word	0x40020470
 8009d78:	40020488 	.word	0x40020488
 8009d7c:	400204a0 	.word	0x400204a0
 8009d80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1c8      	bne.n	8009d24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4b83      	ldr	r3, [pc, #524]	@ (8009fac <HAL_DMA_Init+0x420>)
 8009d9e:	4013      	ands	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009daa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009dc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d107      	bne.n	8009de8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009de0:	4313      	orrs	r3, r2
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	2b28      	cmp	r3, #40	@ 0x28
 8009dee:	d903      	bls.n	8009df8 <HAL_DMA_Init+0x26c>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df6:	d91f      	bls.n	8009e38 <HAL_DMA_Init+0x2ac>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dfe:	d903      	bls.n	8009e08 <HAL_DMA_Init+0x27c>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b42      	cmp	r3, #66	@ 0x42
 8009e06:	d917      	bls.n	8009e38 <HAL_DMA_Init+0x2ac>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b46      	cmp	r3, #70	@ 0x46
 8009e0e:	d903      	bls.n	8009e18 <HAL_DMA_Init+0x28c>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	2b48      	cmp	r3, #72	@ 0x48
 8009e16:	d90f      	bls.n	8009e38 <HAL_DMA_Init+0x2ac>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e1e:	d903      	bls.n	8009e28 <HAL_DMA_Init+0x29c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b52      	cmp	r3, #82	@ 0x52
 8009e26:	d907      	bls.n	8009e38 <HAL_DMA_Init+0x2ac>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	2b73      	cmp	r3, #115	@ 0x73
 8009e2e:	d905      	bls.n	8009e3c <HAL_DMA_Init+0x2b0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b77      	cmp	r3, #119	@ 0x77
 8009e36:	d801      	bhi.n	8009e3c <HAL_DMA_Init+0x2b0>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e000      	b.n	8009e3e <HAL_DMA_Init+0x2b2>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e48:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0307 	bic.w	r3, r3, #7
 8009e60:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d117      	bne.n	8009ea4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00e      	beq.n	8009ea4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f002 f81e 	bl	800bec8 <DMA_CheckFifoParam>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d008      	beq.n	8009ea4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2240      	movs	r2, #64	@ 0x40
 8009e96:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e192      	b.n	800a1ca <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 ff59 	bl	800bd64 <DMA_CalcBaseAndBitshift>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	223f      	movs	r2, #63	@ 0x3f
 8009ec0:	409a      	lsls	r2, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	609a      	str	r2, [r3, #8]
 8009ec6:	e0c8      	b.n	800a05a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a38      	ldr	r2, [pc, #224]	@ (8009fb0 <HAL_DMA_Init+0x424>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d022      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a37      	ldr	r2, [pc, #220]	@ (8009fb4 <HAL_DMA_Init+0x428>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d01d      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a35      	ldr	r2, [pc, #212]	@ (8009fb8 <HAL_DMA_Init+0x42c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d018      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a34      	ldr	r2, [pc, #208]	@ (8009fbc <HAL_DMA_Init+0x430>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a32      	ldr	r2, [pc, #200]	@ (8009fc0 <HAL_DMA_Init+0x434>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00e      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a31      	ldr	r2, [pc, #196]	@ (8009fc4 <HAL_DMA_Init+0x438>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d009      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a2f      	ldr	r2, [pc, #188]	@ (8009fc8 <HAL_DMA_Init+0x43c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d004      	beq.n	8009f18 <HAL_DMA_Init+0x38c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a2e      	ldr	r2, [pc, #184]	@ (8009fcc <HAL_DMA_Init+0x440>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d101      	bne.n	8009f1c <HAL_DMA_Init+0x390>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e000      	b.n	8009f1e <HAL_DMA_Init+0x392>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 8092 	beq.w	800a048 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a21      	ldr	r2, [pc, #132]	@ (8009fb0 <HAL_DMA_Init+0x424>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d021      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a20      	ldr	r2, [pc, #128]	@ (8009fb4 <HAL_DMA_Init+0x428>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d01c      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8009fb8 <HAL_DMA_Init+0x42c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d017      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a1d      	ldr	r2, [pc, #116]	@ (8009fbc <HAL_DMA_Init+0x430>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d012      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc0 <HAL_DMA_Init+0x434>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d00d      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8009fc4 <HAL_DMA_Init+0x438>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d008      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a18      	ldr	r2, [pc, #96]	@ (8009fc8 <HAL_DMA_Init+0x43c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <HAL_DMA_Init+0x3e6>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a17      	ldr	r2, [pc, #92]	@ (8009fcc <HAL_DMA_Init+0x440>)
 8009f70:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4b10      	ldr	r3, [pc, #64]	@ (8009fd0 <HAL_DMA_Init+0x444>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	2b40      	cmp	r3, #64	@ 0x40
 8009f98:	d01c      	beq.n	8009fd4 <HAL_DMA_Init+0x448>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b80      	cmp	r3, #128	@ 0x80
 8009fa0:	d102      	bne.n	8009fa8 <HAL_DMA_Init+0x41c>
 8009fa2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009fa6:	e016      	b.n	8009fd6 <HAL_DMA_Init+0x44a>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e014      	b.n	8009fd6 <HAL_DMA_Init+0x44a>
 8009fac:	fe10803f 	.word	0xfe10803f
 8009fb0:	58025408 	.word	0x58025408
 8009fb4:	5802541c 	.word	0x5802541c
 8009fb8:	58025430 	.word	0x58025430
 8009fbc:	58025444 	.word	0x58025444
 8009fc0:	58025458 	.word	0x58025458
 8009fc4:	5802546c 	.word	0x5802546c
 8009fc8:	58025480 	.word	0x58025480
 8009fcc:	58025494 	.word	0x58025494
 8009fd0:	fffe000f 	.word	0xfffe000f
 8009fd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68d2      	ldr	r2, [r2, #12]
 8009fda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009ffc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a004:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	4b6e      	ldr	r3, [pc, #440]	@ (800a1d4 <HAL_DMA_Init+0x648>)
 800a01c:	4413      	add	r3, r2
 800a01e:	4a6e      	ldr	r2, [pc, #440]	@ (800a1d8 <HAL_DMA_Init+0x64c>)
 800a020:	fba2 2303 	umull	r2, r3, r2, r3
 800a024:	091b      	lsrs	r3, r3, #4
 800a026:	009a      	lsls	r2, r3, #2
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 fe99 	bl	800bd64 <DMA_CalcBaseAndBitshift>
 800a032:	4603      	mov	r3, r0
 800a034:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	2201      	movs	r2, #1
 800a040:	409a      	lsls	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	605a      	str	r2, [r3, #4]
 800a046:	e008      	b.n	800a05a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2240      	movs	r2, #64	@ 0x40
 800a04c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2203      	movs	r2, #3
 800a052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e0b7      	b.n	800a1ca <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a5f      	ldr	r2, [pc, #380]	@ (800a1dc <HAL_DMA_Init+0x650>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d072      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a5d      	ldr	r2, [pc, #372]	@ (800a1e0 <HAL_DMA_Init+0x654>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d06d      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a5c      	ldr	r2, [pc, #368]	@ (800a1e4 <HAL_DMA_Init+0x658>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d068      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a5a      	ldr	r2, [pc, #360]	@ (800a1e8 <HAL_DMA_Init+0x65c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d063      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a59      	ldr	r2, [pc, #356]	@ (800a1ec <HAL_DMA_Init+0x660>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d05e      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a57      	ldr	r2, [pc, #348]	@ (800a1f0 <HAL_DMA_Init+0x664>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d059      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a56      	ldr	r2, [pc, #344]	@ (800a1f4 <HAL_DMA_Init+0x668>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d054      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a54      	ldr	r2, [pc, #336]	@ (800a1f8 <HAL_DMA_Init+0x66c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d04f      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a53      	ldr	r2, [pc, #332]	@ (800a1fc <HAL_DMA_Init+0x670>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d04a      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a51      	ldr	r2, [pc, #324]	@ (800a200 <HAL_DMA_Init+0x674>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d045      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a50      	ldr	r2, [pc, #320]	@ (800a204 <HAL_DMA_Init+0x678>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d040      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a4e      	ldr	r2, [pc, #312]	@ (800a208 <HAL_DMA_Init+0x67c>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d03b      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a4d      	ldr	r2, [pc, #308]	@ (800a20c <HAL_DMA_Init+0x680>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d036      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a4b      	ldr	r2, [pc, #300]	@ (800a210 <HAL_DMA_Init+0x684>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d031      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a4a      	ldr	r2, [pc, #296]	@ (800a214 <HAL_DMA_Init+0x688>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d02c      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a48      	ldr	r2, [pc, #288]	@ (800a218 <HAL_DMA_Init+0x68c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d027      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a47      	ldr	r2, [pc, #284]	@ (800a21c <HAL_DMA_Init+0x690>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d022      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a45      	ldr	r2, [pc, #276]	@ (800a220 <HAL_DMA_Init+0x694>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d01d      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a44      	ldr	r2, [pc, #272]	@ (800a224 <HAL_DMA_Init+0x698>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d018      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a42      	ldr	r2, [pc, #264]	@ (800a228 <HAL_DMA_Init+0x69c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d013      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a41      	ldr	r2, [pc, #260]	@ (800a22c <HAL_DMA_Init+0x6a0>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00e      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a3f      	ldr	r2, [pc, #252]	@ (800a230 <HAL_DMA_Init+0x6a4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d009      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a3e      	ldr	r2, [pc, #248]	@ (800a234 <HAL_DMA_Init+0x6a8>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d004      	beq.n	800a14a <HAL_DMA_Init+0x5be>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a3c      	ldr	r2, [pc, #240]	@ (800a238 <HAL_DMA_Init+0x6ac>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d101      	bne.n	800a14e <HAL_DMA_Init+0x5c2>
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <HAL_DMA_Init+0x5c4>
 800a14e:	2300      	movs	r3, #0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d032      	beq.n	800a1ba <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 ff33 	bl	800bfc0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b80      	cmp	r3, #128	@ 0x80
 800a160:	d102      	bne.n	800a168 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a17c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d010      	beq.n	800a1a8 <HAL_DMA_Init+0x61c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d80c      	bhi.n	800a1a8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 ffb0 	bl	800c0f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a1a4:	605a      	str	r2, [r3, #4]
 800a1a6:	e008      	b.n	800a1ba <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	a7fdabf8 	.word	0xa7fdabf8
 800a1d8:	cccccccd 	.word	0xcccccccd
 800a1dc:	40020010 	.word	0x40020010
 800a1e0:	40020028 	.word	0x40020028
 800a1e4:	40020040 	.word	0x40020040
 800a1e8:	40020058 	.word	0x40020058
 800a1ec:	40020070 	.word	0x40020070
 800a1f0:	40020088 	.word	0x40020088
 800a1f4:	400200a0 	.word	0x400200a0
 800a1f8:	400200b8 	.word	0x400200b8
 800a1fc:	40020410 	.word	0x40020410
 800a200:	40020428 	.word	0x40020428
 800a204:	40020440 	.word	0x40020440
 800a208:	40020458 	.word	0x40020458
 800a20c:	40020470 	.word	0x40020470
 800a210:	40020488 	.word	0x40020488
 800a214:	400204a0 	.word	0x400204a0
 800a218:	400204b8 	.word	0x400204b8
 800a21c:	58025408 	.word	0x58025408
 800a220:	5802541c 	.word	0x5802541c
 800a224:	58025430 	.word	0x58025430
 800a228:	58025444 	.word	0x58025444
 800a22c:	58025458 	.word	0x58025458
 800a230:	5802546c 	.word	0x5802546c
 800a234:	58025480 	.word	0x58025480
 800a238:	58025494 	.word	0x58025494

0800a23c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e226      	b.n	800a6a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d101      	bne.n	800a266 <HAL_DMA_Start_IT+0x2a>
 800a262:	2302      	movs	r3, #2
 800a264:	e21f      	b.n	800a6a6 <HAL_DMA_Start_IT+0x46a>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b01      	cmp	r3, #1
 800a278:	f040 820a 	bne.w	800a690 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a68      	ldr	r2, [pc, #416]	@ (800a430 <HAL_DMA_Start_IT+0x1f4>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d04a      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a66      	ldr	r2, [pc, #408]	@ (800a434 <HAL_DMA_Start_IT+0x1f8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d045      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a65      	ldr	r2, [pc, #404]	@ (800a438 <HAL_DMA_Start_IT+0x1fc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d040      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a63      	ldr	r2, [pc, #396]	@ (800a43c <HAL_DMA_Start_IT+0x200>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d03b      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a62      	ldr	r2, [pc, #392]	@ (800a440 <HAL_DMA_Start_IT+0x204>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d036      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a60      	ldr	r2, [pc, #384]	@ (800a444 <HAL_DMA_Start_IT+0x208>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d031      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a5f      	ldr	r2, [pc, #380]	@ (800a448 <HAL_DMA_Start_IT+0x20c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d02c      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a5d      	ldr	r2, [pc, #372]	@ (800a44c <HAL_DMA_Start_IT+0x210>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d027      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a5c      	ldr	r2, [pc, #368]	@ (800a450 <HAL_DMA_Start_IT+0x214>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d022      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a5a      	ldr	r2, [pc, #360]	@ (800a454 <HAL_DMA_Start_IT+0x218>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d01d      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a59      	ldr	r2, [pc, #356]	@ (800a458 <HAL_DMA_Start_IT+0x21c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d018      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a57      	ldr	r2, [pc, #348]	@ (800a45c <HAL_DMA_Start_IT+0x220>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d013      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a56      	ldr	r2, [pc, #344]	@ (800a460 <HAL_DMA_Start_IT+0x224>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00e      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a54      	ldr	r2, [pc, #336]	@ (800a464 <HAL_DMA_Start_IT+0x228>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d009      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a53      	ldr	r2, [pc, #332]	@ (800a468 <HAL_DMA_Start_IT+0x22c>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d004      	beq.n	800a32a <HAL_DMA_Start_IT+0xee>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a51      	ldr	r2, [pc, #324]	@ (800a46c <HAL_DMA_Start_IT+0x230>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d108      	bne.n	800a33c <HAL_DMA_Start_IT+0x100>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0201 	bic.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e007      	b.n	800a34c <HAL_DMA_Start_IT+0x110>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0201 	bic.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f001 fb5a 	bl	800ba0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a34      	ldr	r2, [pc, #208]	@ (800a430 <HAL_DMA_Start_IT+0x1f4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d04a      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a33      	ldr	r2, [pc, #204]	@ (800a434 <HAL_DMA_Start_IT+0x1f8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d045      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a31      	ldr	r2, [pc, #196]	@ (800a438 <HAL_DMA_Start_IT+0x1fc>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d040      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a30      	ldr	r2, [pc, #192]	@ (800a43c <HAL_DMA_Start_IT+0x200>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d03b      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a2e      	ldr	r2, [pc, #184]	@ (800a440 <HAL_DMA_Start_IT+0x204>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d036      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a2d      	ldr	r2, [pc, #180]	@ (800a444 <HAL_DMA_Start_IT+0x208>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d031      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a2b      	ldr	r2, [pc, #172]	@ (800a448 <HAL_DMA_Start_IT+0x20c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d02c      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a44c <HAL_DMA_Start_IT+0x210>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d027      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a28      	ldr	r2, [pc, #160]	@ (800a450 <HAL_DMA_Start_IT+0x214>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d022      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a27      	ldr	r2, [pc, #156]	@ (800a454 <HAL_DMA_Start_IT+0x218>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d01d      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a25      	ldr	r2, [pc, #148]	@ (800a458 <HAL_DMA_Start_IT+0x21c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d018      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a24      	ldr	r2, [pc, #144]	@ (800a45c <HAL_DMA_Start_IT+0x220>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d013      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a22      	ldr	r2, [pc, #136]	@ (800a460 <HAL_DMA_Start_IT+0x224>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d00e      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a21      	ldr	r2, [pc, #132]	@ (800a464 <HAL_DMA_Start_IT+0x228>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d009      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a468 <HAL_DMA_Start_IT+0x22c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d004      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x1bc>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a46c <HAL_DMA_Start_IT+0x230>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d101      	bne.n	800a3fc <HAL_DMA_Start_IT+0x1c0>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <HAL_DMA_Start_IT+0x1c2>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d036      	beq.n	800a470 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f023 021e 	bic.w	r2, r3, #30
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f042 0216 	orr.w	r2, r2, #22
 800a414:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d03e      	beq.n	800a49c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f042 0208 	orr.w	r2, r2, #8
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e035      	b.n	800a49c <HAL_DMA_Start_IT+0x260>
 800a430:	40020010 	.word	0x40020010
 800a434:	40020028 	.word	0x40020028
 800a438:	40020040 	.word	0x40020040
 800a43c:	40020058 	.word	0x40020058
 800a440:	40020070 	.word	0x40020070
 800a444:	40020088 	.word	0x40020088
 800a448:	400200a0 	.word	0x400200a0
 800a44c:	400200b8 	.word	0x400200b8
 800a450:	40020410 	.word	0x40020410
 800a454:	40020428 	.word	0x40020428
 800a458:	40020440 	.word	0x40020440
 800a45c:	40020458 	.word	0x40020458
 800a460:	40020470 	.word	0x40020470
 800a464:	40020488 	.word	0x40020488
 800a468:	400204a0 	.word	0x400204a0
 800a46c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f023 020e 	bic.w	r2, r3, #14
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 020a 	orr.w	r2, r2, #10
 800a482:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0204 	orr.w	r2, r2, #4
 800a49a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a83      	ldr	r2, [pc, #524]	@ (800a6b0 <HAL_DMA_Start_IT+0x474>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d072      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a82      	ldr	r2, [pc, #520]	@ (800a6b4 <HAL_DMA_Start_IT+0x478>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d06d      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a80      	ldr	r2, [pc, #512]	@ (800a6b8 <HAL_DMA_Start_IT+0x47c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d068      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a7f      	ldr	r2, [pc, #508]	@ (800a6bc <HAL_DMA_Start_IT+0x480>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d063      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a7d      	ldr	r2, [pc, #500]	@ (800a6c0 <HAL_DMA_Start_IT+0x484>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d05e      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a7c      	ldr	r2, [pc, #496]	@ (800a6c4 <HAL_DMA_Start_IT+0x488>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d059      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a7a      	ldr	r2, [pc, #488]	@ (800a6c8 <HAL_DMA_Start_IT+0x48c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d054      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a79      	ldr	r2, [pc, #484]	@ (800a6cc <HAL_DMA_Start_IT+0x490>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d04f      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a77      	ldr	r2, [pc, #476]	@ (800a6d0 <HAL_DMA_Start_IT+0x494>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d04a      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a76      	ldr	r2, [pc, #472]	@ (800a6d4 <HAL_DMA_Start_IT+0x498>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d045      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a74      	ldr	r2, [pc, #464]	@ (800a6d8 <HAL_DMA_Start_IT+0x49c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d040      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a73      	ldr	r2, [pc, #460]	@ (800a6dc <HAL_DMA_Start_IT+0x4a0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d03b      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a71      	ldr	r2, [pc, #452]	@ (800a6e0 <HAL_DMA_Start_IT+0x4a4>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d036      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a70      	ldr	r2, [pc, #448]	@ (800a6e4 <HAL_DMA_Start_IT+0x4a8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d031      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a6e      	ldr	r2, [pc, #440]	@ (800a6e8 <HAL_DMA_Start_IT+0x4ac>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d02c      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a6d      	ldr	r2, [pc, #436]	@ (800a6ec <HAL_DMA_Start_IT+0x4b0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d027      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a6b      	ldr	r2, [pc, #428]	@ (800a6f0 <HAL_DMA_Start_IT+0x4b4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d022      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a6a      	ldr	r2, [pc, #424]	@ (800a6f4 <HAL_DMA_Start_IT+0x4b8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d01d      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a68      	ldr	r2, [pc, #416]	@ (800a6f8 <HAL_DMA_Start_IT+0x4bc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d018      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a67      	ldr	r2, [pc, #412]	@ (800a6fc <HAL_DMA_Start_IT+0x4c0>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d013      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a65      	ldr	r2, [pc, #404]	@ (800a700 <HAL_DMA_Start_IT+0x4c4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d00e      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a64      	ldr	r2, [pc, #400]	@ (800a704 <HAL_DMA_Start_IT+0x4c8>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d009      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a62      	ldr	r2, [pc, #392]	@ (800a708 <HAL_DMA_Start_IT+0x4cc>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d004      	beq.n	800a58c <HAL_DMA_Start_IT+0x350>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a61      	ldr	r2, [pc, #388]	@ (800a70c <HAL_DMA_Start_IT+0x4d0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d101      	bne.n	800a590 <HAL_DMA_Start_IT+0x354>
 800a58c:	2301      	movs	r3, #1
 800a58e:	e000      	b.n	800a592 <HAL_DMA_Start_IT+0x356>
 800a590:	2300      	movs	r3, #0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01a      	beq.n	800a5cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d007      	beq.n	800a5cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a37      	ldr	r2, [pc, #220]	@ (800a6b0 <HAL_DMA_Start_IT+0x474>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d04a      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a36      	ldr	r2, [pc, #216]	@ (800a6b4 <HAL_DMA_Start_IT+0x478>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d045      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a34      	ldr	r2, [pc, #208]	@ (800a6b8 <HAL_DMA_Start_IT+0x47c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d040      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a33      	ldr	r2, [pc, #204]	@ (800a6bc <HAL_DMA_Start_IT+0x480>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d03b      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a31      	ldr	r2, [pc, #196]	@ (800a6c0 <HAL_DMA_Start_IT+0x484>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d036      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a30      	ldr	r2, [pc, #192]	@ (800a6c4 <HAL_DMA_Start_IT+0x488>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d031      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a2e      	ldr	r2, [pc, #184]	@ (800a6c8 <HAL_DMA_Start_IT+0x48c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d02c      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a2d      	ldr	r2, [pc, #180]	@ (800a6cc <HAL_DMA_Start_IT+0x490>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d027      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a2b      	ldr	r2, [pc, #172]	@ (800a6d0 <HAL_DMA_Start_IT+0x494>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d022      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6d4 <HAL_DMA_Start_IT+0x498>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d01d      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a28      	ldr	r2, [pc, #160]	@ (800a6d8 <HAL_DMA_Start_IT+0x49c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d018      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a27      	ldr	r2, [pc, #156]	@ (800a6dc <HAL_DMA_Start_IT+0x4a0>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d013      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a25      	ldr	r2, [pc, #148]	@ (800a6e0 <HAL_DMA_Start_IT+0x4a4>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00e      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a24      	ldr	r2, [pc, #144]	@ (800a6e4 <HAL_DMA_Start_IT+0x4a8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d009      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a22      	ldr	r2, [pc, #136]	@ (800a6e8 <HAL_DMA_Start_IT+0x4ac>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d004      	beq.n	800a66c <HAL_DMA_Start_IT+0x430>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a21      	ldr	r2, [pc, #132]	@ (800a6ec <HAL_DMA_Start_IT+0x4b0>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d108      	bne.n	800a67e <HAL_DMA_Start_IT+0x442>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0201 	orr.w	r2, r2, #1
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	e012      	b.n	800a6a4 <HAL_DMA_Start_IT+0x468>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0201 	orr.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e009      	b.n	800a6a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a696:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	40020010 	.word	0x40020010
 800a6b4:	40020028 	.word	0x40020028
 800a6b8:	40020040 	.word	0x40020040
 800a6bc:	40020058 	.word	0x40020058
 800a6c0:	40020070 	.word	0x40020070
 800a6c4:	40020088 	.word	0x40020088
 800a6c8:	400200a0 	.word	0x400200a0
 800a6cc:	400200b8 	.word	0x400200b8
 800a6d0:	40020410 	.word	0x40020410
 800a6d4:	40020428 	.word	0x40020428
 800a6d8:	40020440 	.word	0x40020440
 800a6dc:	40020458 	.word	0x40020458
 800a6e0:	40020470 	.word	0x40020470
 800a6e4:	40020488 	.word	0x40020488
 800a6e8:	400204a0 	.word	0x400204a0
 800a6ec:	400204b8 	.word	0x400204b8
 800a6f0:	58025408 	.word	0x58025408
 800a6f4:	5802541c 	.word	0x5802541c
 800a6f8:	58025430 	.word	0x58025430
 800a6fc:	58025444 	.word	0x58025444
 800a700:	58025458 	.word	0x58025458
 800a704:	5802546c 	.word	0x5802546c
 800a708:	58025480 	.word	0x58025480
 800a70c:	58025494 	.word	0x58025494

0800a710 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e237      	b.n	800ab92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d004      	beq.n	800a738 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2280      	movs	r2, #128	@ 0x80
 800a732:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e22c      	b.n	800ab92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a5c      	ldr	r2, [pc, #368]	@ (800a8b0 <HAL_DMA_Abort_IT+0x1a0>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d04a      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a5b      	ldr	r2, [pc, #364]	@ (800a8b4 <HAL_DMA_Abort_IT+0x1a4>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d045      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a59      	ldr	r2, [pc, #356]	@ (800a8b8 <HAL_DMA_Abort_IT+0x1a8>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d040      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a58      	ldr	r2, [pc, #352]	@ (800a8bc <HAL_DMA_Abort_IT+0x1ac>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d03b      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a56      	ldr	r2, [pc, #344]	@ (800a8c0 <HAL_DMA_Abort_IT+0x1b0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d036      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a55      	ldr	r2, [pc, #340]	@ (800a8c4 <HAL_DMA_Abort_IT+0x1b4>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d031      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a53      	ldr	r2, [pc, #332]	@ (800a8c8 <HAL_DMA_Abort_IT+0x1b8>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d02c      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a52      	ldr	r2, [pc, #328]	@ (800a8cc <HAL_DMA_Abort_IT+0x1bc>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d027      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a50      	ldr	r2, [pc, #320]	@ (800a8d0 <HAL_DMA_Abort_IT+0x1c0>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d022      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a4f      	ldr	r2, [pc, #316]	@ (800a8d4 <HAL_DMA_Abort_IT+0x1c4>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d01d      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a4d      	ldr	r2, [pc, #308]	@ (800a8d8 <HAL_DMA_Abort_IT+0x1c8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d018      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a4c      	ldr	r2, [pc, #304]	@ (800a8dc <HAL_DMA_Abort_IT+0x1cc>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d013      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a4a      	ldr	r2, [pc, #296]	@ (800a8e0 <HAL_DMA_Abort_IT+0x1d0>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00e      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a49      	ldr	r2, [pc, #292]	@ (800a8e4 <HAL_DMA_Abort_IT+0x1d4>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d009      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a47      	ldr	r2, [pc, #284]	@ (800a8e8 <HAL_DMA_Abort_IT+0x1d8>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d004      	beq.n	800a7d8 <HAL_DMA_Abort_IT+0xc8>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a46      	ldr	r2, [pc, #280]	@ (800a8ec <HAL_DMA_Abort_IT+0x1dc>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d101      	bne.n	800a7dc <HAL_DMA_Abort_IT+0xcc>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e000      	b.n	800a7de <HAL_DMA_Abort_IT+0xce>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 8086 	beq.w	800a8f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a2f      	ldr	r2, [pc, #188]	@ (800a8b0 <HAL_DMA_Abort_IT+0x1a0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d04a      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a2e      	ldr	r2, [pc, #184]	@ (800a8b4 <HAL_DMA_Abort_IT+0x1a4>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d045      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a2c      	ldr	r2, [pc, #176]	@ (800a8b8 <HAL_DMA_Abort_IT+0x1a8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d040      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2b      	ldr	r2, [pc, #172]	@ (800a8bc <HAL_DMA_Abort_IT+0x1ac>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d03b      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a29      	ldr	r2, [pc, #164]	@ (800a8c0 <HAL_DMA_Abort_IT+0x1b0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d036      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a28      	ldr	r2, [pc, #160]	@ (800a8c4 <HAL_DMA_Abort_IT+0x1b4>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d031      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a26      	ldr	r2, [pc, #152]	@ (800a8c8 <HAL_DMA_Abort_IT+0x1b8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d02c      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a25      	ldr	r2, [pc, #148]	@ (800a8cc <HAL_DMA_Abort_IT+0x1bc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d027      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a23      	ldr	r2, [pc, #140]	@ (800a8d0 <HAL_DMA_Abort_IT+0x1c0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d022      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a22      	ldr	r2, [pc, #136]	@ (800a8d4 <HAL_DMA_Abort_IT+0x1c4>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d01d      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a20      	ldr	r2, [pc, #128]	@ (800a8d8 <HAL_DMA_Abort_IT+0x1c8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d018      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8dc <HAL_DMA_Abort_IT+0x1cc>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d013      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a1d      	ldr	r2, [pc, #116]	@ (800a8e0 <HAL_DMA_Abort_IT+0x1d0>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00e      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a1c      	ldr	r2, [pc, #112]	@ (800a8e4 <HAL_DMA_Abort_IT+0x1d4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d009      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8e8 <HAL_DMA_Abort_IT+0x1d8>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <HAL_DMA_Abort_IT+0x17c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a19      	ldr	r2, [pc, #100]	@ (800a8ec <HAL_DMA_Abort_IT+0x1dc>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <HAL_DMA_Abort_IT+0x18e>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e178      	b.n	800ab90 <HAL_DMA_Abort_IT+0x480>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e16f      	b.n	800ab90 <HAL_DMA_Abort_IT+0x480>
 800a8b0:	40020010 	.word	0x40020010
 800a8b4:	40020028 	.word	0x40020028
 800a8b8:	40020040 	.word	0x40020040
 800a8bc:	40020058 	.word	0x40020058
 800a8c0:	40020070 	.word	0x40020070
 800a8c4:	40020088 	.word	0x40020088
 800a8c8:	400200a0 	.word	0x400200a0
 800a8cc:	400200b8 	.word	0x400200b8
 800a8d0:	40020410 	.word	0x40020410
 800a8d4:	40020428 	.word	0x40020428
 800a8d8:	40020440 	.word	0x40020440
 800a8dc:	40020458 	.word	0x40020458
 800a8e0:	40020470 	.word	0x40020470
 800a8e4:	40020488 	.word	0x40020488
 800a8e8:	400204a0 	.word	0x400204a0
 800a8ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 020e 	bic.w	r2, r2, #14
 800a8fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a6c      	ldr	r2, [pc, #432]	@ (800aab8 <HAL_DMA_Abort_IT+0x3a8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d04a      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a6b      	ldr	r2, [pc, #428]	@ (800aabc <HAL_DMA_Abort_IT+0x3ac>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d045      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a69      	ldr	r2, [pc, #420]	@ (800aac0 <HAL_DMA_Abort_IT+0x3b0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d040      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a68      	ldr	r2, [pc, #416]	@ (800aac4 <HAL_DMA_Abort_IT+0x3b4>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d03b      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a66      	ldr	r2, [pc, #408]	@ (800aac8 <HAL_DMA_Abort_IT+0x3b8>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d036      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a65      	ldr	r2, [pc, #404]	@ (800aacc <HAL_DMA_Abort_IT+0x3bc>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d031      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a63      	ldr	r2, [pc, #396]	@ (800aad0 <HAL_DMA_Abort_IT+0x3c0>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d02c      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a62      	ldr	r2, [pc, #392]	@ (800aad4 <HAL_DMA_Abort_IT+0x3c4>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d027      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a60      	ldr	r2, [pc, #384]	@ (800aad8 <HAL_DMA_Abort_IT+0x3c8>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d022      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a5f      	ldr	r2, [pc, #380]	@ (800aadc <HAL_DMA_Abort_IT+0x3cc>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d01d      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a5d      	ldr	r2, [pc, #372]	@ (800aae0 <HAL_DMA_Abort_IT+0x3d0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d018      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a5c      	ldr	r2, [pc, #368]	@ (800aae4 <HAL_DMA_Abort_IT+0x3d4>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d013      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a5a      	ldr	r2, [pc, #360]	@ (800aae8 <HAL_DMA_Abort_IT+0x3d8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00e      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a59      	ldr	r2, [pc, #356]	@ (800aaec <HAL_DMA_Abort_IT+0x3dc>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d009      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a57      	ldr	r2, [pc, #348]	@ (800aaf0 <HAL_DMA_Abort_IT+0x3e0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d004      	beq.n	800a9a0 <HAL_DMA_Abort_IT+0x290>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a56      	ldr	r2, [pc, #344]	@ (800aaf4 <HAL_DMA_Abort_IT+0x3e4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d108      	bne.n	800a9b2 <HAL_DMA_Abort_IT+0x2a2>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0201 	bic.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	e007      	b.n	800a9c2 <HAL_DMA_Abort_IT+0x2b2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0201 	bic.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a3c      	ldr	r2, [pc, #240]	@ (800aab8 <HAL_DMA_Abort_IT+0x3a8>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d072      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a3a      	ldr	r2, [pc, #232]	@ (800aabc <HAL_DMA_Abort_IT+0x3ac>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d06d      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a39      	ldr	r2, [pc, #228]	@ (800aac0 <HAL_DMA_Abort_IT+0x3b0>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d068      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a37      	ldr	r2, [pc, #220]	@ (800aac4 <HAL_DMA_Abort_IT+0x3b4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d063      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a36      	ldr	r2, [pc, #216]	@ (800aac8 <HAL_DMA_Abort_IT+0x3b8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d05e      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a34      	ldr	r2, [pc, #208]	@ (800aacc <HAL_DMA_Abort_IT+0x3bc>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d059      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a33      	ldr	r2, [pc, #204]	@ (800aad0 <HAL_DMA_Abort_IT+0x3c0>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d054      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a31      	ldr	r2, [pc, #196]	@ (800aad4 <HAL_DMA_Abort_IT+0x3c4>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d04f      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a30      	ldr	r2, [pc, #192]	@ (800aad8 <HAL_DMA_Abort_IT+0x3c8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d04a      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a2e      	ldr	r2, [pc, #184]	@ (800aadc <HAL_DMA_Abort_IT+0x3cc>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d045      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a2d      	ldr	r2, [pc, #180]	@ (800aae0 <HAL_DMA_Abort_IT+0x3d0>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d040      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a2b      	ldr	r2, [pc, #172]	@ (800aae4 <HAL_DMA_Abort_IT+0x3d4>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d03b      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	@ (800aae8 <HAL_DMA_Abort_IT+0x3d8>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d036      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a28      	ldr	r2, [pc, #160]	@ (800aaec <HAL_DMA_Abort_IT+0x3dc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d031      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a27      	ldr	r2, [pc, #156]	@ (800aaf0 <HAL_DMA_Abort_IT+0x3e0>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d02c      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a25      	ldr	r2, [pc, #148]	@ (800aaf4 <HAL_DMA_Abort_IT+0x3e4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d027      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a24      	ldr	r2, [pc, #144]	@ (800aaf8 <HAL_DMA_Abort_IT+0x3e8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d022      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a22      	ldr	r2, [pc, #136]	@ (800aafc <HAL_DMA_Abort_IT+0x3ec>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d01d      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a21      	ldr	r2, [pc, #132]	@ (800ab00 <HAL_DMA_Abort_IT+0x3f0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d018      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a1f      	ldr	r2, [pc, #124]	@ (800ab04 <HAL_DMA_Abort_IT+0x3f4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d013      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab08 <HAL_DMA_Abort_IT+0x3f8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d00e      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1c      	ldr	r2, [pc, #112]	@ (800ab0c <HAL_DMA_Abort_IT+0x3fc>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d009      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab10 <HAL_DMA_Abort_IT+0x400>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d004      	beq.n	800aab2 <HAL_DMA_Abort_IT+0x3a2>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a19      	ldr	r2, [pc, #100]	@ (800ab14 <HAL_DMA_Abort_IT+0x404>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d132      	bne.n	800ab18 <HAL_DMA_Abort_IT+0x408>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e031      	b.n	800ab1a <HAL_DMA_Abort_IT+0x40a>
 800aab6:	bf00      	nop
 800aab8:	40020010 	.word	0x40020010
 800aabc:	40020028 	.word	0x40020028
 800aac0:	40020040 	.word	0x40020040
 800aac4:	40020058 	.word	0x40020058
 800aac8:	40020070 	.word	0x40020070
 800aacc:	40020088 	.word	0x40020088
 800aad0:	400200a0 	.word	0x400200a0
 800aad4:	400200b8 	.word	0x400200b8
 800aad8:	40020410 	.word	0x40020410
 800aadc:	40020428 	.word	0x40020428
 800aae0:	40020440 	.word	0x40020440
 800aae4:	40020458 	.word	0x40020458
 800aae8:	40020470 	.word	0x40020470
 800aaec:	40020488 	.word	0x40020488
 800aaf0:	400204a0 	.word	0x400204a0
 800aaf4:	400204b8 	.word	0x400204b8
 800aaf8:	58025408 	.word	0x58025408
 800aafc:	5802541c 	.word	0x5802541c
 800ab00:	58025430 	.word	0x58025430
 800ab04:	58025444 	.word	0x58025444
 800ab08:	58025458 	.word	0x58025458
 800ab0c:	5802546c 	.word	0x5802546c
 800ab10:	58025480 	.word	0x58025480
 800ab14:	58025494 	.word	0x58025494
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d028      	beq.n	800ab70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab38:	f003 031f 	and.w	r3, r3, #31
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	409a      	lsls	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ab4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00c      	beq.n	800ab70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ab6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	@ 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aba8:	4b67      	ldr	r3, [pc, #412]	@ (800ad48 <HAL_DMA_IRQHandler+0x1ac>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a67      	ldr	r2, [pc, #412]	@ (800ad4c <HAL_DMA_IRQHandler+0x1b0>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0a9b      	lsrs	r3, r3, #10
 800abb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a5f      	ldr	r2, [pc, #380]	@ (800ad50 <HAL_DMA_IRQHandler+0x1b4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d04a      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a5d      	ldr	r2, [pc, #372]	@ (800ad54 <HAL_DMA_IRQHandler+0x1b8>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d045      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a5c      	ldr	r2, [pc, #368]	@ (800ad58 <HAL_DMA_IRQHandler+0x1bc>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d040      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a5a      	ldr	r2, [pc, #360]	@ (800ad5c <HAL_DMA_IRQHandler+0x1c0>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d03b      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a59      	ldr	r2, [pc, #356]	@ (800ad60 <HAL_DMA_IRQHandler+0x1c4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d036      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a57      	ldr	r2, [pc, #348]	@ (800ad64 <HAL_DMA_IRQHandler+0x1c8>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d031      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a56      	ldr	r2, [pc, #344]	@ (800ad68 <HAL_DMA_IRQHandler+0x1cc>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d02c      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a54      	ldr	r2, [pc, #336]	@ (800ad6c <HAL_DMA_IRQHandler+0x1d0>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d027      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a53      	ldr	r2, [pc, #332]	@ (800ad70 <HAL_DMA_IRQHandler+0x1d4>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d022      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a51      	ldr	r2, [pc, #324]	@ (800ad74 <HAL_DMA_IRQHandler+0x1d8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d01d      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a50      	ldr	r2, [pc, #320]	@ (800ad78 <HAL_DMA_IRQHandler+0x1dc>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d018      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a4e      	ldr	r2, [pc, #312]	@ (800ad7c <HAL_DMA_IRQHandler+0x1e0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a4d      	ldr	r2, [pc, #308]	@ (800ad80 <HAL_DMA_IRQHandler+0x1e4>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a4b      	ldr	r2, [pc, #300]	@ (800ad84 <HAL_DMA_IRQHandler+0x1e8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a4a      	ldr	r2, [pc, #296]	@ (800ad88 <HAL_DMA_IRQHandler+0x1ec>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xd2>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a48      	ldr	r2, [pc, #288]	@ (800ad8c <HAL_DMA_IRQHandler+0x1f0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d101      	bne.n	800ac72 <HAL_DMA_IRQHandler+0xd6>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <HAL_DMA_IRQHandler+0xd8>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 842b 	beq.w	800b4d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac7e:	f003 031f 	and.w	r3, r3, #31
 800ac82:	2208      	movs	r2, #8
 800ac84:	409a      	lsls	r2, r3
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 80a2 	beq.w	800add4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a2e      	ldr	r2, [pc, #184]	@ (800ad50 <HAL_DMA_IRQHandler+0x1b4>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d04a      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ad54 <HAL_DMA_IRQHandler+0x1b8>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d045      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a2b      	ldr	r2, [pc, #172]	@ (800ad58 <HAL_DMA_IRQHandler+0x1bc>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d040      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad5c <HAL_DMA_IRQHandler+0x1c0>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d03b      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a28      	ldr	r2, [pc, #160]	@ (800ad60 <HAL_DMA_IRQHandler+0x1c4>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d036      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a27      	ldr	r2, [pc, #156]	@ (800ad64 <HAL_DMA_IRQHandler+0x1c8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d031      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a25      	ldr	r2, [pc, #148]	@ (800ad68 <HAL_DMA_IRQHandler+0x1cc>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d02c      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a24      	ldr	r2, [pc, #144]	@ (800ad6c <HAL_DMA_IRQHandler+0x1d0>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d027      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a22      	ldr	r2, [pc, #136]	@ (800ad70 <HAL_DMA_IRQHandler+0x1d4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d022      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a21      	ldr	r2, [pc, #132]	@ (800ad74 <HAL_DMA_IRQHandler+0x1d8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d01d      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a1f      	ldr	r2, [pc, #124]	@ (800ad78 <HAL_DMA_IRQHandler+0x1dc>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d018      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a1e      	ldr	r2, [pc, #120]	@ (800ad7c <HAL_DMA_IRQHandler+0x1e0>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d013      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a1c      	ldr	r2, [pc, #112]	@ (800ad80 <HAL_DMA_IRQHandler+0x1e4>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00e      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a1b      	ldr	r2, [pc, #108]	@ (800ad84 <HAL_DMA_IRQHandler+0x1e8>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d009      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a19      	ldr	r2, [pc, #100]	@ (800ad88 <HAL_DMA_IRQHandler+0x1ec>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x194>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a18      	ldr	r2, [pc, #96]	@ (800ad8c <HAL_DMA_IRQHandler+0x1f0>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d12f      	bne.n	800ad90 <HAL_DMA_IRQHandler+0x1f4>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bf14      	ite	ne
 800ad3e:	2301      	movne	r3, #1
 800ad40:	2300      	moveq	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	e02e      	b.n	800ada4 <HAL_DMA_IRQHandler+0x208>
 800ad46:	bf00      	nop
 800ad48:	24000018 	.word	0x24000018
 800ad4c:	1b4e81b5 	.word	0x1b4e81b5
 800ad50:	40020010 	.word	0x40020010
 800ad54:	40020028 	.word	0x40020028
 800ad58:	40020040 	.word	0x40020040
 800ad5c:	40020058 	.word	0x40020058
 800ad60:	40020070 	.word	0x40020070
 800ad64:	40020088 	.word	0x40020088
 800ad68:	400200a0 	.word	0x400200a0
 800ad6c:	400200b8 	.word	0x400200b8
 800ad70:	40020410 	.word	0x40020410
 800ad74:	40020428 	.word	0x40020428
 800ad78:	40020440 	.word	0x40020440
 800ad7c:	40020458 	.word	0x40020458
 800ad80:	40020470 	.word	0x40020470
 800ad84:	40020488 	.word	0x40020488
 800ad88:	400204a0 	.word	0x400204a0
 800ad8c:	400204b8 	.word	0x400204b8
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0308 	and.w	r3, r3, #8
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d015      	beq.n	800add4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 0204 	bic.w	r2, r2, #4
 800adb6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adbc:	f003 031f 	and.w	r3, r3, #31
 800adc0:	2208      	movs	r2, #8
 800adc2:	409a      	lsls	r2, r3
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adcc:	f043 0201 	orr.w	r2, r3, #1
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	fa22 f303 	lsr.w	r3, r2, r3
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d06e      	beq.n	800aec8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a69      	ldr	r2, [pc, #420]	@ (800af94 <HAL_DMA_IRQHandler+0x3f8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d04a      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a67      	ldr	r2, [pc, #412]	@ (800af98 <HAL_DMA_IRQHandler+0x3fc>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d045      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a66      	ldr	r2, [pc, #408]	@ (800af9c <HAL_DMA_IRQHandler+0x400>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d040      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a64      	ldr	r2, [pc, #400]	@ (800afa0 <HAL_DMA_IRQHandler+0x404>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d03b      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a63      	ldr	r2, [pc, #396]	@ (800afa4 <HAL_DMA_IRQHandler+0x408>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d036      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a61      	ldr	r2, [pc, #388]	@ (800afa8 <HAL_DMA_IRQHandler+0x40c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d031      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a60      	ldr	r2, [pc, #384]	@ (800afac <HAL_DMA_IRQHandler+0x410>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d02c      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a5e      	ldr	r2, [pc, #376]	@ (800afb0 <HAL_DMA_IRQHandler+0x414>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d027      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a5d      	ldr	r2, [pc, #372]	@ (800afb4 <HAL_DMA_IRQHandler+0x418>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d022      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a5b      	ldr	r2, [pc, #364]	@ (800afb8 <HAL_DMA_IRQHandler+0x41c>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d01d      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a5a      	ldr	r2, [pc, #360]	@ (800afbc <HAL_DMA_IRQHandler+0x420>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d018      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a58      	ldr	r2, [pc, #352]	@ (800afc0 <HAL_DMA_IRQHandler+0x424>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d013      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a57      	ldr	r2, [pc, #348]	@ (800afc4 <HAL_DMA_IRQHandler+0x428>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00e      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a55      	ldr	r2, [pc, #340]	@ (800afc8 <HAL_DMA_IRQHandler+0x42c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d009      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a54      	ldr	r2, [pc, #336]	@ (800afcc <HAL_DMA_IRQHandler+0x430>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d004      	beq.n	800ae8a <HAL_DMA_IRQHandler+0x2ee>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a52      	ldr	r2, [pc, #328]	@ (800afd0 <HAL_DMA_IRQHandler+0x434>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d10a      	bne.n	800aea0 <HAL_DMA_IRQHandler+0x304>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bf14      	ite	ne
 800ae98:	2301      	movne	r3, #1
 800ae9a:	2300      	moveq	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	e003      	b.n	800aea8 <HAL_DMA_IRQHandler+0x30c>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2300      	movs	r3, #0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00d      	beq.n	800aec8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeb0:	f003 031f 	and.w	r3, r3, #31
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	409a      	lsls	r2, r3
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec0:	f043 0202 	orr.w	r2, r3, #2
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aecc:	f003 031f 	and.w	r3, r3, #31
 800aed0:	2204      	movs	r2, #4
 800aed2:	409a      	lsls	r2, r3
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	4013      	ands	r3, r2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 808f 	beq.w	800affc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a2c      	ldr	r2, [pc, #176]	@ (800af94 <HAL_DMA_IRQHandler+0x3f8>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d04a      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a2a      	ldr	r2, [pc, #168]	@ (800af98 <HAL_DMA_IRQHandler+0x3fc>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d045      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a29      	ldr	r2, [pc, #164]	@ (800af9c <HAL_DMA_IRQHandler+0x400>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d040      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a27      	ldr	r2, [pc, #156]	@ (800afa0 <HAL_DMA_IRQHandler+0x404>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d03b      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a26      	ldr	r2, [pc, #152]	@ (800afa4 <HAL_DMA_IRQHandler+0x408>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d036      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a24      	ldr	r2, [pc, #144]	@ (800afa8 <HAL_DMA_IRQHandler+0x40c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d031      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a23      	ldr	r2, [pc, #140]	@ (800afac <HAL_DMA_IRQHandler+0x410>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d02c      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a21      	ldr	r2, [pc, #132]	@ (800afb0 <HAL_DMA_IRQHandler+0x414>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d027      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a20      	ldr	r2, [pc, #128]	@ (800afb4 <HAL_DMA_IRQHandler+0x418>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d022      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a1e      	ldr	r2, [pc, #120]	@ (800afb8 <HAL_DMA_IRQHandler+0x41c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d01d      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1d      	ldr	r2, [pc, #116]	@ (800afbc <HAL_DMA_IRQHandler+0x420>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d018      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a1b      	ldr	r2, [pc, #108]	@ (800afc0 <HAL_DMA_IRQHandler+0x424>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d013      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a1a      	ldr	r2, [pc, #104]	@ (800afc4 <HAL_DMA_IRQHandler+0x428>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00e      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a18      	ldr	r2, [pc, #96]	@ (800afc8 <HAL_DMA_IRQHandler+0x42c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d009      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a17      	ldr	r2, [pc, #92]	@ (800afcc <HAL_DMA_IRQHandler+0x430>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d004      	beq.n	800af7e <HAL_DMA_IRQHandler+0x3e2>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a15      	ldr	r2, [pc, #84]	@ (800afd0 <HAL_DMA_IRQHandler+0x434>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d12a      	bne.n	800afd4 <HAL_DMA_IRQHandler+0x438>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bf14      	ite	ne
 800af8c:	2301      	movne	r3, #1
 800af8e:	2300      	moveq	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	e023      	b.n	800afdc <HAL_DMA_IRQHandler+0x440>
 800af94:	40020010 	.word	0x40020010
 800af98:	40020028 	.word	0x40020028
 800af9c:	40020040 	.word	0x40020040
 800afa0:	40020058 	.word	0x40020058
 800afa4:	40020070 	.word	0x40020070
 800afa8:	40020088 	.word	0x40020088
 800afac:	400200a0 	.word	0x400200a0
 800afb0:	400200b8 	.word	0x400200b8
 800afb4:	40020410 	.word	0x40020410
 800afb8:	40020428 	.word	0x40020428
 800afbc:	40020440 	.word	0x40020440
 800afc0:	40020458 	.word	0x40020458
 800afc4:	40020470 	.word	0x40020470
 800afc8:	40020488 	.word	0x40020488
 800afcc:	400204a0 	.word	0x400204a0
 800afd0:	400204b8 	.word	0x400204b8
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2300      	movs	r3, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00d      	beq.n	800affc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afe4:	f003 031f 	and.w	r3, r3, #31
 800afe8:	2204      	movs	r2, #4
 800afea:	409a      	lsls	r2, r3
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff4:	f043 0204 	orr.w	r2, r3, #4
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b000:	f003 031f 	and.w	r3, r3, #31
 800b004:	2210      	movs	r2, #16
 800b006:	409a      	lsls	r2, r3
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 80a6 	beq.w	800b15e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a85      	ldr	r2, [pc, #532]	@ (800b22c <HAL_DMA_IRQHandler+0x690>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d04a      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a83      	ldr	r2, [pc, #524]	@ (800b230 <HAL_DMA_IRQHandler+0x694>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d045      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a82      	ldr	r2, [pc, #520]	@ (800b234 <HAL_DMA_IRQHandler+0x698>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d040      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a80      	ldr	r2, [pc, #512]	@ (800b238 <HAL_DMA_IRQHandler+0x69c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d03b      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a7f      	ldr	r2, [pc, #508]	@ (800b23c <HAL_DMA_IRQHandler+0x6a0>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d036      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a7d      	ldr	r2, [pc, #500]	@ (800b240 <HAL_DMA_IRQHandler+0x6a4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d031      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a7c      	ldr	r2, [pc, #496]	@ (800b244 <HAL_DMA_IRQHandler+0x6a8>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d02c      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a7a      	ldr	r2, [pc, #488]	@ (800b248 <HAL_DMA_IRQHandler+0x6ac>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d027      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a79      	ldr	r2, [pc, #484]	@ (800b24c <HAL_DMA_IRQHandler+0x6b0>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d022      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a77      	ldr	r2, [pc, #476]	@ (800b250 <HAL_DMA_IRQHandler+0x6b4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d01d      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a76      	ldr	r2, [pc, #472]	@ (800b254 <HAL_DMA_IRQHandler+0x6b8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d018      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a74      	ldr	r2, [pc, #464]	@ (800b258 <HAL_DMA_IRQHandler+0x6bc>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d013      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a73      	ldr	r2, [pc, #460]	@ (800b25c <HAL_DMA_IRQHandler+0x6c0>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00e      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a71      	ldr	r2, [pc, #452]	@ (800b260 <HAL_DMA_IRQHandler+0x6c4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d009      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a70      	ldr	r2, [pc, #448]	@ (800b264 <HAL_DMA_IRQHandler+0x6c8>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d004      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0x516>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a6e      	ldr	r2, [pc, #440]	@ (800b268 <HAL_DMA_IRQHandler+0x6cc>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d10a      	bne.n	800b0c8 <HAL_DMA_IRQHandler+0x52c>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bf14      	ite	ne
 800b0c0:	2301      	movne	r3, #1
 800b0c2:	2300      	moveq	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	e009      	b.n	800b0dc <HAL_DMA_IRQHandler+0x540>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bf14      	ite	ne
 800b0d6:	2301      	movne	r3, #1
 800b0d8:	2300      	moveq	r3, #0
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d03e      	beq.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0e4:	f003 031f 	and.w	r3, r3, #31
 800b0e8:	2210      	movs	r2, #16
 800b0ea:	409a      	lsls	r2, r3
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d018      	beq.n	800b130 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d108      	bne.n	800b11e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b110:	2b00      	cmp	r3, #0
 800b112:	d024      	beq.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	4798      	blx	r3
 800b11c:	e01f      	b.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01b      	beq.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	4798      	blx	r3
 800b12e:	e016      	b.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 0208 	bic.w	r2, r2, #8
 800b14c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b162:	f003 031f 	and.w	r3, r3, #31
 800b166:	2220      	movs	r2, #32
 800b168:	409a      	lsls	r2, r3
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	4013      	ands	r3, r2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 8110 	beq.w	800b394 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a2c      	ldr	r2, [pc, #176]	@ (800b22c <HAL_DMA_IRQHandler+0x690>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d04a      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a2b      	ldr	r2, [pc, #172]	@ (800b230 <HAL_DMA_IRQHandler+0x694>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d045      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a29      	ldr	r2, [pc, #164]	@ (800b234 <HAL_DMA_IRQHandler+0x698>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d040      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a28      	ldr	r2, [pc, #160]	@ (800b238 <HAL_DMA_IRQHandler+0x69c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d03b      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a26      	ldr	r2, [pc, #152]	@ (800b23c <HAL_DMA_IRQHandler+0x6a0>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d036      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a25      	ldr	r2, [pc, #148]	@ (800b240 <HAL_DMA_IRQHandler+0x6a4>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d031      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a23      	ldr	r2, [pc, #140]	@ (800b244 <HAL_DMA_IRQHandler+0x6a8>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d02c      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a22      	ldr	r2, [pc, #136]	@ (800b248 <HAL_DMA_IRQHandler+0x6ac>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d027      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a20      	ldr	r2, [pc, #128]	@ (800b24c <HAL_DMA_IRQHandler+0x6b0>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d022      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a1f      	ldr	r2, [pc, #124]	@ (800b250 <HAL_DMA_IRQHandler+0x6b4>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d01d      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b254 <HAL_DMA_IRQHandler+0x6b8>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d018      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a1c      	ldr	r2, [pc, #112]	@ (800b258 <HAL_DMA_IRQHandler+0x6bc>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d013      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b25c <HAL_DMA_IRQHandler+0x6c0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00e      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a19      	ldr	r2, [pc, #100]	@ (800b260 <HAL_DMA_IRQHandler+0x6c4>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d009      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a17      	ldr	r2, [pc, #92]	@ (800b264 <HAL_DMA_IRQHandler+0x6c8>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d004      	beq.n	800b214 <HAL_DMA_IRQHandler+0x678>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a16      	ldr	r2, [pc, #88]	@ (800b268 <HAL_DMA_IRQHandler+0x6cc>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d12b      	bne.n	800b26c <HAL_DMA_IRQHandler+0x6d0>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0310 	and.w	r3, r3, #16
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bf14      	ite	ne
 800b222:	2301      	movne	r3, #1
 800b224:	2300      	moveq	r3, #0
 800b226:	b2db      	uxtb	r3, r3
 800b228:	e02a      	b.n	800b280 <HAL_DMA_IRQHandler+0x6e4>
 800b22a:	bf00      	nop
 800b22c:	40020010 	.word	0x40020010
 800b230:	40020028 	.word	0x40020028
 800b234:	40020040 	.word	0x40020040
 800b238:	40020058 	.word	0x40020058
 800b23c:	40020070 	.word	0x40020070
 800b240:	40020088 	.word	0x40020088
 800b244:	400200a0 	.word	0x400200a0
 800b248:	400200b8 	.word	0x400200b8
 800b24c:	40020410 	.word	0x40020410
 800b250:	40020428 	.word	0x40020428
 800b254:	40020440 	.word	0x40020440
 800b258:	40020458 	.word	0x40020458
 800b25c:	40020470 	.word	0x40020470
 800b260:	40020488 	.word	0x40020488
 800b264:	400204a0 	.word	0x400204a0
 800b268:	400204b8 	.word	0x400204b8
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	bf14      	ite	ne
 800b27a:	2301      	movne	r3, #1
 800b27c:	2300      	moveq	r3, #0
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 8087 	beq.w	800b394 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b28a:	f003 031f 	and.w	r3, r3, #31
 800b28e:	2220      	movs	r2, #32
 800b290:	409a      	lsls	r2, r3
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d139      	bne.n	800b316 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0216 	bic.w	r2, r2, #22
 800b2b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b2c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <HAL_DMA_IRQHandler+0x736>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 0208 	bic.w	r2, r2, #8
 800b2e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2e6:	f003 031f 	and.w	r3, r3, #31
 800b2ea:	223f      	movs	r2, #63	@ 0x3f
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 834a 	beq.w	800b9a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	4798      	blx	r3
          }
          return;
 800b314:	e344      	b.n	800b9a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d018      	beq.n	800b356 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d108      	bne.n	800b344 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b336:	2b00      	cmp	r3, #0
 800b338:	d02c      	beq.n	800b394 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	4798      	blx	r3
 800b342:	e027      	b.n	800b394 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d023      	beq.n	800b394 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	4798      	blx	r3
 800b354:	e01e      	b.n	800b394 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10f      	bne.n	800b384 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0210 	bic.w	r2, r2, #16
 800b372:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 8306 	beq.w	800b9aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 8088 	beq.w	800b4bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a7a      	ldr	r2, [pc, #488]	@ (800b5a4 <HAL_DMA_IRQHandler+0xa08>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d04a      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a79      	ldr	r2, [pc, #484]	@ (800b5a8 <HAL_DMA_IRQHandler+0xa0c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d045      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a77      	ldr	r2, [pc, #476]	@ (800b5ac <HAL_DMA_IRQHandler+0xa10>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d040      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a76      	ldr	r2, [pc, #472]	@ (800b5b0 <HAL_DMA_IRQHandler+0xa14>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d03b      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a74      	ldr	r2, [pc, #464]	@ (800b5b4 <HAL_DMA_IRQHandler+0xa18>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d036      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a73      	ldr	r2, [pc, #460]	@ (800b5b8 <HAL_DMA_IRQHandler+0xa1c>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d031      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a71      	ldr	r2, [pc, #452]	@ (800b5bc <HAL_DMA_IRQHandler+0xa20>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d02c      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a70      	ldr	r2, [pc, #448]	@ (800b5c0 <HAL_DMA_IRQHandler+0xa24>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d027      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a6e      	ldr	r2, [pc, #440]	@ (800b5c4 <HAL_DMA_IRQHandler+0xa28>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d022      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a6d      	ldr	r2, [pc, #436]	@ (800b5c8 <HAL_DMA_IRQHandler+0xa2c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d01d      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a6b      	ldr	r2, [pc, #428]	@ (800b5cc <HAL_DMA_IRQHandler+0xa30>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d018      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a6a      	ldr	r2, [pc, #424]	@ (800b5d0 <HAL_DMA_IRQHandler+0xa34>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a68      	ldr	r2, [pc, #416]	@ (800b5d4 <HAL_DMA_IRQHandler+0xa38>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00e      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a67      	ldr	r2, [pc, #412]	@ (800b5d8 <HAL_DMA_IRQHandler+0xa3c>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d009      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a65      	ldr	r2, [pc, #404]	@ (800b5dc <HAL_DMA_IRQHandler+0xa40>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_DMA_IRQHandler+0x8b8>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a64      	ldr	r2, [pc, #400]	@ (800b5e0 <HAL_DMA_IRQHandler+0xa44>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d108      	bne.n	800b466 <HAL_DMA_IRQHandler+0x8ca>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f022 0201 	bic.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	e007      	b.n	800b476 <HAL_DMA_IRQHandler+0x8da>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f022 0201 	bic.w	r2, r2, #1
 800b474:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b47e:	429a      	cmp	r2, r3
 800b480:	d307      	bcc.n	800b492 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1f2      	bne.n	800b476 <HAL_DMA_IRQHandler+0x8da>
 800b490:	e000      	b.n	800b494 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b492:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d004      	beq.n	800b4ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b4aa:	e003      	b.n	800b4b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 8272 	beq.w	800b9aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	4798      	blx	r3
 800b4ce:	e26c      	b.n	800b9aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a43      	ldr	r2, [pc, #268]	@ (800b5e4 <HAL_DMA_IRQHandler+0xa48>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d022      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a42      	ldr	r2, [pc, #264]	@ (800b5e8 <HAL_DMA_IRQHandler+0xa4c>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d01d      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a40      	ldr	r2, [pc, #256]	@ (800b5ec <HAL_DMA_IRQHandler+0xa50>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d018      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a3f      	ldr	r2, [pc, #252]	@ (800b5f0 <HAL_DMA_IRQHandler+0xa54>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d013      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a3d      	ldr	r2, [pc, #244]	@ (800b5f4 <HAL_DMA_IRQHandler+0xa58>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00e      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a3c      	ldr	r2, [pc, #240]	@ (800b5f8 <HAL_DMA_IRQHandler+0xa5c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d009      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a3a      	ldr	r2, [pc, #232]	@ (800b5fc <HAL_DMA_IRQHandler+0xa60>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_DMA_IRQHandler+0x984>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a39      	ldr	r2, [pc, #228]	@ (800b600 <HAL_DMA_IRQHandler+0xa64>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d101      	bne.n	800b524 <HAL_DMA_IRQHandler+0x988>
 800b520:	2301      	movs	r3, #1
 800b522:	e000      	b.n	800b526 <HAL_DMA_IRQHandler+0x98a>
 800b524:	2300      	movs	r3, #0
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 823f 	beq.w	800b9aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b538:	f003 031f 	and.w	r3, r3, #31
 800b53c:	2204      	movs	r2, #4
 800b53e:	409a      	lsls	r2, r3
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	4013      	ands	r3, r2
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 80cd 	beq.w	800b6e4 <HAL_DMA_IRQHandler+0xb48>
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80c7 	beq.w	800b6e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b55a:	f003 031f 	and.w	r3, r3, #31
 800b55e:	2204      	movs	r2, #4
 800b560:	409a      	lsls	r2, r3
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d049      	beq.n	800b604 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d109      	bne.n	800b58e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8210 	beq.w	800b9a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b58c:	e20a      	b.n	800b9a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 8206 	beq.w	800b9a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5a0:	e200      	b.n	800b9a4 <HAL_DMA_IRQHandler+0xe08>
 800b5a2:	bf00      	nop
 800b5a4:	40020010 	.word	0x40020010
 800b5a8:	40020028 	.word	0x40020028
 800b5ac:	40020040 	.word	0x40020040
 800b5b0:	40020058 	.word	0x40020058
 800b5b4:	40020070 	.word	0x40020070
 800b5b8:	40020088 	.word	0x40020088
 800b5bc:	400200a0 	.word	0x400200a0
 800b5c0:	400200b8 	.word	0x400200b8
 800b5c4:	40020410 	.word	0x40020410
 800b5c8:	40020428 	.word	0x40020428
 800b5cc:	40020440 	.word	0x40020440
 800b5d0:	40020458 	.word	0x40020458
 800b5d4:	40020470 	.word	0x40020470
 800b5d8:	40020488 	.word	0x40020488
 800b5dc:	400204a0 	.word	0x400204a0
 800b5e0:	400204b8 	.word	0x400204b8
 800b5e4:	58025408 	.word	0x58025408
 800b5e8:	5802541c 	.word	0x5802541c
 800b5ec:	58025430 	.word	0x58025430
 800b5f0:	58025444 	.word	0x58025444
 800b5f4:	58025458 	.word	0x58025458
 800b5f8:	5802546c 	.word	0x5802546c
 800b5fc:	58025480 	.word	0x58025480
 800b600:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d160      	bne.n	800b6d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a7f      	ldr	r2, [pc, #508]	@ (800b810 <HAL_DMA_IRQHandler+0xc74>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d04a      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a7d      	ldr	r2, [pc, #500]	@ (800b814 <HAL_DMA_IRQHandler+0xc78>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d045      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a7c      	ldr	r2, [pc, #496]	@ (800b818 <HAL_DMA_IRQHandler+0xc7c>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d040      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a7a      	ldr	r2, [pc, #488]	@ (800b81c <HAL_DMA_IRQHandler+0xc80>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d03b      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a79      	ldr	r2, [pc, #484]	@ (800b820 <HAL_DMA_IRQHandler+0xc84>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d036      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a77      	ldr	r2, [pc, #476]	@ (800b824 <HAL_DMA_IRQHandler+0xc88>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d031      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a76      	ldr	r2, [pc, #472]	@ (800b828 <HAL_DMA_IRQHandler+0xc8c>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d02c      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a74      	ldr	r2, [pc, #464]	@ (800b82c <HAL_DMA_IRQHandler+0xc90>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d027      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a73      	ldr	r2, [pc, #460]	@ (800b830 <HAL_DMA_IRQHandler+0xc94>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d022      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a71      	ldr	r2, [pc, #452]	@ (800b834 <HAL_DMA_IRQHandler+0xc98>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d01d      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a70      	ldr	r2, [pc, #448]	@ (800b838 <HAL_DMA_IRQHandler+0xc9c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d018      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a6e      	ldr	r2, [pc, #440]	@ (800b83c <HAL_DMA_IRQHandler+0xca0>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d013      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a6d      	ldr	r2, [pc, #436]	@ (800b840 <HAL_DMA_IRQHandler+0xca4>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00e      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a6b      	ldr	r2, [pc, #428]	@ (800b844 <HAL_DMA_IRQHandler+0xca8>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d009      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a6a      	ldr	r2, [pc, #424]	@ (800b848 <HAL_DMA_IRQHandler+0xcac>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d004      	beq.n	800b6ae <HAL_DMA_IRQHandler+0xb12>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a68      	ldr	r2, [pc, #416]	@ (800b84c <HAL_DMA_IRQHandler+0xcb0>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d108      	bne.n	800b6c0 <HAL_DMA_IRQHandler+0xb24>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0208 	bic.w	r2, r2, #8
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	e007      	b.n	800b6d0 <HAL_DMA_IRQHandler+0xb34>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0204 	bic.w	r2, r2, #4
 800b6ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 8165 	beq.w	800b9a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b6e2:	e15f      	b.n	800b9a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6e8:	f003 031f 	and.w	r3, r3, #31
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	409a      	lsls	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 80c5 	beq.w	800b884 <HAL_DMA_IRQHandler+0xce8>
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f003 0302 	and.w	r3, r3, #2
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80bf 	beq.w	800b884 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b70a:	f003 031f 	and.w	r3, r3, #31
 800b70e:	2202      	movs	r2, #2
 800b710:	409a      	lsls	r2, r3
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d018      	beq.n	800b752 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d109      	bne.n	800b73e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 813a 	beq.w	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b73c:	e134      	b.n	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 8130 	beq.w	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b750:	e12a      	b.n	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f003 0320 	and.w	r3, r3, #32
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f040 8089 	bne.w	800b870 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a2b      	ldr	r2, [pc, #172]	@ (800b810 <HAL_DMA_IRQHandler+0xc74>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d04a      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a29      	ldr	r2, [pc, #164]	@ (800b814 <HAL_DMA_IRQHandler+0xc78>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d045      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a28      	ldr	r2, [pc, #160]	@ (800b818 <HAL_DMA_IRQHandler+0xc7c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d040      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a26      	ldr	r2, [pc, #152]	@ (800b81c <HAL_DMA_IRQHandler+0xc80>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d03b      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a25      	ldr	r2, [pc, #148]	@ (800b820 <HAL_DMA_IRQHandler+0xc84>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d036      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a23      	ldr	r2, [pc, #140]	@ (800b824 <HAL_DMA_IRQHandler+0xc88>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d031      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a22      	ldr	r2, [pc, #136]	@ (800b828 <HAL_DMA_IRQHandler+0xc8c>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d02c      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a20      	ldr	r2, [pc, #128]	@ (800b82c <HAL_DMA_IRQHandler+0xc90>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d027      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b830 <HAL_DMA_IRQHandler+0xc94>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d022      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b834 <HAL_DMA_IRQHandler+0xc98>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d01d      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b838 <HAL_DMA_IRQHandler+0xc9c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d018      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a1a      	ldr	r2, [pc, #104]	@ (800b83c <HAL_DMA_IRQHandler+0xca0>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d013      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a19      	ldr	r2, [pc, #100]	@ (800b840 <HAL_DMA_IRQHandler+0xca4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00e      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a17      	ldr	r2, [pc, #92]	@ (800b844 <HAL_DMA_IRQHandler+0xca8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d009      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a16      	ldr	r2, [pc, #88]	@ (800b848 <HAL_DMA_IRQHandler+0xcac>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d004      	beq.n	800b7fe <HAL_DMA_IRQHandler+0xc62>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a14      	ldr	r2, [pc, #80]	@ (800b84c <HAL_DMA_IRQHandler+0xcb0>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d128      	bne.n	800b850 <HAL_DMA_IRQHandler+0xcb4>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f022 0214 	bic.w	r2, r2, #20
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e027      	b.n	800b860 <HAL_DMA_IRQHandler+0xcc4>
 800b810:	40020010 	.word	0x40020010
 800b814:	40020028 	.word	0x40020028
 800b818:	40020040 	.word	0x40020040
 800b81c:	40020058 	.word	0x40020058
 800b820:	40020070 	.word	0x40020070
 800b824:	40020088 	.word	0x40020088
 800b828:	400200a0 	.word	0x400200a0
 800b82c:	400200b8 	.word	0x400200b8
 800b830:	40020410 	.word	0x40020410
 800b834:	40020428 	.word	0x40020428
 800b838:	40020440 	.word	0x40020440
 800b83c:	40020458 	.word	0x40020458
 800b840:	40020470 	.word	0x40020470
 800b844:	40020488 	.word	0x40020488
 800b848:	400204a0 	.word	0x400204a0
 800b84c:	400204b8 	.word	0x400204b8
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 020a 	bic.w	r2, r2, #10
 800b85e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8097 	beq.w	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b882:	e091      	b.n	800b9a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b888:	f003 031f 	and.w	r3, r3, #31
 800b88c:	2208      	movs	r2, #8
 800b88e:	409a      	lsls	r2, r3
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	4013      	ands	r3, r2
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8088 	beq.w	800b9aa <HAL_DMA_IRQHandler+0xe0e>
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f003 0308 	and.w	r3, r3, #8
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 8082 	beq.w	800b9aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a41      	ldr	r2, [pc, #260]	@ (800b9b0 <HAL_DMA_IRQHandler+0xe14>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d04a      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a3f      	ldr	r2, [pc, #252]	@ (800b9b4 <HAL_DMA_IRQHandler+0xe18>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d045      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a3e      	ldr	r2, [pc, #248]	@ (800b9b8 <HAL_DMA_IRQHandler+0xe1c>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d040      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b9bc <HAL_DMA_IRQHandler+0xe20>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d03b      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a3b      	ldr	r2, [pc, #236]	@ (800b9c0 <HAL_DMA_IRQHandler+0xe24>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d036      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a39      	ldr	r2, [pc, #228]	@ (800b9c4 <HAL_DMA_IRQHandler+0xe28>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d031      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a38      	ldr	r2, [pc, #224]	@ (800b9c8 <HAL_DMA_IRQHandler+0xe2c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d02c      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a36      	ldr	r2, [pc, #216]	@ (800b9cc <HAL_DMA_IRQHandler+0xe30>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d027      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a35      	ldr	r2, [pc, #212]	@ (800b9d0 <HAL_DMA_IRQHandler+0xe34>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d022      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a33      	ldr	r2, [pc, #204]	@ (800b9d4 <HAL_DMA_IRQHandler+0xe38>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d01d      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a32      	ldr	r2, [pc, #200]	@ (800b9d8 <HAL_DMA_IRQHandler+0xe3c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d018      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a30      	ldr	r2, [pc, #192]	@ (800b9dc <HAL_DMA_IRQHandler+0xe40>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d013      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a2f      	ldr	r2, [pc, #188]	@ (800b9e0 <HAL_DMA_IRQHandler+0xe44>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00e      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a2d      	ldr	r2, [pc, #180]	@ (800b9e4 <HAL_DMA_IRQHandler+0xe48>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d009      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a2c      	ldr	r2, [pc, #176]	@ (800b9e8 <HAL_DMA_IRQHandler+0xe4c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d004      	beq.n	800b946 <HAL_DMA_IRQHandler+0xdaa>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a2a      	ldr	r2, [pc, #168]	@ (800b9ec <HAL_DMA_IRQHandler+0xe50>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d108      	bne.n	800b958 <HAL_DMA_IRQHandler+0xdbc>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f022 021c 	bic.w	r2, r2, #28
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	e007      	b.n	800b968 <HAL_DMA_IRQHandler+0xdcc>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 020e 	bic.w	r2, r2, #14
 800b966:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b96c:	f003 031f 	and.w	r3, r3, #31
 800b970:	2201      	movs	r2, #1
 800b972:	409a      	lsls	r2, r3
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
 800b99e:	e004      	b.n	800b9aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b9a0:	bf00      	nop
 800b9a2:	e002      	b.n	800b9aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b9a4:	bf00      	nop
 800b9a6:	e000      	b.n	800b9aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b9a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b9aa:	3728      	adds	r7, #40	@ 0x28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	40020010 	.word	0x40020010
 800b9b4:	40020028 	.word	0x40020028
 800b9b8:	40020040 	.word	0x40020040
 800b9bc:	40020058 	.word	0x40020058
 800b9c0:	40020070 	.word	0x40020070
 800b9c4:	40020088 	.word	0x40020088
 800b9c8:	400200a0 	.word	0x400200a0
 800b9cc:	400200b8 	.word	0x400200b8
 800b9d0:	40020410 	.word	0x40020410
 800b9d4:	40020428 	.word	0x40020428
 800b9d8:	40020440 	.word	0x40020440
 800b9dc:	40020458 	.word	0x40020458
 800b9e0:	40020470 	.word	0x40020470
 800b9e4:	40020488 	.word	0x40020488
 800b9e8:	400204a0 	.word	0x400204a0
 800b9ec:	400204b8 	.word	0x400204b8

0800b9f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b9fe:	b2db      	uxtb	r3, r3
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a7f      	ldr	r2, [pc, #508]	@ (800bc28 <DMA_SetConfig+0x21c>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d072      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a7d      	ldr	r2, [pc, #500]	@ (800bc2c <DMA_SetConfig+0x220>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d06d      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a7c      	ldr	r2, [pc, #496]	@ (800bc30 <DMA_SetConfig+0x224>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d068      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a7a      	ldr	r2, [pc, #488]	@ (800bc34 <DMA_SetConfig+0x228>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d063      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a79      	ldr	r2, [pc, #484]	@ (800bc38 <DMA_SetConfig+0x22c>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d05e      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a77      	ldr	r2, [pc, #476]	@ (800bc3c <DMA_SetConfig+0x230>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d059      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a76      	ldr	r2, [pc, #472]	@ (800bc40 <DMA_SetConfig+0x234>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d054      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a74      	ldr	r2, [pc, #464]	@ (800bc44 <DMA_SetConfig+0x238>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d04f      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a73      	ldr	r2, [pc, #460]	@ (800bc48 <DMA_SetConfig+0x23c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d04a      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a71      	ldr	r2, [pc, #452]	@ (800bc4c <DMA_SetConfig+0x240>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d045      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a70      	ldr	r2, [pc, #448]	@ (800bc50 <DMA_SetConfig+0x244>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d040      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a6e      	ldr	r2, [pc, #440]	@ (800bc54 <DMA_SetConfig+0x248>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d03b      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a6d      	ldr	r2, [pc, #436]	@ (800bc58 <DMA_SetConfig+0x24c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d036      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a6b      	ldr	r2, [pc, #428]	@ (800bc5c <DMA_SetConfig+0x250>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d031      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a6a      	ldr	r2, [pc, #424]	@ (800bc60 <DMA_SetConfig+0x254>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d02c      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a68      	ldr	r2, [pc, #416]	@ (800bc64 <DMA_SetConfig+0x258>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d027      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a67      	ldr	r2, [pc, #412]	@ (800bc68 <DMA_SetConfig+0x25c>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d022      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a65      	ldr	r2, [pc, #404]	@ (800bc6c <DMA_SetConfig+0x260>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d01d      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a64      	ldr	r2, [pc, #400]	@ (800bc70 <DMA_SetConfig+0x264>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d018      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a62      	ldr	r2, [pc, #392]	@ (800bc74 <DMA_SetConfig+0x268>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d013      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a61      	ldr	r2, [pc, #388]	@ (800bc78 <DMA_SetConfig+0x26c>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00e      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a5f      	ldr	r2, [pc, #380]	@ (800bc7c <DMA_SetConfig+0x270>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d009      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a5e      	ldr	r2, [pc, #376]	@ (800bc80 <DMA_SetConfig+0x274>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d004      	beq.n	800bb16 <DMA_SetConfig+0x10a>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a5c      	ldr	r2, [pc, #368]	@ (800bc84 <DMA_SetConfig+0x278>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d101      	bne.n	800bb1a <DMA_SetConfig+0x10e>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <DMA_SetConfig+0x110>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bb28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d004      	beq.n	800bb3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bb3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a39      	ldr	r2, [pc, #228]	@ (800bc28 <DMA_SetConfig+0x21c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d04a      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a38      	ldr	r2, [pc, #224]	@ (800bc2c <DMA_SetConfig+0x220>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d045      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a36      	ldr	r2, [pc, #216]	@ (800bc30 <DMA_SetConfig+0x224>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d040      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a35      	ldr	r2, [pc, #212]	@ (800bc34 <DMA_SetConfig+0x228>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d03b      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a33      	ldr	r2, [pc, #204]	@ (800bc38 <DMA_SetConfig+0x22c>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d036      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a32      	ldr	r2, [pc, #200]	@ (800bc3c <DMA_SetConfig+0x230>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d031      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a30      	ldr	r2, [pc, #192]	@ (800bc40 <DMA_SetConfig+0x234>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d02c      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a2f      	ldr	r2, [pc, #188]	@ (800bc44 <DMA_SetConfig+0x238>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d027      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a2d      	ldr	r2, [pc, #180]	@ (800bc48 <DMA_SetConfig+0x23c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d022      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a2c      	ldr	r2, [pc, #176]	@ (800bc4c <DMA_SetConfig+0x240>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d01d      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a2a      	ldr	r2, [pc, #168]	@ (800bc50 <DMA_SetConfig+0x244>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d018      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a29      	ldr	r2, [pc, #164]	@ (800bc54 <DMA_SetConfig+0x248>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d013      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a27      	ldr	r2, [pc, #156]	@ (800bc58 <DMA_SetConfig+0x24c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00e      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a26      	ldr	r2, [pc, #152]	@ (800bc5c <DMA_SetConfig+0x250>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d009      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a24      	ldr	r2, [pc, #144]	@ (800bc60 <DMA_SetConfig+0x254>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d004      	beq.n	800bbdc <DMA_SetConfig+0x1d0>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a23      	ldr	r2, [pc, #140]	@ (800bc64 <DMA_SetConfig+0x258>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d101      	bne.n	800bbe0 <DMA_SetConfig+0x1d4>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e000      	b.n	800bbe2 <DMA_SetConfig+0x1d6>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d059      	beq.n	800bc9a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbea:	f003 031f 	and.w	r3, r3, #31
 800bbee:	223f      	movs	r2, #63	@ 0x3f
 800bbf0:	409a      	lsls	r2, r3
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bc04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	2b40      	cmp	r3, #64	@ 0x40
 800bc14:	d138      	bne.n	800bc88 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800bc26:	e086      	b.n	800bd36 <DMA_SetConfig+0x32a>
 800bc28:	40020010 	.word	0x40020010
 800bc2c:	40020028 	.word	0x40020028
 800bc30:	40020040 	.word	0x40020040
 800bc34:	40020058 	.word	0x40020058
 800bc38:	40020070 	.word	0x40020070
 800bc3c:	40020088 	.word	0x40020088
 800bc40:	400200a0 	.word	0x400200a0
 800bc44:	400200b8 	.word	0x400200b8
 800bc48:	40020410 	.word	0x40020410
 800bc4c:	40020428 	.word	0x40020428
 800bc50:	40020440 	.word	0x40020440
 800bc54:	40020458 	.word	0x40020458
 800bc58:	40020470 	.word	0x40020470
 800bc5c:	40020488 	.word	0x40020488
 800bc60:	400204a0 	.word	0x400204a0
 800bc64:	400204b8 	.word	0x400204b8
 800bc68:	58025408 	.word	0x58025408
 800bc6c:	5802541c 	.word	0x5802541c
 800bc70:	58025430 	.word	0x58025430
 800bc74:	58025444 	.word	0x58025444
 800bc78:	58025458 	.word	0x58025458
 800bc7c:	5802546c 	.word	0x5802546c
 800bc80:	58025480 	.word	0x58025480
 800bc84:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	60da      	str	r2, [r3, #12]
}
 800bc98:	e04d      	b.n	800bd36 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a29      	ldr	r2, [pc, #164]	@ (800bd44 <DMA_SetConfig+0x338>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d022      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a27      	ldr	r2, [pc, #156]	@ (800bd48 <DMA_SetConfig+0x33c>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d01d      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a26      	ldr	r2, [pc, #152]	@ (800bd4c <DMA_SetConfig+0x340>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d018      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a24      	ldr	r2, [pc, #144]	@ (800bd50 <DMA_SetConfig+0x344>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d013      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a23      	ldr	r2, [pc, #140]	@ (800bd54 <DMA_SetConfig+0x348>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00e      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a21      	ldr	r2, [pc, #132]	@ (800bd58 <DMA_SetConfig+0x34c>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d009      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a20      	ldr	r2, [pc, #128]	@ (800bd5c <DMA_SetConfig+0x350>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d004      	beq.n	800bcea <DMA_SetConfig+0x2de>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a1e      	ldr	r2, [pc, #120]	@ (800bd60 <DMA_SetConfig+0x354>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d101      	bne.n	800bcee <DMA_SetConfig+0x2e2>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <DMA_SetConfig+0x2e4>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d020      	beq.n	800bd36 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	f003 031f 	and.w	r3, r3, #31
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	409a      	lsls	r2, r3
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	2b40      	cmp	r3, #64	@ 0x40
 800bd12:	d108      	bne.n	800bd26 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	60da      	str	r2, [r3, #12]
}
 800bd24:	e007      	b.n	800bd36 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	60da      	str	r2, [r3, #12]
}
 800bd36:	bf00      	nop
 800bd38:	371c      	adds	r7, #28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	58025408 	.word	0x58025408
 800bd48:	5802541c 	.word	0x5802541c
 800bd4c:	58025430 	.word	0x58025430
 800bd50:	58025444 	.word	0x58025444
 800bd54:	58025458 	.word	0x58025458
 800bd58:	5802546c 	.word	0x5802546c
 800bd5c:	58025480 	.word	0x58025480
 800bd60:	58025494 	.word	0x58025494

0800bd64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a42      	ldr	r2, [pc, #264]	@ (800be7c <DMA_CalcBaseAndBitshift+0x118>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d04a      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a41      	ldr	r2, [pc, #260]	@ (800be80 <DMA_CalcBaseAndBitshift+0x11c>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d045      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a3f      	ldr	r2, [pc, #252]	@ (800be84 <DMA_CalcBaseAndBitshift+0x120>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d040      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a3e      	ldr	r2, [pc, #248]	@ (800be88 <DMA_CalcBaseAndBitshift+0x124>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d03b      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a3c      	ldr	r2, [pc, #240]	@ (800be8c <DMA_CalcBaseAndBitshift+0x128>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d036      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a3b      	ldr	r2, [pc, #236]	@ (800be90 <DMA_CalcBaseAndBitshift+0x12c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d031      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a39      	ldr	r2, [pc, #228]	@ (800be94 <DMA_CalcBaseAndBitshift+0x130>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d02c      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a38      	ldr	r2, [pc, #224]	@ (800be98 <DMA_CalcBaseAndBitshift+0x134>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d027      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a36      	ldr	r2, [pc, #216]	@ (800be9c <DMA_CalcBaseAndBitshift+0x138>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d022      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a35      	ldr	r2, [pc, #212]	@ (800bea0 <DMA_CalcBaseAndBitshift+0x13c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d01d      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a33      	ldr	r2, [pc, #204]	@ (800bea4 <DMA_CalcBaseAndBitshift+0x140>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d018      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a32      	ldr	r2, [pc, #200]	@ (800bea8 <DMA_CalcBaseAndBitshift+0x144>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d013      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a30      	ldr	r2, [pc, #192]	@ (800beac <DMA_CalcBaseAndBitshift+0x148>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00e      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a2f      	ldr	r2, [pc, #188]	@ (800beb0 <DMA_CalcBaseAndBitshift+0x14c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d009      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a2d      	ldr	r2, [pc, #180]	@ (800beb4 <DMA_CalcBaseAndBitshift+0x150>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d004      	beq.n	800be0c <DMA_CalcBaseAndBitshift+0xa8>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a2c      	ldr	r2, [pc, #176]	@ (800beb8 <DMA_CalcBaseAndBitshift+0x154>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d101      	bne.n	800be10 <DMA_CalcBaseAndBitshift+0xac>
 800be0c:	2301      	movs	r3, #1
 800be0e:	e000      	b.n	800be12 <DMA_CalcBaseAndBitshift+0xae>
 800be10:	2300      	movs	r3, #0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d024      	beq.n	800be60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	3b10      	subs	r3, #16
 800be1e:	4a27      	ldr	r2, [pc, #156]	@ (800bebc <DMA_CalcBaseAndBitshift+0x158>)
 800be20:	fba2 2303 	umull	r2, r3, r2, r3
 800be24:	091b      	lsrs	r3, r3, #4
 800be26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f003 0307 	and.w	r3, r3, #7
 800be2e:	4a24      	ldr	r2, [pc, #144]	@ (800bec0 <DMA_CalcBaseAndBitshift+0x15c>)
 800be30:	5cd3      	ldrb	r3, [r2, r3]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d908      	bls.n	800be50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	4b1f      	ldr	r3, [pc, #124]	@ (800bec4 <DMA_CalcBaseAndBitshift+0x160>)
 800be46:	4013      	ands	r3, r2
 800be48:	1d1a      	adds	r2, r3, #4
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	659a      	str	r2, [r3, #88]	@ 0x58
 800be4e:	e00d      	b.n	800be6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	461a      	mov	r2, r3
 800be56:	4b1b      	ldr	r3, [pc, #108]	@ (800bec4 <DMA_CalcBaseAndBitshift+0x160>)
 800be58:	4013      	ands	r3, r2
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800be5e:	e005      	b.n	800be6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40020010 	.word	0x40020010
 800be80:	40020028 	.word	0x40020028
 800be84:	40020040 	.word	0x40020040
 800be88:	40020058 	.word	0x40020058
 800be8c:	40020070 	.word	0x40020070
 800be90:	40020088 	.word	0x40020088
 800be94:	400200a0 	.word	0x400200a0
 800be98:	400200b8 	.word	0x400200b8
 800be9c:	40020410 	.word	0x40020410
 800bea0:	40020428 	.word	0x40020428
 800bea4:	40020440 	.word	0x40020440
 800bea8:	40020458 	.word	0x40020458
 800beac:	40020470 	.word	0x40020470
 800beb0:	40020488 	.word	0x40020488
 800beb4:	400204a0 	.word	0x400204a0
 800beb8:	400204b8 	.word	0x400204b8
 800bebc:	aaaaaaab 	.word	0xaaaaaaab
 800bec0:	0801e394 	.word	0x0801e394
 800bec4:	fffffc00 	.word	0xfffffc00

0800bec8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d120      	bne.n	800bf1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d858      	bhi.n	800bf96 <DMA_CheckFifoParam+0xce>
 800bee4:	a201      	add	r2, pc, #4	@ (adr r2, 800beec <DMA_CheckFifoParam+0x24>)
 800bee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beea:	bf00      	nop
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bf0f 	.word	0x0800bf0f
 800bef4:	0800befd 	.word	0x0800befd
 800bef8:	0800bf97 	.word	0x0800bf97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d048      	beq.n	800bf9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf0c:	e045      	b.n	800bf9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bf16:	d142      	bne.n	800bf9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf1c:	e03f      	b.n	800bf9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf26:	d123      	bne.n	800bf70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d838      	bhi.n	800bfa2 <DMA_CheckFifoParam+0xda>
 800bf30:	a201      	add	r2, pc, #4	@ (adr r2, 800bf38 <DMA_CheckFifoParam+0x70>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf4f 	.word	0x0800bf4f
 800bf40:	0800bf49 	.word	0x0800bf49
 800bf44:	0800bf61 	.word	0x0800bf61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	73fb      	strb	r3, [r7, #15]
        break;
 800bf4c:	e030      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d025      	beq.n	800bfa6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf5e:	e022      	b.n	800bfa6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bf68:	d11f      	bne.n	800bfaa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf6e:	e01c      	b.n	800bfaa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d902      	bls.n	800bf7e <DMA_CheckFifoParam+0xb6>
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d003      	beq.n	800bf84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bf7c:	e018      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	73fb      	strb	r3, [r7, #15]
        break;
 800bf82:	e015      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00e      	beq.n	800bfae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	73fb      	strb	r3, [r7, #15]
    break;
 800bf94:	e00b      	b.n	800bfae <DMA_CheckFifoParam+0xe6>
        break;
 800bf96:	bf00      	nop
 800bf98:	e00a      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        break;
 800bf9a:	bf00      	nop
 800bf9c:	e008      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        break;
 800bf9e:	bf00      	nop
 800bfa0:	e006      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        break;
 800bfa2:	bf00      	nop
 800bfa4:	e004      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        break;
 800bfa6:	bf00      	nop
 800bfa8:	e002      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
        break;
 800bfaa:	bf00      	nop
 800bfac:	e000      	b.n	800bfb0 <DMA_CheckFifoParam+0xe8>
    break;
 800bfae:	bf00      	nop
    }
  }

  return status;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop

0800bfc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a38      	ldr	r2, [pc, #224]	@ (800c0b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d022      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a36      	ldr	r2, [pc, #216]	@ (800c0b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d01d      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a35      	ldr	r2, [pc, #212]	@ (800c0bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d018      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a33      	ldr	r2, [pc, #204]	@ (800c0c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d013      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a32      	ldr	r2, [pc, #200]	@ (800c0c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d00e      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a30      	ldr	r2, [pc, #192]	@ (800c0c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d009      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a2f      	ldr	r2, [pc, #188]	@ (800c0cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d004      	beq.n	800c01e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a2d      	ldr	r2, [pc, #180]	@ (800c0d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d101      	bne.n	800c022 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c01e:	2301      	movs	r3, #1
 800c020:	e000      	b.n	800c024 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c022:	2300      	movs	r3, #0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d01a      	beq.n	800c05e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	3b08      	subs	r3, #8
 800c030:	4a28      	ldr	r2, [pc, #160]	@ (800c0d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	091b      	lsrs	r3, r3, #4
 800c038:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4b26      	ldr	r3, [pc, #152]	@ (800c0d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	461a      	mov	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a24      	ldr	r2, [pc, #144]	@ (800c0dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c04c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	2201      	movs	r2, #1
 800c056:	409a      	lsls	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c05c:	e024      	b.n	800c0a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	3b10      	subs	r3, #16
 800c066:	4a1e      	ldr	r2, [pc, #120]	@ (800c0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c068:	fba2 2303 	umull	r2, r3, r2, r3
 800c06c:	091b      	lsrs	r3, r3, #4
 800c06e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	4a1c      	ldr	r2, [pc, #112]	@ (800c0e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d806      	bhi.n	800c086 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d902      	bls.n	800c086 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3308      	adds	r3, #8
 800c084:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	4b18      	ldr	r3, [pc, #96]	@ (800c0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	461a      	mov	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a16      	ldr	r2, [pc, #88]	@ (800c0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c098:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f003 031f 	and.w	r3, r3, #31
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	409a      	lsls	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c0a8:	bf00      	nop
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	58025408 	.word	0x58025408
 800c0b8:	5802541c 	.word	0x5802541c
 800c0bc:	58025430 	.word	0x58025430
 800c0c0:	58025444 	.word	0x58025444
 800c0c4:	58025458 	.word	0x58025458
 800c0c8:	5802546c 	.word	0x5802546c
 800c0cc:	58025480 	.word	0x58025480
 800c0d0:	58025494 	.word	0x58025494
 800c0d4:	cccccccd 	.word	0xcccccccd
 800c0d8:	16009600 	.word	0x16009600
 800c0dc:	58025880 	.word	0x58025880
 800c0e0:	aaaaaaab 	.word	0xaaaaaaab
 800c0e4:	400204b8 	.word	0x400204b8
 800c0e8:	4002040f 	.word	0x4002040f
 800c0ec:	10008200 	.word	0x10008200
 800c0f0:	40020880 	.word	0x40020880

0800c0f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	b2db      	uxtb	r3, r3
 800c102:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d04a      	beq.n	800c1a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b08      	cmp	r3, #8
 800c10e:	d847      	bhi.n	800c1a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a25      	ldr	r2, [pc, #148]	@ (800c1ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d022      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a24      	ldr	r2, [pc, #144]	@ (800c1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d01d      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a22      	ldr	r2, [pc, #136]	@ (800c1b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d018      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a21      	ldr	r2, [pc, #132]	@ (800c1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d013      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d00e      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a1e      	ldr	r2, [pc, #120]	@ (800c1c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d009      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a1c      	ldr	r2, [pc, #112]	@ (800c1c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d004      	beq.n	800c160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d101      	bne.n	800c164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800c164:	2300      	movs	r3, #0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4b17      	ldr	r3, [pc, #92]	@ (800c1cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	461a      	mov	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a15      	ldr	r2, [pc, #84]	@ (800c1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800c17c:	671a      	str	r2, [r3, #112]	@ 0x70
 800c17e:	e009      	b.n	800c194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	4b14      	ldr	r3, [pc, #80]	@ (800c1d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	461a      	mov	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a11      	ldr	r2, [pc, #68]	@ (800c1d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800c192:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3b01      	subs	r3, #1
 800c198:	2201      	movs	r2, #1
 800c19a:	409a      	lsls	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800c1a0:	bf00      	nop
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	58025408 	.word	0x58025408
 800c1b0:	5802541c 	.word	0x5802541c
 800c1b4:	58025430 	.word	0x58025430
 800c1b8:	58025444 	.word	0x58025444
 800c1bc:	58025458 	.word	0x58025458
 800c1c0:	5802546c 	.word	0x5802546c
 800c1c4:	58025480 	.word	0x58025480
 800c1c8:	58025494 	.word	0x58025494
 800c1cc:	1600963f 	.word	0x1600963f
 800c1d0:	58025940 	.word	0x58025940
 800c1d4:	1000823f 	.word	0x1000823f
 800c1d8:	40020940 	.word	0x40020940

0800c1dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e0e3      	b.n	800c3b6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2223      	movs	r2, #35	@ 0x23
 800c1fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7fa fc29 	bl	8006a58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c206:	4b6e      	ldr	r3, [pc, #440]	@ (800c3c0 <HAL_ETH_Init+0x1e4>)
 800c208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c20c:	4a6c      	ldr	r2, [pc, #432]	@ (800c3c0 <HAL_ETH_Init+0x1e4>)
 800c20e:	f043 0302 	orr.w	r3, r3, #2
 800c212:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c216:	4b6a      	ldr	r3, [pc, #424]	@ (800c3c0 <HAL_ETH_Init+0x1e4>)
 800c218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	60bb      	str	r3, [r7, #8]
 800c222:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7a1b      	ldrb	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800c22c:	2000      	movs	r0, #0
 800c22e:	f7fb f927 	bl	8007480 <HAL_SYSCFG_ETHInterfaceSelect>
 800c232:	e003      	b.n	800c23c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800c234:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c238:	f7fb f922 	bl	8007480 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800c23c:	4b61      	ldr	r3, [pc, #388]	@ (800c3c4 <HAL_ETH_Init+0x1e8>)
 800c23e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	6812      	ldr	r2, [r2, #0]
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c258:	f7fb f8e2 	bl	8007420 <HAL_GetTick>
 800c25c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800c25e:	e011      	b.n	800c284 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800c260:	f7fb f8de 	bl	8007420 <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c26e:	d909      	bls.n	800c284 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2204      	movs	r2, #4
 800c274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	22e0      	movs	r2, #224	@ 0xe0
 800c27c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e098      	b.n	800c3b6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e4      	bne.n	800c260 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f89e 	bl	800c3d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800c29c:	f003 f9de 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	4a49      	ldr	r2, [pc, #292]	@ (800c3c8 <HAL_ETH_Init+0x1ec>)
 800c2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a8:	0c9a      	lsrs	r2, r3, #18
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3a01      	subs	r2, #1
 800c2b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa81 	bl	800c7bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c2c6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6812      	ldr	r2, [r2, #0]
 800c2ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c2d6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d009      	beq.n	800c2fa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	22e0      	movs	r2, #224	@ 0xe0
 800c2f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e05d      	b.n	800c3b6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c302:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800c306:	4b31      	ldr	r3, [pc, #196]	@ (800c3cc <HAL_ETH_Init+0x1f0>)
 800c308:	4013      	ands	r3, r2
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	6952      	ldr	r2, [r2, #20]
 800c30e:	0051      	lsls	r1, r2, #1
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	6812      	ldr	r2, [r2, #0]
 800c314:	430b      	orrs	r3, r1
 800c316:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c31a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fae9 	bl	800c8f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fb2f 	bl	800c988 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	3305      	adds	r3, #5
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	021a      	lsls	r2, r3, #8
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	3304      	adds	r3, #4
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	4619      	mov	r1, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	430a      	orrs	r2, r1
 800c344:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	3303      	adds	r3, #3
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	061a      	lsls	r2, r3, #24
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	3302      	adds	r3, #2
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	041b      	lsls	r3, r3, #16
 800c35c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	3301      	adds	r3, #1
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800c368:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800c376:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800c378:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <HAL_ETH_Init+0x1f4>)
 800c38a:	430b      	orrs	r3, r1
 800c38c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d4 <HAL_ETH_Init+0x1f8>)
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2210      	movs	r2, #16
 800c3b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	58000400 	.word	0x58000400
 800c3c8:	431bde83 	.word	0x431bde83
 800c3cc:	ffff8001 	.word	0xffff8001
 800c3d0:	0c020060 	.word	0x0c020060
 800c3d4:	0c20c000 	.word	0x0c20c000

0800c3d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c3e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800c3f2:	f003 f933 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 800c3f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	4a1a      	ldr	r2, [pc, #104]	@ (800c464 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d804      	bhi.n	800c40a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	e022      	b.n	800c450 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	4a16      	ldr	r2, [pc, #88]	@ (800c468 <HAL_ETH_SetMDIOClockRange+0x90>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d204      	bcs.n	800c41c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c418:	60fb      	str	r3, [r7, #12]
 800c41a:	e019      	b.n	800c450 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	4a13      	ldr	r2, [pc, #76]	@ (800c46c <HAL_ETH_SetMDIOClockRange+0x94>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d915      	bls.n	800c450 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	4a12      	ldr	r2, [pc, #72]	@ (800c470 <HAL_ETH_SetMDIOClockRange+0x98>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d804      	bhi.n	800c436 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	4a0e      	ldr	r2, [pc, #56]	@ (800c474 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d804      	bhi.n	800c448 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	e003      	b.n	800c450 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800c44e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	02160ebf 	.word	0x02160ebf
 800c468:	03938700 	.word	0x03938700
 800c46c:	05f5e0ff 	.word	0x05f5e0ff
 800c470:	08f0d17f 	.word	0x08f0d17f
 800c474:	0ee6b27f 	.word	0x0ee6b27f

0800c478 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800c48a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	791b      	ldrb	r3, [r3, #4]
 800c490:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800c492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	7b1b      	ldrb	r3, [r3, #12]
 800c498:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800c49a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	7b5b      	ldrb	r3, [r3, #13]
 800c4a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800c4a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	7b9b      	ldrb	r3, [r3, #14]
 800c4a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800c4aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	7bdb      	ldrb	r3, [r3, #15]
 800c4b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800c4b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	7c12      	ldrb	r2, [r2, #16]
 800c4b8:	2a00      	cmp	r2, #0
 800c4ba:	d102      	bne.n	800c4c2 <ETH_SetMACConfig+0x4a>
 800c4bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800c4c0:	e000      	b.n	800c4c4 <ETH_SetMACConfig+0x4c>
 800c4c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800c4c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	7c52      	ldrb	r2, [r2, #17]
 800c4ca:	2a00      	cmp	r2, #0
 800c4cc:	d102      	bne.n	800c4d4 <ETH_SetMACConfig+0x5c>
 800c4ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800c4d2:	e000      	b.n	800c4d6 <ETH_SetMACConfig+0x5e>
 800c4d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800c4d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	7c9b      	ldrb	r3, [r3, #18]
 800c4dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800c4de:	431a      	orrs	r2, r3
               macconf->Speed |
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800c4e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800c4ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	7f1b      	ldrb	r3, [r3, #28]
 800c4f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800c4f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	7f5b      	ldrb	r3, [r3, #29]
 800c4f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800c4fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	7f92      	ldrb	r2, [r2, #30]
 800c500:	2a00      	cmp	r2, #0
 800c502:	d102      	bne.n	800c50a <ETH_SetMACConfig+0x92>
 800c504:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c508:	e000      	b.n	800c50c <ETH_SetMACConfig+0x94>
 800c50a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800c50c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	7fdb      	ldrb	r3, [r3, #31]
 800c512:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800c514:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c51c:	2a00      	cmp	r2, #0
 800c51e:	d102      	bne.n	800c526 <ETH_SetMACConfig+0xae>
 800c520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c524:	e000      	b.n	800c528 <ETH_SetMACConfig+0xb0>
 800c526:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800c528:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800c52e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c536:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800c538:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800c53e:	4313      	orrs	r3, r2
 800c540:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	4b56      	ldr	r3, [pc, #344]	@ (800c6a4 <ETH_SetMACConfig+0x22c>)
 800c54a:	4013      	ands	r3, r2
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6812      	ldr	r2, [r2, #0]
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	430b      	orrs	r3, r1
 800c554:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c55a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c562:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800c564:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c56c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800c56e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c576:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800c578:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800c580:	2a00      	cmp	r2, #0
 800c582:	d102      	bne.n	800c58a <ETH_SetMACConfig+0x112>
 800c584:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c588:	e000      	b.n	800c58c <ETH_SetMACConfig+0x114>
 800c58a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800c58c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800c592:	4313      	orrs	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b42      	ldr	r3, [pc, #264]	@ (800c6a8 <ETH_SetMACConfig+0x230>)
 800c59e:	4013      	ands	r3, r2
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	68f9      	ldr	r1, [r7, #12]
 800c5a6:	430b      	orrs	r3, r1
 800c5a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	4b3a      	ldr	r3, [pc, #232]	@ (800c6ac <ETH_SetMACConfig+0x234>)
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	68f9      	ldr	r1, [r7, #12]
 800c5ca:	430b      	orrs	r3, r1
 800c5cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800c5d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800c5da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800c5e2:	2a00      	cmp	r2, #0
 800c5e4:	d101      	bne.n	800c5ea <ETH_SetMACConfig+0x172>
 800c5e6:	2280      	movs	r2, #128	@ 0x80
 800c5e8:	e000      	b.n	800c5ec <ETH_SetMACConfig+0x174>
 800c5ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800c5ec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c5fe:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800c602:	4013      	ands	r3, r2
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	68f9      	ldr	r1, [r7, #12]
 800c60a:	430b      	orrs	r3, r1
 800c60c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800c614:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c61c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800c61e:	4313      	orrs	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c62a:	f023 0103 	bic.w	r1, r3, #3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	430a      	orrs	r2, r1
 800c636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800c642:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800c65e:	2a00      	cmp	r2, #0
 800c660:	d101      	bne.n	800c666 <ETH_SetMACConfig+0x1ee>
 800c662:	2240      	movs	r2, #64	@ 0x40
 800c664:	e000      	b.n	800c668 <ETH_SetMACConfig+0x1f0>
 800c666:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800c668:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c670:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800c672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800c67a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800c67c:	4313      	orrs	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800c688:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	430a      	orrs	r2, r1
 800c694:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800c698:	bf00      	nop
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	00048083 	.word	0x00048083
 800c6a8:	c0f88000 	.word	0xc0f88000
 800c6ac:	fffffef0 	.word	0xfffffef0

0800c6b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	4b38      	ldr	r3, [pc, #224]	@ (800c7a8 <ETH_SetDMAConfig+0xf8>)
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	6811      	ldr	r1, [r2, #0]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c6d6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	791b      	ldrb	r3, [r3, #4]
 800c6dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800c6e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	7b1b      	ldrb	r3, [r3, #12]
 800c6e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	4b2c      	ldr	r3, [pc, #176]	@ (800c7ac <ETH_SetDMAConfig+0xfc>)
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	6812      	ldr	r2, [r2, #0]
 800c700:	68f9      	ldr	r1, [r7, #12]
 800c702:	430b      	orrs	r3, r1
 800c704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c708:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	7b5b      	ldrb	r3, [r3, #13]
 800c70e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c720:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800c724:	4b22      	ldr	r3, [pc, #136]	@ (800c7b0 <ETH_SetDMAConfig+0x100>)
 800c726:	4013      	ands	r3, r2
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	6812      	ldr	r2, [r2, #0]
 800c72c:	68f9      	ldr	r1, [r7, #12]
 800c72e:	430b      	orrs	r3, r1
 800c730:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c734:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	7d1b      	ldrb	r3, [r3, #20]
 800c740:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800c742:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	7f5b      	ldrb	r3, [r3, #29]
 800c748:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c756:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800c75a:	4b16      	ldr	r3, [pc, #88]	@ (800c7b4 <ETH_SetDMAConfig+0x104>)
 800c75c:	4013      	ands	r3, r2
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	6812      	ldr	r2, [r2, #0]
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	430b      	orrs	r3, r1
 800c766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c76a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	7f1b      	ldrb	r3, [r3, #28]
 800c772:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c784:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800c788:	4b0b      	ldr	r3, [pc, #44]	@ (800c7b8 <ETH_SetDMAConfig+0x108>)
 800c78a:	4013      	ands	r3, r2
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	6812      	ldr	r2, [r2, #0]
 800c790:	68f9      	ldr	r1, [r7, #12]
 800c792:	430b      	orrs	r3, r1
 800c794:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c798:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800c79c:	bf00      	nop
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	ffff87fd 	.word	0xffff87fd
 800c7ac:	ffff2ffe 	.word	0xffff2ffe
 800c7b0:	fffec000 	.word	0xfffec000
 800c7b4:	ffc0efef 	.word	0xffc0efef
 800c7b8:	7fc0ffff 	.word	0x7fc0ffff

0800c7bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b0a4      	sub	sp, #144	@ 0x90
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c7f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c7fc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800c804:	2300      	movs	r3, #0
 800c806:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800c808:	2300      	movs	r3, #0
 800c80a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800c80e:	2300      	movs	r3, #0
 800c810:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800c814:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800c818:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800c81a:	2300      	movs	r3, #0
 800c81c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800c820:	2300      	movs	r3, #0
 800c822:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800c824:	2301      	movs	r3, #1
 800c826:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800c830:	2300      	movs	r3, #0
 800c832:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800c836:	2300      	movs	r3, #0
 800c838:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800c83e:	2300      	movs	r3, #0
 800c840:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800c842:	2300      	movs	r3, #0
 800c844:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800c848:	2300      	movs	r3, #0
 800c84a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800c84e:	2301      	movs	r3, #1
 800c850:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800c854:	2320      	movs	r3, #32
 800c856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800c860:	2300      	movs	r3, #0
 800c862:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800c866:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800c86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800c86c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c870:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800c872:	2300      	movs	r3, #0
 800c874:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800c878:	2302      	movs	r3, #2
 800c87a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800c884:	2300      	movs	r3, #0
 800c886:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800c890:	2301      	movs	r3, #1
 800c892:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800c896:	2300      	movs	r3, #0
 800c898:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800c8a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fde6 	bl	800c478 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800c8c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c8ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800c8d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c8d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800c8dc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800c8e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800c8e2:	f107 0308 	add.w	r3, r7, #8
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff fee1 	bl	800c6b0 <ETH_SetDMAConfig>
}
 800c8ee:	bf00      	nop
 800c8f0:	3790      	adds	r7, #144	@ 0x90
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b085      	sub	sp, #20
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800c8fe:	2300      	movs	r3, #0
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	e01d      	b.n	800c940 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68d9      	ldr	r1, [r3, #12]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	440b      	add	r3, r1
 800c914:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2200      	movs	r2, #0
 800c91a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2200      	movs	r2, #0
 800c920:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2200      	movs	r2, #0
 800c926:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	3206      	adds	r2, #6
 800c936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2b03      	cmp	r3, #3
 800c944:	d9de      	bls.n	800c904 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c954:	461a      	mov	r2, r3
 800c956:	2303      	movs	r3, #3
 800c958:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	68da      	ldr	r2, [r3, #12]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c968:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c978:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e023      	b.n	800c9de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6919      	ldr	r1, [r3, #16]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4613      	mov	r3, r2
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	4413      	add	r3, r2
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	440b      	add	r3, r1
 800c9a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800c9cc:	68b9      	ldr	r1, [r7, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	3212      	adds	r2, #18
 800c9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d9d8      	bls.n	800c996 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691a      	ldr	r2, [r3, #16]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca1e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca32:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800ca36:	bf00      	nop
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
	...

0800ca44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b089      	sub	sp, #36	@ 0x24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ca52:	4b86      	ldr	r3, [pc, #536]	@ (800cc6c <HAL_GPIO_Init+0x228>)
 800ca54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ca56:	e18c      	b.n	800cd72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	2101      	movs	r1, #1
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	fa01 f303 	lsl.w	r3, r1, r3
 800ca64:	4013      	ands	r3, r2
 800ca66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 817e 	beq.w	800cd6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f003 0303 	and.w	r3, r3, #3
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d005      	beq.n	800ca88 <HAL_GPIO_Init+0x44>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d130      	bne.n	800caea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	2203      	movs	r2, #3
 800ca94:	fa02 f303 	lsl.w	r3, r2, r3
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	69ba      	ldr	r2, [r7, #24]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	fa02 f303 	lsl.w	r3, r2, r3
 800caac:	69ba      	ldr	r2, [r7, #24]
 800caae:	4313      	orrs	r3, r2
 800cab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cabe:	2201      	movs	r2, #1
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	fa02 f303 	lsl.w	r3, r2, r3
 800cac6:	43db      	mvns	r3, r3
 800cac8:	69ba      	ldr	r2, [r7, #24]
 800caca:	4013      	ands	r3, r2
 800cacc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	091b      	lsrs	r3, r3, #4
 800cad4:	f003 0201 	and.w	r2, r3, #1
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d017      	beq.n	800cb26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	2203      	movs	r2, #3
 800cb02:	fa02 f303 	lsl.w	r3, r2, r3
 800cb06:	43db      	mvns	r3, r3
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	f003 0303 	and.w	r3, r3, #3
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d123      	bne.n	800cb7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	08da      	lsrs	r2, r3, #3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3208      	adds	r2, #8
 800cb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	220f      	movs	r2, #15
 800cb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4e:	43db      	mvns	r3, r3
 800cb50:	69ba      	ldr	r2, [r7, #24]
 800cb52:	4013      	ands	r3, r2
 800cb54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	691a      	ldr	r2, [r3, #16]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	f003 0307 	and.w	r3, r3, #7
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	fa02 f303 	lsl.w	r3, r2, r3
 800cb66:	69ba      	ldr	r2, [r7, #24]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	08da      	lsrs	r2, r3, #3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	3208      	adds	r2, #8
 800cb74:	69b9      	ldr	r1, [r7, #24]
 800cb76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	2203      	movs	r2, #3
 800cb86:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8a:	43db      	mvns	r3, r3
 800cb8c:	69ba      	ldr	r2, [r7, #24]
 800cb8e:	4013      	ands	r3, r2
 800cb90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f003 0203 	and.w	r2, r3, #3
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cba2:	69ba      	ldr	r2, [r7, #24]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	69ba      	ldr	r2, [r7, #24]
 800cbac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 80d8 	beq.w	800cd6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cbbc:	4b2c      	ldr	r3, [pc, #176]	@ (800cc70 <HAL_GPIO_Init+0x22c>)
 800cbbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbc2:	4a2b      	ldr	r2, [pc, #172]	@ (800cc70 <HAL_GPIO_Init+0x22c>)
 800cbc4:	f043 0302 	orr.w	r3, r3, #2
 800cbc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800cbcc:	4b28      	ldr	r3, [pc, #160]	@ (800cc70 <HAL_GPIO_Init+0x22c>)
 800cbce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cbda:	4a26      	ldr	r2, [pc, #152]	@ (800cc74 <HAL_GPIO_Init+0x230>)
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	089b      	lsrs	r3, r3, #2
 800cbe0:	3302      	adds	r3, #2
 800cbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	f003 0303 	and.w	r3, r3, #3
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	220f      	movs	r2, #15
 800cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf6:	43db      	mvns	r3, r3
 800cbf8:	69ba      	ldr	r2, [r7, #24]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a1d      	ldr	r2, [pc, #116]	@ (800cc78 <HAL_GPIO_Init+0x234>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d04a      	beq.n	800cc9c <HAL_GPIO_Init+0x258>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a1c      	ldr	r2, [pc, #112]	@ (800cc7c <HAL_GPIO_Init+0x238>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d02b      	beq.n	800cc66 <HAL_GPIO_Init+0x222>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a1b      	ldr	r2, [pc, #108]	@ (800cc80 <HAL_GPIO_Init+0x23c>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d025      	beq.n	800cc62 <HAL_GPIO_Init+0x21e>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a1a      	ldr	r2, [pc, #104]	@ (800cc84 <HAL_GPIO_Init+0x240>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d01f      	beq.n	800cc5e <HAL_GPIO_Init+0x21a>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a19      	ldr	r2, [pc, #100]	@ (800cc88 <HAL_GPIO_Init+0x244>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d019      	beq.n	800cc5a <HAL_GPIO_Init+0x216>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a18      	ldr	r2, [pc, #96]	@ (800cc8c <HAL_GPIO_Init+0x248>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d013      	beq.n	800cc56 <HAL_GPIO_Init+0x212>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a17      	ldr	r2, [pc, #92]	@ (800cc90 <HAL_GPIO_Init+0x24c>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d00d      	beq.n	800cc52 <HAL_GPIO_Init+0x20e>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a16      	ldr	r2, [pc, #88]	@ (800cc94 <HAL_GPIO_Init+0x250>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d007      	beq.n	800cc4e <HAL_GPIO_Init+0x20a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a15      	ldr	r2, [pc, #84]	@ (800cc98 <HAL_GPIO_Init+0x254>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d101      	bne.n	800cc4a <HAL_GPIO_Init+0x206>
 800cc46:	2309      	movs	r3, #9
 800cc48:	e029      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc4a:	230a      	movs	r3, #10
 800cc4c:	e027      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc4e:	2307      	movs	r3, #7
 800cc50:	e025      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc52:	2306      	movs	r3, #6
 800cc54:	e023      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc56:	2305      	movs	r3, #5
 800cc58:	e021      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc5a:	2304      	movs	r3, #4
 800cc5c:	e01f      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e01d      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc62:	2302      	movs	r3, #2
 800cc64:	e01b      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc66:	2301      	movs	r3, #1
 800cc68:	e019      	b.n	800cc9e <HAL_GPIO_Init+0x25a>
 800cc6a:	bf00      	nop
 800cc6c:	58000080 	.word	0x58000080
 800cc70:	58024400 	.word	0x58024400
 800cc74:	58000400 	.word	0x58000400
 800cc78:	58020000 	.word	0x58020000
 800cc7c:	58020400 	.word	0x58020400
 800cc80:	58020800 	.word	0x58020800
 800cc84:	58020c00 	.word	0x58020c00
 800cc88:	58021000 	.word	0x58021000
 800cc8c:	58021400 	.word	0x58021400
 800cc90:	58021800 	.word	0x58021800
 800cc94:	58021c00 	.word	0x58021c00
 800cc98:	58022400 	.word	0x58022400
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	69fa      	ldr	r2, [r7, #28]
 800cca0:	f002 0203 	and.w	r2, r2, #3
 800cca4:	0092      	lsls	r2, r2, #2
 800cca6:	4093      	lsls	r3, r2
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ccae:	4938      	ldr	r1, [pc, #224]	@ (800cd90 <HAL_GPIO_Init+0x34c>)
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	089b      	lsrs	r3, r3, #2
 800ccb4:	3302      	adds	r3, #2
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ccbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	43db      	mvns	r3, r3
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	4013      	ands	r3, r2
 800cccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ccea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cd10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	43db      	mvns	r3, r3
 800cd22:	69ba      	ldr	r2, [r7, #24]
 800cd24:	4013      	ands	r3, r2
 800cd26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	69ba      	ldr	r2, [r7, #24]
 800cd40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	43db      	mvns	r3, r3
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	69ba      	ldr	r2, [r7, #24]
 800cd6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f47f ae6b 	bne.w	800ca58 <HAL_GPIO_Init+0x14>
  }
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	3724      	adds	r7, #36	@ 0x24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	58000400 	.word	0x58000400

0800cd94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	807b      	strh	r3, [r7, #2]
 800cda0:	4613      	mov	r3, r2
 800cda2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cda4:	787b      	ldrb	r3, [r7, #1]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cdaa:	887a      	ldrh	r2, [r7, #2]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cdb0:	e003      	b.n	800cdba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cdb2:	887b      	ldrh	r3, [r7, #2]
 800cdb4:	041a      	lsls	r2, r3, #16
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	619a      	str	r2, [r3, #24]
}
 800cdba:	bf00      	nop
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	4603      	mov	r3, r0
 800cdce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800cdd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cdd8:	88fb      	ldrh	r3, [r7, #6]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d008      	beq.n	800cdf2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cde0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cde4:	88fb      	ldrh	r3, [r7, #6]
 800cde6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cdea:	88fb      	ldrh	r3, [r7, #6]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f9 fcdf 	bl	80067b0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800cdf2:	bf00      	nop
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e08b      	b.n	800cf26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7f9 fee6 	bl	8006bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2224      	movs	r2, #36	@ 0x24
 800ce2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ce4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	689a      	ldr	r2, [r3, #8]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d107      	bne.n	800ce76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ce72:	609a      	str	r2, [r3, #8]
 800ce74:	e006      	b.n	800ce84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	689a      	ldr	r2, [r3, #8]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ce82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d108      	bne.n	800ce9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce9a:	605a      	str	r2, [r3, #4]
 800ce9c:	e007      	b.n	800ceae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ceac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6859      	ldr	r1, [r3, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf30 <HAL_I2C_Init+0x134>)
 800ceba:	430b      	orrs	r3, r1
 800cebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68da      	ldr	r2, [r3, #12]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	691a      	ldr	r2, [r3, #16]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	69d9      	ldr	r1, [r3, #28]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	430a      	orrs	r2, r1
 800cef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f042 0201 	orr.w	r2, r2, #1
 800cf06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	02008000 	.word	0x02008000

0800cf34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	461a      	mov	r2, r3
 800cf42:	4603      	mov	r3, r0
 800cf44:	817b      	strh	r3, [r7, #10]
 800cf46:	460b      	mov	r3, r1
 800cf48:	813b      	strh	r3, [r7, #8]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b20      	cmp	r3, #32
 800cf58:	f040 80f9 	bne.w	800d14e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <HAL_I2C_Mem_Write+0x34>
 800cf62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d105      	bne.n	800cf74 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e0ed      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d101      	bne.n	800cf82 <HAL_I2C_Mem_Write+0x4e>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e0e6      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf8a:	f7fa fa49 	bl	8007420 <HAL_GetTick>
 800cf8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	2319      	movs	r3, #25
 800cf96:	2201      	movs	r2, #1
 800cf98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f001 f92e 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e0d1      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2221      	movs	r2, #33	@ 0x21
 800cfb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2240      	movs	r2, #64	@ 0x40
 800cfb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6a3a      	ldr	r2, [r7, #32]
 800cfc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cfcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cfd4:	88f8      	ldrh	r0, [r7, #6]
 800cfd6:	893a      	ldrh	r2, [r7, #8]
 800cfd8:	8979      	ldrh	r1, [r7, #10]
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 fb81 	bl	800d6ec <I2C_RequestMemoryWrite>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e0a9      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d000:	b29b      	uxth	r3, r3
 800d002:	2bff      	cmp	r3, #255	@ 0xff
 800d004:	d90e      	bls.n	800d024 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	22ff      	movs	r2, #255	@ 0xff
 800d00a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d010:	b2da      	uxtb	r2, r3
 800d012:	8979      	ldrh	r1, [r7, #10]
 800d014:	2300      	movs	r3, #0
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f001 fab1 	bl	800e584 <I2C_TransferConfig>
 800d022:	e00f      	b.n	800d044 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d028:	b29a      	uxth	r2, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d032:	b2da      	uxtb	r2, r3
 800d034:	8979      	ldrh	r1, [r7, #10]
 800d036:	2300      	movs	r3, #0
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f001 faa0 	bl	800e584 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d044:	697a      	ldr	r2, [r7, #20]
 800d046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f001 f931 	bl	800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	e07b      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05c:	781a      	ldrb	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d072:	b29b      	uxth	r3, r3
 800d074:	3b01      	subs	r3, #1
 800d076:	b29a      	uxth	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d080:	3b01      	subs	r3, #1
 800d082:	b29a      	uxth	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d034      	beq.n	800d0fc <HAL_I2C_Mem_Write+0x1c8>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d096:	2b00      	cmp	r3, #0
 800d098:	d130      	bne.n	800d0fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2180      	movs	r1, #128	@ 0x80
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f001 f8aa 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e04d      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2bff      	cmp	r3, #255	@ 0xff
 800d0bc:	d90e      	bls.n	800d0dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	22ff      	movs	r2, #255	@ 0xff
 800d0c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	8979      	ldrh	r1, [r7, #10]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d0d4:	68f8      	ldr	r0, [r7, #12]
 800d0d6:	f001 fa55 	bl	800e584 <I2C_TransferConfig>
 800d0da:	e00f      	b.n	800d0fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	8979      	ldrh	r1, [r7, #10]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f001 fa44 	bl	800e584 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d19e      	bne.n	800d044 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f001 f917 	bl	800e33e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e01a      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2220      	movs	r2, #32
 800d120:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6859      	ldr	r1, [r3, #4]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b0a      	ldr	r3, [pc, #40]	@ (800d158 <HAL_I2C_Mem_Write+0x224>)
 800d12e:	400b      	ands	r3, r1
 800d130:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2220      	movs	r2, #32
 800d136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e000      	b.n	800d150 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d14e:	2302      	movs	r3, #2
  }
}
 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	fe00e800 	.word	0xfe00e800

0800d15c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af02      	add	r7, sp, #8
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	4608      	mov	r0, r1
 800d166:	4611      	mov	r1, r2
 800d168:	461a      	mov	r2, r3
 800d16a:	4603      	mov	r3, r0
 800d16c:	817b      	strh	r3, [r7, #10]
 800d16e:	460b      	mov	r3, r1
 800d170:	813b      	strh	r3, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b20      	cmp	r3, #32
 800d180:	f040 80fd 	bne.w	800d37e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <HAL_I2C_Mem_Read+0x34>
 800d18a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d105      	bne.n	800d19c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d196:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e0f1      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_I2C_Mem_Read+0x4e>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e0ea      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d1b2:	f7fa f935 	bl	8007420 <HAL_GetTick>
 800d1b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	2319      	movs	r3, #25
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f001 f81a 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e0d5      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2222      	movs	r2, #34	@ 0x22
 800d1d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2240      	movs	r2, #64	@ 0x40
 800d1e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6a3a      	ldr	r2, [r7, #32]
 800d1ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d1f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d1fc:	88f8      	ldrh	r0, [r7, #6]
 800d1fe:	893a      	ldrh	r2, [r7, #8]
 800d200:	8979      	ldrh	r1, [r7, #10]
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	4603      	mov	r3, r0
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 fac1 	bl	800d794 <I2C_RequestMemoryRead>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d005      	beq.n	800d224 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	e0ad      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d228:	b29b      	uxth	r3, r3
 800d22a:	2bff      	cmp	r3, #255	@ 0xff
 800d22c:	d90e      	bls.n	800d24c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	22ff      	movs	r2, #255	@ 0xff
 800d232:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	8979      	ldrh	r1, [r7, #10]
 800d23c:	4b52      	ldr	r3, [pc, #328]	@ (800d388 <HAL_I2C_Mem_Read+0x22c>)
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f001 f99d 	bl	800e584 <I2C_TransferConfig>
 800d24a:	e00f      	b.n	800d26c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d250:	b29a      	uxth	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	8979      	ldrh	r1, [r7, #10]
 800d25e:	4b4a      	ldr	r3, [pc, #296]	@ (800d388 <HAL_I2C_Mem_Read+0x22c>)
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f001 f98c 	bl	800e584 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	2200      	movs	r2, #0
 800d274:	2104      	movs	r1, #4
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f000 ffc1 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e07c      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d290:	b2d2      	uxtb	r2, r2
 800d292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d034      	beq.n	800d32c <HAL_I2C_Mem_Read+0x1d0>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d130      	bne.n	800d32c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2180      	movs	r1, #128	@ 0x80
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 ff92 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e04d      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	2bff      	cmp	r3, #255	@ 0xff
 800d2ec:	d90e      	bls.n	800d30c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	22ff      	movs	r2, #255	@ 0xff
 800d2f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	8979      	ldrh	r1, [r7, #10]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f001 f93d 	bl	800e584 <I2C_TransferConfig>
 800d30a:	e00f      	b.n	800d32c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d310:	b29a      	uxth	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	8979      	ldrh	r1, [r7, #10]
 800d31e:	2300      	movs	r3, #0
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f001 f92c 	bl	800e584 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d330:	b29b      	uxth	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d19a      	bne.n	800d26c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f000 ffff 	bl	800e33e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d001      	beq.n	800d34a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	e01a      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2220      	movs	r2, #32
 800d350:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6859      	ldr	r1, [r3, #4]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	4b0b      	ldr	r3, [pc, #44]	@ (800d38c <HAL_I2C_Mem_Read+0x230>)
 800d35e:	400b      	ands	r3, r1
 800d360:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2220      	movs	r2, #32
 800d366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2200      	movs	r2, #0
 800d376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	e000      	b.n	800d380 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d37e:	2302      	movs	r3, #2
  }
}
 800d380:	4618      	mov	r0, r3
 800d382:	3718      	adds	r7, #24
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	80002400 	.word	0x80002400
 800d38c:	fe00e800 	.word	0xfe00e800

0800d390 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	4798      	blx	r3
  }
}
 800d3bc:	bf00      	nop
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00f      	beq.n	800d406 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3f4:	f043 0201 	orr.w	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d404:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00f      	beq.n	800d430 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d41e:	f043 0208 	orr.w	r2, r3, #8
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d42e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00f      	beq.n	800d45a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00a      	beq.n	800d45a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d448:	f043 0202 	orr.w	r2, r3, #2
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d458:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 030b 	and.w	r3, r3, #11
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800d46a:	68f9      	ldr	r1, [r7, #12]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fd6d 	bl	800df4c <I2C_ITError>
  }
}
 800d472:	bf00      	nop
 800d474:	3718      	adds	r7, #24
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b083      	sub	sp, #12
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d482:	bf00      	nop
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b083      	sub	sp, #12
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	70fb      	strb	r3, [r7, #3]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d4b2:	bf00      	nop
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d4da:	bf00      	nop
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d4ee:	bf00      	nop
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b086      	sub	sp, #24
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d50a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d516:	2b01      	cmp	r3, #1
 800d518:	d101      	bne.n	800d51e <I2C_Slave_ISR_IT+0x24>
 800d51a:	2302      	movs	r3, #2
 800d51c:	e0e2      	b.n	800d6e4 <I2C_Slave_ISR_IT+0x1ea>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2201      	movs	r2, #1
 800d522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	f003 0320 	and.w	r3, r3, #32
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d536:	2b00      	cmp	r3, #0
 800d538:	d004      	beq.n	800d544 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d53a:	6939      	ldr	r1, [r7, #16]
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 fa5d 	bl	800d9fc <I2C_ITSlaveCplt>
 800d542:	e0ca      	b.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	f003 0310 	and.w	r3, r3, #16
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d04b      	beq.n	800d5e6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d554:	2b00      	cmp	r3, #0
 800d556:	d046      	beq.n	800d5e6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d128      	bne.n	800d5b4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b28      	cmp	r3, #40	@ 0x28
 800d56c:	d108      	bne.n	800d580 <I2C_Slave_ISR_IT+0x86>
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d574:	d104      	bne.n	800d580 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d576:	6939      	ldr	r1, [r7, #16]
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 fc93 	bl	800dea4 <I2C_ITListenCplt>
 800d57e:	e031      	b.n	800d5e4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b29      	cmp	r3, #41	@ 0x29
 800d58a:	d10e      	bne.n	800d5aa <I2C_Slave_ISR_IT+0xb0>
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d592:	d00a      	beq.n	800d5aa <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2210      	movs	r2, #16
 800d59a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f000 fdec 	bl	800e17a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 f9ce 	bl	800d944 <I2C_ITSlaveSeqCplt>
 800d5a8:	e01c      	b.n	800d5e4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d5b2:	e08f      	b.n	800d6d4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2210      	movs	r2, #16
 800d5ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5c0:	f043 0204 	orr.w	r2, r3, #4
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <I2C_Slave_ISR_IT+0xdc>
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5d4:	d17e      	bne.n	800d6d4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5da:	4619      	mov	r1, r3
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 fcb5 	bl	800df4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d5e2:	e077      	b.n	800d6d4 <I2C_Slave_ISR_IT+0x1da>
 800d5e4:	e076      	b.n	800d6d4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d02f      	beq.n	800d650 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d02a      	beq.n	800d650 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d018      	beq.n	800d636 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60e:	b2d2      	uxtb	r2, r2
 800d610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d616:	1c5a      	adds	r2, r3, #1
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d620:	3b01      	subs	r3, #1
 800d622:	b29a      	uxth	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3b01      	subs	r3, #1
 800d630:	b29a      	uxth	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d14b      	bne.n	800d6d8 <I2C_Slave_ISR_IT+0x1de>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d646:	d047      	beq.n	800d6d8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 f97b 	bl	800d944 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d64e:	e043      	b.n	800d6d8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	f003 0308 	and.w	r3, r3, #8
 800d656:	2b00      	cmp	r3, #0
 800d658:	d009      	beq.n	800d66e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d660:	2b00      	cmp	r3, #0
 800d662:	d004      	beq.n	800d66e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d664:	6939      	ldr	r1, [r7, #16]
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f000 f8e8 	bl	800d83c <I2C_ITAddrCplt>
 800d66c:	e035      	b.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d030      	beq.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d02b      	beq.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d686:	b29b      	uxth	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d018      	beq.n	800d6be <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d690:	781a      	ldrb	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d6bc:	e00d      	b.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6c4:	d002      	beq.n	800d6cc <I2C_Slave_ISR_IT+0x1d2>
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f939 	bl	800d944 <I2C_ITSlaveSeqCplt>
 800d6d2:	e002      	b.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800d6d4:	bf00      	nop
 800d6d6:	e000      	b.n	800d6da <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800d6d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	4608      	mov	r0, r1
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	817b      	strh	r3, [r7, #10]
 800d6fe:	460b      	mov	r3, r1
 800d700:	813b      	strh	r3, [r7, #8]
 800d702:	4613      	mov	r3, r2
 800d704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d706:	88fb      	ldrh	r3, [r7, #6]
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	8979      	ldrh	r1, [r7, #10]
 800d70c:	4b20      	ldr	r3, [pc, #128]	@ (800d790 <I2C_RequestMemoryWrite+0xa4>)
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 ff35 	bl	800e584 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d71a:	69fa      	ldr	r2, [r7, #28]
 800d71c:	69b9      	ldr	r1, [r7, #24]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f000 fdc6 	bl	800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e02c      	b.n	800d788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d72e:	88fb      	ldrh	r3, [r7, #6]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d105      	bne.n	800d740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d734:	893b      	ldrh	r3, [r7, #8]
 800d736:	b2da      	uxtb	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	629a      	str	r2, [r3, #40]	@ 0x28
 800d73e:	e015      	b.n	800d76c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d740:	893b      	ldrh	r3, [r7, #8]
 800d742:	0a1b      	lsrs	r3, r3, #8
 800d744:	b29b      	uxth	r3, r3
 800d746:	b2da      	uxtb	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d74e:	69fa      	ldr	r2, [r7, #28]
 800d750:	69b9      	ldr	r1, [r7, #24]
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f000 fdac 	bl	800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e012      	b.n	800d788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d762:	893b      	ldrh	r3, [r7, #8]
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2200      	movs	r2, #0
 800d774:	2180      	movs	r1, #128	@ 0x80
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 fd41 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e000      	b.n	800d788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	80002000 	.word	0x80002000

0800d794 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af02      	add	r7, sp, #8
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	4608      	mov	r0, r1
 800d79e:	4611      	mov	r1, r2
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	817b      	strh	r3, [r7, #10]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	813b      	strh	r3, [r7, #8]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d7ae:	88fb      	ldrh	r3, [r7, #6]
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	8979      	ldrh	r1, [r7, #10]
 800d7b4:	4b20      	ldr	r3, [pc, #128]	@ (800d838 <I2C_RequestMemoryRead+0xa4>)
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f000 fee2 	bl	800e584 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7c0:	69fa      	ldr	r2, [r7, #28]
 800d7c2:	69b9      	ldr	r1, [r7, #24]
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 fd73 	bl	800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e02c      	b.n	800d82e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d105      	bne.n	800d7e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d7da:	893b      	ldrh	r3, [r7, #8]
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7e4:	e015      	b.n	800d812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d7e6:	893b      	ldrh	r3, [r7, #8]
 800d7e8:	0a1b      	lsrs	r3, r3, #8
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7f4:	69fa      	ldr	r2, [r7, #28]
 800d7f6:	69b9      	ldr	r1, [r7, #24]
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f000 fd59 	bl	800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e012      	b.n	800d82e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d808:	893b      	ldrh	r3, [r7, #8]
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	2200      	movs	r2, #0
 800d81a:	2140      	movs	r1, #64	@ 0x40
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f000 fcee 	bl	800e1fe <I2C_WaitOnFlagUntilTimeout>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	e000      	b.n	800d82e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	80002000 	.word	0x80002000

0800d83c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d852:	2b28      	cmp	r3, #40	@ 0x28
 800d854:	d16a      	bne.n	800d92c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	0c1b      	lsrs	r3, r3, #16
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	0c1b      	lsrs	r3, r3, #16
 800d86e:	b29b      	uxth	r3, r3
 800d870:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800d874:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d882:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800d890:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	2b02      	cmp	r3, #2
 800d898:	d138      	bne.n	800d90c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800d89a:	897b      	ldrh	r3, [r7, #10]
 800d89c:	09db      	lsrs	r3, r3, #7
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	89bb      	ldrh	r3, [r7, #12]
 800d8a2:	4053      	eors	r3, r2
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	f003 0306 	and.w	r3, r3, #6
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d11c      	bne.n	800d8e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800d8ae:	897b      	ldrh	r3, [r7, #10]
 800d8b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d13b      	bne.n	800d93c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d8da:	89ba      	ldrh	r2, [r7, #12]
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fdde 	bl	800d4a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d8e6:	e029      	b.n	800d93c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d8e8:	893b      	ldrh	r3, [r7, #8]
 800d8ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d8ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fe79 	bl	800e5e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d8fe:	89ba      	ldrh	r2, [r7, #12]
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7ff fdcc 	bl	800d4a2 <HAL_I2C_AddrCallback>
}
 800d90a:	e017      	b.n	800d93c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d90c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fe69 	bl	800e5e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d91e:	89ba      	ldrh	r2, [r7, #12]
 800d920:	7bfb      	ldrb	r3, [r7, #15]
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff fdbc 	bl	800d4a2 <HAL_I2C_AddrCallback>
}
 800d92a:	e007      	b.n	800d93c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2208      	movs	r2, #8
 800d932:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800d93c:	bf00      	nop
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d962:	2b00      	cmp	r3, #0
 800d964:	d008      	beq.n	800d978 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	e00c      	b.n	800d992 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d990:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b29      	cmp	r3, #41	@ 0x29
 800d99c:	d112      	bne.n	800d9c4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2228      	movs	r2, #40	@ 0x28
 800d9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2221      	movs	r2, #33	@ 0x21
 800d9aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fe1a 	bl	800e5e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff fd5c 	bl	800d47a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9c2:	e017      	b.n	800d9f4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9ce:	d111      	bne.n	800d9f4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2228      	movs	r2, #40	@ 0x28
 800d9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2222      	movs	r2, #34	@ 0x22
 800d9dc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d9de:	2102      	movs	r1, #2
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fe01 	bl	800e5e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fd4d 	bl	800d48e <HAL_I2C_SlaveRxCpltCallback>
}
 800d9f4:	bf00      	nop
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da16:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da1e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2220      	movs	r2, #32
 800da26:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800da28:	7afb      	ldrb	r3, [r7, #11]
 800da2a:	2b21      	cmp	r3, #33	@ 0x21
 800da2c:	d002      	beq.n	800da34 <I2C_ITSlaveCplt+0x38>
 800da2e:	7afb      	ldrb	r3, [r7, #11]
 800da30:	2b29      	cmp	r3, #41	@ 0x29
 800da32:	d108      	bne.n	800da46 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800da34:	f248 0101 	movw	r1, #32769	@ 0x8001
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fdd5 	bl	800e5e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2221      	movs	r2, #33	@ 0x21
 800da42:	631a      	str	r2, [r3, #48]	@ 0x30
 800da44:	e019      	b.n	800da7a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	2b22      	cmp	r3, #34	@ 0x22
 800da4a:	d002      	beq.n	800da52 <I2C_ITSlaveCplt+0x56>
 800da4c:	7afb      	ldrb	r3, [r7, #11]
 800da4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da50:	d108      	bne.n	800da64 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800da52:	f248 0102 	movw	r1, #32770	@ 0x8002
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fdc6 	bl	800e5e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2222      	movs	r2, #34	@ 0x22
 800da60:	631a      	str	r2, [r3, #48]	@ 0x30
 800da62:	e00a      	b.n	800da7a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800da64:	7afb      	ldrb	r3, [r7, #11]
 800da66:	2b28      	cmp	r3, #40	@ 0x28
 800da68:	d107      	bne.n	800da7a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800da6a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fdba 	bl	800e5e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da88:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6859      	ldr	r1, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	4b7f      	ldr	r3, [pc, #508]	@ (800dc94 <I2C_ITSlaveCplt+0x298>)
 800da96:	400b      	ands	r3, r1
 800da98:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fb6d 	bl	800e17a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d07a      	beq.n	800dba0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dab8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 8111 	beq.w	800dce6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a73      	ldr	r2, [pc, #460]	@ (800dc98 <I2C_ITSlaveCplt+0x29c>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d059      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a71      	ldr	r2, [pc, #452]	@ (800dc9c <I2C_ITSlaveCplt+0x2a0>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d053      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a6f      	ldr	r2, [pc, #444]	@ (800dca0 <I2C_ITSlaveCplt+0x2a4>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d04d      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a6d      	ldr	r2, [pc, #436]	@ (800dca4 <I2C_ITSlaveCplt+0x2a8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d047      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a6b      	ldr	r2, [pc, #428]	@ (800dca8 <I2C_ITSlaveCplt+0x2ac>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d041      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a69      	ldr	r2, [pc, #420]	@ (800dcac <I2C_ITSlaveCplt+0x2b0>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d03b      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a67      	ldr	r2, [pc, #412]	@ (800dcb0 <I2C_ITSlaveCplt+0x2b4>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d035      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a65      	ldr	r2, [pc, #404]	@ (800dcb4 <I2C_ITSlaveCplt+0x2b8>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d02f      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a63      	ldr	r2, [pc, #396]	@ (800dcb8 <I2C_ITSlaveCplt+0x2bc>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d029      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a61      	ldr	r2, [pc, #388]	@ (800dcbc <I2C_ITSlaveCplt+0x2c0>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d023      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a5f      	ldr	r2, [pc, #380]	@ (800dcc0 <I2C_ITSlaveCplt+0x2c4>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d01d      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a5d      	ldr	r2, [pc, #372]	@ (800dcc4 <I2C_ITSlaveCplt+0x2c8>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d017      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a5b      	ldr	r2, [pc, #364]	@ (800dcc8 <I2C_ITSlaveCplt+0x2cc>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d011      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a59      	ldr	r2, [pc, #356]	@ (800dccc <I2C_ITSlaveCplt+0x2d0>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d00b      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a57      	ldr	r2, [pc, #348]	@ (800dcd0 <I2C_ITSlaveCplt+0x2d4>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d005      	beq.n	800db84 <I2C_ITSlaveCplt+0x188>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a55      	ldr	r2, [pc, #340]	@ (800dcd4 <I2C_ITSlaveCplt+0x2d8>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d105      	bne.n	800db90 <I2C_ITSlaveCplt+0x194>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	e004      	b.n	800db9a <I2C_ITSlaveCplt+0x19e>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800db9e:	e0a2      	b.n	800dce6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f000 809d 	beq.w	800dce6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dbba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 8090 	beq.w	800dce6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a32      	ldr	r2, [pc, #200]	@ (800dc98 <I2C_ITSlaveCplt+0x29c>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d059      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a30      	ldr	r2, [pc, #192]	@ (800dc9c <I2C_ITSlaveCplt+0x2a0>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d053      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a2e      	ldr	r2, [pc, #184]	@ (800dca0 <I2C_ITSlaveCplt+0x2a4>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d04d      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a2c      	ldr	r2, [pc, #176]	@ (800dca4 <I2C_ITSlaveCplt+0x2a8>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d047      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a2a      	ldr	r2, [pc, #168]	@ (800dca8 <I2C_ITSlaveCplt+0x2ac>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d041      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a28      	ldr	r2, [pc, #160]	@ (800dcac <I2C_ITSlaveCplt+0x2b0>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d03b      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a26      	ldr	r2, [pc, #152]	@ (800dcb0 <I2C_ITSlaveCplt+0x2b4>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d035      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a24      	ldr	r2, [pc, #144]	@ (800dcb4 <I2C_ITSlaveCplt+0x2b8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d02f      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a22      	ldr	r2, [pc, #136]	@ (800dcb8 <I2C_ITSlaveCplt+0x2bc>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d029      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a20      	ldr	r2, [pc, #128]	@ (800dcbc <I2C_ITSlaveCplt+0x2c0>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d023      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a1e      	ldr	r2, [pc, #120]	@ (800dcc0 <I2C_ITSlaveCplt+0x2c4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d01d      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a1c      	ldr	r2, [pc, #112]	@ (800dcc4 <I2C_ITSlaveCplt+0x2c8>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d017      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc8 <I2C_ITSlaveCplt+0x2cc>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d011      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a18      	ldr	r2, [pc, #96]	@ (800dccc <I2C_ITSlaveCplt+0x2d0>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d00b      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a16      	ldr	r2, [pc, #88]	@ (800dcd0 <I2C_ITSlaveCplt+0x2d4>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d005      	beq.n	800dc86 <I2C_ITSlaveCplt+0x28a>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a14      	ldr	r2, [pc, #80]	@ (800dcd4 <I2C_ITSlaveCplt+0x2d8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d128      	bne.n	800dcd8 <I2C_ITSlaveCplt+0x2dc>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	e027      	b.n	800dce2 <I2C_ITSlaveCplt+0x2e6>
 800dc92:	bf00      	nop
 800dc94:	fe00e800 	.word	0xfe00e800
 800dc98:	40020010 	.word	0x40020010
 800dc9c:	40020028 	.word	0x40020028
 800dca0:	40020040 	.word	0x40020040
 800dca4:	40020058 	.word	0x40020058
 800dca8:	40020070 	.word	0x40020070
 800dcac:	40020088 	.word	0x40020088
 800dcb0:	400200a0 	.word	0x400200a0
 800dcb4:	400200b8 	.word	0x400200b8
 800dcb8:	40020410 	.word	0x40020410
 800dcbc:	40020428 	.word	0x40020428
 800dcc0:	40020440 	.word	0x40020440
 800dcc4:	40020458 	.word	0x40020458
 800dcc8:	40020470 	.word	0x40020470
 800dccc:	40020488 	.word	0x40020488
 800dcd0:	400204a0 	.word	0x400204a0
 800dcd4:	400204b8 	.word	0x400204b8
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d020      	beq.n	800dd32 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f023 0304 	bic.w	r3, r3, #4
 800dcf6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00c      	beq.n	800dd32 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d005      	beq.n	800dd48 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd40:	f043 0204 	orr.w	r2, r3, #4
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	f003 0310 	and.w	r3, r3, #16
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d049      	beq.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d044      	beq.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d128      	bne.n	800ddb8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b28      	cmp	r3, #40	@ 0x28
 800dd70:	d108      	bne.n	800dd84 <I2C_ITSlaveCplt+0x388>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd78:	d104      	bne.n	800dd84 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800dd7a:	6979      	ldr	r1, [r7, #20]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f891 	bl	800dea4 <I2C_ITListenCplt>
 800dd82:	e030      	b.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b29      	cmp	r3, #41	@ 0x29
 800dd8e:	d10e      	bne.n	800ddae <I2C_ITSlaveCplt+0x3b2>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dd96:	d00a      	beq.n	800ddae <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2210      	movs	r2, #16
 800dd9e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f9ea 	bl	800e17a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fdcc 	bl	800d944 <I2C_ITSlaveSeqCplt>
 800ddac:	e01b      	b.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2210      	movs	r2, #16
 800ddb4:	61da      	str	r2, [r3, #28]
 800ddb6:	e016      	b.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2210      	movs	r2, #16
 800ddbe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddc4:	f043 0204 	orr.w	r2, r3, #4
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d003      	beq.n	800ddda <I2C_ITSlaveCplt+0x3de>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ddd8:	d105      	bne.n	800dde6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f8b3 	bl	800df4c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d010      	beq.n	800de1e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f8a2 	bl	800df4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b28      	cmp	r3, #40	@ 0x28
 800de12:	d141      	bne.n	800de98 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800de14:	6979      	ldr	r1, [r7, #20]
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f844 	bl	800dea4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800de1c:	e03c      	b.n	800de98 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800de26:	d014      	beq.n	800de52 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff fd8b 	bl	800d944 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a1b      	ldr	r2, [pc, #108]	@ (800dea0 <I2C_ITSlaveCplt+0x4a4>)
 800de32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2220      	movs	r2, #32
 800de38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7ff fb37 	bl	800d4be <HAL_I2C_ListenCpltCallback>
}
 800de50:	e022      	b.n	800de98 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b22      	cmp	r3, #34	@ 0x22
 800de5c:	d10e      	bne.n	800de7c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2220      	movs	r2, #32
 800de62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff fb0a 	bl	800d48e <HAL_I2C_SlaveRxCpltCallback>
}
 800de7a:	e00d      	b.n	800de98 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2220      	movs	r2, #32
 800de80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7ff faf1 	bl	800d47a <HAL_I2C_SlaveTxCpltCallback>
}
 800de98:	bf00      	nop
 800de9a:	3718      	adds	r7, #24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	ffff0000 	.word	0xffff0000

0800dea4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a25      	ldr	r2, [pc, #148]	@ (800df48 <I2C_ITListenCplt+0xa4>)
 800deb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2220      	movs	r2, #32
 800debe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	f003 0304 	and.w	r3, r3, #4
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d022      	beq.n	800df20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee4:	b2d2      	uxtb	r2, r2
 800dee6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deec:	1c5a      	adds	r2, r3, #1
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800def6:	2b00      	cmp	r3, #0
 800def8:	d012      	beq.n	800df20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800defe:	3b01      	subs	r3, #1
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	3b01      	subs	r3, #1
 800df0e:	b29a      	uxth	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df18:	f043 0204 	orr.w	r2, r3, #4
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800df20:	f248 0103 	movw	r1, #32771	@ 0x8003
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fb5f 	bl	800e5e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2210      	movs	r2, #16
 800df30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff fabf 	bl	800d4be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	ffff0000 	.word	0xffff0000

0800df4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df5c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a6d      	ldr	r2, [pc, #436]	@ (800e120 <I2C_ITError+0x1d4>)
 800df6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	431a      	orrs	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	2b28      	cmp	r3, #40	@ 0x28
 800df82:	d005      	beq.n	800df90 <I2C_ITError+0x44>
 800df84:	7bfb      	ldrb	r3, [r7, #15]
 800df86:	2b29      	cmp	r3, #41	@ 0x29
 800df88:	d002      	beq.n	800df90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df8e:	d10b      	bne.n	800dfa8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800df90:	2103      	movs	r1, #3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fb28 	bl	800e5e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2228      	movs	r2, #40	@ 0x28
 800df9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a60      	ldr	r2, [pc, #384]	@ (800e124 <I2C_ITError+0x1d8>)
 800dfa4:	635a      	str	r2, [r3, #52]	@ 0x34
 800dfa6:	e030      	b.n	800e00a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dfa8:	f248 0103 	movw	r1, #32771	@ 0x8003
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fb1b 	bl	800e5e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f8e1 	bl	800e17a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b60      	cmp	r3, #96	@ 0x60
 800dfc2:	d01f      	beq.n	800e004 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	f003 0320 	and.w	r3, r3, #32
 800dfd6:	2b20      	cmp	r3, #32
 800dfd8:	d114      	bne.n	800e004 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	f003 0310 	and.w	r3, r3, #16
 800dfe4:	2b10      	cmp	r3, #16
 800dfe6:	d109      	bne.n	800dffc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2210      	movs	r2, #16
 800dfee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dff4:	f043 0204 	orr.w	r2, r3, #4
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2220      	movs	r2, #32
 800e002:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e00e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d039      	beq.n	800e08c <I2C_ITError+0x140>
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2b11      	cmp	r3, #17
 800e01c:	d002      	beq.n	800e024 <I2C_ITError+0xd8>
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	2b21      	cmp	r3, #33	@ 0x21
 800e022:	d133      	bne.n	800e08c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e02e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e032:	d107      	bne.n	800e044 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e042:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fd fcd1 	bl	800b9f0 <HAL_DMA_GetState>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b01      	cmp	r3, #1
 800e052:	d017      	beq.n	800e084 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e058:	4a33      	ldr	r2, [pc, #204]	@ (800e128 <I2C_ITError+0x1dc>)
 800e05a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fc fb51 	bl	800a710 <HAL_DMA_Abort_IT>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d04d      	beq.n	800e110 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e07e:	4610      	mov	r0, r2
 800e080:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e082:	e045      	b.n	800e110 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f851 	bl	800e12c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e08a:	e041      	b.n	800e110 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d039      	beq.n	800e108 <I2C_ITError+0x1bc>
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2b12      	cmp	r3, #18
 800e098:	d002      	beq.n	800e0a0 <I2C_ITError+0x154>
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b22      	cmp	r3, #34	@ 0x22
 800e09e:	d133      	bne.n	800e108 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e0aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e0ae:	d107      	bne.n	800e0c0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e0be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fd fc93 	bl	800b9f0 <HAL_DMA_GetState>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d017      	beq.n	800e100 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0d4:	4a14      	ldr	r2, [pc, #80]	@ (800e128 <I2C_ITError+0x1dc>)
 800e0d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fc fb13 	bl	800a710 <HAL_DMA_Abort_IT>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d011      	beq.n	800e114 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e0fe:	e009      	b.n	800e114 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 f813 	bl	800e12c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e106:	e005      	b.n	800e114 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f80f 	bl	800e12c <I2C_TreatErrorCallback>
  }
}
 800e10e:	e002      	b.n	800e116 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e110:	bf00      	nop
 800e112:	e000      	b.n	800e116 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e114:	bf00      	nop
}
 800e116:	bf00      	nop
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	ffff0000 	.word	0xffff0000
 800e124:	0800d4fb 	.word	0x0800d4fb
 800e128:	0800e1c3 	.word	0x0800e1c3

0800e12c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b60      	cmp	r3, #96	@ 0x60
 800e13e:	d10e      	bne.n	800e15e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2220      	movs	r2, #32
 800e144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff f9c5 	bl	800d4e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e15c:	e009      	b.n	800e172 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff f9b0 	bl	800d4d2 <HAL_I2C_ErrorCallback>
}
 800e172:	bf00      	nop
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e17a:	b480      	push	{r7}
 800e17c:	b083      	sub	sp, #12
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d103      	bne.n	800e198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2200      	movs	r2, #0
 800e196:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	699b      	ldr	r3, [r3, #24]
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d007      	beq.n	800e1b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	699a      	ldr	r2, [r3, #24]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f042 0201 	orr.w	r2, r2, #1
 800e1b4:	619a      	str	r2, [r3, #24]
  }
}
 800e1b6:	bf00      	nop
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b084      	sub	sp, #16
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d003      	beq.n	800e1e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1dc:	2200      	movs	r2, #0
 800e1de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d003      	beq.n	800e1f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff ff9b 	bl	800e12c <I2C_TreatErrorCallback>
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b084      	sub	sp, #16
 800e202:	af00      	add	r7, sp, #0
 800e204:	60f8      	str	r0, [r7, #12]
 800e206:	60b9      	str	r1, [r7, #8]
 800e208:	603b      	str	r3, [r7, #0]
 800e20a:	4613      	mov	r3, r2
 800e20c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e20e:	e03b      	b.n	800e288 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f000 f8d5 	bl	800e3c4 <I2C_IsErrorOccurred>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e041      	b.n	800e2a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22a:	d02d      	beq.n	800e288 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e22c:	f7f9 f8f8 	bl	8007420 <HAL_GetTick>
 800e230:	4602      	mov	r2, r0
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d302      	bcc.n	800e242 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d122      	bne.n	800e288 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	699a      	ldr	r2, [r3, #24]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	4013      	ands	r3, r2
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	429a      	cmp	r2, r3
 800e250:	bf0c      	ite	eq
 800e252:	2301      	moveq	r3, #1
 800e254:	2300      	movne	r3, #0
 800e256:	b2db      	uxtb	r3, r3
 800e258:	461a      	mov	r2, r3
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d113      	bne.n	800e288 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e264:	f043 0220 	orr.w	r2, r3, #32
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2220      	movs	r2, #32
 800e270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	e00f      	b.n	800e2a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	699a      	ldr	r2, [r3, #24]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	4013      	ands	r3, r2
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	429a      	cmp	r2, r3
 800e296:	bf0c      	ite	eq
 800e298:	2301      	moveq	r3, #1
 800e29a:	2300      	movne	r3, #0
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	461a      	mov	r2, r3
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d0b4      	beq.n	800e210 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e2bc:	e033      	b.n	800e326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	68b9      	ldr	r1, [r7, #8]
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f000 f87e 	bl	800e3c4 <I2C_IsErrorOccurred>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e031      	b.n	800e336 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d8:	d025      	beq.n	800e326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2da:	f7f9 f8a1 	bl	8007420 <HAL_GetTick>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d302      	bcc.n	800e2f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d11a      	bne.n	800e326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d013      	beq.n	800e326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e302:	f043 0220 	orr.w	r2, r3, #32
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2220      	movs	r2, #32
 800e30e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e007      	b.n	800e336 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	f003 0302 	and.w	r3, r3, #2
 800e330:	2b02      	cmp	r3, #2
 800e332:	d1c4      	bne.n	800e2be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b084      	sub	sp, #16
 800e342:	af00      	add	r7, sp, #0
 800e344:	60f8      	str	r0, [r7, #12]
 800e346:	60b9      	str	r1, [r7, #8]
 800e348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e34a:	e02f      	b.n	800e3ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68b9      	ldr	r1, [r7, #8]
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f837 	bl	800e3c4 <I2C_IsErrorOccurred>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e02d      	b.n	800e3bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e360:	f7f9 f85e 	bl	8007420 <HAL_GetTick>
 800e364:	4602      	mov	r2, r0
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d302      	bcc.n	800e376 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d11a      	bne.n	800e3ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	f003 0320 	and.w	r3, r3, #32
 800e380:	2b20      	cmp	r3, #32
 800e382:	d013      	beq.n	800e3ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e388:	f043 0220 	orr.w	r2, r3, #32
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2220      	movs	r2, #32
 800e394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e007      	b.n	800e3bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f003 0320 	and.w	r3, r3, #32
 800e3b6:	2b20      	cmp	r3, #32
 800e3b8:	d1c8      	bne.n	800e34c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b08a      	sub	sp, #40	@ 0x28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	699b      	ldr	r3, [r3, #24]
 800e3dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	f003 0310 	and.w	r3, r3, #16
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d068      	beq.n	800e4c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2210      	movs	r2, #16
 800e3f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e3f8:	e049      	b.n	800e48e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d045      	beq.n	800e48e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e402:	f7f9 f80d 	bl	8007420 <HAL_GetTick>
 800e406:	4602      	mov	r2, r0
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <I2C_IsErrorOccurred+0x54>
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d13a      	bne.n	800e48e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e422:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e42a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e43a:	d121      	bne.n	800e480 <I2C_IsErrorOccurred+0xbc>
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e442:	d01d      	beq.n	800e480 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e444:	7cfb      	ldrb	r3, [r7, #19]
 800e446:	2b20      	cmp	r3, #32
 800e448:	d01a      	beq.n	800e480 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e458:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e45a:	f7f8 ffe1 	bl	8007420 <HAL_GetTick>
 800e45e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e460:	e00e      	b.n	800e480 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e462:	f7f8 ffdd 	bl	8007420 <HAL_GetTick>
 800e466:	4602      	mov	r2, r0
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	2b19      	cmp	r3, #25
 800e46e:	d907      	bls.n	800e480 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e470:	6a3b      	ldr	r3, [r7, #32]
 800e472:	f043 0320 	orr.w	r3, r3, #32
 800e476:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e478:	2301      	movs	r3, #1
 800e47a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e47e:	e006      	b.n	800e48e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b20      	cmp	r3, #32
 800e48c:	d1e9      	bne.n	800e462 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	f003 0320 	and.w	r3, r3, #32
 800e498:	2b20      	cmp	r3, #32
 800e49a:	d003      	beq.n	800e4a4 <I2C_IsErrorOccurred+0xe0>
 800e49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d0aa      	beq.n	800e3fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d103      	bne.n	800e4b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2220      	movs	r2, #32
 800e4b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	f043 0304 	orr.w	r3, r3, #4
 800e4ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	699b      	ldr	r3, [r3, #24]
 800e4c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00b      	beq.n	800e4ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	f043 0301 	orr.w	r3, r3, #1
 800e4da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00b      	beq.n	800e50e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	f043 0308 	orr.w	r3, r3, #8
 800e4fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e506:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e508:	2301      	movs	r3, #1
 800e50a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00b      	beq.n	800e530 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	f043 0302 	orr.w	r3, r3, #2
 800e51e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e534:	2b00      	cmp	r3, #0
 800e536:	d01c      	beq.n	800e572 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f7ff fe1e 	bl	800e17a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6859      	ldr	r1, [r3, #4]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	4b0d      	ldr	r3, [pc, #52]	@ (800e580 <I2C_IsErrorOccurred+0x1bc>)
 800e54a:	400b      	ands	r3, r1
 800e54c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	431a      	orrs	r2, r3
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2220      	movs	r2, #32
 800e55e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800e572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e576:	4618      	mov	r0, r3
 800e578:	3728      	adds	r7, #40	@ 0x28
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	fe00e800 	.word	0xfe00e800

0800e584 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e584:	b480      	push	{r7}
 800e586:	b087      	sub	sp, #28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	607b      	str	r3, [r7, #4]
 800e58e:	460b      	mov	r3, r1
 800e590:	817b      	strh	r3, [r7, #10]
 800e592:	4613      	mov	r3, r2
 800e594:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e596:	897b      	ldrh	r3, [r7, #10]
 800e598:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e59c:	7a7b      	ldrb	r3, [r7, #9]
 800e59e:	041b      	lsls	r3, r3, #16
 800e5a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e5a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	0d5b      	lsrs	r3, r3, #21
 800e5be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800e5c2:	4b08      	ldr	r3, [pc, #32]	@ (800e5e4 <I2C_TransferConfig+0x60>)
 800e5c4:	430b      	orrs	r3, r1
 800e5c6:	43db      	mvns	r3, r3
 800e5c8:	ea02 0103 	and.w	r1, r2, r3
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	697a      	ldr	r2, [r7, #20]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e5d6:	bf00      	nop
 800e5d8:	371c      	adds	r7, #28
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	03ff63ff 	.word	0x03ff63ff

0800e5e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e5f8:	887b      	ldrh	r3, [r7, #2]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00f      	beq.n	800e622 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800e608:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e610:	b2db      	uxtb	r3, r3
 800e612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e616:	2b28      	cmp	r3, #40	@ 0x28
 800e618:	d003      	beq.n	800e622 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800e620:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e622:	887b      	ldrh	r3, [r7, #2]
 800e624:	f003 0302 	and.w	r3, r3, #2
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00f      	beq.n	800e64c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800e632:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e640:	2b28      	cmp	r3, #40	@ 0x28
 800e642:	d003      	beq.n	800e64c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800e64a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e64c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	da03      	bge.n	800e65c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800e65a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e65c:	887b      	ldrh	r3, [r7, #2]
 800e65e:	2b10      	cmp	r3, #16
 800e660:	d103      	bne.n	800e66a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800e668:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e66a:	887b      	ldrh	r3, [r7, #2]
 800e66c:	2b20      	cmp	r3, #32
 800e66e:	d103      	bne.n	800e678 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f043 0320 	orr.w	r3, r3, #32
 800e676:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e678:	887b      	ldrh	r3, [r7, #2]
 800e67a:	2b40      	cmp	r3, #64	@ 0x40
 800e67c:	d103      	bne.n	800e686 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e684:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6819      	ldr	r1, [r3, #0]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	43da      	mvns	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	400a      	ands	r2, r1
 800e696:	601a      	str	r2, [r3, #0]
}
 800e698:	bf00      	nop
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	2b20      	cmp	r3, #32
 800e6b8:	d138      	bne.n	800e72c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d101      	bne.n	800e6c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e032      	b.n	800e72e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2224      	movs	r2, #36	@ 0x24
 800e6d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f022 0201 	bic.w	r2, r2, #1
 800e6e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e6f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6819      	ldr	r1, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f042 0201 	orr.w	r2, r2, #1
 800e716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2220      	movs	r2, #32
 800e71c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	e000      	b.n	800e72e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e72c:	2302      	movs	r3, #2
  }
}
 800e72e:	4618      	mov	r0, r3
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b085      	sub	sp, #20
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b20      	cmp	r3, #32
 800e74e:	d139      	bne.n	800e7c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e756:	2b01      	cmp	r3, #1
 800e758:	d101      	bne.n	800e75e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e75a:	2302      	movs	r3, #2
 800e75c:	e033      	b.n	800e7c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2224      	movs	r2, #36	@ 0x24
 800e76a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f022 0201 	bic.w	r2, r2, #1
 800e77c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e78c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	4313      	orrs	r3, r2
 800e796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f042 0201 	orr.w	r2, r2, #1
 800e7ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2220      	movs	r2, #32
 800e7b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e000      	b.n	800e7c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e7c4:	2302      	movs	r3, #2
  }
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e7dc:	4b19      	ldr	r3, [pc, #100]	@ (800e844 <HAL_PWREx_ConfigSupply+0x70>)
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	f003 0304 	and.w	r3, r3, #4
 800e7e4:	2b04      	cmp	r3, #4
 800e7e6:	d00a      	beq.n	800e7fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e7e8:	4b16      	ldr	r3, [pc, #88]	@ (800e844 <HAL_PWREx_ConfigSupply+0x70>)
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	f003 0307 	and.w	r3, r3, #7
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d001      	beq.n	800e7fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e01f      	b.n	800e83a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	e01d      	b.n	800e83a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e7fe:	4b11      	ldr	r3, [pc, #68]	@ (800e844 <HAL_PWREx_ConfigSupply+0x70>)
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	f023 0207 	bic.w	r2, r3, #7
 800e806:	490f      	ldr	r1, [pc, #60]	@ (800e844 <HAL_PWREx_ConfigSupply+0x70>)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e80e:	f7f8 fe07 	bl	8007420 <HAL_GetTick>
 800e812:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e814:	e009      	b.n	800e82a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e816:	f7f8 fe03 	bl	8007420 <HAL_GetTick>
 800e81a:	4602      	mov	r2, r0
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e824:	d901      	bls.n	800e82a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e007      	b.n	800e83a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e82a:	4b06      	ldr	r3, [pc, #24]	@ (800e844 <HAL_PWREx_ConfigSupply+0x70>)
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e836:	d1ee      	bne.n	800e816 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	58024800 	.word	0x58024800

0800e848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08c      	sub	sp, #48	@ 0x30
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e3c8      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 8087 	beq.w	800e976 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e868:	4b88      	ldr	r3, [pc, #544]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e872:	4b86      	ldr	r3, [pc, #536]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e876:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87a:	2b10      	cmp	r3, #16
 800e87c:	d007      	beq.n	800e88e <HAL_RCC_OscConfig+0x46>
 800e87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e880:	2b18      	cmp	r3, #24
 800e882:	d110      	bne.n	800e8a6 <HAL_RCC_OscConfig+0x5e>
 800e884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e886:	f003 0303 	and.w	r3, r3, #3
 800e88a:	2b02      	cmp	r3, #2
 800e88c:	d10b      	bne.n	800e8a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e88e:	4b7f      	ldr	r3, [pc, #508]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e896:	2b00      	cmp	r3, #0
 800e898:	d06c      	beq.n	800e974 <HAL_RCC_OscConfig+0x12c>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d168      	bne.n	800e974 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e3a2      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8ae:	d106      	bne.n	800e8be <HAL_RCC_OscConfig+0x76>
 800e8b0:	4b76      	ldr	r3, [pc, #472]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a75      	ldr	r2, [pc, #468]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	e02e      	b.n	800e91c <HAL_RCC_OscConfig+0xd4>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10c      	bne.n	800e8e0 <HAL_RCC_OscConfig+0x98>
 800e8c6:	4b71      	ldr	r3, [pc, #452]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a70      	ldr	r2, [pc, #448]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	4b6e      	ldr	r3, [pc, #440]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a6d      	ldr	r2, [pc, #436]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	e01d      	b.n	800e91c <HAL_RCC_OscConfig+0xd4>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e8e8:	d10c      	bne.n	800e904 <HAL_RCC_OscConfig+0xbc>
 800e8ea:	4b68      	ldr	r3, [pc, #416]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a67      	ldr	r2, [pc, #412]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	4b65      	ldr	r3, [pc, #404]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a64      	ldr	r2, [pc, #400]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e8fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	e00b      	b.n	800e91c <HAL_RCC_OscConfig+0xd4>
 800e904:	4b61      	ldr	r3, [pc, #388]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a60      	ldr	r2, [pc, #384]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e90a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	4b5e      	ldr	r3, [pc, #376]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a5d      	ldr	r2, [pc, #372]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e91a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d013      	beq.n	800e94c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e924:	f7f8 fd7c 	bl	8007420 <HAL_GetTick>
 800e928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e92a:	e008      	b.n	800e93e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e92c:	f7f8 fd78 	bl	8007420 <HAL_GetTick>
 800e930:	4602      	mov	r2, r0
 800e932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	2b64      	cmp	r3, #100	@ 0x64
 800e938:	d901      	bls.n	800e93e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e93a:	2303      	movs	r3, #3
 800e93c:	e356      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e93e:	4b53      	ldr	r3, [pc, #332]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0f0      	beq.n	800e92c <HAL_RCC_OscConfig+0xe4>
 800e94a:	e014      	b.n	800e976 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e94c:	f7f8 fd68 	bl	8007420 <HAL_GetTick>
 800e950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e952:	e008      	b.n	800e966 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e954:	f7f8 fd64 	bl	8007420 <HAL_GetTick>
 800e958:	4602      	mov	r2, r0
 800e95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	2b64      	cmp	r3, #100	@ 0x64
 800e960:	d901      	bls.n	800e966 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e342      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e966:	4b49      	ldr	r3, [pc, #292]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1f0      	bne.n	800e954 <HAL_RCC_OscConfig+0x10c>
 800e972:	e000      	b.n	800e976 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0302 	and.w	r3, r3, #2
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 808c 	beq.w	800ea9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e984:	4b41      	ldr	r3, [pc, #260]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e98c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e98e:	4b3f      	ldr	r3, [pc, #252]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e992:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d007      	beq.n	800e9aa <HAL_RCC_OscConfig+0x162>
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	2b18      	cmp	r3, #24
 800e99e:	d137      	bne.n	800ea10 <HAL_RCC_OscConfig+0x1c8>
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	f003 0303 	and.w	r3, r3, #3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d132      	bne.n	800ea10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e9aa:	4b38      	ldr	r3, [pc, #224]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f003 0304 	and.w	r3, r3, #4
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d005      	beq.n	800e9c2 <HAL_RCC_OscConfig+0x17a>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d101      	bne.n	800e9c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e314      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e9c2:	4b32      	ldr	r3, [pc, #200]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f023 0219 	bic.w	r2, r3, #25
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	492f      	ldr	r1, [pc, #188]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9d4:	f7f8 fd24 	bl	8007420 <HAL_GetTick>
 800e9d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9da:	e008      	b.n	800e9ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e9dc:	f7f8 fd20 	bl	8007420 <HAL_GetTick>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d901      	bls.n	800e9ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	e2fe      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9ee:	4b27      	ldr	r3, [pc, #156]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f003 0304 	and.w	r3, r3, #4
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d0f0      	beq.n	800e9dc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9fa:	4b24      	ldr	r3, [pc, #144]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	061b      	lsls	r3, r3, #24
 800ea08:	4920      	ldr	r1, [pc, #128]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ea0e:	e045      	b.n	800ea9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d026      	beq.n	800ea66 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ea18:	4b1c      	ldr	r3, [pc, #112]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f023 0219 	bic.w	r2, r3, #25
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	4919      	ldr	r1, [pc, #100]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea26:	4313      	orrs	r3, r2
 800ea28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea2a:	f7f8 fcf9 	bl	8007420 <HAL_GetTick>
 800ea2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea30:	e008      	b.n	800ea44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea32:	f7f8 fcf5 	bl	8007420 <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d901      	bls.n	800ea44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e2d3      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea44:	4b11      	ldr	r3, [pc, #68]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0f0      	beq.n	800ea32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea50:	4b0e      	ldr	r3, [pc, #56]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	061b      	lsls	r3, r3, #24
 800ea5e:	490b      	ldr	r1, [pc, #44]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea60:	4313      	orrs	r3, r2
 800ea62:	604b      	str	r3, [r1, #4]
 800ea64:	e01a      	b.n	800ea9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea66:	4b09      	ldr	r3, [pc, #36]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a08      	ldr	r2, [pc, #32]	@ (800ea8c <HAL_RCC_OscConfig+0x244>)
 800ea6c:	f023 0301 	bic.w	r3, r3, #1
 800ea70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea72:	f7f8 fcd5 	bl	8007420 <HAL_GetTick>
 800ea76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ea78:	e00a      	b.n	800ea90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea7a:	f7f8 fcd1 	bl	8007420 <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d903      	bls.n	800ea90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e2af      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
 800ea8c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ea90:	4b96      	ldr	r3, [pc, #600]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1ee      	bne.n	800ea7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f003 0310 	and.w	r3, r3, #16
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d06a      	beq.n	800eb7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eaa8:	4b90      	ldr	r3, [pc, #576]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eab0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eab2:	4b8e      	ldr	r3, [pc, #568]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	2b08      	cmp	r3, #8
 800eabc:	d007      	beq.n	800eace <HAL_RCC_OscConfig+0x286>
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	2b18      	cmp	r3, #24
 800eac2:	d11b      	bne.n	800eafc <HAL_RCC_OscConfig+0x2b4>
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f003 0303 	and.w	r3, r3, #3
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d116      	bne.n	800eafc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800eace:	4b87      	ldr	r3, [pc, #540]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <HAL_RCC_OscConfig+0x29e>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	2b80      	cmp	r3, #128	@ 0x80
 800eae0:	d001      	beq.n	800eae6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	e282      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eae6:	4b81      	ldr	r3, [pc, #516]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	061b      	lsls	r3, r3, #24
 800eaf4:	497d      	ldr	r1, [pc, #500]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800eafa:	e040      	b.n	800eb7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	69db      	ldr	r3, [r3, #28]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d023      	beq.n	800eb4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800eb04:	4b79      	ldr	r3, [pc, #484]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a78      	ldr	r2, [pc, #480]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb10:	f7f8 fc86 	bl	8007420 <HAL_GetTick>
 800eb14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb16:	e008      	b.n	800eb2a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800eb18:	f7f8 fc82 	bl	8007420 <HAL_GetTick>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2b02      	cmp	r3, #2
 800eb24:	d901      	bls.n	800eb2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800eb26:	2303      	movs	r3, #3
 800eb28:	e260      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb2a:	4b70      	ldr	r3, [pc, #448]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d0f0      	beq.n	800eb18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eb36:	4b6d      	ldr	r3, [pc, #436]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	061b      	lsls	r3, r3, #24
 800eb44:	4969      	ldr	r1, [pc, #420]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb46:	4313      	orrs	r3, r2
 800eb48:	60cb      	str	r3, [r1, #12]
 800eb4a:	e018      	b.n	800eb7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800eb4c:	4b67      	ldr	r3, [pc, #412]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a66      	ldr	r2, [pc, #408]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb58:	f7f8 fc62 	bl	8007420 <HAL_GetTick>
 800eb5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800eb5e:	e008      	b.n	800eb72 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800eb60:	f7f8 fc5e 	bl	8007420 <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d901      	bls.n	800eb72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800eb6e:	2303      	movs	r3, #3
 800eb70:	e23c      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800eb72:	4b5e      	ldr	r3, [pc, #376]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1f0      	bne.n	800eb60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f003 0308 	and.w	r3, r3, #8
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d036      	beq.n	800ebf8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d019      	beq.n	800ebc6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb92:	4b56      	ldr	r3, [pc, #344]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb96:	4a55      	ldr	r2, [pc, #340]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800eb98:	f043 0301 	orr.w	r3, r3, #1
 800eb9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb9e:	f7f8 fc3f 	bl	8007420 <HAL_GetTick>
 800eba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eba4:	e008      	b.n	800ebb8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eba6:	f7f8 fc3b 	bl	8007420 <HAL_GetTick>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d901      	bls.n	800ebb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	e219      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ebb8:	4b4c      	ldr	r3, [pc, #304]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ebba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebbc:	f003 0302 	and.w	r3, r3, #2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d0f0      	beq.n	800eba6 <HAL_RCC_OscConfig+0x35e>
 800ebc4:	e018      	b.n	800ebf8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ebc6:	4b49      	ldr	r3, [pc, #292]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ebc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebca:	4a48      	ldr	r2, [pc, #288]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ebcc:	f023 0301 	bic.w	r3, r3, #1
 800ebd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebd2:	f7f8 fc25 	bl	8007420 <HAL_GetTick>
 800ebd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ebd8:	e008      	b.n	800ebec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ebda:	f7f8 fc21 	bl	8007420 <HAL_GetTick>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d901      	bls.n	800ebec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e1ff      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ebec:	4b3f      	ldr	r3, [pc, #252]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ebee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebf0:	f003 0302 	and.w	r3, r3, #2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1f0      	bne.n	800ebda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f003 0320 	and.w	r3, r3, #32
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d036      	beq.n	800ec72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	699b      	ldr	r3, [r3, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d019      	beq.n	800ec40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ec0c:	4b37      	ldr	r3, [pc, #220]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a36      	ldr	r2, [pc, #216]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ec16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ec18:	f7f8 fc02 	bl	8007420 <HAL_GetTick>
 800ec1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ec1e:	e008      	b.n	800ec32 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ec20:	f7f8 fbfe 	bl	8007420 <HAL_GetTick>
 800ec24:	4602      	mov	r2, r0
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d901      	bls.n	800ec32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ec2e:	2303      	movs	r3, #3
 800ec30:	e1dc      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ec32:	4b2e      	ldr	r3, [pc, #184]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0f0      	beq.n	800ec20 <HAL_RCC_OscConfig+0x3d8>
 800ec3e:	e018      	b.n	800ec72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ec40:	4b2a      	ldr	r3, [pc, #168]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a29      	ldr	r2, [pc, #164]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ec4c:	f7f8 fbe8 	bl	8007420 <HAL_GetTick>
 800ec50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ec52:	e008      	b.n	800ec66 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ec54:	f7f8 fbe4 	bl	8007420 <HAL_GetTick>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d901      	bls.n	800ec66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ec62:	2303      	movs	r3, #3
 800ec64:	e1c2      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ec66:	4b21      	ldr	r3, [pc, #132]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1f0      	bne.n	800ec54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 0304 	and.w	r3, r3, #4
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 8086 	beq.w	800ed8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ec80:	4b1b      	ldr	r3, [pc, #108]	@ (800ecf0 <HAL_RCC_OscConfig+0x4a8>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a1a      	ldr	r2, [pc, #104]	@ (800ecf0 <HAL_RCC_OscConfig+0x4a8>)
 800ec86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ec8c:	f7f8 fbc8 	bl	8007420 <HAL_GetTick>
 800ec90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec92:	e008      	b.n	800eca6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec94:	f7f8 fbc4 	bl	8007420 <HAL_GetTick>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	2b64      	cmp	r3, #100	@ 0x64
 800eca0:	d901      	bls.n	800eca6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800eca2:	2303      	movs	r3, #3
 800eca4:	e1a2      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eca6:	4b12      	ldr	r3, [pc, #72]	@ (800ecf0 <HAL_RCC_OscConfig+0x4a8>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0f0      	beq.n	800ec94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	689b      	ldr	r3, [r3, #8]
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d106      	bne.n	800ecc8 <HAL_RCC_OscConfig+0x480>
 800ecba:	4b0c      	ldr	r3, [pc, #48]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ecbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecbe:	4a0b      	ldr	r2, [pc, #44]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ecc0:	f043 0301 	orr.w	r3, r3, #1
 800ecc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ecc6:	e032      	b.n	800ed2e <HAL_RCC_OscConfig+0x4e6>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d111      	bne.n	800ecf4 <HAL_RCC_OscConfig+0x4ac>
 800ecd0:	4b06      	ldr	r3, [pc, #24]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ecd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecd4:	4a05      	ldr	r2, [pc, #20]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ecd6:	f023 0301 	bic.w	r3, r3, #1
 800ecda:	6713      	str	r3, [r2, #112]	@ 0x70
 800ecdc:	4b03      	ldr	r3, [pc, #12]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ecde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ece0:	4a02      	ldr	r2, [pc, #8]	@ (800ecec <HAL_RCC_OscConfig+0x4a4>)
 800ece2:	f023 0304 	bic.w	r3, r3, #4
 800ece6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ece8:	e021      	b.n	800ed2e <HAL_RCC_OscConfig+0x4e6>
 800ecea:	bf00      	nop
 800ecec:	58024400 	.word	0x58024400
 800ecf0:	58024800 	.word	0x58024800
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	d10c      	bne.n	800ed16 <HAL_RCC_OscConfig+0x4ce>
 800ecfc:	4b83      	ldr	r3, [pc, #524]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ecfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed00:	4a82      	ldr	r2, [pc, #520]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed02:	f043 0304 	orr.w	r3, r3, #4
 800ed06:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed08:	4b80      	ldr	r3, [pc, #512]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed0c:	4a7f      	ldr	r2, [pc, #508]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed0e:	f043 0301 	orr.w	r3, r3, #1
 800ed12:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed14:	e00b      	b.n	800ed2e <HAL_RCC_OscConfig+0x4e6>
 800ed16:	4b7d      	ldr	r3, [pc, #500]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed1a:	4a7c      	ldr	r2, [pc, #496]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed1c:	f023 0301 	bic.w	r3, r3, #1
 800ed20:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed22:	4b7a      	ldr	r3, [pc, #488]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed26:	4a79      	ldr	r2, [pc, #484]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed28:	f023 0304 	bic.w	r3, r3, #4
 800ed2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d015      	beq.n	800ed62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed36:	f7f8 fb73 	bl	8007420 <HAL_GetTick>
 800ed3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ed3c:	e00a      	b.n	800ed54 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ed3e:	f7f8 fb6f 	bl	8007420 <HAL_GetTick>
 800ed42:	4602      	mov	r2, r0
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d901      	bls.n	800ed54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ed50:	2303      	movs	r3, #3
 800ed52:	e14b      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ed54:	4b6d      	ldr	r3, [pc, #436]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0ee      	beq.n	800ed3e <HAL_RCC_OscConfig+0x4f6>
 800ed60:	e014      	b.n	800ed8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed62:	f7f8 fb5d 	bl	8007420 <HAL_GetTick>
 800ed66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ed68:	e00a      	b.n	800ed80 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ed6a:	f7f8 fb59 	bl	8007420 <HAL_GetTick>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d901      	bls.n	800ed80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e135      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ed80:	4b62      	ldr	r3, [pc, #392]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed84:	f003 0302 	and.w	r3, r3, #2
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1ee      	bne.n	800ed6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 812a 	beq.w	800efea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ed96:	4b5d      	ldr	r3, [pc, #372]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed9e:	2b18      	cmp	r3, #24
 800eda0:	f000 80ba 	beq.w	800ef18 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	f040 8095 	bne.w	800eed8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800edae:	4b57      	ldr	r3, [pc, #348]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a56      	ldr	r2, [pc, #344]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800edb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800edb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edba:	f7f8 fb31 	bl	8007420 <HAL_GetTick>
 800edbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edc0:	e008      	b.n	800edd4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edc2:	f7f8 fb2d 	bl	8007420 <HAL_GetTick>
 800edc6:	4602      	mov	r2, r0
 800edc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d901      	bls.n	800edd4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e10b      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edd4:	4b4d      	ldr	r3, [pc, #308]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d1f0      	bne.n	800edc2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ede0:	4b4a      	ldr	r3, [pc, #296]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ede2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ede4:	4b4a      	ldr	r3, [pc, #296]	@ (800ef10 <HAL_RCC_OscConfig+0x6c8>)
 800ede6:	4013      	ands	r3, r2
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800edf0:	0112      	lsls	r2, r2, #4
 800edf2:	430a      	orrs	r2, r1
 800edf4:	4945      	ldr	r1, [pc, #276]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800edf6:	4313      	orrs	r3, r2
 800edf8:	628b      	str	r3, [r1, #40]	@ 0x28
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edfe:	3b01      	subs	r3, #1
 800ee00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	025b      	lsls	r3, r3, #9
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee14:	3b01      	subs	r3, #1
 800ee16:	041b      	lsls	r3, r3, #16
 800ee18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ee1c:	431a      	orrs	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee22:	3b01      	subs	r3, #1
 800ee24:	061b      	lsls	r3, r3, #24
 800ee26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ee2a:	4938      	ldr	r1, [pc, #224]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ee30:	4b36      	ldr	r3, [pc, #216]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee34:	4a35      	ldr	r2, [pc, #212]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee36:	f023 0301 	bic.w	r3, r3, #1
 800ee3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ee3c:	4b33      	ldr	r3, [pc, #204]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee40:	4b34      	ldr	r3, [pc, #208]	@ (800ef14 <HAL_RCC_OscConfig+0x6cc>)
 800ee42:	4013      	ands	r3, r2
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ee48:	00d2      	lsls	r2, r2, #3
 800ee4a:	4930      	ldr	r1, [pc, #192]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ee50:	4b2e      	ldr	r3, [pc, #184]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee54:	f023 020c 	bic.w	r2, r3, #12
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee5c:	492b      	ldr	r1, [pc, #172]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ee62:	4b2a      	ldr	r3, [pc, #168]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee66:	f023 0202 	bic.w	r2, r3, #2
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee6e:	4927      	ldr	r1, [pc, #156]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee70:	4313      	orrs	r3, r2
 800ee72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ee74:	4b25      	ldr	r3, [pc, #148]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee78:	4a24      	ldr	r2, [pc, #144]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee80:	4b22      	ldr	r3, [pc, #136]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee84:	4a21      	ldr	r2, [pc, #132]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ee8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	4a1e      	ldr	r2, [pc, #120]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ee96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ee98:	4b1c      	ldr	r3, [pc, #112]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ee9e:	f043 0301 	orr.w	r3, r3, #1
 800eea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eea4:	4b19      	ldr	r3, [pc, #100]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a18      	ldr	r2, [pc, #96]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800eeaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eeae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eeb0:	f7f8 fab6 	bl	8007420 <HAL_GetTick>
 800eeb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eeb6:	e008      	b.n	800eeca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eeb8:	f7f8 fab2 	bl	8007420 <HAL_GetTick>
 800eebc:	4602      	mov	r2, r0
 800eebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	d901      	bls.n	800eeca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800eec6:	2303      	movs	r3, #3
 800eec8:	e090      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eeca:	4b10      	ldr	r3, [pc, #64]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0f0      	beq.n	800eeb8 <HAL_RCC_OscConfig+0x670>
 800eed6:	e088      	b.n	800efea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eed8:	4b0c      	ldr	r3, [pc, #48]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a0b      	ldr	r2, [pc, #44]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800eede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eee4:	f7f8 fa9c 	bl	8007420 <HAL_GetTick>
 800eee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eeea:	e008      	b.n	800eefe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eeec:	f7f8 fa98 	bl	8007420 <HAL_GetTick>
 800eef0:	4602      	mov	r2, r0
 800eef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d901      	bls.n	800eefe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800eefa:	2303      	movs	r3, #3
 800eefc:	e076      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eefe:	4b03      	ldr	r3, [pc, #12]	@ (800ef0c <HAL_RCC_OscConfig+0x6c4>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1f0      	bne.n	800eeec <HAL_RCC_OscConfig+0x6a4>
 800ef0a:	e06e      	b.n	800efea <HAL_RCC_OscConfig+0x7a2>
 800ef0c:	58024400 	.word	0x58024400
 800ef10:	fffffc0c 	.word	0xfffffc0c
 800ef14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ef18:	4b36      	ldr	r3, [pc, #216]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ef1e:	4b35      	ldr	r3, [pc, #212]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800ef20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d031      	beq.n	800ef90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	f003 0203 	and.w	r2, r3, #3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d12a      	bne.n	800ef90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	091b      	lsrs	r3, r3, #4
 800ef3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d122      	bne.n	800ef90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d11a      	bne.n	800ef90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	0a5b      	lsrs	r3, r3, #9
 800ef5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d111      	bne.n	800ef90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	0c1b      	lsrs	r3, r3, #16
 800ef70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d108      	bne.n	800ef90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	0e1b      	lsrs	r3, r3, #24
 800ef82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d001      	beq.n	800ef94 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e02b      	b.n	800efec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ef94:	4b17      	ldr	r3, [pc, #92]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800ef96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef98:	08db      	lsrs	r3, r3, #3
 800ef9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efa4:	693a      	ldr	r2, [r7, #16]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d01f      	beq.n	800efea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800efaa:	4b12      	ldr	r3, [pc, #72]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efae:	4a11      	ldr	r2, [pc, #68]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efb0:	f023 0301 	bic.w	r3, r3, #1
 800efb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800efb6:	f7f8 fa33 	bl	8007420 <HAL_GetTick>
 800efba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800efbc:	bf00      	nop
 800efbe:	f7f8 fa2f 	bl	8007420 <HAL_GetTick>
 800efc2:	4602      	mov	r2, r0
 800efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d0f9      	beq.n	800efbe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800efca:	4b0a      	ldr	r3, [pc, #40]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efce:	4b0a      	ldr	r3, [pc, #40]	@ (800eff8 <HAL_RCC_OscConfig+0x7b0>)
 800efd0:	4013      	ands	r3, r2
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800efd6:	00d2      	lsls	r2, r2, #3
 800efd8:	4906      	ldr	r1, [pc, #24]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efda:	4313      	orrs	r3, r2
 800efdc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800efde:	4b05      	ldr	r3, [pc, #20]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe2:	4a04      	ldr	r2, [pc, #16]	@ (800eff4 <HAL_RCC_OscConfig+0x7ac>)
 800efe4:	f043 0301 	orr.w	r3, r3, #1
 800efe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3730      	adds	r7, #48	@ 0x30
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	58024400 	.word	0x58024400
 800eff8:	ffff0007 	.word	0xffff0007

0800effc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d101      	bne.n	800f010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	e19c      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f010:	4b8a      	ldr	r3, [pc, #552]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 030f 	and.w	r3, r3, #15
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d910      	bls.n	800f040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f01e:	4b87      	ldr	r3, [pc, #540]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f023 020f 	bic.w	r2, r3, #15
 800f026:	4985      	ldr	r1, [pc, #532]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	4313      	orrs	r3, r2
 800f02c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f02e:	4b83      	ldr	r3, [pc, #524]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f003 030f 	and.w	r3, r3, #15
 800f036:	683a      	ldr	r2, [r7, #0]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d001      	beq.n	800f040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e184      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f003 0304 	and.w	r3, r3, #4
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d010      	beq.n	800f06e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	691a      	ldr	r2, [r3, #16]
 800f050:	4b7b      	ldr	r3, [pc, #492]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f058:	429a      	cmp	r2, r3
 800f05a:	d908      	bls.n	800f06e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f05c:	4b78      	ldr	r3, [pc, #480]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f05e:	699b      	ldr	r3, [r3, #24]
 800f060:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	691b      	ldr	r3, [r3, #16]
 800f068:	4975      	ldr	r1, [pc, #468]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f06a:	4313      	orrs	r3, r2
 800f06c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f003 0308 	and.w	r3, r3, #8
 800f076:	2b00      	cmp	r3, #0
 800f078:	d010      	beq.n	800f09c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	695a      	ldr	r2, [r3, #20]
 800f07e:	4b70      	ldr	r3, [pc, #448]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f080:	69db      	ldr	r3, [r3, #28]
 800f082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f086:	429a      	cmp	r2, r3
 800f088:	d908      	bls.n	800f09c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f08a:	4b6d      	ldr	r3, [pc, #436]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f08c:	69db      	ldr	r3, [r3, #28]
 800f08e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	496a      	ldr	r1, [pc, #424]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f098:	4313      	orrs	r3, r2
 800f09a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f003 0310 	and.w	r3, r3, #16
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d010      	beq.n	800f0ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	699a      	ldr	r2, [r3, #24]
 800f0ac:	4b64      	ldr	r3, [pc, #400]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d908      	bls.n	800f0ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f0b8:	4b61      	ldr	r3, [pc, #388]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0ba:	69db      	ldr	r3, [r3, #28]
 800f0bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	495e      	ldr	r1, [pc, #376]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 0320 	and.w	r3, r3, #32
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d010      	beq.n	800f0f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	69da      	ldr	r2, [r3, #28]
 800f0da:	4b59      	ldr	r3, [pc, #356]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d908      	bls.n	800f0f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f0e6:	4b56      	ldr	r3, [pc, #344]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	69db      	ldr	r3, [r3, #28]
 800f0f2:	4953      	ldr	r1, [pc, #332]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b00      	cmp	r3, #0
 800f102:	d010      	beq.n	800f126 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	68da      	ldr	r2, [r3, #12]
 800f108:	4b4d      	ldr	r3, [pc, #308]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f003 030f 	and.w	r3, r3, #15
 800f110:	429a      	cmp	r2, r3
 800f112:	d908      	bls.n	800f126 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f114:	4b4a      	ldr	r3, [pc, #296]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f116:	699b      	ldr	r3, [r3, #24]
 800f118:	f023 020f 	bic.w	r2, r3, #15
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	4947      	ldr	r1, [pc, #284]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f122:	4313      	orrs	r3, r2
 800f124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d055      	beq.n	800f1de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f132:	4b43      	ldr	r3, [pc, #268]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	4940      	ldr	r1, [pc, #256]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f140:	4313      	orrs	r3, r2
 800f142:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d107      	bne.n	800f15c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f14c:	4b3c      	ldr	r3, [pc, #240]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d121      	bne.n	800f19c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	e0f6      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	2b03      	cmp	r3, #3
 800f162:	d107      	bne.n	800f174 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f164:	4b36      	ldr	r3, [pc, #216]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d115      	bne.n	800f19c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	e0ea      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d107      	bne.n	800f18c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f17c:	4b30      	ldr	r3, [pc, #192]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f184:	2b00      	cmp	r3, #0
 800f186:	d109      	bne.n	800f19c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	e0de      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f18c:	4b2c      	ldr	r3, [pc, #176]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b00      	cmp	r3, #0
 800f196:	d101      	bne.n	800f19c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	e0d6      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f19c:	4b28      	ldr	r3, [pc, #160]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	f023 0207 	bic.w	r2, r3, #7
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	4925      	ldr	r1, [pc, #148]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f1ae:	f7f8 f937 	bl	8007420 <HAL_GetTick>
 800f1b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1b4:	e00a      	b.n	800f1cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1b6:	f7f8 f933 	bl	8007420 <HAL_GetTick>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d901      	bls.n	800f1cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	e0be      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f1cc:	4b1c      	ldr	r3, [pc, #112]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d1eb      	bne.n	800f1b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f003 0302 	and.w	r3, r3, #2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d010      	beq.n	800f20c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68da      	ldr	r2, [r3, #12]
 800f1ee:	4b14      	ldr	r3, [pc, #80]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	f003 030f 	and.w	r3, r3, #15
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d208      	bcs.n	800f20c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1fa:	4b11      	ldr	r3, [pc, #68]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	f023 020f 	bic.w	r2, r3, #15
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	490e      	ldr	r1, [pc, #56]	@ (800f240 <HAL_RCC_ClockConfig+0x244>)
 800f208:	4313      	orrs	r3, r2
 800f20a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f20c:	4b0b      	ldr	r3, [pc, #44]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 030f 	and.w	r3, r3, #15
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d214      	bcs.n	800f244 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f21a:	4b08      	ldr	r3, [pc, #32]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f023 020f 	bic.w	r2, r3, #15
 800f222:	4906      	ldr	r1, [pc, #24]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	4313      	orrs	r3, r2
 800f228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f22a:	4b04      	ldr	r3, [pc, #16]	@ (800f23c <HAL_RCC_ClockConfig+0x240>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f003 030f 	and.w	r3, r3, #15
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d005      	beq.n	800f244 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f238:	2301      	movs	r3, #1
 800f23a:	e086      	b.n	800f34a <HAL_RCC_ClockConfig+0x34e>
 800f23c:	52002000 	.word	0x52002000
 800f240:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f003 0304 	and.w	r3, r3, #4
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d010      	beq.n	800f272 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	691a      	ldr	r2, [r3, #16]
 800f254:	4b3f      	ldr	r3, [pc, #252]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d208      	bcs.n	800f272 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f260:	4b3c      	ldr	r3, [pc, #240]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	4939      	ldr	r1, [pc, #228]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f26e:	4313      	orrs	r3, r2
 800f270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 0308 	and.w	r3, r3, #8
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d010      	beq.n	800f2a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	695a      	ldr	r2, [r3, #20]
 800f282:	4b34      	ldr	r3, [pc, #208]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f284:	69db      	ldr	r3, [r3, #28]
 800f286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d208      	bcs.n	800f2a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f28e:	4b31      	ldr	r3, [pc, #196]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	492e      	ldr	r1, [pc, #184]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f29c:	4313      	orrs	r3, r2
 800f29e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f003 0310 	and.w	r3, r3, #16
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d010      	beq.n	800f2ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	699a      	ldr	r2, [r3, #24]
 800f2b0:	4b28      	ldr	r3, [pc, #160]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d208      	bcs.n	800f2ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f2bc:	4b25      	ldr	r3, [pc, #148]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2be:	69db      	ldr	r3, [r3, #28]
 800f2c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	4922      	ldr	r1, [pc, #136]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f003 0320 	and.w	r3, r3, #32
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d010      	beq.n	800f2fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	69da      	ldr	r2, [r3, #28]
 800f2de:	4b1d      	ldr	r3, [pc, #116]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d208      	bcs.n	800f2fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	4917      	ldr	r1, [pc, #92]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f2fc:	f000 f834 	bl	800f368 <HAL_RCC_GetSysClockFreq>
 800f300:	4602      	mov	r2, r0
 800f302:	4b14      	ldr	r3, [pc, #80]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	0a1b      	lsrs	r3, r3, #8
 800f308:	f003 030f 	and.w	r3, r3, #15
 800f30c:	4912      	ldr	r1, [pc, #72]	@ (800f358 <HAL_RCC_ClockConfig+0x35c>)
 800f30e:	5ccb      	ldrb	r3, [r1, r3]
 800f310:	f003 031f 	and.w	r3, r3, #31
 800f314:	fa22 f303 	lsr.w	r3, r2, r3
 800f318:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f31a:	4b0e      	ldr	r3, [pc, #56]	@ (800f354 <HAL_RCC_ClockConfig+0x358>)
 800f31c:	699b      	ldr	r3, [r3, #24]
 800f31e:	f003 030f 	and.w	r3, r3, #15
 800f322:	4a0d      	ldr	r2, [pc, #52]	@ (800f358 <HAL_RCC_ClockConfig+0x35c>)
 800f324:	5cd3      	ldrb	r3, [r2, r3]
 800f326:	f003 031f 	and.w	r3, r3, #31
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	fa22 f303 	lsr.w	r3, r2, r3
 800f330:	4a0a      	ldr	r2, [pc, #40]	@ (800f35c <HAL_RCC_ClockConfig+0x360>)
 800f332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f334:	4a0a      	ldr	r2, [pc, #40]	@ (800f360 <HAL_RCC_ClockConfig+0x364>)
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f33a:	4b0a      	ldr	r3, [pc, #40]	@ (800f364 <HAL_RCC_ClockConfig+0x368>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f8 f824 	bl	800738c <HAL_InitTick>
 800f344:	4603      	mov	r3, r0
 800f346:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f348:	7bfb      	ldrb	r3, [r7, #15]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	58024400 	.word	0x58024400
 800f358:	0801e384 	.word	0x0801e384
 800f35c:	2400001c 	.word	0x2400001c
 800f360:	24000018 	.word	0x24000018
 800f364:	24000020 	.word	0x24000020

0800f368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f368:	b480      	push	{r7}
 800f36a:	b089      	sub	sp, #36	@ 0x24
 800f36c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f36e:	4bb3      	ldr	r3, [pc, #716]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f376:	2b18      	cmp	r3, #24
 800f378:	f200 8155 	bhi.w	800f626 <HAL_RCC_GetSysClockFreq+0x2be>
 800f37c:	a201      	add	r2, pc, #4	@ (adr r2, 800f384 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f3e9 	.word	0x0800f3e9
 800f388:	0800f627 	.word	0x0800f627
 800f38c:	0800f627 	.word	0x0800f627
 800f390:	0800f627 	.word	0x0800f627
 800f394:	0800f627 	.word	0x0800f627
 800f398:	0800f627 	.word	0x0800f627
 800f39c:	0800f627 	.word	0x0800f627
 800f3a0:	0800f627 	.word	0x0800f627
 800f3a4:	0800f40f 	.word	0x0800f40f
 800f3a8:	0800f627 	.word	0x0800f627
 800f3ac:	0800f627 	.word	0x0800f627
 800f3b0:	0800f627 	.word	0x0800f627
 800f3b4:	0800f627 	.word	0x0800f627
 800f3b8:	0800f627 	.word	0x0800f627
 800f3bc:	0800f627 	.word	0x0800f627
 800f3c0:	0800f627 	.word	0x0800f627
 800f3c4:	0800f415 	.word	0x0800f415
 800f3c8:	0800f627 	.word	0x0800f627
 800f3cc:	0800f627 	.word	0x0800f627
 800f3d0:	0800f627 	.word	0x0800f627
 800f3d4:	0800f627 	.word	0x0800f627
 800f3d8:	0800f627 	.word	0x0800f627
 800f3dc:	0800f627 	.word	0x0800f627
 800f3e0:	0800f627 	.word	0x0800f627
 800f3e4:	0800f41b 	.word	0x0800f41b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3e8:	4b94      	ldr	r3, [pc, #592]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 0320 	and.w	r3, r3, #32
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d009      	beq.n	800f408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3f4:	4b91      	ldr	r3, [pc, #580]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	08db      	lsrs	r3, r3, #3
 800f3fa:	f003 0303 	and.w	r3, r3, #3
 800f3fe:	4a90      	ldr	r2, [pc, #576]	@ (800f640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f400:	fa22 f303 	lsr.w	r3, r2, r3
 800f404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f406:	e111      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f408:	4b8d      	ldr	r3, [pc, #564]	@ (800f640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f40a:	61bb      	str	r3, [r7, #24]
      break;
 800f40c:	e10e      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f40e:	4b8d      	ldr	r3, [pc, #564]	@ (800f644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f410:	61bb      	str	r3, [r7, #24]
      break;
 800f412:	e10b      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f414:	4b8c      	ldr	r3, [pc, #560]	@ (800f648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f416:	61bb      	str	r3, [r7, #24]
      break;
 800f418:	e108      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f41a:	4b88      	ldr	r3, [pc, #544]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41e:	f003 0303 	and.w	r3, r3, #3
 800f422:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f424:	4b85      	ldr	r3, [pc, #532]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f428:	091b      	lsrs	r3, r3, #4
 800f42a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f42e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f430:	4b82      	ldr	r3, [pc, #520]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f43a:	4b80      	ldr	r3, [pc, #512]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f43e:	08db      	lsrs	r3, r3, #3
 800f440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	fb02 f303 	mul.w	r3, r2, r3
 800f44a:	ee07 3a90 	vmov	s15, r3
 800f44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f452:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f000 80e1 	beq.w	800f620 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2b02      	cmp	r3, #2
 800f462:	f000 8083 	beq.w	800f56c <HAL_RCC_GetSysClockFreq+0x204>
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2b02      	cmp	r3, #2
 800f46a:	f200 80a1 	bhi.w	800f5b0 <HAL_RCC_GetSysClockFreq+0x248>
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d003      	beq.n	800f47c <HAL_RCC_GetSysClockFreq+0x114>
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	2b01      	cmp	r3, #1
 800f478:	d056      	beq.n	800f528 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f47a:	e099      	b.n	800f5b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f47c:	4b6f      	ldr	r3, [pc, #444]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f003 0320 	and.w	r3, r3, #32
 800f484:	2b00      	cmp	r3, #0
 800f486:	d02d      	beq.n	800f4e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f488:	4b6c      	ldr	r3, [pc, #432]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	08db      	lsrs	r3, r3, #3
 800f48e:	f003 0303 	and.w	r3, r3, #3
 800f492:	4a6b      	ldr	r2, [pc, #428]	@ (800f640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f494:	fa22 f303 	lsr.w	r3, r2, r3
 800f498:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	ee07 3a90 	vmov	s15, r3
 800f4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	ee07 3a90 	vmov	s15, r3
 800f4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4b2:	4b62      	ldr	r3, [pc, #392]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4ba:	ee07 3a90 	vmov	s15, r3
 800f4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f4c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800f64c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f4e2:	e087      	b.n	800f5f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	ee07 3a90 	vmov	s15, r3
 800f4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800f650 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4f6:	4b51      	ldr	r3, [pc, #324]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4fe:	ee07 3a90 	vmov	s15, r3
 800f502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f506:	ed97 6a02 	vldr	s12, [r7, #8]
 800f50a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800f64c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f526:	e065      	b.n	800f5f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	ee07 3a90 	vmov	s15, r3
 800f52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f532:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800f654 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f53a:	4b40      	ldr	r3, [pc, #256]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f542:	ee07 3a90 	vmov	s15, r3
 800f546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f54a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f54e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f64c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f56a:	e043      	b.n	800f5f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	ee07 3a90 	vmov	s15, r3
 800f572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f576:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800f658 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f57e:	4b2f      	ldr	r3, [pc, #188]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f586:	ee07 3a90 	vmov	s15, r3
 800f58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f58e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f592:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800f64c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f5ae:	e021      	b.n	800f5f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	ee07 3a90 	vmov	s15, r3
 800f5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f654 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5c2:	4b1e      	ldr	r3, [pc, #120]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ca:	ee07 3a90 	vmov	s15, r3
 800f5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f5d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800f64c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f5f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f5f4:	4b11      	ldr	r3, [pc, #68]	@ (800f63c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5f8:	0a5b      	lsrs	r3, r3, #9
 800f5fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5fe:	3301      	adds	r3, #1
 800f600:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	ee07 3a90 	vmov	s15, r3
 800f608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f60c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f618:	ee17 3a90 	vmov	r3, s15
 800f61c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f61e:	e005      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f620:	2300      	movs	r3, #0
 800f622:	61bb      	str	r3, [r7, #24]
      break;
 800f624:	e002      	b.n	800f62c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f626:	4b07      	ldr	r3, [pc, #28]	@ (800f644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f628:	61bb      	str	r3, [r7, #24]
      break;
 800f62a:	bf00      	nop
  }

  return sysclockfreq;
 800f62c:	69bb      	ldr	r3, [r7, #24]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3724      	adds	r7, #36	@ 0x24
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	58024400 	.word	0x58024400
 800f640:	03d09000 	.word	0x03d09000
 800f644:	003d0900 	.word	0x003d0900
 800f648:	007a1200 	.word	0x007a1200
 800f64c:	46000000 	.word	0x46000000
 800f650:	4c742400 	.word	0x4c742400
 800f654:	4a742400 	.word	0x4a742400
 800f658:	4af42400 	.word	0x4af42400

0800f65c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f662:	f7ff fe81 	bl	800f368 <HAL_RCC_GetSysClockFreq>
 800f666:	4602      	mov	r2, r0
 800f668:	4b10      	ldr	r3, [pc, #64]	@ (800f6ac <HAL_RCC_GetHCLKFreq+0x50>)
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	0a1b      	lsrs	r3, r3, #8
 800f66e:	f003 030f 	and.w	r3, r3, #15
 800f672:	490f      	ldr	r1, [pc, #60]	@ (800f6b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f674:	5ccb      	ldrb	r3, [r1, r3]
 800f676:	f003 031f 	and.w	r3, r3, #31
 800f67a:	fa22 f303 	lsr.w	r3, r2, r3
 800f67e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f680:	4b0a      	ldr	r3, [pc, #40]	@ (800f6ac <HAL_RCC_GetHCLKFreq+0x50>)
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	f003 030f 	and.w	r3, r3, #15
 800f688:	4a09      	ldr	r2, [pc, #36]	@ (800f6b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f68a:	5cd3      	ldrb	r3, [r2, r3]
 800f68c:	f003 031f 	and.w	r3, r3, #31
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	fa22 f303 	lsr.w	r3, r2, r3
 800f696:	4a07      	ldr	r2, [pc, #28]	@ (800f6b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f69a:	4a07      	ldr	r2, [pc, #28]	@ (800f6b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f6a0:	4b04      	ldr	r3, [pc, #16]	@ (800f6b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	58024400 	.word	0x58024400
 800f6b0:	0801e384 	.word	0x0801e384
 800f6b4:	2400001c 	.word	0x2400001c
 800f6b8:	24000018 	.word	0x24000018

0800f6bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f6c0:	f7ff ffcc 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	4b06      	ldr	r3, [pc, #24]	@ (800f6e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	091b      	lsrs	r3, r3, #4
 800f6cc:	f003 0307 	and.w	r3, r3, #7
 800f6d0:	4904      	ldr	r1, [pc, #16]	@ (800f6e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f6d2:	5ccb      	ldrb	r3, [r1, r3]
 800f6d4:	f003 031f 	and.w	r3, r3, #31
 800f6d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	58024400 	.word	0x58024400
 800f6e4:	0801e384 	.word	0x0801e384

0800f6e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f6ec:	f7ff ffb6 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	4b06      	ldr	r3, [pc, #24]	@ (800f70c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f6f4:	69db      	ldr	r3, [r3, #28]
 800f6f6:	0a1b      	lsrs	r3, r3, #8
 800f6f8:	f003 0307 	and.w	r3, r3, #7
 800f6fc:	4904      	ldr	r1, [pc, #16]	@ (800f710 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f6fe:	5ccb      	ldrb	r3, [r1, r3]
 800f700:	f003 031f 	and.w	r3, r3, #31
 800f704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f708:	4618      	mov	r0, r3
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	58024400 	.word	0x58024400
 800f710:	0801e384 	.word	0x0801e384

0800f714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f718:	b0c6      	sub	sp, #280	@ 0x118
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f720:	2300      	movs	r3, #0
 800f722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f726:	2300      	movs	r3, #0
 800f728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f734:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800f738:	2500      	movs	r5, #0
 800f73a:	ea54 0305 	orrs.w	r3, r4, r5
 800f73e:	d049      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f74a:	d02f      	beq.n	800f7ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f74c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f750:	d828      	bhi.n	800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f756:	d01a      	beq.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f75c:	d822      	bhi.n	800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f766:	d007      	beq.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f768:	e01c      	b.n	800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f76a:	4bab      	ldr	r3, [pc, #684]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f76e:	4aaa      	ldr	r2, [pc, #680]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f776:	e01a      	b.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f77c:	3308      	adds	r3, #8
 800f77e:	2102      	movs	r1, #2
 800f780:	4618      	mov	r0, r3
 800f782:	f002 fa49 	bl	8011c18 <RCCEx_PLL2_Config>
 800f786:	4603      	mov	r3, r0
 800f788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f78c:	e00f      	b.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f792:	3328      	adds	r3, #40	@ 0x28
 800f794:	2102      	movs	r1, #2
 800f796:	4618      	mov	r0, r3
 800f798:	f002 faf0 	bl	8011d7c <RCCEx_PLL3_Config>
 800f79c:	4603      	mov	r3, r0
 800f79e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f7a2:	e004      	b.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f7aa:	e000      	b.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d10a      	bne.n	800f7cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f7b6:	4b98      	ldr	r3, [pc, #608]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7c4:	4a94      	ldr	r2, [pc, #592]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f7c6:	430b      	orrs	r3, r1
 800f7c8:	6513      	str	r3, [r2, #80]	@ 0x50
 800f7ca:	e003      	b.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f7d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800f7e0:	f04f 0900 	mov.w	r9, #0
 800f7e4:	ea58 0309 	orrs.w	r3, r8, r9
 800f7e8:	d047      	beq.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7f0:	2b04      	cmp	r3, #4
 800f7f2:	d82a      	bhi.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fa:	bf00      	nop
 800f7fc:	0800f811 	.word	0x0800f811
 800f800:	0800f81f 	.word	0x0800f81f
 800f804:	0800f835 	.word	0x0800f835
 800f808:	0800f853 	.word	0x0800f853
 800f80c:	0800f853 	.word	0x0800f853
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f810:	4b81      	ldr	r3, [pc, #516]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f814:	4a80      	ldr	r2, [pc, #512]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f81a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f81c:	e01a      	b.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f822:	3308      	adds	r3, #8
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f002 f9f6 	bl	8011c18 <RCCEx_PLL2_Config>
 800f82c:	4603      	mov	r3, r0
 800f82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f832:	e00f      	b.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f838:	3328      	adds	r3, #40	@ 0x28
 800f83a:	2100      	movs	r1, #0
 800f83c:	4618      	mov	r0, r3
 800f83e:	f002 fa9d 	bl	8011d7c <RCCEx_PLL3_Config>
 800f842:	4603      	mov	r3, r0
 800f844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f848:	e004      	b.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f84a:	2301      	movs	r3, #1
 800f84c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f850:	e000      	b.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f852:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d10a      	bne.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f85c:	4b6e      	ldr	r3, [pc, #440]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f85e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f860:	f023 0107 	bic.w	r1, r3, #7
 800f864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f86a:	4a6b      	ldr	r2, [pc, #428]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f86c:	430b      	orrs	r3, r1
 800f86e:	6513      	str	r3, [r2, #80]	@ 0x50
 800f870:	e003      	b.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f876:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f882:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800f886:	f04f 0b00 	mov.w	fp, #0
 800f88a:	ea5a 030b 	orrs.w	r3, sl, fp
 800f88e:	d05b      	beq.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f898:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800f89c:	d03b      	beq.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800f89e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800f8a2:	d834      	bhi.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800f8a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f8a8:	d037      	beq.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800f8aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f8ae:	d82e      	bhi.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800f8b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f8b4:	d033      	beq.n	800f91e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800f8b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f8ba:	d828      	bhi.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800f8bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f8c0:	d01a      	beq.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800f8c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f8c6:	d822      	bhi.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d003      	beq.n	800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800f8cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f8d0:	d007      	beq.n	800f8e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800f8d2:	e01c      	b.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8d4:	4b50      	ldr	r3, [pc, #320]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d8:	4a4f      	ldr	r2, [pc, #316]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f8da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f8de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f8e0:	e01e      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8e6:	3308      	adds	r3, #8
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f002 f994 	bl	8011c18 <RCCEx_PLL2_Config>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f8f6:	e013      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8fc:	3328      	adds	r3, #40	@ 0x28
 800f8fe:	2100      	movs	r1, #0
 800f900:	4618      	mov	r0, r3
 800f902:	f002 fa3b 	bl	8011d7c <RCCEx_PLL3_Config>
 800f906:	4603      	mov	r3, r0
 800f908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f90c:	e008      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f914:	e004      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800f916:	bf00      	nop
 800f918:	e002      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800f91a:	bf00      	nop
 800f91c:	e000      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800f91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10b      	bne.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f928:	4b3b      	ldr	r3, [pc, #236]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f92c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800f930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f938:	4a37      	ldr	r2, [pc, #220]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f93a:	430b      	orrs	r3, r1
 800f93c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f93e:	e003      	b.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f950:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800f954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f958:	2300      	movs	r3, #0
 800f95a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f95e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800f962:	460b      	mov	r3, r1
 800f964:	4313      	orrs	r3, r2
 800f966:	d05d      	beq.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f96c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f970:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f974:	d03b      	beq.n	800f9ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800f976:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800f97a:	d834      	bhi.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f97c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f980:	d037      	beq.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800f982:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f986:	d82e      	bhi.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f988:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f98c:	d033      	beq.n	800f9f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800f98e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f992:	d828      	bhi.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f998:	d01a      	beq.n	800f9d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800f99a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f99e:	d822      	bhi.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d003      	beq.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800f9a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9a8:	d007      	beq.n	800f9ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800f9aa:	e01c      	b.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9b0:	4a19      	ldr	r2, [pc, #100]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800f9b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f9b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f9b8:	e01e      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9be:	3308      	adds	r3, #8
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f002 f928 	bl	8011c18 <RCCEx_PLL2_Config>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f9ce:	e013      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9d4:	3328      	adds	r3, #40	@ 0x28
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f002 f9cf 	bl	8011d7c <RCCEx_PLL3_Config>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f9e4:	e008      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f9ec:	e004      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800f9ee:	bf00      	nop
 800f9f0:	e002      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800f9f2:	bf00      	nop
 800f9f4:	e000      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800f9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10d      	bne.n	800fa1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800fa00:	4b05      	ldr	r3, [pc, #20]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fa02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800fa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fa10:	4a01      	ldr	r2, [pc, #4]	@ (800fa18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800fa12:	430b      	orrs	r3, r1
 800fa14:	6593      	str	r3, [r2, #88]	@ 0x58
 800fa16:	e005      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800fa18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800fa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800fa30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800fa34:	2300      	movs	r3, #0
 800fa36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800fa3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4313      	orrs	r3, r2
 800fa42:	d03a      	beq.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800fa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa4a:	2b30      	cmp	r3, #48	@ 0x30
 800fa4c:	d01f      	beq.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800fa4e:	2b30      	cmp	r3, #48	@ 0x30
 800fa50:	d819      	bhi.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	d00c      	beq.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800fa56:	2b20      	cmp	r3, #32
 800fa58:	d815      	bhi.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d019      	beq.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800fa5e:	2b10      	cmp	r3, #16
 800fa60:	d111      	bne.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa62:	4baa      	ldr	r3, [pc, #680]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fa64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa66:	4aa9      	ldr	r2, [pc, #676]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fa68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800fa6e:	e011      	b.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa74:	3308      	adds	r3, #8
 800fa76:	2102      	movs	r1, #2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f002 f8cd 	bl	8011c18 <RCCEx_PLL2_Config>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800fa84:	e006      	b.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fa8c:	e002      	b.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800fa8e:	bf00      	nop
 800fa90:	e000      	b.n	800fa94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800fa92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10a      	bne.n	800fab2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800fa9c:	4b9b      	ldr	r3, [pc, #620]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fa9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faa0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800faa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800faa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faaa:	4a98      	ldr	r2, [pc, #608]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800faac:	430b      	orrs	r3, r1
 800faae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fab0:	e003      	b.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fab6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800faba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800fac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800faca:	2300      	movs	r3, #0
 800facc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800fad0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800fad4:	460b      	mov	r3, r1
 800fad6:	4313      	orrs	r3, r2
 800fad8:	d051      	beq.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800fada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fae4:	d035      	beq.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800fae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800faea:	d82e      	bhi.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800faec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800faf0:	d031      	beq.n	800fb56 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800faf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800faf6:	d828      	bhi.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800faf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fafc:	d01a      	beq.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800fafe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb02:	d822      	bhi.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d003      	beq.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800fb08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb0c:	d007      	beq.n	800fb1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800fb0e:	e01c      	b.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb10:	4b7e      	ldr	r3, [pc, #504]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb14:	4a7d      	ldr	r2, [pc, #500]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fb16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fb1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fb1c:	e01c      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb22:	3308      	adds	r3, #8
 800fb24:	2100      	movs	r1, #0
 800fb26:	4618      	mov	r0, r3
 800fb28:	f002 f876 	bl	8011c18 <RCCEx_PLL2_Config>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fb32:	e011      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb38:	3328      	adds	r3, #40	@ 0x28
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f002 f91d 	bl	8011d7c <RCCEx_PLL3_Config>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fb48:	e006      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fb50:	e002      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800fb52:	bf00      	nop
 800fb54:	e000      	b.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800fb56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d10a      	bne.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800fb60:	4b6a      	ldr	r3, [pc, #424]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800fb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb6e:	4a67      	ldr	r2, [pc, #412]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fb70:	430b      	orrs	r3, r1
 800fb72:	6513      	str	r3, [r2, #80]	@ 0x50
 800fb74:	e003      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fb7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800fb8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fb94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	d053      	beq.n	800fc46 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800fb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fba8:	d033      	beq.n	800fc12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800fbaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fbae:	d82c      	bhi.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800fbb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fbb4:	d02f      	beq.n	800fc16 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800fbb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fbba:	d826      	bhi.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800fbbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fbc0:	d02b      	beq.n	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800fbc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fbc6:	d820      	bhi.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800fbc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fbcc:	d012      	beq.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800fbce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fbd2:	d81a      	bhi.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d022      	beq.n	800fc1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800fbd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbdc:	d115      	bne.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f002 f816 	bl	8011c18 <RCCEx_PLL2_Config>
 800fbec:	4603      	mov	r3, r0
 800fbee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fbf2:	e015      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbf8:	3328      	adds	r3, #40	@ 0x28
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f002 f8bd 	bl	8011d7c <RCCEx_PLL3_Config>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fc08:	e00a      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fc10:	e006      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800fc12:	bf00      	nop
 800fc14:	e004      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800fc16:	bf00      	nop
 800fc18:	e002      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800fc1a:	bf00      	nop
 800fc1c:	e000      	b.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800fc1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d10a      	bne.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fc28:	4b38      	ldr	r3, [pc, #224]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800fc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc36:	4a35      	ldr	r2, [pc, #212]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fc38:	430b      	orrs	r3, r1
 800fc3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800fc3c:	e003      	b.n	800fc46 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800fc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800fc52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fc56:	2300      	movs	r3, #0
 800fc58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fc5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fc60:	460b      	mov	r3, r1
 800fc62:	4313      	orrs	r3, r2
 800fc64:	d058      	beq.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800fc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fc6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc72:	d033      	beq.n	800fcdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800fc74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc78:	d82c      	bhi.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800fc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc7e:	d02f      	beq.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800fc80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc84:	d826      	bhi.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800fc86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc8a:	d02b      	beq.n	800fce4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800fc8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc90:	d820      	bhi.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800fc92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc96:	d012      	beq.n	800fcbe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800fc98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc9c:	d81a      	bhi.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d022      	beq.n	800fce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800fca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fca6:	d115      	bne.n	800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcac:	3308      	adds	r3, #8
 800fcae:	2101      	movs	r1, #1
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f001 ffb1 	bl	8011c18 <RCCEx_PLL2_Config>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fcbc:	e015      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcc2:	3328      	adds	r3, #40	@ 0x28
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f002 f858 	bl	8011d7c <RCCEx_PLL3_Config>
 800fccc:	4603      	mov	r3, r0
 800fcce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fcd2:	e00a      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fcda:	e006      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800fcdc:	bf00      	nop
 800fcde:	e004      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800fce0:	bf00      	nop
 800fce2:	e002      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800fce4:	bf00      	nop
 800fce6:	e000      	b.n	800fcea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800fce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10e      	bne.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fcf2:	4b06      	ldr	r3, [pc, #24]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fcf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fcf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800fcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fcfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fd02:	4a02      	ldr	r2, [pc, #8]	@ (800fd0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800fd04:	430b      	orrs	r3, r1
 800fd06:	6593      	str	r3, [r2, #88]	@ 0x58
 800fd08:	e006      	b.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800fd0a:	bf00      	nop
 800fd0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800fd24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fd2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800fd32:	460b      	mov	r3, r1
 800fd34:	4313      	orrs	r3, r2
 800fd36:	d037      	beq.n	800fda8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800fd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd42:	d00e      	beq.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800fd44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd48:	d816      	bhi.n	800fd78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d018      	beq.n	800fd80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800fd4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd52:	d111      	bne.n	800fd78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd54:	4bc4      	ldr	r3, [pc, #784]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd58:	4ac3      	ldr	r2, [pc, #780]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fd5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fd60:	e00f      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd66:	3308      	adds	r3, #8
 800fd68:	2101      	movs	r1, #1
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f001 ff54 	bl	8011c18 <RCCEx_PLL2_Config>
 800fd70:	4603      	mov	r3, r0
 800fd72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fd76:	e004      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fd7e:	e000      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800fd80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10a      	bne.n	800fda0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fd8a:	4bb7      	ldr	r3, [pc, #732]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fd8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fd96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd98:	4ab3      	ldr	r2, [pc, #716]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fd9a:	430b      	orrs	r3, r1
 800fd9c:	6513      	str	r3, [r2, #80]	@ 0x50
 800fd9e:	e003      	b.n	800fda8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fda0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fda4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800fdb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fdb8:	2300      	movs	r3, #0
 800fdba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800fdbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	d039      	beq.n	800fe3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fdcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d81c      	bhi.n	800fe0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800fdd2:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800fdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd8:	0800fe15 	.word	0x0800fe15
 800fddc:	0800fde9 	.word	0x0800fde9
 800fde0:	0800fdf7 	.word	0x0800fdf7
 800fde4:	0800fe15 	.word	0x0800fe15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fde8:	4b9f      	ldr	r3, [pc, #636]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdec:	4a9e      	ldr	r2, [pc, #632]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fdee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fdf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fdf4:	e00f      	b.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	2102      	movs	r1, #2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f001 ff0a 	bl	8011c18 <RCCEx_PLL2_Config>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fe0a:	e004      	b.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fe12:	e000      	b.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800fe14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10a      	bne.n	800fe34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fe1e:	4b92      	ldr	r3, [pc, #584]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fe20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe22:	f023 0103 	bic.w	r1, r3, #3
 800fe26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fe2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe2c:	4a8e      	ldr	r2, [pc, #568]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fe2e:	430b      	orrs	r3, r1
 800fe30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fe32:	e003      	b.n	800fe3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fe38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fe3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800fe48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fe52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800fe56:	460b      	mov	r3, r1
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	f000 8099 	beq.w	800ff90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fe5e:	4b83      	ldr	r3, [pc, #524]	@ (801006c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a82      	ldr	r2, [pc, #520]	@ (801006c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fe64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fe6a:	f7f7 fad9 	bl	8007420 <HAL_GetTick>
 800fe6e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fe72:	e00b      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe74:	f7f7 fad4 	bl	8007420 <HAL_GetTick>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	2b64      	cmp	r3, #100	@ 0x64
 800fe82:	d903      	bls.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800fe84:	2303      	movs	r3, #3
 800fe86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fe8a:	e005      	b.n	800fe98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fe8c:	4b77      	ldr	r3, [pc, #476]	@ (801006c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d0ed      	beq.n	800fe74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800fe98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d173      	bne.n	800ff88 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fea0:	4b71      	ldr	r3, [pc, #452]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fea2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800feac:	4053      	eors	r3, r2
 800feae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d015      	beq.n	800fee2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800feb6:	4b6c      	ldr	r3, [pc, #432]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800feb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800febe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fec2:	4b69      	ldr	r3, [pc, #420]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fec6:	4a68      	ldr	r2, [pc, #416]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fecc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fece:	4b66      	ldr	r3, [pc, #408]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fed2:	4a65      	ldr	r2, [pc, #404]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fed8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800feda:	4a63      	ldr	r2, [pc, #396]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800fedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800fee0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800feea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800feee:	d118      	bne.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fef0:	f7f7 fa96 	bl	8007420 <HAL_GetTick>
 800fef4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fef8:	e00d      	b.n	800ff16 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fefa:	f7f7 fa91 	bl	8007420 <HAL_GetTick>
 800fefe:	4602      	mov	r2, r0
 800ff00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ff04:	1ad2      	subs	r2, r2, r3
 800ff06:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d903      	bls.n	800ff16 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ff0e:	2303      	movs	r3, #3
 800ff10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ff14:	e005      	b.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff16:	4b54      	ldr	r3, [pc, #336]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff1a:	f003 0302 	and.w	r3, r3, #2
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0eb      	beq.n	800fefa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ff22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d129      	bne.n	800ff7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ff2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ff32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ff36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff3a:	d10e      	bne.n	800ff5a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ff3c:	4b4a      	ldr	r3, [pc, #296]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ff44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ff4c:	091a      	lsrs	r2, r3, #4
 800ff4e:	4b48      	ldr	r3, [pc, #288]	@ (8010070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ff50:	4013      	ands	r3, r2
 800ff52:	4a45      	ldr	r2, [pc, #276]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff54:	430b      	orrs	r3, r1
 800ff56:	6113      	str	r3, [r2, #16]
 800ff58:	e005      	b.n	800ff66 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ff5a:	4b43      	ldr	r3, [pc, #268]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	4a42      	ldr	r2, [pc, #264]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ff64:	6113      	str	r3, [r2, #16]
 800ff66:	4b40      	ldr	r3, [pc, #256]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ff6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ff72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff76:	4a3c      	ldr	r2, [pc, #240]	@ (8010068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ff78:	430b      	orrs	r3, r1
 800ff7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ff7c:	e008      	b.n	800ff90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ff7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ff82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ff86:	e003      	b.n	800ff90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ff8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ff90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	f002 0301 	and.w	r3, r2, #1
 800ff9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ffa6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4313      	orrs	r3, r2
 800ffae:	f000 808f 	beq.w	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ffb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ffb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ffb8:	2b28      	cmp	r3, #40	@ 0x28
 800ffba:	d871      	bhi.n	80100a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ffbc:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ffbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc2:	bf00      	nop
 800ffc4:	080100a9 	.word	0x080100a9
 800ffc8:	080100a1 	.word	0x080100a1
 800ffcc:	080100a1 	.word	0x080100a1
 800ffd0:	080100a1 	.word	0x080100a1
 800ffd4:	080100a1 	.word	0x080100a1
 800ffd8:	080100a1 	.word	0x080100a1
 800ffdc:	080100a1 	.word	0x080100a1
 800ffe0:	080100a1 	.word	0x080100a1
 800ffe4:	08010075 	.word	0x08010075
 800ffe8:	080100a1 	.word	0x080100a1
 800ffec:	080100a1 	.word	0x080100a1
 800fff0:	080100a1 	.word	0x080100a1
 800fff4:	080100a1 	.word	0x080100a1
 800fff8:	080100a1 	.word	0x080100a1
 800fffc:	080100a1 	.word	0x080100a1
 8010000:	080100a1 	.word	0x080100a1
 8010004:	0801008b 	.word	0x0801008b
 8010008:	080100a1 	.word	0x080100a1
 801000c:	080100a1 	.word	0x080100a1
 8010010:	080100a1 	.word	0x080100a1
 8010014:	080100a1 	.word	0x080100a1
 8010018:	080100a1 	.word	0x080100a1
 801001c:	080100a1 	.word	0x080100a1
 8010020:	080100a1 	.word	0x080100a1
 8010024:	080100a9 	.word	0x080100a9
 8010028:	080100a1 	.word	0x080100a1
 801002c:	080100a1 	.word	0x080100a1
 8010030:	080100a1 	.word	0x080100a1
 8010034:	080100a1 	.word	0x080100a1
 8010038:	080100a1 	.word	0x080100a1
 801003c:	080100a1 	.word	0x080100a1
 8010040:	080100a1 	.word	0x080100a1
 8010044:	080100a9 	.word	0x080100a9
 8010048:	080100a1 	.word	0x080100a1
 801004c:	080100a1 	.word	0x080100a1
 8010050:	080100a1 	.word	0x080100a1
 8010054:	080100a1 	.word	0x080100a1
 8010058:	080100a1 	.word	0x080100a1
 801005c:	080100a1 	.word	0x080100a1
 8010060:	080100a1 	.word	0x080100a1
 8010064:	080100a9 	.word	0x080100a9
 8010068:	58024400 	.word	0x58024400
 801006c:	58024800 	.word	0x58024800
 8010070:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010078:	3308      	adds	r3, #8
 801007a:	2101      	movs	r1, #1
 801007c:	4618      	mov	r0, r3
 801007e:	f001 fdcb 	bl	8011c18 <RCCEx_PLL2_Config>
 8010082:	4603      	mov	r3, r0
 8010084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010088:	e00f      	b.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801008a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801008e:	3328      	adds	r3, #40	@ 0x28
 8010090:	2101      	movs	r1, #1
 8010092:	4618      	mov	r0, r3
 8010094:	f001 fe72 	bl	8011d7c <RCCEx_PLL3_Config>
 8010098:	4603      	mov	r3, r0
 801009a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801009e:	e004      	b.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100a0:	2301      	movs	r3, #1
 80100a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80100a6:	e000      	b.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80100a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10a      	bne.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80100b2:	4bbf      	ldr	r3, [pc, #764]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80100b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80100ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80100be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100c0:	4abb      	ldr	r2, [pc, #748]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80100c2:	430b      	orrs	r3, r1
 80100c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80100c6:	e003      	b.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80100cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80100d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	f002 0302 	and.w	r3, r2, #2
 80100dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80100e0:	2300      	movs	r3, #0
 80100e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80100e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80100ea:	460b      	mov	r3, r1
 80100ec:	4313      	orrs	r3, r2
 80100ee:	d041      	beq.n	8010174 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80100f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80100f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100f6:	2b05      	cmp	r3, #5
 80100f8:	d824      	bhi.n	8010144 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80100fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010100 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80100fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010100:	0801014d 	.word	0x0801014d
 8010104:	08010119 	.word	0x08010119
 8010108:	0801012f 	.word	0x0801012f
 801010c:	0801014d 	.word	0x0801014d
 8010110:	0801014d 	.word	0x0801014d
 8010114:	0801014d 	.word	0x0801014d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801011c:	3308      	adds	r3, #8
 801011e:	2101      	movs	r1, #1
 8010120:	4618      	mov	r0, r3
 8010122:	f001 fd79 	bl	8011c18 <RCCEx_PLL2_Config>
 8010126:	4603      	mov	r3, r0
 8010128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801012c:	e00f      	b.n	801014e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801012e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010132:	3328      	adds	r3, #40	@ 0x28
 8010134:	2101      	movs	r1, #1
 8010136:	4618      	mov	r0, r3
 8010138:	f001 fe20 	bl	8011d7c <RCCEx_PLL3_Config>
 801013c:	4603      	mov	r3, r0
 801013e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010142:	e004      	b.n	801014e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010144:	2301      	movs	r3, #1
 8010146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801014a:	e000      	b.n	801014e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801014c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801014e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010152:	2b00      	cmp	r3, #0
 8010154:	d10a      	bne.n	801016c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010156:	4b96      	ldr	r3, [pc, #600]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801015a:	f023 0107 	bic.w	r1, r3, #7
 801015e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010164:	4a92      	ldr	r2, [pc, #584]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010166:	430b      	orrs	r3, r1
 8010168:	6553      	str	r3, [r2, #84]	@ 0x54
 801016a:	e003      	b.n	8010174 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801016c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	f002 0304 	and.w	r3, r2, #4
 8010180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010184:	2300      	movs	r3, #0
 8010186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801018a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801018e:	460b      	mov	r3, r1
 8010190:	4313      	orrs	r3, r2
 8010192:	d044      	beq.n	801021e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801019c:	2b05      	cmp	r3, #5
 801019e:	d825      	bhi.n	80101ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80101a0:	a201      	add	r2, pc, #4	@ (adr r2, 80101a8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80101a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a6:	bf00      	nop
 80101a8:	080101f5 	.word	0x080101f5
 80101ac:	080101c1 	.word	0x080101c1
 80101b0:	080101d7 	.word	0x080101d7
 80101b4:	080101f5 	.word	0x080101f5
 80101b8:	080101f5 	.word	0x080101f5
 80101bc:	080101f5 	.word	0x080101f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80101c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101c4:	3308      	adds	r3, #8
 80101c6:	2101      	movs	r1, #1
 80101c8:	4618      	mov	r0, r3
 80101ca:	f001 fd25 	bl	8011c18 <RCCEx_PLL2_Config>
 80101ce:	4603      	mov	r3, r0
 80101d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80101d4:	e00f      	b.n	80101f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80101d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101da:	3328      	adds	r3, #40	@ 0x28
 80101dc:	2101      	movs	r1, #1
 80101de:	4618      	mov	r0, r3
 80101e0:	f001 fdcc 	bl	8011d7c <RCCEx_PLL3_Config>
 80101e4:	4603      	mov	r3, r0
 80101e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80101ea:	e004      	b.n	80101f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80101ec:	2301      	movs	r3, #1
 80101ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80101f2:	e000      	b.n	80101f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80101f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80101f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10b      	bne.n	8010216 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80101fe:	4b6c      	ldr	r3, [pc, #432]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010202:	f023 0107 	bic.w	r1, r3, #7
 8010206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801020a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801020e:	4a68      	ldr	r2, [pc, #416]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010210:	430b      	orrs	r3, r1
 8010212:	6593      	str	r3, [r2, #88]	@ 0x58
 8010214:	e003      	b.n	801021e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801021a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801021e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	f002 0320 	and.w	r3, r2, #32
 801022a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801022e:	2300      	movs	r3, #0
 8010230:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010234:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010238:	460b      	mov	r3, r1
 801023a:	4313      	orrs	r3, r2
 801023c:	d055      	beq.n	80102ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801023e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801024a:	d033      	beq.n	80102b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801024c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010250:	d82c      	bhi.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8010252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010256:	d02f      	beq.n	80102b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8010258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801025c:	d826      	bhi.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801025e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010262:	d02b      	beq.n	80102bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8010264:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010268:	d820      	bhi.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801026a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801026e:	d012      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8010270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010274:	d81a      	bhi.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8010276:	2b00      	cmp	r3, #0
 8010278:	d022      	beq.n	80102c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801027a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801027e:	d115      	bne.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010284:	3308      	adds	r3, #8
 8010286:	2100      	movs	r1, #0
 8010288:	4618      	mov	r0, r3
 801028a:	f001 fcc5 	bl	8011c18 <RCCEx_PLL2_Config>
 801028e:	4603      	mov	r3, r0
 8010290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010294:	e015      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801029a:	3328      	adds	r3, #40	@ 0x28
 801029c:	2102      	movs	r1, #2
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fd6c 	bl	8011d7c <RCCEx_PLL3_Config>
 80102a4:	4603      	mov	r3, r0
 80102a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80102aa:	e00a      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80102ac:	2301      	movs	r3, #1
 80102ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80102b2:	e006      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80102b4:	bf00      	nop
 80102b6:	e004      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80102b8:	bf00      	nop
 80102ba:	e002      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80102bc:	bf00      	nop
 80102be:	e000      	b.n	80102c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80102c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80102c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d10b      	bne.n	80102e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80102ca:	4b39      	ldr	r3, [pc, #228]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80102cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80102d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80102d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102da:	4a35      	ldr	r2, [pc, #212]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80102dc:	430b      	orrs	r3, r1
 80102de:	6553      	str	r3, [r2, #84]	@ 0x54
 80102e0:	e003      	b.n	80102ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80102e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80102ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80102f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80102fa:	2300      	movs	r3, #0
 80102fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010300:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010304:	460b      	mov	r3, r1
 8010306:	4313      	orrs	r3, r2
 8010308:	d058      	beq.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801030a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801030e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010312:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8010316:	d033      	beq.n	8010380 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8010318:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801031c:	d82c      	bhi.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801031e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010322:	d02f      	beq.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8010324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010328:	d826      	bhi.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801032a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801032e:	d02b      	beq.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8010330:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010334:	d820      	bhi.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8010336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801033a:	d012      	beq.n	8010362 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801033c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010340:	d81a      	bhi.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8010342:	2b00      	cmp	r3, #0
 8010344:	d022      	beq.n	801038c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8010346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801034a:	d115      	bne.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801034c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010350:	3308      	adds	r3, #8
 8010352:	2100      	movs	r1, #0
 8010354:	4618      	mov	r0, r3
 8010356:	f001 fc5f 	bl	8011c18 <RCCEx_PLL2_Config>
 801035a:	4603      	mov	r3, r0
 801035c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010360:	e015      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010366:	3328      	adds	r3, #40	@ 0x28
 8010368:	2102      	movs	r1, #2
 801036a:	4618      	mov	r0, r3
 801036c:	f001 fd06 	bl	8011d7c <RCCEx_PLL3_Config>
 8010370:	4603      	mov	r3, r0
 8010372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010376:	e00a      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801037e:	e006      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8010380:	bf00      	nop
 8010382:	e004      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8010384:	bf00      	nop
 8010386:	e002      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8010388:	bf00      	nop
 801038a:	e000      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801038c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801038e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10e      	bne.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010396:	4b06      	ldr	r3, [pc, #24]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8010398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801039a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801039e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80103a6:	4a02      	ldr	r2, [pc, #8]	@ (80103b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80103a8:	430b      	orrs	r3, r1
 80103aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80103ac:	e006      	b.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80103ae:	bf00      	nop
 80103b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80103b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80103bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80103c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80103cc:	2300      	movs	r3, #0
 80103ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80103d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80103d6:	460b      	mov	r3, r1
 80103d8:	4313      	orrs	r3, r2
 80103da:	d055      	beq.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80103dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80103e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80103e8:	d033      	beq.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80103ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80103ee:	d82c      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80103f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103f4:	d02f      	beq.n	8010456 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80103f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103fa:	d826      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80103fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010400:	d02b      	beq.n	801045a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8010402:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010406:	d820      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8010408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801040c:	d012      	beq.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801040e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010412:	d81a      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8010414:	2b00      	cmp	r3, #0
 8010416:	d022      	beq.n	801045e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8010418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801041c:	d115      	bne.n	801044a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801041e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010422:	3308      	adds	r3, #8
 8010424:	2100      	movs	r1, #0
 8010426:	4618      	mov	r0, r3
 8010428:	f001 fbf6 	bl	8011c18 <RCCEx_PLL2_Config>
 801042c:	4603      	mov	r3, r0
 801042e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010432:	e015      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010438:	3328      	adds	r3, #40	@ 0x28
 801043a:	2102      	movs	r1, #2
 801043c:	4618      	mov	r0, r3
 801043e:	f001 fc9d 	bl	8011d7c <RCCEx_PLL3_Config>
 8010442:	4603      	mov	r3, r0
 8010444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010448:	e00a      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8010450:	e006      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8010452:	bf00      	nop
 8010454:	e004      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8010456:	bf00      	nop
 8010458:	e002      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801045a:	bf00      	nop
 801045c:	e000      	b.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801045e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010464:	2b00      	cmp	r3, #0
 8010466:	d10b      	bne.n	8010480 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010468:	4ba0      	ldr	r3, [pc, #640]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801046a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801046c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8010470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010478:	4a9c      	ldr	r2, [pc, #624]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801047a:	430b      	orrs	r3, r1
 801047c:	6593      	str	r3, [r2, #88]	@ 0x58
 801047e:	e003      	b.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8010488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801048c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010490:	f002 0308 	and.w	r3, r2, #8
 8010494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010498:	2300      	movs	r3, #0
 801049a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801049e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80104a2:	460b      	mov	r3, r1
 80104a4:	4313      	orrs	r3, r2
 80104a6:	d01e      	beq.n	80104e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80104a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104b4:	d10c      	bne.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80104b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104ba:	3328      	adds	r3, #40	@ 0x28
 80104bc:	2102      	movs	r1, #2
 80104be:	4618      	mov	r0, r3
 80104c0:	f001 fc5c 	bl	8011d7c <RCCEx_PLL3_Config>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d002      	beq.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80104ca:	2301      	movs	r3, #1
 80104cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80104d0:	4b86      	ldr	r3, [pc, #536]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80104d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80104d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104e0:	4a82      	ldr	r2, [pc, #520]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80104e2:	430b      	orrs	r3, r1
 80104e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80104e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	f002 0310 	and.w	r3, r2, #16
 80104f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80104f6:	2300      	movs	r3, #0
 80104f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8010500:	460b      	mov	r3, r1
 8010502:	4313      	orrs	r3, r2
 8010504:	d01e      	beq.n	8010544 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801050a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801050e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010512:	d10c      	bne.n	801052e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010518:	3328      	adds	r3, #40	@ 0x28
 801051a:	2102      	movs	r1, #2
 801051c:	4618      	mov	r0, r3
 801051e:	f001 fc2d 	bl	8011d7c <RCCEx_PLL3_Config>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801052e:	4b6f      	ldr	r3, [pc, #444]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010532:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801053a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801053e:	4a6b      	ldr	r2, [pc, #428]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010540:	430b      	orrs	r3, r1
 8010542:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8010550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010552:	2300      	movs	r3, #0
 8010554:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010556:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801055a:	460b      	mov	r3, r1
 801055c:	4313      	orrs	r3, r2
 801055e:	d03e      	beq.n	80105de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801056c:	d022      	beq.n	80105b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801056e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010572:	d81b      	bhi.n	80105ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8010574:	2b00      	cmp	r3, #0
 8010576:	d003      	beq.n	8010580 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8010578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801057c:	d00b      	beq.n	8010596 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801057e:	e015      	b.n	80105ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010584:	3308      	adds	r3, #8
 8010586:	2100      	movs	r1, #0
 8010588:	4618      	mov	r0, r3
 801058a:	f001 fb45 	bl	8011c18 <RCCEx_PLL2_Config>
 801058e:	4603      	mov	r3, r0
 8010590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010594:	e00f      	b.n	80105b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801059a:	3328      	adds	r3, #40	@ 0x28
 801059c:	2102      	movs	r1, #2
 801059e:	4618      	mov	r0, r3
 80105a0:	f001 fbec 	bl	8011d7c <RCCEx_PLL3_Config>
 80105a4:	4603      	mov	r3, r0
 80105a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80105aa:	e004      	b.n	80105b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80105ac:	2301      	movs	r3, #1
 80105ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80105b2:	e000      	b.n	80105b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80105b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10b      	bne.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80105be:	4b4b      	ldr	r3, [pc, #300]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80105c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80105c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80105ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80105ce:	4a47      	ldr	r2, [pc, #284]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80105d0:	430b      	orrs	r3, r1
 80105d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80105d4:	e003      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80105da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80105de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80105e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80105ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80105ec:	2300      	movs	r3, #0
 80105ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80105f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80105f4:	460b      	mov	r3, r1
 80105f6:	4313      	orrs	r3, r2
 80105f8:	d03b      	beq.n	8010672 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80105fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80105fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010602:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010606:	d01f      	beq.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8010608:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801060c:	d818      	bhi.n	8010640 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801060e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010612:	d003      	beq.n	801061c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8010614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010618:	d007      	beq.n	801062a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801061a:	e011      	b.n	8010640 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801061c:	4b33      	ldr	r3, [pc, #204]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801061e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010620:	4a32      	ldr	r2, [pc, #200]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8010628:	e00f      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801062a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801062e:	3328      	adds	r3, #40	@ 0x28
 8010630:	2101      	movs	r1, #1
 8010632:	4618      	mov	r0, r3
 8010634:	f001 fba2 	bl	8011d7c <RCCEx_PLL3_Config>
 8010638:	4603      	mov	r3, r0
 801063a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801063e:	e004      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010640:	2301      	movs	r3, #1
 8010642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8010646:	e000      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8010648:	bf00      	nop
    }

    if (ret == HAL_OK)
 801064a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10b      	bne.n	801066a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010652:	4b26      	ldr	r3, [pc, #152]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010656:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801065a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801065e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010662:	4a22      	ldr	r2, [pc, #136]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8010664:	430b      	orrs	r3, r1
 8010666:	6553      	str	r3, [r2, #84]	@ 0x54
 8010668:	e003      	b.n	8010672 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801066a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801066e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801067e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010680:	2300      	movs	r3, #0
 8010682:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010684:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8010688:	460b      	mov	r3, r1
 801068a:	4313      	orrs	r3, r2
 801068c:	d034      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801068e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010694:	2b00      	cmp	r3, #0
 8010696:	d003      	beq.n	80106a0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8010698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801069c:	d007      	beq.n	80106ae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801069e:	e011      	b.n	80106c4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80106a0:	4b12      	ldr	r3, [pc, #72]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80106a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a4:	4a11      	ldr	r2, [pc, #68]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80106a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80106aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80106ac:	e00e      	b.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80106ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106b2:	3308      	adds	r3, #8
 80106b4:	2102      	movs	r1, #2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f001 faae 	bl	8011c18 <RCCEx_PLL2_Config>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80106c2:	e003      	b.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80106c4:	2301      	movs	r3, #1
 80106c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80106ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d10d      	bne.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80106d4:	4b05      	ldr	r3, [pc, #20]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80106d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80106dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106e2:	4a02      	ldr	r2, [pc, #8]	@ (80106ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80106e4:	430b      	orrs	r3, r1
 80106e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80106e8:	e006      	b.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80106ea:	bf00      	nop
 80106ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80106f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80106f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010704:	663b      	str	r3, [r7, #96]	@ 0x60
 8010706:	2300      	movs	r3, #0
 8010708:	667b      	str	r3, [r7, #100]	@ 0x64
 801070a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801070e:	460b      	mov	r3, r1
 8010710:	4313      	orrs	r3, r2
 8010712:	d00c      	beq.n	801072e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010718:	3328      	adds	r3, #40	@ 0x28
 801071a:	2102      	movs	r1, #2
 801071c:	4618      	mov	r0, r3
 801071e:	f001 fb2d 	bl	8011d7c <RCCEx_PLL3_Config>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801072e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010736:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801073a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801073c:	2300      	movs	r3, #0
 801073e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010740:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010744:	460b      	mov	r3, r1
 8010746:	4313      	orrs	r3, r2
 8010748:	d036      	beq.n	80107b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801074a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801074e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010750:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010754:	d018      	beq.n	8010788 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8010756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801075a:	d811      	bhi.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801075c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010760:	d014      	beq.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8010762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010766:	d80b      	bhi.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8010768:	2b00      	cmp	r3, #0
 801076a:	d011      	beq.n	8010790 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801076c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010770:	d106      	bne.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010772:	4bb7      	ldr	r3, [pc, #732]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010776:	4ab6      	ldr	r2, [pc, #728]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801077c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801077e:	e008      	b.n	8010792 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8010786:	e004      	b.n	8010792 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8010788:	bf00      	nop
 801078a:	e002      	b.n	8010792 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801078c:	bf00      	nop
 801078e:	e000      	b.n	8010792 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8010790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10a      	bne.n	80107b0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801079a:	4bad      	ldr	r3, [pc, #692]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801079c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801079e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80107a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107a8:	4aa9      	ldr	r2, [pc, #676]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80107aa:	430b      	orrs	r3, r1
 80107ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80107ae:	e003      	b.n	80107b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80107b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80107b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80107c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80107c6:	2300      	movs	r3, #0
 80107c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80107ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80107ce:	460b      	mov	r3, r1
 80107d0:	4313      	orrs	r3, r2
 80107d2:	d009      	beq.n	80107e8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80107d4:	4b9e      	ldr	r3, [pc, #632]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80107d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80107dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107e2:	4a9b      	ldr	r2, [pc, #620]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80107e4:	430b      	orrs	r3, r1
 80107e6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80107f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107f6:	2300      	movs	r3, #0
 80107f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80107fe:	460b      	mov	r3, r1
 8010800:	4313      	orrs	r3, r2
 8010802:	d009      	beq.n	8010818 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010804:	4b92      	ldr	r3, [pc, #584]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010808:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801080c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010812:	4a8f      	ldr	r2, [pc, #572]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010814:	430b      	orrs	r3, r1
 8010816:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010820:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8010824:	643b      	str	r3, [r7, #64]	@ 0x40
 8010826:	2300      	movs	r3, #0
 8010828:	647b      	str	r3, [r7, #68]	@ 0x44
 801082a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801082e:	460b      	mov	r3, r1
 8010830:	4313      	orrs	r3, r2
 8010832:	d00e      	beq.n	8010852 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010834:	4b86      	ldr	r3, [pc, #536]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010836:	691b      	ldr	r3, [r3, #16]
 8010838:	4a85      	ldr	r2, [pc, #532]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801083a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801083e:	6113      	str	r3, [r2, #16]
 8010840:	4b83      	ldr	r3, [pc, #524]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010842:	6919      	ldr	r1, [r3, #16]
 8010844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010848:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801084c:	4a80      	ldr	r2, [pc, #512]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801084e:	430b      	orrs	r3, r1
 8010850:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801085e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010860:	2300      	movs	r3, #0
 8010862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010864:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010868:	460b      	mov	r3, r1
 801086a:	4313      	orrs	r3, r2
 801086c:	d009      	beq.n	8010882 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801086e:	4b78      	ldr	r3, [pc, #480]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8010870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010872:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801087a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801087c:	4a74      	ldr	r2, [pc, #464]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801087e:	430b      	orrs	r3, r1
 8010880:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801088e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010890:	2300      	movs	r3, #0
 8010892:	637b      	str	r3, [r7, #52]	@ 0x34
 8010894:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8010898:	460b      	mov	r3, r1
 801089a:	4313      	orrs	r3, r2
 801089c:	d00a      	beq.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801089e:	4b6c      	ldr	r3, [pc, #432]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80108a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80108a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108ae:	4a68      	ldr	r2, [pc, #416]	@ (8010a50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80108b0:	430b      	orrs	r3, r1
 80108b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80108b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	2100      	movs	r1, #0
 80108be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80108ca:	460b      	mov	r3, r1
 80108cc:	4313      	orrs	r3, r2
 80108ce:	d011      	beq.n	80108f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80108d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108d4:	3308      	adds	r3, #8
 80108d6:	2100      	movs	r1, #0
 80108d8:	4618      	mov	r0, r3
 80108da:	f001 f99d 	bl	8011c18 <RCCEx_PLL2_Config>
 80108de:	4603      	mov	r3, r0
 80108e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80108e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d003      	beq.n	80108f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80108f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80108f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fc:	2100      	movs	r1, #0
 80108fe:	6239      	str	r1, [r7, #32]
 8010900:	f003 0302 	and.w	r3, r3, #2
 8010904:	627b      	str	r3, [r7, #36]	@ 0x24
 8010906:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801090a:	460b      	mov	r3, r1
 801090c:	4313      	orrs	r3, r2
 801090e:	d011      	beq.n	8010934 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010914:	3308      	adds	r3, #8
 8010916:	2101      	movs	r1, #1
 8010918:	4618      	mov	r0, r3
 801091a:	f001 f97d 	bl	8011c18 <RCCEx_PLL2_Config>
 801091e:	4603      	mov	r3, r0
 8010920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8010924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010928:	2b00      	cmp	r3, #0
 801092a:	d003      	beq.n	8010934 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801092c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093c:	2100      	movs	r1, #0
 801093e:	61b9      	str	r1, [r7, #24]
 8010940:	f003 0304 	and.w	r3, r3, #4
 8010944:	61fb      	str	r3, [r7, #28]
 8010946:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801094a:	460b      	mov	r3, r1
 801094c:	4313      	orrs	r3, r2
 801094e:	d011      	beq.n	8010974 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010954:	3308      	adds	r3, #8
 8010956:	2102      	movs	r1, #2
 8010958:	4618      	mov	r0, r3
 801095a:	f001 f95d 	bl	8011c18 <RCCEx_PLL2_Config>
 801095e:	4603      	mov	r3, r0
 8010960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8010964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010968:	2b00      	cmp	r3, #0
 801096a:	d003      	beq.n	8010974 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801096c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097c:	2100      	movs	r1, #0
 801097e:	6139      	str	r1, [r7, #16]
 8010980:	f003 0308 	and.w	r3, r3, #8
 8010984:	617b      	str	r3, [r7, #20]
 8010986:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801098a:	460b      	mov	r3, r1
 801098c:	4313      	orrs	r3, r2
 801098e:	d011      	beq.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010994:	3328      	adds	r3, #40	@ 0x28
 8010996:	2100      	movs	r1, #0
 8010998:	4618      	mov	r0, r3
 801099a:	f001 f9ef 	bl	8011d7c <RCCEx_PLL3_Config>
 801099e:	4603      	mov	r3, r0
 80109a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80109a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d003      	beq.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80109b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80109b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80109b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109bc:	2100      	movs	r1, #0
 80109be:	60b9      	str	r1, [r7, #8]
 80109c0:	f003 0310 	and.w	r3, r3, #16
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80109ca:	460b      	mov	r3, r1
 80109cc:	4313      	orrs	r3, r2
 80109ce:	d011      	beq.n	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80109d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80109d4:	3328      	adds	r3, #40	@ 0x28
 80109d6:	2101      	movs	r1, #1
 80109d8:	4618      	mov	r0, r3
 80109da:	f001 f9cf 	bl	8011d7c <RCCEx_PLL3_Config>
 80109de:	4603      	mov	r3, r0
 80109e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80109e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d003      	beq.n	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80109f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80109f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80109f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fc:	2100      	movs	r1, #0
 80109fe:	6039      	str	r1, [r7, #0]
 8010a00:	f003 0320 	and.w	r3, r3, #32
 8010a04:	607b      	str	r3, [r7, #4]
 8010a06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	d011      	beq.n	8010a34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010a14:	3328      	adds	r3, #40	@ 0x28
 8010a16:	2102      	movs	r1, #2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f001 f9af 	bl	8011d7c <RCCEx_PLL3_Config>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8010a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8010a30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8010a34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e000      	b.n	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8010a40:	2301      	movs	r3, #1
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a4e:	bf00      	nop
 8010a50:	58024400 	.word	0x58024400

08010a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b090      	sub	sp, #64	@ 0x40
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a62:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8010a66:	430b      	orrs	r3, r1
 8010a68:	f040 8094 	bne.w	8010b94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010a6c:	4b9b      	ldr	r3, [pc, #620]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a70:	f003 0307 	and.w	r3, r3, #7
 8010a74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a78:	2b04      	cmp	r3, #4
 8010a7a:	f200 8087 	bhi.w	8010b8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a84:	08010a99 	.word	0x08010a99
 8010a88:	08010ac1 	.word	0x08010ac1
 8010a8c:	08010ae9 	.word	0x08010ae9
 8010a90:	08010b85 	.word	0x08010b85
 8010a94:	08010b11 	.word	0x08010b11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a98:	4b90      	ldr	r3, [pc, #576]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010aa4:	d108      	bne.n	8010ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 ff62 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ab4:	f000 bc93 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010abc:	f000 bc8f 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ac0:	4b86      	ldr	r3, [pc, #536]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010acc:	d108      	bne.n	8010ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ace:	f107 0318 	add.w	r3, r7, #24
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f000 fca6 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010adc:	f000 bc7f 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ae4:	f000 bc7b 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010af4:	d108      	bne.n	8010b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010af6:	f107 030c 	add.w	r3, r7, #12
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 fde6 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b04:	f000 bc6b 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b0c:	f000 bc67 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b10:	4b72      	ldr	r3, [pc, #456]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010b18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b1a:	4b70      	ldr	r3, [pc, #448]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f003 0304 	and.w	r3, r3, #4
 8010b22:	2b04      	cmp	r3, #4
 8010b24:	d10c      	bne.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d109      	bne.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	08db      	lsrs	r3, r3, #3
 8010b32:	f003 0303 	and.w	r3, r3, #3
 8010b36:	4a6a      	ldr	r2, [pc, #424]	@ (8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8010b38:	fa22 f303 	lsr.w	r3, r2, r3
 8010b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b3e:	e01f      	b.n	8010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b40:	4b66      	ldr	r3, [pc, #408]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b4c:	d106      	bne.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b54:	d102      	bne.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010b56:	4b63      	ldr	r3, [pc, #396]	@ (8010ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8010b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b5a:	e011      	b.n	8010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b5c:	4b5f      	ldr	r3, [pc, #380]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b68:	d106      	bne.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b70:	d102      	bne.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b72:	4b5d      	ldr	r3, [pc, #372]	@ (8010ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b76:	e003      	b.n	8010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010b7c:	f000 bc2f 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010b80:	f000 bc2d 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b84:	4b59      	ldr	r3, [pc, #356]	@ (8010cec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b88:	f000 bc29 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b90:	f000 bc25 	b.w	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b98:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8010b9c:	430b      	orrs	r3, r1
 8010b9e:	f040 80a7 	bne.w	8010cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ba6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8010baa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010bb2:	d054      	beq.n	8010c5e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8010bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010bba:	f200 808b 	bhi.w	8010cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8010bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010bc4:	f000 8083 	beq.w	8010cce <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8010bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010bce:	f200 8081 	bhi.w	8010cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010bd8:	d02f      	beq.n	8010c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010be0:	d878      	bhi.n	8010cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8010be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8010be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010bee:	d012      	beq.n	8010c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8010bf0:	e070      	b.n	8010cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010bfe:	d107      	bne.n	8010c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 feb5 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c0e:	e3e6      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c14:	e3e3      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c16:	4b31      	ldr	r3, [pc, #196]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010c22:	d107      	bne.n	8010c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c24:	f107 0318 	add.w	r3, r7, #24
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 fbfb 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c2e:	69bb      	ldr	r3, [r7, #24]
 8010c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c32:	e3d4      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010c34:	2300      	movs	r3, #0
 8010c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c38:	e3d1      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c3a:	4b28      	ldr	r3, [pc, #160]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c46:	d107      	bne.n	8010c58 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c48:	f107 030c 	add.w	r3, r7, #12
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 fd3d 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c56:	e3c2      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c5c:	e3bf      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010c66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c68:	4b1c      	ldr	r3, [pc, #112]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f003 0304 	and.w	r3, r3, #4
 8010c70:	2b04      	cmp	r3, #4
 8010c72:	d10c      	bne.n	8010c8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8010c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d109      	bne.n	8010c8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c7a:	4b18      	ldr	r3, [pc, #96]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	08db      	lsrs	r3, r3, #3
 8010c80:	f003 0303 	and.w	r3, r3, #3
 8010c84:	4a16      	ldr	r2, [pc, #88]	@ (8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8010c86:	fa22 f303 	lsr.w	r3, r2, r3
 8010c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c8c:	e01e      	b.n	8010ccc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c8e:	4b13      	ldr	r3, [pc, #76]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c9a:	d106      	bne.n	8010caa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ca2:	d102      	bne.n	8010caa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8010ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8010ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ca8:	e010      	b.n	8010ccc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010caa:	4b0c      	ldr	r3, [pc, #48]	@ (8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010cb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010cb6:	d106      	bne.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8010cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010cbe:	d102      	bne.n	8010cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010cc0:	4b09      	ldr	r3, [pc, #36]	@ (8010ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010cc4:	e002      	b.n	8010ccc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010cca:	e388      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010ccc:	e387      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010cce:	4b07      	ldr	r3, [pc, #28]	@ (8010cec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cd2:	e384      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cd8:	e381      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010cda:	bf00      	nop
 8010cdc:	58024400 	.word	0x58024400
 8010ce0:	03d09000 	.word	0x03d09000
 8010ce4:	003d0900 	.word	0x003d0900
 8010ce8:	007a1200 	.word	0x007a1200
 8010cec:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cf4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8010cf8:	430b      	orrs	r3, r1
 8010cfa:	f040 809c 	bne.w	8010e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d02:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010d06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d0e:	d054      	beq.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8010d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d16:	f200 808b 	bhi.w	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d20:	f000 8083 	beq.w	8010e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8010d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010d2a:	f200 8081 	bhi.w	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d34:	d02f      	beq.n	8010d96 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8010d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d3c:	d878      	bhi.n	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d004      	beq.n	8010d4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8010d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d4a:	d012      	beq.n	8010d72 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8010d4c:	e070      	b.n	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d4e:	4b8a      	ldr	r3, [pc, #552]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d5a:	d107      	bne.n	8010d6c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 fe07 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d6a:	e338      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d70:	e335      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d72:	4b81      	ldr	r3, [pc, #516]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d7e:	d107      	bne.n	8010d90 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d80:	f107 0318 	add.w	r3, r7, #24
 8010d84:	4618      	mov	r0, r3
 8010d86:	f000 fb4d 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d8e:	e326      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d94:	e323      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010d96:	4b78      	ldr	r3, [pc, #480]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010da2:	d107      	bne.n	8010db4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010da4:	f107 030c 	add.w	r3, r7, #12
 8010da8:	4618      	mov	r0, r3
 8010daa:	f000 fc8f 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010db2:	e314      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010db4:	2300      	movs	r3, #0
 8010db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010db8:	e311      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010dba:	4b6f      	ldr	r3, [pc, #444]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010dbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010dc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	2b04      	cmp	r3, #4
 8010dce:	d10c      	bne.n	8010dea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d109      	bne.n	8010dea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010dd6:	4b68      	ldr	r3, [pc, #416]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	08db      	lsrs	r3, r3, #3
 8010ddc:	f003 0303 	and.w	r3, r3, #3
 8010de0:	4a66      	ldr	r2, [pc, #408]	@ (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8010de2:	fa22 f303 	lsr.w	r3, r2, r3
 8010de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010de8:	e01e      	b.n	8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010dea:	4b63      	ldr	r3, [pc, #396]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010df6:	d106      	bne.n	8010e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8010df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010dfe:	d102      	bne.n	8010e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010e00:	4b5f      	ldr	r3, [pc, #380]	@ (8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8010e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e04:	e010      	b.n	8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010e06:	4b5c      	ldr	r3, [pc, #368]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010e12:	d106      	bne.n	8010e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8010e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e1a:	d102      	bne.n	8010e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010e1c:	4b59      	ldr	r3, [pc, #356]	@ (8010f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e20:	e002      	b.n	8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010e22:	2300      	movs	r3, #0
 8010e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010e26:	e2da      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010e28:	e2d9      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010e2a:	4b57      	ldr	r3, [pc, #348]	@ (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e2e:	e2d6      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e34:	e2d3      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e3a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8010e3e:	430b      	orrs	r3, r1
 8010e40:	f040 80a7 	bne.w	8010f92 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010e44:	4b4c      	ldr	r3, [pc, #304]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e48:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8010e4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010e54:	d055      	beq.n	8010f02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8010e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010e5c:	f200 8096 	bhi.w	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8010e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010e66:	f000 8084 	beq.w	8010f72 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8010e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010e70:	f200 808c 	bhi.w	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8010e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e7a:	d030      	beq.n	8010ede <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010e82:	f200 8083 	bhi.w	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8010e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d004      	beq.n	8010e96 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e92:	d012      	beq.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8010e94:	e07a      	b.n	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010e96:	4b38      	ldr	r3, [pc, #224]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010ea2:	d107      	bne.n	8010eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f000 fd63 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010eb2:	e294      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010eb8:	e291      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010eba:	4b2f      	ldr	r3, [pc, #188]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010ec6:	d107      	bne.n	8010ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ec8:	f107 0318 	add.w	r3, r7, #24
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 faa9 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ed6:	e282      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010edc:	e27f      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ede:	4b26      	ldr	r3, [pc, #152]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010eea:	d107      	bne.n	8010efc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eec:	f107 030c 	add.w	r3, r7, #12
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 fbeb 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010efa:	e270      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f00:	e26d      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010f02:	4b1d      	ldr	r3, [pc, #116]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010f0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f003 0304 	and.w	r3, r3, #4
 8010f14:	2b04      	cmp	r3, #4
 8010f16:	d10c      	bne.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8010f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d109      	bne.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010f1e:	4b16      	ldr	r3, [pc, #88]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	08db      	lsrs	r3, r3, #3
 8010f24:	f003 0303 	and.w	r3, r3, #3
 8010f28:	4a14      	ldr	r2, [pc, #80]	@ (8010f7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8010f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f30:	e01e      	b.n	8010f70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010f32:	4b11      	ldr	r3, [pc, #68]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f3e:	d106      	bne.n	8010f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8010f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f46:	d102      	bne.n	8010f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010f48:	4b0d      	ldr	r3, [pc, #52]	@ (8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8010f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f4c:	e010      	b.n	8010f70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8010f78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f5a:	d106      	bne.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8010f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010f62:	d102      	bne.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010f64:	4b07      	ldr	r3, [pc, #28]	@ (8010f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f68:	e002      	b.n	8010f70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010f6e:	e236      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010f70:	e235      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010f72:	4b05      	ldr	r3, [pc, #20]	@ (8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f76:	e232      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010f78:	58024400 	.word	0x58024400
 8010f7c:	03d09000 	.word	0x03d09000
 8010f80:	003d0900 	.word	0x003d0900
 8010f84:	007a1200 	.word	0x007a1200
 8010f88:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f90:	e225      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f96:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8010f9a:	430b      	orrs	r3, r1
 8010f9c:	f040 8085 	bne.w	80110aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fa4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8010faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010fb0:	d06b      	beq.n	801108a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8010fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010fb8:	d874      	bhi.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010fc0:	d056      	beq.n	8011070 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010fc8:	d86c      	bhi.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010fd0:	d03b      	beq.n	801104a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8010fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010fd8:	d864      	bhi.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010fe0:	d021      	beq.n	8011026 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8010fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010fe8:	d85c      	bhi.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8010fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d004      	beq.n	8010ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ff6:	d004      	beq.n	8011002 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8010ff8:	e054      	b.n	80110a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010ffa:	f7fe fb5f 	bl	800f6bc <HAL_RCC_GetPCLK1Freq>
 8010ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011000:	e1ed      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011002:	4b84      	ldr	r3, [pc, #528]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801100a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801100e:	d107      	bne.n	8011020 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011010:	f107 0318 	add.w	r3, r7, #24
 8011014:	4618      	mov	r0, r3
 8011016:	f000 fa05 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801101e:	e1de      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011020:	2300      	movs	r3, #0
 8011022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011024:	e1db      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011026:	4b7b      	ldr	r3, [pc, #492]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801102e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011032:	d107      	bne.n	8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011034:	f107 030c 	add.w	r3, r7, #12
 8011038:	4618      	mov	r0, r3
 801103a:	f000 fb47 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011042:	e1cc      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011044:	2300      	movs	r3, #0
 8011046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011048:	e1c9      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801104a:	4b72      	ldr	r3, [pc, #456]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f003 0304 	and.w	r3, r3, #4
 8011052:	2b04      	cmp	r3, #4
 8011054:	d109      	bne.n	801106a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011056:	4b6f      	ldr	r3, [pc, #444]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	08db      	lsrs	r3, r3, #3
 801105c:	f003 0303 	and.w	r3, r3, #3
 8011060:	4a6d      	ldr	r2, [pc, #436]	@ (8011218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8011062:	fa22 f303 	lsr.w	r3, r2, r3
 8011066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011068:	e1b9      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801106a:	2300      	movs	r3, #0
 801106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801106e:	e1b6      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011070:	4b68      	ldr	r3, [pc, #416]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801107c:	d102      	bne.n	8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801107e:	4b67      	ldr	r3, [pc, #412]	@ (801121c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8011080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011082:	e1ac      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011084:	2300      	movs	r3, #0
 8011086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011088:	e1a9      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801108a:	4b62      	ldr	r3, [pc, #392]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011096:	d102      	bne.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8011098:	4b61      	ldr	r3, [pc, #388]	@ (8011220 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801109c:	e19f      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a2:	e19c      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a8:	e199      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80110aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110ae:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80110b2:	430b      	orrs	r3, r1
 80110b4:	d173      	bne.n	801119e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80110b6:	4b57      	ldr	r3, [pc, #348]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80110b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80110be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80110c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110c6:	d02f      	beq.n	8011128 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110ce:	d863      	bhi.n	8011198 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80110d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d004      	beq.n	80110e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80110d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110dc:	d012      	beq.n	8011104 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80110de:	e05b      	b.n	8011198 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80110e0:	4b4c      	ldr	r3, [pc, #304]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80110e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80110ec:	d107      	bne.n	80110fe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110ee:	f107 0318 	add.w	r3, r7, #24
 80110f2:	4618      	mov	r0, r3
 80110f4:	f000 f996 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110fc:	e16f      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011102:	e16c      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011104:	4b43      	ldr	r3, [pc, #268]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801110c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011110:	d107      	bne.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011112:	f107 030c 	add.w	r3, r7, #12
 8011116:	4618      	mov	r0, r3
 8011118:	f000 fad8 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011120:	e15d      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011126:	e15a      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011128:	4b3a      	ldr	r3, [pc, #232]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801112c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011130:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011132:	4b38      	ldr	r3, [pc, #224]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f003 0304 	and.w	r3, r3, #4
 801113a:	2b04      	cmp	r3, #4
 801113c:	d10c      	bne.n	8011158 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801113e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011140:	2b00      	cmp	r3, #0
 8011142:	d109      	bne.n	8011158 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011144:	4b33      	ldr	r3, [pc, #204]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	08db      	lsrs	r3, r3, #3
 801114a:	f003 0303 	and.w	r3, r3, #3
 801114e:	4a32      	ldr	r2, [pc, #200]	@ (8011218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8011150:	fa22 f303 	lsr.w	r3, r2, r3
 8011154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011156:	e01e      	b.n	8011196 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011158:	4b2e      	ldr	r3, [pc, #184]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011164:	d106      	bne.n	8011174 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8011166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801116c:	d102      	bne.n	8011174 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801116e:	4b2b      	ldr	r3, [pc, #172]	@ (801121c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8011170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011172:	e010      	b.n	8011196 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011174:	4b27      	ldr	r3, [pc, #156]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801117c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011180:	d106      	bne.n	8011190 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8011182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011188:	d102      	bne.n	8011190 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801118a:	4b25      	ldr	r3, [pc, #148]	@ (8011220 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801118e:	e002      	b.n	8011196 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011190:	2300      	movs	r3, #0
 8011192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011194:	e123      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011196:	e122      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8011198:	2300      	movs	r3, #0
 801119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801119c:	e11f      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801119e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111a2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80111a6:	430b      	orrs	r3, r1
 80111a8:	d13c      	bne.n	8011224 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80111aa:	4b1a      	ldr	r3, [pc, #104]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80111ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80111ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80111b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80111b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d004      	beq.n	80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80111ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111c0:	d012      	beq.n	80111e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80111c2:	e023      	b.n	801120c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80111c4:	4b13      	ldr	r3, [pc, #76]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80111cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80111d0:	d107      	bne.n	80111e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80111d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 fbcc 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80111dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111e0:	e0fd      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111e6:	e0fa      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80111e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011214 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80111f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80111f4:	d107      	bne.n	8011206 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111f6:	f107 0318 	add.w	r3, r7, #24
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 f912 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011200:	6a3b      	ldr	r3, [r7, #32]
 8011202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011204:	e0eb      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011206:	2300      	movs	r3, #0
 8011208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801120a:	e0e8      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801120c:	2300      	movs	r3, #0
 801120e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011210:	e0e5      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8011212:	bf00      	nop
 8011214:	58024400 	.word	0x58024400
 8011218:	03d09000 	.word	0x03d09000
 801121c:	003d0900 	.word	0x003d0900
 8011220:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011228:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801122c:	430b      	orrs	r3, r1
 801122e:	f040 8085 	bne.w	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011232:	4b6d      	ldr	r3, [pc, #436]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011236:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801123a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801123c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011242:	d06b      	beq.n	801131c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8011244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801124a:	d874      	bhi.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801124c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801124e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011252:	d056      	beq.n	8011302 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8011254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801125a:	d86c      	bhi.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801125c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011262:	d03b      	beq.n	80112dc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8011264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801126a:	d864      	bhi.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801126c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801126e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011272:	d021      	beq.n	80112b8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8011274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801127a:	d85c      	bhi.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801127c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127e:	2b00      	cmp	r3, #0
 8011280:	d004      	beq.n	801128c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8011282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011288:	d004      	beq.n	8011294 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801128a:	e054      	b.n	8011336 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801128c:	f000 f8b4 	bl	80113f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8011290:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011292:	e0a4      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011294:	4b54      	ldr	r3, [pc, #336]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801129c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80112a0:	d107      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112a2:	f107 0318 	add.w	r3, r7, #24
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 f8bc 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112b0:	e095      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112b6:	e092      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80112b8:	4b4b      	ldr	r3, [pc, #300]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80112c4:	d107      	bne.n	80112d6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112c6:	f107 030c 	add.w	r3, r7, #12
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 f9fe 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112d4:	e083      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112da:	e080      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80112dc:	4b42      	ldr	r3, [pc, #264]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 0304 	and.w	r3, r3, #4
 80112e4:	2b04      	cmp	r3, #4
 80112e6:	d109      	bne.n	80112fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80112e8:	4b3f      	ldr	r3, [pc, #252]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	08db      	lsrs	r3, r3, #3
 80112ee:	f003 0303 	and.w	r3, r3, #3
 80112f2:	4a3e      	ldr	r2, [pc, #248]	@ (80113ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80112f4:	fa22 f303 	lsr.w	r3, r2, r3
 80112f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112fa:	e070      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80112fc:	2300      	movs	r3, #0
 80112fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011300:	e06d      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011302:	4b39      	ldr	r3, [pc, #228]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801130a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801130e:	d102      	bne.n	8011316 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8011310:	4b37      	ldr	r3, [pc, #220]	@ (80113f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8011312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011314:	e063      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011316:	2300      	movs	r3, #0
 8011318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801131a:	e060      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801131c:	4b32      	ldr	r3, [pc, #200]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011328:	d102      	bne.n	8011330 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801132a:	4b32      	ldr	r3, [pc, #200]	@ (80113f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801132e:	e056      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011330:	2300      	movs	r3, #0
 8011332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011334:	e053      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011336:	2300      	movs	r3, #0
 8011338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801133a:	e050      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801133c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011340:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8011344:	430b      	orrs	r3, r1
 8011346:	d148      	bne.n	80113da <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011348:	4b27      	ldr	r3, [pc, #156]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801134a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801134c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011350:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011358:	d02a      	beq.n	80113b0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801135a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011360:	d838      	bhi.n	80113d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8011362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8011368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801136a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801136e:	d00d      	beq.n	801138c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8011370:	e030      	b.n	80113d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011372:	4b1d      	ldr	r3, [pc, #116]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801137a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801137e:	d102      	bne.n	8011386 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8011380:	4b1c      	ldr	r3, [pc, #112]	@ (80113f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8011382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011384:	e02b      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8011386:	2300      	movs	r3, #0
 8011388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801138a:	e028      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801138c:	4b16      	ldr	r3, [pc, #88]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011398:	d107      	bne.n	80113aa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801139e:	4618      	mov	r0, r3
 80113a0:	f000 fae8 	bl	8011974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80113a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113a8:	e019      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113ae:	e016      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80113b0:	4b0d      	ldr	r3, [pc, #52]	@ (80113e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80113b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80113bc:	d107      	bne.n	80113ce <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113be:	f107 0318 	add.w	r3, r7, #24
 80113c2:	4618      	mov	r0, r3
 80113c4:	f000 f82e 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113cc:	e007      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d2:	e004      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80113d4:	2300      	movs	r3, #0
 80113d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d8:	e001      	b.n	80113de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80113da:	2300      	movs	r3, #0
 80113dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80113de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3740      	adds	r7, #64	@ 0x40
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	58024400 	.word	0x58024400
 80113ec:	03d09000 	.word	0x03d09000
 80113f0:	003d0900 	.word	0x003d0900
 80113f4:	007a1200 	.word	0x007a1200

080113f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80113fc:	f7fe f92e 	bl	800f65c <HAL_RCC_GetHCLKFreq>
 8011400:	4602      	mov	r2, r0
 8011402:	4b06      	ldr	r3, [pc, #24]	@ (801141c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011404:	6a1b      	ldr	r3, [r3, #32]
 8011406:	091b      	lsrs	r3, r3, #4
 8011408:	f003 0307 	and.w	r3, r3, #7
 801140c:	4904      	ldr	r1, [pc, #16]	@ (8011420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801140e:	5ccb      	ldrb	r3, [r1, r3]
 8011410:	f003 031f 	and.w	r3, r3, #31
 8011414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011418:	4618      	mov	r0, r3
 801141a:	bd80      	pop	{r7, pc}
 801141c:	58024400 	.word	0x58024400
 8011420:	0801e384 	.word	0x0801e384

08011424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011424:	b480      	push	{r7}
 8011426:	b089      	sub	sp, #36	@ 0x24
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801142c:	4ba1      	ldr	r3, [pc, #644]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011430:	f003 0303 	and.w	r3, r3, #3
 8011434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8011436:	4b9f      	ldr	r3, [pc, #636]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801143a:	0b1b      	lsrs	r3, r3, #12
 801143c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011442:	4b9c      	ldr	r3, [pc, #624]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011446:	091b      	lsrs	r3, r3, #4
 8011448:	f003 0301 	and.w	r3, r3, #1
 801144c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801144e:	4b99      	ldr	r3, [pc, #612]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011452:	08db      	lsrs	r3, r3, #3
 8011454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011458:	693a      	ldr	r2, [r7, #16]
 801145a:	fb02 f303 	mul.w	r3, r2, r3
 801145e:	ee07 3a90 	vmov	s15, r3
 8011462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 8111 	beq.w	8011694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	2b02      	cmp	r3, #2
 8011476:	f000 8083 	beq.w	8011580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	2b02      	cmp	r3, #2
 801147e:	f200 80a1 	bhi.w	80115c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d003      	beq.n	8011490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d056      	beq.n	801153c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801148e:	e099      	b.n	80115c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011490:	4b88      	ldr	r3, [pc, #544]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f003 0320 	and.w	r3, r3, #32
 8011498:	2b00      	cmp	r3, #0
 801149a:	d02d      	beq.n	80114f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801149c:	4b85      	ldr	r3, [pc, #532]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	08db      	lsrs	r3, r3, #3
 80114a2:	f003 0303 	and.w	r3, r3, #3
 80114a6:	4a84      	ldr	r2, [pc, #528]	@ (80116b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80114a8:	fa22 f303 	lsr.w	r3, r2, r3
 80114ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	ee07 3a90 	vmov	s15, r3
 80114b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	ee07 3a90 	vmov	s15, r3
 80114be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114c6:	4b7b      	ldr	r3, [pc, #492]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80114c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114ce:	ee07 3a90 	vmov	s15, r3
 80114d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80114da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80116bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80114de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80114f6:	e087      	b.n	8011608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	ee07 3a90 	vmov	s15, r3
 80114fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011502:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80116c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801150a:	4b6a      	ldr	r3, [pc, #424]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801150e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011512:	ee07 3a90 	vmov	s15, r3
 8011516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801151a:	ed97 6a03 	vldr	s12, [r7, #12]
 801151e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80116bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801152a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801152e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801153a:	e065      	b.n	8011608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	ee07 3a90 	vmov	s15, r3
 8011542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011546:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80116c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801154a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801154e:	4b59      	ldr	r3, [pc, #356]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011556:	ee07 3a90 	vmov	s15, r3
 801155a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801155e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011562:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80116bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801156a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801156e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801157a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801157e:	e043      	b.n	8011608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	ee07 3a90 	vmov	s15, r3
 8011586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801158a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80116c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801158e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011592:	4b48      	ldr	r3, [pc, #288]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801159a:	ee07 3a90 	vmov	s15, r3
 801159e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80115a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80116bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80115aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80115b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115c2:	e021      	b.n	8011608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	ee07 3a90 	vmov	s15, r3
 80115ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80116c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80115d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115d6:	4b37      	ldr	r3, [pc, #220]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115de:	ee07 3a90 	vmov	s15, r3
 80115e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80115ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80116bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80115ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80115fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011608:	4b2a      	ldr	r3, [pc, #168]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801160c:	0a5b      	lsrs	r3, r3, #9
 801160e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011612:	ee07 3a90 	vmov	s15, r3
 8011616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801161a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801161e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011622:	edd7 6a07 	vldr	s13, [r7, #28]
 8011626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801162a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801162e:	ee17 2a90 	vmov	r2, s15
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011636:	4b1f      	ldr	r3, [pc, #124]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801163a:	0c1b      	lsrs	r3, r3, #16
 801163c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011640:	ee07 3a90 	vmov	s15, r3
 8011644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801164c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011650:	edd7 6a07 	vldr	s13, [r7, #28]
 8011654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801165c:	ee17 2a90 	vmov	r2, s15
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011664:	4b13      	ldr	r3, [pc, #76]	@ (80116b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011668:	0e1b      	lsrs	r3, r3, #24
 801166a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801166e:	ee07 3a90 	vmov	s15, r3
 8011672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801167a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801167e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801168a:	ee17 2a90 	vmov	r2, s15
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011692:	e008      	b.n	80116a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	609a      	str	r2, [r3, #8]
}
 80116a6:	bf00      	nop
 80116a8:	3724      	adds	r7, #36	@ 0x24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	58024400 	.word	0x58024400
 80116b8:	03d09000 	.word	0x03d09000
 80116bc:	46000000 	.word	0x46000000
 80116c0:	4c742400 	.word	0x4c742400
 80116c4:	4a742400 	.word	0x4a742400
 80116c8:	4af42400 	.word	0x4af42400

080116cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b089      	sub	sp, #36	@ 0x24
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80116d4:	4ba1      	ldr	r3, [pc, #644]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116d8:	f003 0303 	and.w	r3, r3, #3
 80116dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80116de:	4b9f      	ldr	r3, [pc, #636]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116e2:	0d1b      	lsrs	r3, r3, #20
 80116e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80116e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80116ea:	4b9c      	ldr	r3, [pc, #624]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ee:	0a1b      	lsrs	r3, r3, #8
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80116f6:	4b99      	ldr	r3, [pc, #612]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116fa:	08db      	lsrs	r3, r3, #3
 80116fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	fb02 f303 	mul.w	r3, r2, r3
 8011706:	ee07 3a90 	vmov	s15, r3
 801170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801170e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	2b00      	cmp	r3, #0
 8011716:	f000 8111 	beq.w	801193c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	2b02      	cmp	r3, #2
 801171e:	f000 8083 	beq.w	8011828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2b02      	cmp	r3, #2
 8011726:	f200 80a1 	bhi.w	801186c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d003      	beq.n	8011738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d056      	beq.n	80117e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011736:	e099      	b.n	801186c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011738:	4b88      	ldr	r3, [pc, #544]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f003 0320 	and.w	r3, r3, #32
 8011740:	2b00      	cmp	r3, #0
 8011742:	d02d      	beq.n	80117a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011744:	4b85      	ldr	r3, [pc, #532]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	08db      	lsrs	r3, r3, #3
 801174a:	f003 0303 	and.w	r3, r3, #3
 801174e:	4a84      	ldr	r2, [pc, #528]	@ (8011960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011750:	fa22 f303 	lsr.w	r3, r2, r3
 8011754:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	ee07 3a90 	vmov	s15, r3
 801175c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	ee07 3a90 	vmov	s15, r3
 8011766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801176e:	4b7b      	ldr	r3, [pc, #492]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011776:	ee07 3a90 	vmov	s15, r3
 801177a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801177e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011782:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801178a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801178e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011796:	ee67 7a27 	vmul.f32	s15, s14, s15
 801179a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801179e:	e087      	b.n	80118b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	ee07 3a90 	vmov	s15, r3
 80117a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80117ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117b2:	4b6a      	ldr	r3, [pc, #424]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117ba:	ee07 3a90 	vmov	s15, r3
 80117be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80117c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80117ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80117d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117e2:	e065      	b.n	80118b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	ee07 3a90 	vmov	s15, r3
 80117ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801196c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80117f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117f6:	4b59      	ldr	r3, [pc, #356]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117fe:	ee07 3a90 	vmov	s15, r3
 8011802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011806:	ed97 6a03 	vldr	s12, [r7, #12]
 801180a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801180e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801181a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011826:	e043      	b.n	80118b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	ee07 3a90 	vmov	s15, r3
 801182e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011832:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801183a:	4b48      	ldr	r3, [pc, #288]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801183e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011842:	ee07 3a90 	vmov	s15, r3
 8011846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801184a:	ed97 6a03 	vldr	s12, [r7, #12]
 801184e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801185a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801185e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801186a:	e021      	b.n	80118b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	ee07 3a90 	vmov	s15, r3
 8011872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011876:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801196c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801187a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801187e:	4b37      	ldr	r3, [pc, #220]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011886:	ee07 3a90 	vmov	s15, r3
 801188a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801188e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011892:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801189a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801189e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80118ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80118b0:	4b2a      	ldr	r3, [pc, #168]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80118b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118b4:	0a5b      	lsrs	r3, r3, #9
 80118b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118ba:	ee07 3a90 	vmov	s15, r3
 80118be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80118c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80118ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118d6:	ee17 2a90 	vmov	r2, s15
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80118de:	4b1f      	ldr	r3, [pc, #124]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80118e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118e2:	0c1b      	lsrs	r3, r3, #16
 80118e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118e8:	ee07 3a90 	vmov	s15, r3
 80118ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80118f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80118fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011904:	ee17 2a90 	vmov	r2, s15
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801190c:	4b13      	ldr	r3, [pc, #76]	@ (801195c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011910:	0e1b      	lsrs	r3, r3, #24
 8011912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011916:	ee07 3a90 	vmov	s15, r3
 801191a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801191e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011926:	edd7 6a07 	vldr	s13, [r7, #28]
 801192a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801192e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011932:	ee17 2a90 	vmov	r2, s15
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801193a:	e008      	b.n	801194e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	609a      	str	r2, [r3, #8]
}
 801194e:	bf00      	nop
 8011950:	3724      	adds	r7, #36	@ 0x24
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	58024400 	.word	0x58024400
 8011960:	03d09000 	.word	0x03d09000
 8011964:	46000000 	.word	0x46000000
 8011968:	4c742400 	.word	0x4c742400
 801196c:	4a742400 	.word	0x4a742400
 8011970:	4af42400 	.word	0x4af42400

08011974 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011974:	b480      	push	{r7}
 8011976:	b089      	sub	sp, #36	@ 0x24
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801197c:	4ba0      	ldr	r3, [pc, #640]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011980:	f003 0303 	and.w	r3, r3, #3
 8011984:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011986:	4b9e      	ldr	r3, [pc, #632]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801198a:	091b      	lsrs	r3, r3, #4
 801198c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011990:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011992:	4b9b      	ldr	r3, [pc, #620]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011996:	f003 0301 	and.w	r3, r3, #1
 801199a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801199c:	4b98      	ldr	r3, [pc, #608]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80119a0:	08db      	lsrs	r3, r3, #3
 80119a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80119a6:	693a      	ldr	r2, [r7, #16]
 80119a8:	fb02 f303 	mul.w	r3, r2, r3
 80119ac:	ee07 3a90 	vmov	s15, r3
 80119b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 8111 	beq.w	8011be2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	2b02      	cmp	r3, #2
 80119c4:	f000 8083 	beq.w	8011ace <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	2b02      	cmp	r3, #2
 80119cc:	f200 80a1 	bhi.w	8011b12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d003      	beq.n	80119de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d056      	beq.n	8011a8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80119dc:	e099      	b.n	8011b12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119de:	4b88      	ldr	r3, [pc, #544]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f003 0320 	and.w	r3, r3, #32
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d02d      	beq.n	8011a46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80119ea:	4b85      	ldr	r3, [pc, #532]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	08db      	lsrs	r3, r3, #3
 80119f0:	f003 0303 	and.w	r3, r3, #3
 80119f4:	4a83      	ldr	r2, [pc, #524]	@ (8011c04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80119f6:	fa22 f303 	lsr.w	r3, r2, r3
 80119fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	ee07 3a90 	vmov	s15, r3
 8011a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	ee07 3a90 	vmov	s15, r3
 8011a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a14:	4b7a      	ldr	r3, [pc, #488]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a1c:	ee07 3a90 	vmov	s15, r3
 8011a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a28:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8011c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011a44:	e087      	b.n	8011b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	ee07 3a90 	vmov	s15, r3
 8011a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a50:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011c0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a58:	4b69      	ldr	r3, [pc, #420]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a60:	ee07 3a90 	vmov	s15, r3
 8011a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a6c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8011c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a88:	e065      	b.n	8011b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	ee07 3a90 	vmov	s15, r3
 8011a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a94:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8011c10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a9c:	4b58      	ldr	r3, [pc, #352]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011aa4:	ee07 3a90 	vmov	s15, r3
 8011aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aac:	ed97 6a03 	vldr	s12, [r7, #12]
 8011ab0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8011c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011abc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011acc:	e043      	b.n	8011b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	ee07 3a90 	vmov	s15, r3
 8011ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ad8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ae0:	4b47      	ldr	r3, [pc, #284]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ae8:	ee07 3a90 	vmov	s15, r3
 8011aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011af0:	ed97 6a03 	vldr	s12, [r7, #12]
 8011af4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011b10:	e021      	b.n	8011b56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	ee07 3a90 	vmov	s15, r3
 8011b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b1c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011c0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b24:	4b36      	ldr	r3, [pc, #216]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b2c:	ee07 3a90 	vmov	s15, r3
 8011b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b34:	ed97 6a03 	vldr	s12, [r7, #12]
 8011b38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011c08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011b54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011b56:	4b2a      	ldr	r3, [pc, #168]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b5a:	0a5b      	lsrs	r3, r3, #9
 8011b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b60:	ee07 3a90 	vmov	s15, r3
 8011b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b7c:	ee17 2a90 	vmov	r2, s15
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011b84:	4b1e      	ldr	r3, [pc, #120]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b88:	0c1b      	lsrs	r3, r3, #16
 8011b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b8e:	ee07 3a90 	vmov	s15, r3
 8011b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011baa:	ee17 2a90 	vmov	r2, s15
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011bb2:	4b13      	ldr	r3, [pc, #76]	@ (8011c00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bb6:	0e1b      	lsrs	r3, r3, #24
 8011bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bbc:	ee07 3a90 	vmov	s15, r3
 8011bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8011bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011bd8:	ee17 2a90 	vmov	r2, s15
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011be0:	e008      	b.n	8011bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2200      	movs	r2, #0
 8011be6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	609a      	str	r2, [r3, #8]
}
 8011bf4:	bf00      	nop
 8011bf6:	3724      	adds	r7, #36	@ 0x24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	58024400 	.word	0x58024400
 8011c04:	03d09000 	.word	0x03d09000
 8011c08:	46000000 	.word	0x46000000
 8011c0c:	4c742400 	.word	0x4c742400
 8011c10:	4a742400 	.word	0x4a742400
 8011c14:	4af42400 	.word	0x4af42400

08011c18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011c22:	2300      	movs	r3, #0
 8011c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011c26:	4b53      	ldr	r3, [pc, #332]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c2a:	f003 0303 	and.w	r3, r3, #3
 8011c2e:	2b03      	cmp	r3, #3
 8011c30:	d101      	bne.n	8011c36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011c32:	2301      	movs	r3, #1
 8011c34:	e099      	b.n	8011d6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011c36:	4b4f      	ldr	r3, [pc, #316]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011c42:	f7f5 fbed 	bl	8007420 <HAL_GetTick>
 8011c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011c48:	e008      	b.n	8011c5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011c4a:	f7f5 fbe9 	bl	8007420 <HAL_GetTick>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d901      	bls.n	8011c5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e086      	b.n	8011d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011c5c:	4b45      	ldr	r3, [pc, #276]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1f0      	bne.n	8011c4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011c68:	4b42      	ldr	r3, [pc, #264]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	031b      	lsls	r3, r3, #12
 8011c76:	493f      	ldr	r1, [pc, #252]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	3b01      	subs	r3, #1
 8011c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	3b01      	subs	r3, #1
 8011c8c:	025b      	lsls	r3, r3, #9
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	431a      	orrs	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	3b01      	subs	r3, #1
 8011c98:	041b      	lsls	r3, r3, #16
 8011c9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011c9e:	431a      	orrs	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	691b      	ldr	r3, [r3, #16]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	061b      	lsls	r3, r3, #24
 8011ca8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011cac:	4931      	ldr	r1, [pc, #196]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011cb2:	4b30      	ldr	r3, [pc, #192]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	695b      	ldr	r3, [r3, #20]
 8011cbe:	492d      	ldr	r1, [pc, #180]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cc0:	4313      	orrs	r3, r2
 8011cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cc8:	f023 0220 	bic.w	r2, r3, #32
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	699b      	ldr	r3, [r3, #24]
 8011cd0:	4928      	ldr	r1, [pc, #160]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011cd6:	4b27      	ldr	r3, [pc, #156]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cda:	4a26      	ldr	r2, [pc, #152]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cdc:	f023 0310 	bic.w	r3, r3, #16
 8011ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011ce2:	4b24      	ldr	r3, [pc, #144]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011ce6:	4b24      	ldr	r3, [pc, #144]	@ (8011d78 <RCCEx_PLL2_Config+0x160>)
 8011ce8:	4013      	ands	r3, r2
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	69d2      	ldr	r2, [r2, #28]
 8011cee:	00d2      	lsls	r2, r2, #3
 8011cf0:	4920      	ldr	r1, [pc, #128]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011cfc:	f043 0310 	orr.w	r3, r3, #16
 8011d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d106      	bne.n	8011d16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011d08:	4b1a      	ldr	r3, [pc, #104]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d0c:	4a19      	ldr	r2, [pc, #100]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011d14:	e00f      	b.n	8011d36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	d106      	bne.n	8011d2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011d1c:	4b15      	ldr	r3, [pc, #84]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d20:	4a14      	ldr	r2, [pc, #80]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011d28:	e005      	b.n	8011d36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011d2a:	4b12      	ldr	r3, [pc, #72]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d2e:	4a11      	ldr	r2, [pc, #68]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011d36:	4b0f      	ldr	r3, [pc, #60]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d42:	f7f5 fb6d 	bl	8007420 <HAL_GetTick>
 8011d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011d48:	e008      	b.n	8011d5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011d4a:	f7f5 fb69 	bl	8007420 <HAL_GetTick>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d901      	bls.n	8011d5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011d58:	2303      	movs	r3, #3
 8011d5a:	e006      	b.n	8011d6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011d5c:	4b05      	ldr	r3, [pc, #20]	@ (8011d74 <RCCEx_PLL2_Config+0x15c>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d0f0      	beq.n	8011d4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	58024400 	.word	0x58024400
 8011d78:	ffff0007 	.word	0xffff0007

08011d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011d8a:	4b53      	ldr	r3, [pc, #332]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d8e:	f003 0303 	and.w	r3, r3, #3
 8011d92:	2b03      	cmp	r3, #3
 8011d94:	d101      	bne.n	8011d9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011d96:	2301      	movs	r3, #1
 8011d98:	e099      	b.n	8011ece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011da6:	f7f5 fb3b 	bl	8007420 <HAL_GetTick>
 8011daa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011dac:	e008      	b.n	8011dc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011dae:	f7f5 fb37 	bl	8007420 <HAL_GetTick>
 8011db2:	4602      	mov	r2, r0
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	1ad3      	subs	r3, r2, r3
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d901      	bls.n	8011dc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011dbc:	2303      	movs	r3, #3
 8011dbe:	e086      	b.n	8011ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011dc0:	4b45      	ldr	r3, [pc, #276]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1f0      	bne.n	8011dae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011dcc:	4b42      	ldr	r3, [pc, #264]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	051b      	lsls	r3, r3, #20
 8011dda:	493f      	ldr	r1, [pc, #252]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	628b      	str	r3, [r1, #40]	@ 0x28
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	3b01      	subs	r3, #1
 8011df0:	025b      	lsls	r3, r3, #9
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	431a      	orrs	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	041b      	lsls	r3, r3, #16
 8011dfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011e02:	431a      	orrs	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	691b      	ldr	r3, [r3, #16]
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	061b      	lsls	r3, r3, #24
 8011e0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011e10:	4931      	ldr	r1, [pc, #196]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e12:	4313      	orrs	r3, r2
 8011e14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011e16:	4b30      	ldr	r3, [pc, #192]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	695b      	ldr	r3, [r3, #20]
 8011e22:	492d      	ldr	r1, [pc, #180]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e24:	4313      	orrs	r3, r2
 8011e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011e28:	4b2b      	ldr	r3, [pc, #172]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	699b      	ldr	r3, [r3, #24]
 8011e34:	4928      	ldr	r1, [pc, #160]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e36:	4313      	orrs	r3, r2
 8011e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011e3a:	4b27      	ldr	r3, [pc, #156]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e3e:	4a26      	ldr	r2, [pc, #152]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011e46:	4b24      	ldr	r3, [pc, #144]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e4a:	4b24      	ldr	r3, [pc, #144]	@ (8011edc <RCCEx_PLL3_Config+0x160>)
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	69d2      	ldr	r2, [r2, #28]
 8011e52:	00d2      	lsls	r2, r2, #3
 8011e54:	4920      	ldr	r1, [pc, #128]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e56:	4313      	orrs	r3, r2
 8011e58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d106      	bne.n	8011e7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e70:	4a19      	ldr	r2, [pc, #100]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8011e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e78:	e00f      	b.n	8011e9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d106      	bne.n	8011e8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011e80:	4b15      	ldr	r3, [pc, #84]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e84:	4a14      	ldr	r2, [pc, #80]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e8c:	e005      	b.n	8011e9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011e8e:	4b12      	ldr	r3, [pc, #72]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e92:	4a11      	ldr	r2, [pc, #68]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011e98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ea6:	f7f5 fabb 	bl	8007420 <HAL_GetTick>
 8011eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011eac:	e008      	b.n	8011ec0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011eae:	f7f5 fab7 	bl	8007420 <HAL_GetTick>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	2b02      	cmp	r3, #2
 8011eba:	d901      	bls.n	8011ec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011ebc:	2303      	movs	r3, #3
 8011ebe:	e006      	b.n	8011ece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011ec0:	4b05      	ldr	r3, [pc, #20]	@ (8011ed8 <RCCEx_PLL3_Config+0x15c>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d0f0      	beq.n	8011eae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3710      	adds	r7, #16
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	58024400 	.word	0x58024400
 8011edc:	ffff0007 	.word	0xffff0007

08011ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d101      	bne.n	8011ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e049      	b.n	8011f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d106      	bne.n	8011f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7f4 feee 	bl	8006ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2202      	movs	r2, #2
 8011f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681a      	ldr	r2, [r3, #0]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3304      	adds	r3, #4
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	4610      	mov	r0, r2
 8011f20:	f000 fb9a 	bl	8012658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2201      	movs	r2, #1
 8011f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2201      	movs	r2, #1
 8011f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2201      	movs	r2, #1
 8011f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2201      	movs	r2, #1
 8011f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2201      	movs	r2, #1
 8011f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3708      	adds	r7, #8
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d001      	beq.n	8011fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e056      	b.n	8012056 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2202      	movs	r2, #2
 8011fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8012064 <HAL_TIM_Base_Start+0xd4>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d02c      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011fc2:	d027      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4a27      	ldr	r2, [pc, #156]	@ (8012068 <HAL_TIM_Base_Start+0xd8>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d022      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4a26      	ldr	r2, [pc, #152]	@ (801206c <HAL_TIM_Base_Start+0xdc>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d01d      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4a24      	ldr	r2, [pc, #144]	@ (8012070 <HAL_TIM_Base_Start+0xe0>)
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	d018      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4a23      	ldr	r2, [pc, #140]	@ (8012074 <HAL_TIM_Base_Start+0xe4>)
 8011fe8:	4293      	cmp	r3, r2
 8011fea:	d013      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	4a21      	ldr	r2, [pc, #132]	@ (8012078 <HAL_TIM_Base_Start+0xe8>)
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	d00e      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a20      	ldr	r2, [pc, #128]	@ (801207c <HAL_TIM_Base_Start+0xec>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d009      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a1e      	ldr	r2, [pc, #120]	@ (8012080 <HAL_TIM_Base_Start+0xf0>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d004      	beq.n	8012014 <HAL_TIM_Base_Start+0x84>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	4a1d      	ldr	r2, [pc, #116]	@ (8012084 <HAL_TIM_Base_Start+0xf4>)
 8012010:	4293      	cmp	r3, r2
 8012012:	d115      	bne.n	8012040 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	689a      	ldr	r2, [r3, #8]
 801201a:	4b1b      	ldr	r3, [pc, #108]	@ (8012088 <HAL_TIM_Base_Start+0xf8>)
 801201c:	4013      	ands	r3, r2
 801201e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2b06      	cmp	r3, #6
 8012024:	d015      	beq.n	8012052 <HAL_TIM_Base_Start+0xc2>
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801202c:	d011      	beq.n	8012052 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f042 0201 	orr.w	r2, r2, #1
 801203c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801203e:	e008      	b.n	8012052 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f042 0201 	orr.w	r2, r2, #1
 801204e:	601a      	str	r2, [r3, #0]
 8012050:	e000      	b.n	8012054 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012054:	2300      	movs	r3, #0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3714      	adds	r7, #20
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	40010000 	.word	0x40010000
 8012068:	40000400 	.word	0x40000400
 801206c:	40000800 	.word	0x40000800
 8012070:	40000c00 	.word	0x40000c00
 8012074:	40010400 	.word	0x40010400
 8012078:	40001800 	.word	0x40001800
 801207c:	40014000 	.word	0x40014000
 8012080:	4000e000 	.word	0x4000e000
 8012084:	4000e400 	.word	0x4000e400
 8012088:	00010007 	.word	0x00010007

0801208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801209a:	b2db      	uxtb	r3, r3
 801209c:	2b01      	cmp	r3, #1
 801209e:	d001      	beq.n	80120a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80120a0:	2301      	movs	r3, #1
 80120a2:	e05e      	b.n	8012162 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2202      	movs	r2, #2
 80120a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68da      	ldr	r2, [r3, #12]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f042 0201 	orr.w	r2, r2, #1
 80120ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a2b      	ldr	r2, [pc, #172]	@ (8012170 <HAL_TIM_Base_Start_IT+0xe4>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d02c      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120ce:	d027      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4a27      	ldr	r2, [pc, #156]	@ (8012174 <HAL_TIM_Base_Start_IT+0xe8>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d022      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4a26      	ldr	r2, [pc, #152]	@ (8012178 <HAL_TIM_Base_Start_IT+0xec>)
 80120e0:	4293      	cmp	r3, r2
 80120e2:	d01d      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	4a24      	ldr	r2, [pc, #144]	@ (801217c <HAL_TIM_Base_Start_IT+0xf0>)
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d018      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4a23      	ldr	r2, [pc, #140]	@ (8012180 <HAL_TIM_Base_Start_IT+0xf4>)
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d013      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a21      	ldr	r2, [pc, #132]	@ (8012184 <HAL_TIM_Base_Start_IT+0xf8>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d00e      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a20      	ldr	r2, [pc, #128]	@ (8012188 <HAL_TIM_Base_Start_IT+0xfc>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d009      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a1e      	ldr	r2, [pc, #120]	@ (801218c <HAL_TIM_Base_Start_IT+0x100>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d004      	beq.n	8012120 <HAL_TIM_Base_Start_IT+0x94>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4a1d      	ldr	r2, [pc, #116]	@ (8012190 <HAL_TIM_Base_Start_IT+0x104>)
 801211c:	4293      	cmp	r3, r2
 801211e:	d115      	bne.n	801214c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	689a      	ldr	r2, [r3, #8]
 8012126:	4b1b      	ldr	r3, [pc, #108]	@ (8012194 <HAL_TIM_Base_Start_IT+0x108>)
 8012128:	4013      	ands	r3, r2
 801212a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2b06      	cmp	r3, #6
 8012130:	d015      	beq.n	801215e <HAL_TIM_Base_Start_IT+0xd2>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012138:	d011      	beq.n	801215e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f042 0201 	orr.w	r2, r2, #1
 8012148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801214a:	e008      	b.n	801215e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f042 0201 	orr.w	r2, r2, #1
 801215a:	601a      	str	r2, [r3, #0]
 801215c:	e000      	b.n	8012160 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801215e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3714      	adds	r7, #20
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr
 801216e:	bf00      	nop
 8012170:	40010000 	.word	0x40010000
 8012174:	40000400 	.word	0x40000400
 8012178:	40000800 	.word	0x40000800
 801217c:	40000c00 	.word	0x40000c00
 8012180:	40010400 	.word	0x40010400
 8012184:	40001800 	.word	0x40001800
 8012188:	40014000 	.word	0x40014000
 801218c:	4000e000 	.word	0x4000e000
 8012190:	4000e400 	.word	0x4000e400
 8012194:	00010007 	.word	0x00010007

08012198 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	68da      	ldr	r2, [r3, #12]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f022 0201 	bic.w	r2, r2, #1
 80121ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	6a1a      	ldr	r2, [r3, #32]
 80121b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80121ba:	4013      	ands	r3, r2
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d10f      	bne.n	80121e0 <HAL_TIM_Base_Stop_IT+0x48>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	6a1a      	ldr	r2, [r3, #32]
 80121c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80121ca:	4013      	ands	r3, r2
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d107      	bne.n	80121e0 <HAL_TIM_Base_Stop_IT+0x48>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	f022 0201 	bic.w	r2, r2, #1
 80121de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2201      	movs	r2, #1
 80121e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80121e8:	2300      	movs	r3, #0
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b084      	sub	sp, #16
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	f003 0302 	and.w	r3, r3, #2
 8012214:	2b00      	cmp	r3, #0
 8012216:	d020      	beq.n	801225a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f003 0302 	and.w	r3, r3, #2
 801221e:	2b00      	cmp	r3, #0
 8012220:	d01b      	beq.n	801225a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f06f 0202 	mvn.w	r2, #2
 801222a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	699b      	ldr	r3, [r3, #24]
 8012238:	f003 0303 	and.w	r3, r3, #3
 801223c:	2b00      	cmp	r3, #0
 801223e:	d003      	beq.n	8012248 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 f9eb 	bl	801261c <HAL_TIM_IC_CaptureCallback>
 8012246:	e005      	b.n	8012254 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 f9dd 	bl	8012608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 f9ee 	bl	8012630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	f003 0304 	and.w	r3, r3, #4
 8012260:	2b00      	cmp	r3, #0
 8012262:	d020      	beq.n	80122a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f003 0304 	and.w	r3, r3, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	d01b      	beq.n	80122a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f06f 0204 	mvn.w	r2, #4
 8012276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2202      	movs	r2, #2
 801227c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	699b      	ldr	r3, [r3, #24]
 8012284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012288:	2b00      	cmp	r3, #0
 801228a:	d003      	beq.n	8012294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 f9c5 	bl	801261c <HAL_TIM_IC_CaptureCallback>
 8012292:	e005      	b.n	80122a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 f9b7 	bl	8012608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 f9c8 	bl	8012630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	f003 0308 	and.w	r3, r3, #8
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d020      	beq.n	80122f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f003 0308 	and.w	r3, r3, #8
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d01b      	beq.n	80122f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	f06f 0208 	mvn.w	r2, #8
 80122c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2204      	movs	r2, #4
 80122c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	f003 0303 	and.w	r3, r3, #3
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d003      	beq.n	80122e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 f99f 	bl	801261c <HAL_TIM_IC_CaptureCallback>
 80122de:	e005      	b.n	80122ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f991 	bl	8012608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 f9a2 	bl	8012630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2200      	movs	r2, #0
 80122f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	f003 0310 	and.w	r3, r3, #16
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d020      	beq.n	801233e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f003 0310 	and.w	r3, r3, #16
 8012302:	2b00      	cmp	r3, #0
 8012304:	d01b      	beq.n	801233e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	f06f 0210 	mvn.w	r2, #16
 801230e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2208      	movs	r2, #8
 8012314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	69db      	ldr	r3, [r3, #28]
 801231c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012320:	2b00      	cmp	r3, #0
 8012322:	d003      	beq.n	801232c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 f979 	bl	801261c <HAL_TIM_IC_CaptureCallback>
 801232a:	e005      	b.n	8012338 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 f96b 	bl	8012608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f97c 	bl	8012630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	f003 0301 	and.w	r3, r3, #1
 8012344:	2b00      	cmp	r3, #0
 8012346:	d00c      	beq.n	8012362 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d007      	beq.n	8012362 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f06f 0201 	mvn.w	r2, #1
 801235a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 f949 	bl	80125f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012368:	2b00      	cmp	r3, #0
 801236a:	d104      	bne.n	8012376 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00c      	beq.n	8012390 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801237c:	2b00      	cmp	r3, #0
 801237e:	d007      	beq.n	8012390 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fb5a 	bl	8012a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00c      	beq.n	80123b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d007      	beq.n	80123b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80123ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 fb52 	bl	8012a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00c      	beq.n	80123d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d007      	beq.n	80123d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80123d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f000 f936 	bl	8012644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	f003 0320 	and.w	r3, r3, #32
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00c      	beq.n	80123fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f003 0320 	and.w	r3, r3, #32
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d007      	beq.n	80123fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f06f 0220 	mvn.w	r2, #32
 80123f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fb1a 	bl	8012a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80123fc:	bf00      	nop
 80123fe:	3710      	adds	r7, #16
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801240e:	2300      	movs	r3, #0
 8012410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012418:	2b01      	cmp	r3, #1
 801241a:	d101      	bne.n	8012420 <HAL_TIM_ConfigClockSource+0x1c>
 801241c:	2302      	movs	r3, #2
 801241e:	e0dc      	b.n	80125da <HAL_TIM_ConfigClockSource+0x1d6>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2201      	movs	r2, #1
 8012424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2202      	movs	r2, #2
 801242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012438:	68ba      	ldr	r2, [r7, #8]
 801243a:	4b6a      	ldr	r3, [pc, #424]	@ (80125e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801243c:	4013      	ands	r3, r2
 801243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	68ba      	ldr	r2, [r7, #8]
 801244e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	4a64      	ldr	r2, [pc, #400]	@ (80125e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012456:	4293      	cmp	r3, r2
 8012458:	f000 80a9 	beq.w	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 801245c:	4a62      	ldr	r2, [pc, #392]	@ (80125e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801245e:	4293      	cmp	r3, r2
 8012460:	f200 80ae 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012464:	4a61      	ldr	r2, [pc, #388]	@ (80125ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8012466:	4293      	cmp	r3, r2
 8012468:	f000 80a1 	beq.w	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 801246c:	4a5f      	ldr	r2, [pc, #380]	@ (80125ec <HAL_TIM_ConfigClockSource+0x1e8>)
 801246e:	4293      	cmp	r3, r2
 8012470:	f200 80a6 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012474:	4a5e      	ldr	r2, [pc, #376]	@ (80125f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012476:	4293      	cmp	r3, r2
 8012478:	f000 8099 	beq.w	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 801247c:	4a5c      	ldr	r2, [pc, #368]	@ (80125f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801247e:	4293      	cmp	r3, r2
 8012480:	f200 809e 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012484:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012488:	f000 8091 	beq.w	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 801248c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012490:	f200 8096 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8012494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012498:	f000 8089 	beq.w	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 801249c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80124a0:	f200 808e 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80124a8:	d03e      	beq.n	8012528 <HAL_TIM_ConfigClockSource+0x124>
 80124aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80124ae:	f200 8087 	bhi.w	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124b6:	f000 8086 	beq.w	80125c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80124ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124be:	d87f      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124c0:	2b70      	cmp	r3, #112	@ 0x70
 80124c2:	d01a      	beq.n	80124fa <HAL_TIM_ConfigClockSource+0xf6>
 80124c4:	2b70      	cmp	r3, #112	@ 0x70
 80124c6:	d87b      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124c8:	2b60      	cmp	r3, #96	@ 0x60
 80124ca:	d050      	beq.n	801256e <HAL_TIM_ConfigClockSource+0x16a>
 80124cc:	2b60      	cmp	r3, #96	@ 0x60
 80124ce:	d877      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124d0:	2b50      	cmp	r3, #80	@ 0x50
 80124d2:	d03c      	beq.n	801254e <HAL_TIM_ConfigClockSource+0x14a>
 80124d4:	2b50      	cmp	r3, #80	@ 0x50
 80124d6:	d873      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124d8:	2b40      	cmp	r3, #64	@ 0x40
 80124da:	d058      	beq.n	801258e <HAL_TIM_ConfigClockSource+0x18a>
 80124dc:	2b40      	cmp	r3, #64	@ 0x40
 80124de:	d86f      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124e0:	2b30      	cmp	r3, #48	@ 0x30
 80124e2:	d064      	beq.n	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 80124e4:	2b30      	cmp	r3, #48	@ 0x30
 80124e6:	d86b      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124e8:	2b20      	cmp	r3, #32
 80124ea:	d060      	beq.n	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 80124ec:	2b20      	cmp	r3, #32
 80124ee:	d867      	bhi.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d05c      	beq.n	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 80124f4:	2b10      	cmp	r3, #16
 80124f6:	d05a      	beq.n	80125ae <HAL_TIM_ConfigClockSource+0x1aa>
 80124f8:	e062      	b.n	80125c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801250a:	f000 f9d5 	bl	80128b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801251c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	609a      	str	r2, [r3, #8]
      break;
 8012526:	e04f      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012538:	f000 f9be 	bl	80128b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	689a      	ldr	r2, [r3, #8]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801254a:	609a      	str	r2, [r3, #8]
      break;
 801254c:	e03c      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801255a:	461a      	mov	r2, r3
 801255c:	f000 f92e 	bl	80127bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2150      	movs	r1, #80	@ 0x50
 8012566:	4618      	mov	r0, r3
 8012568:	f000 f988 	bl	801287c <TIM_ITRx_SetConfig>
      break;
 801256c:	e02c      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801257a:	461a      	mov	r2, r3
 801257c:	f000 f94d 	bl	801281a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2160      	movs	r1, #96	@ 0x60
 8012586:	4618      	mov	r0, r3
 8012588:	f000 f978 	bl	801287c <TIM_ITRx_SetConfig>
      break;
 801258c:	e01c      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801259a:	461a      	mov	r2, r3
 801259c:	f000 f90e 	bl	80127bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2140      	movs	r1, #64	@ 0x40
 80125a6:	4618      	mov	r0, r3
 80125a8:	f000 f968 	bl	801287c <TIM_ITRx_SetConfig>
      break;
 80125ac:	e00c      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4619      	mov	r1, r3
 80125b8:	4610      	mov	r0, r2
 80125ba:	f000 f95f 	bl	801287c <TIM_ITRx_SetConfig>
      break;
 80125be:	e003      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80125c0:	2301      	movs	r3, #1
 80125c2:	73fb      	strb	r3, [r7, #15]
      break;
 80125c4:	e000      	b.n	80125c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80125c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	ffceff88 	.word	0xffceff88
 80125e8:	00100040 	.word	0x00100040
 80125ec:	00100030 	.word	0x00100030
 80125f0:	00100020 	.word	0x00100020

080125f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80125fc:	bf00      	nop
 80125fe:	370c      	adds	r7, #12
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012610:	bf00      	nop
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012624:	bf00      	nop
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801264c:	bf00      	nop
 801264e:	370c      	adds	r7, #12
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr

08012658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4a4a      	ldr	r2, [pc, #296]	@ (8012794 <TIM_Base_SetConfig+0x13c>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d013      	beq.n	8012698 <TIM_Base_SetConfig+0x40>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012676:	d00f      	beq.n	8012698 <TIM_Base_SetConfig+0x40>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4a47      	ldr	r2, [pc, #284]	@ (8012798 <TIM_Base_SetConfig+0x140>)
 801267c:	4293      	cmp	r3, r2
 801267e:	d00b      	beq.n	8012698 <TIM_Base_SetConfig+0x40>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4a46      	ldr	r2, [pc, #280]	@ (801279c <TIM_Base_SetConfig+0x144>)
 8012684:	4293      	cmp	r3, r2
 8012686:	d007      	beq.n	8012698 <TIM_Base_SetConfig+0x40>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4a45      	ldr	r2, [pc, #276]	@ (80127a0 <TIM_Base_SetConfig+0x148>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d003      	beq.n	8012698 <TIM_Base_SetConfig+0x40>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	4a44      	ldr	r2, [pc, #272]	@ (80127a4 <TIM_Base_SetConfig+0x14c>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d108      	bne.n	80126aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801269e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4a39      	ldr	r2, [pc, #228]	@ (8012794 <TIM_Base_SetConfig+0x13c>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d027      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80126b8:	d023      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a36      	ldr	r2, [pc, #216]	@ (8012798 <TIM_Base_SetConfig+0x140>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d01f      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	4a35      	ldr	r2, [pc, #212]	@ (801279c <TIM_Base_SetConfig+0x144>)
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d01b      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4a34      	ldr	r2, [pc, #208]	@ (80127a0 <TIM_Base_SetConfig+0x148>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d017      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4a33      	ldr	r2, [pc, #204]	@ (80127a4 <TIM_Base_SetConfig+0x14c>)
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d013      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4a32      	ldr	r2, [pc, #200]	@ (80127a8 <TIM_Base_SetConfig+0x150>)
 80126de:	4293      	cmp	r3, r2
 80126e0:	d00f      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4a31      	ldr	r2, [pc, #196]	@ (80127ac <TIM_Base_SetConfig+0x154>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d00b      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4a30      	ldr	r2, [pc, #192]	@ (80127b0 <TIM_Base_SetConfig+0x158>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d007      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4a2f      	ldr	r2, [pc, #188]	@ (80127b4 <TIM_Base_SetConfig+0x15c>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d003      	beq.n	8012702 <TIM_Base_SetConfig+0xaa>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	4a2e      	ldr	r2, [pc, #184]	@ (80127b8 <TIM_Base_SetConfig+0x160>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d108      	bne.n	8012714 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	68fa      	ldr	r2, [r7, #12]
 8012710:	4313      	orrs	r3, r2
 8012712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	695b      	ldr	r3, [r3, #20]
 801271e:	4313      	orrs	r3, r2
 8012720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	689a      	ldr	r2, [r3, #8]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a16      	ldr	r2, [pc, #88]	@ (8012794 <TIM_Base_SetConfig+0x13c>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d00f      	beq.n	8012760 <TIM_Base_SetConfig+0x108>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a18      	ldr	r2, [pc, #96]	@ (80127a4 <TIM_Base_SetConfig+0x14c>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d00b      	beq.n	8012760 <TIM_Base_SetConfig+0x108>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a17      	ldr	r2, [pc, #92]	@ (80127a8 <TIM_Base_SetConfig+0x150>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d007      	beq.n	8012760 <TIM_Base_SetConfig+0x108>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a16      	ldr	r2, [pc, #88]	@ (80127ac <TIM_Base_SetConfig+0x154>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d003      	beq.n	8012760 <TIM_Base_SetConfig+0x108>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a15      	ldr	r2, [pc, #84]	@ (80127b0 <TIM_Base_SetConfig+0x158>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d103      	bne.n	8012768 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	691a      	ldr	r2, [r3, #16]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2201      	movs	r2, #1
 801276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	691b      	ldr	r3, [r3, #16]
 8012772:	f003 0301 	and.w	r3, r3, #1
 8012776:	2b01      	cmp	r3, #1
 8012778:	d105      	bne.n	8012786 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	f023 0201 	bic.w	r2, r3, #1
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	611a      	str	r2, [r3, #16]
  }
}
 8012786:	bf00      	nop
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	40010000 	.word	0x40010000
 8012798:	40000400 	.word	0x40000400
 801279c:	40000800 	.word	0x40000800
 80127a0:	40000c00 	.word	0x40000c00
 80127a4:	40010400 	.word	0x40010400
 80127a8:	40014000 	.word	0x40014000
 80127ac:	40014400 	.word	0x40014400
 80127b0:	40014800 	.word	0x40014800
 80127b4:	4000e000 	.word	0x4000e000
 80127b8:	4000e400 	.word	0x4000e400

080127bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80127bc:	b480      	push	{r7}
 80127be:	b087      	sub	sp, #28
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	60f8      	str	r0, [r7, #12]
 80127c4:	60b9      	str	r1, [r7, #8]
 80127c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	f023 0201 	bic.w	r2, r3, #1
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80127e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	011b      	lsls	r3, r3, #4
 80127ec:	693a      	ldr	r2, [r7, #16]
 80127ee:	4313      	orrs	r3, r2
 80127f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	f023 030a 	bic.w	r3, r3, #10
 80127f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80127fa:	697a      	ldr	r2, [r7, #20]
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	4313      	orrs	r3, r2
 8012800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	693a      	ldr	r2, [r7, #16]
 8012806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	621a      	str	r2, [r3, #32]
}
 801280e:	bf00      	nop
 8012810:	371c      	adds	r7, #28
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr

0801281a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801281a:	b480      	push	{r7}
 801281c:	b087      	sub	sp, #28
 801281e:	af00      	add	r7, sp, #0
 8012820:	60f8      	str	r0, [r7, #12]
 8012822:	60b9      	str	r1, [r7, #8]
 8012824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	6a1b      	ldr	r3, [r3, #32]
 801282a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6a1b      	ldr	r3, [r3, #32]
 8012830:	f023 0210 	bic.w	r2, r3, #16
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	699b      	ldr	r3, [r3, #24]
 801283c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	031b      	lsls	r3, r3, #12
 801284a:	693a      	ldr	r2, [r7, #16]
 801284c:	4313      	orrs	r3, r2
 801284e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012856:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	011b      	lsls	r3, r3, #4
 801285c:	697a      	ldr	r2, [r7, #20]
 801285e:	4313      	orrs	r3, r2
 8012860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	693a      	ldr	r2, [r7, #16]
 8012866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	697a      	ldr	r2, [r7, #20]
 801286c:	621a      	str	r2, [r3, #32]
}
 801286e:	bf00      	nop
 8012870:	371c      	adds	r7, #28
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr
	...

0801287c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801287c:	b480      	push	{r7}
 801287e:	b085      	sub	sp, #20
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	4b09      	ldr	r3, [pc, #36]	@ (80128b4 <TIM_ITRx_SetConfig+0x38>)
 8012890:	4013      	ands	r3, r2
 8012892:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012894:	683a      	ldr	r2, [r7, #0]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	4313      	orrs	r3, r2
 801289a:	f043 0307 	orr.w	r3, r3, #7
 801289e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68fa      	ldr	r2, [r7, #12]
 80128a4:	609a      	str	r2, [r3, #8]
}
 80128a6:	bf00      	nop
 80128a8:	3714      	adds	r7, #20
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	ffcfff8f 	.word	0xffcfff8f

080128b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b087      	sub	sp, #28
 80128bc:	af00      	add	r7, sp, #0
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	689b      	ldr	r3, [r3, #8]
 80128ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80128d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	021a      	lsls	r2, r3, #8
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	431a      	orrs	r2, r3
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	4313      	orrs	r3, r2
 80128e0:	697a      	ldr	r2, [r7, #20]
 80128e2:	4313      	orrs	r3, r2
 80128e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	697a      	ldr	r2, [r7, #20]
 80128ea:	609a      	str	r2, [r3, #8]
}
 80128ec:	bf00      	nop
 80128ee:	371c      	adds	r7, #28
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80128f8:	b480      	push	{r7}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012908:	2b01      	cmp	r3, #1
 801290a:	d101      	bne.n	8012910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801290c:	2302      	movs	r3, #2
 801290e:	e077      	b.n	8012a00 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2201      	movs	r2, #1
 8012914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2202      	movs	r2, #2
 801291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4a35      	ldr	r2, [pc, #212]	@ (8012a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d004      	beq.n	8012944 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4a34      	ldr	r2, [pc, #208]	@ (8012a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d108      	bne.n	8012956 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801294a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	4313      	orrs	r3, r2
 8012954:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801295c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	68fa      	ldr	r2, [r7, #12]
 8012964:	4313      	orrs	r3, r2
 8012966:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	68fa      	ldr	r2, [r7, #12]
 801296e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4a25      	ldr	r2, [pc, #148]	@ (8012a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012976:	4293      	cmp	r3, r2
 8012978:	d02c      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012982:	d027      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a22      	ldr	r2, [pc, #136]	@ (8012a14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d022      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4a21      	ldr	r2, [pc, #132]	@ (8012a18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d01d      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	4a1f      	ldr	r2, [pc, #124]	@ (8012a1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801299e:	4293      	cmp	r3, r2
 80129a0:	d018      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4a1a      	ldr	r2, [pc, #104]	@ (8012a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d013      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a1b      	ldr	r2, [pc, #108]	@ (8012a20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d00e      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a1a      	ldr	r2, [pc, #104]	@ (8012a24 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d009      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4a18      	ldr	r2, [pc, #96]	@ (8012a28 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d004      	beq.n	80129d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a17      	ldr	r2, [pc, #92]	@ (8012a2c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d10c      	bne.n	80129ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80129da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	68ba      	ldr	r2, [r7, #8]
 80129e2:	4313      	orrs	r3, r2
 80129e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	68ba      	ldr	r2, [r7, #8]
 80129ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2201      	movs	r2, #1
 80129f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2200      	movs	r2, #0
 80129fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80129fe:	2300      	movs	r3, #0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3714      	adds	r7, #20
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	40010000 	.word	0x40010000
 8012a10:	40010400 	.word	0x40010400
 8012a14:	40000400 	.word	0x40000400
 8012a18:	40000800 	.word	0x40000800
 8012a1c:	40000c00 	.word	0x40000c00
 8012a20:	40001800 	.word	0x40001800
 8012a24:	40014000 	.word	0x40014000
 8012a28:	4000e000 	.word	0x4000e000
 8012a2c:	4000e400 	.word	0x4000e400

08012a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b083      	sub	sp, #12
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012a38:	bf00      	nop
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012a44:	b480      	push	{r7}
 8012a46:	b083      	sub	sp, #12
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012a4c:	bf00      	nop
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012a60:	bf00      	nop
 8012a62:	370c      	adds	r7, #12
 8012a64:	46bd      	mov	sp, r7
 8012a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6a:	4770      	bx	lr

08012a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d101      	bne.n	8012a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e042      	b.n	8012b04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d106      	bne.n	8012a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7f4 f97f 	bl	8006d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2224      	movs	r2, #36	@ 0x24
 8012a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f022 0201 	bic.w	r2, r2, #1
 8012aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f000 ffea 	bl	8013a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f000 f97b 	bl	8012db8 <UART_SetConfig>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b01      	cmp	r3, #1
 8012ac6:	d101      	bne.n	8012acc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e01b      	b.n	8012b04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	685a      	ldr	r2, [r3, #4]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	689a      	ldr	r2, [r3, #8]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f042 0201 	orr.w	r2, r2, #1
 8012afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f001 f869 	bl	8013bd4 <UART_CheckIdleState>
 8012b02:	4603      	mov	r3, r0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b08a      	sub	sp, #40	@ 0x28
 8012b10:	af02      	add	r7, sp, #8
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	603b      	str	r3, [r7, #0]
 8012b18:	4613      	mov	r3, r2
 8012b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012b22:	2b20      	cmp	r3, #32
 8012b24:	d17b      	bne.n	8012c1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <HAL_UART_Transmit+0x26>
 8012b2c:	88fb      	ldrh	r3, [r7, #6]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d101      	bne.n	8012b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012b32:	2301      	movs	r3, #1
 8012b34:	e074      	b.n	8012c20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2221      	movs	r2, #33	@ 0x21
 8012b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012b46:	f7f4 fc6b 	bl	8007420 <HAL_GetTick>
 8012b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	88fa      	ldrh	r2, [r7, #6]
 8012b50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	88fa      	ldrh	r2, [r7, #6]
 8012b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	689b      	ldr	r3, [r3, #8]
 8012b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b64:	d108      	bne.n	8012b78 <HAL_UART_Transmit+0x6c>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	691b      	ldr	r3, [r3, #16]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d104      	bne.n	8012b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	61bb      	str	r3, [r7, #24]
 8012b76:	e003      	b.n	8012b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012b80:	e030      	b.n	8012be4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2180      	movs	r1, #128	@ 0x80
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f001 f8cb 	bl	8013d28 <UART_WaitOnFlagUntilTimeout>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d005      	beq.n	8012ba4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2220      	movs	r2, #32
 8012b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	e03d      	b.n	8012c20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10b      	bne.n	8012bc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012bb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	3302      	adds	r3, #2
 8012bbe:	61bb      	str	r3, [r7, #24]
 8012bc0:	e007      	b.n	8012bd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	781a      	ldrb	r2, [r3, #0]
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	3b01      	subs	r3, #1
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d1c8      	bne.n	8012b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	9300      	str	r3, [sp, #0]
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	2140      	movs	r1, #64	@ 0x40
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f001 f894 	bl	8013d28 <UART_WaitOnFlagUntilTimeout>
 8012c00:	4603      	mov	r3, r0
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d005      	beq.n	8012c12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2220      	movs	r2, #32
 8012c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8012c0e:	2303      	movs	r3, #3
 8012c10:	e006      	b.n	8012c20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2220      	movs	r2, #32
 8012c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e000      	b.n	8012c20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012c1e:	2302      	movs	r3, #2
  }
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3720      	adds	r7, #32
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b08a      	sub	sp, #40	@ 0x28
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	4613      	mov	r3, r2
 8012c36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c3e:	2b20      	cmp	r3, #32
 8012c40:	f040 80b5 	bne.w	8012dae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d002      	beq.n	8012c50 <HAL_UART_Receive+0x28>
 8012c4a:	88fb      	ldrh	r3, [r7, #6]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d101      	bne.n	8012c54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012c50:	2301      	movs	r3, #1
 8012c52:	e0ad      	b.n	8012db0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2222      	movs	r2, #34	@ 0x22
 8012c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2200      	movs	r2, #0
 8012c68:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012c6a:	f7f4 fbd9 	bl	8007420 <HAL_GetTick>
 8012c6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	88fa      	ldrh	r2, [r7, #6]
 8012c74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	88fa      	ldrh	r2, [r7, #6]
 8012c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c88:	d10e      	bne.n	8012ca8 <HAL_UART_Receive+0x80>
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d105      	bne.n	8012c9e <HAL_UART_Receive+0x76>
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012c98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012c9c:	e02d      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	22ff      	movs	r2, #255	@ 0xff
 8012ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012ca6:	e028      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	689b      	ldr	r3, [r3, #8]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d10d      	bne.n	8012ccc <HAL_UART_Receive+0xa4>
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d104      	bne.n	8012cc2 <HAL_UART_Receive+0x9a>
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	22ff      	movs	r2, #255	@ 0xff
 8012cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012cc0:	e01b      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	227f      	movs	r2, #127	@ 0x7f
 8012cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012cca:	e016      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012cd4:	d10d      	bne.n	8012cf2 <HAL_UART_Receive+0xca>
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	691b      	ldr	r3, [r3, #16]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d104      	bne.n	8012ce8 <HAL_UART_Receive+0xc0>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	227f      	movs	r2, #127	@ 0x7f
 8012ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012ce6:	e008      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	223f      	movs	r2, #63	@ 0x3f
 8012cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8012cf0:	e003      	b.n	8012cfa <HAL_UART_Receive+0xd2>
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d0a:	d108      	bne.n	8012d1e <HAL_UART_Receive+0xf6>
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	691b      	ldr	r3, [r3, #16]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d104      	bne.n	8012d1e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8012d14:	2300      	movs	r3, #0
 8012d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	61bb      	str	r3, [r7, #24]
 8012d1c:	e003      	b.n	8012d26 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012d22:	2300      	movs	r3, #0
 8012d24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012d26:	e036      	b.n	8012d96 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	2120      	movs	r1, #32
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f000 fff8 	bl	8013d28 <UART_WaitOnFlagUntilTimeout>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d005      	beq.n	8012d4a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2220      	movs	r2, #32
 8012d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8012d46:	2303      	movs	r3, #3
 8012d48:	e032      	b.n	8012db0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d10c      	bne.n	8012d6a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	8a7b      	ldrh	r3, [r7, #18]
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	3302      	adds	r3, #2
 8012d66:	61bb      	str	r3, [r7, #24]
 8012d68:	e00c      	b.n	8012d84 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d70:	b2da      	uxtb	r2, r3
 8012d72:	8a7b      	ldrh	r3, [r7, #18]
 8012d74:	b2db      	uxtb	r3, r3
 8012d76:	4013      	ands	r3, r2
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	3301      	adds	r3, #1
 8012d82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1c2      	bne.n	8012d28 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2220      	movs	r2, #32
 8012da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8012daa:	2300      	movs	r3, #0
 8012dac:	e000      	b.n	8012db0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8012dae:	2302      	movs	r3, #2
  }
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3720      	adds	r7, #32
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012dbc:	b092      	sub	sp, #72	@ 0x48
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	689a      	ldr	r2, [r3, #8]
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	691b      	ldr	r3, [r3, #16]
 8012dd0:	431a      	orrs	r2, r3
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	695b      	ldr	r3, [r3, #20]
 8012dd6:	431a      	orrs	r2, r3
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	69db      	ldr	r3, [r3, #28]
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	4bbe      	ldr	r3, [pc, #760]	@ (80130e0 <UART_SetConfig+0x328>)
 8012de8:	4013      	ands	r3, r2
 8012dea:	697a      	ldr	r2, [r7, #20]
 8012dec:	6812      	ldr	r2, [r2, #0]
 8012dee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012df0:	430b      	orrs	r3, r1
 8012df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	68da      	ldr	r2, [r3, #12]
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	430a      	orrs	r2, r1
 8012e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	699b      	ldr	r3, [r3, #24]
 8012e0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4ab3      	ldr	r2, [pc, #716]	@ (80130e4 <UART_SetConfig+0x32c>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d004      	beq.n	8012e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	6a1b      	ldr	r3, [r3, #32]
 8012e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e20:	4313      	orrs	r3, r2
 8012e22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	689a      	ldr	r2, [r3, #8]
 8012e2a:	4baf      	ldr	r3, [pc, #700]	@ (80130e8 <UART_SetConfig+0x330>)
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	697a      	ldr	r2, [r7, #20]
 8012e30:	6812      	ldr	r2, [r2, #0]
 8012e32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e34:	430b      	orrs	r3, r1
 8012e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e3e:	f023 010f 	bic.w	r1, r3, #15
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	430a      	orrs	r2, r1
 8012e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4aa6      	ldr	r2, [pc, #664]	@ (80130ec <UART_SetConfig+0x334>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d177      	bne.n	8012f48 <UART_SetConfig+0x190>
 8012e58:	4ba5      	ldr	r3, [pc, #660]	@ (80130f0 <UART_SetConfig+0x338>)
 8012e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e60:	2b28      	cmp	r3, #40	@ 0x28
 8012e62:	d86d      	bhi.n	8012f40 <UART_SetConfig+0x188>
 8012e64:	a201      	add	r2, pc, #4	@ (adr r2, 8012e6c <UART_SetConfig+0xb4>)
 8012e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e6a:	bf00      	nop
 8012e6c:	08012f11 	.word	0x08012f11
 8012e70:	08012f41 	.word	0x08012f41
 8012e74:	08012f41 	.word	0x08012f41
 8012e78:	08012f41 	.word	0x08012f41
 8012e7c:	08012f41 	.word	0x08012f41
 8012e80:	08012f41 	.word	0x08012f41
 8012e84:	08012f41 	.word	0x08012f41
 8012e88:	08012f41 	.word	0x08012f41
 8012e8c:	08012f19 	.word	0x08012f19
 8012e90:	08012f41 	.word	0x08012f41
 8012e94:	08012f41 	.word	0x08012f41
 8012e98:	08012f41 	.word	0x08012f41
 8012e9c:	08012f41 	.word	0x08012f41
 8012ea0:	08012f41 	.word	0x08012f41
 8012ea4:	08012f41 	.word	0x08012f41
 8012ea8:	08012f41 	.word	0x08012f41
 8012eac:	08012f21 	.word	0x08012f21
 8012eb0:	08012f41 	.word	0x08012f41
 8012eb4:	08012f41 	.word	0x08012f41
 8012eb8:	08012f41 	.word	0x08012f41
 8012ebc:	08012f41 	.word	0x08012f41
 8012ec0:	08012f41 	.word	0x08012f41
 8012ec4:	08012f41 	.word	0x08012f41
 8012ec8:	08012f41 	.word	0x08012f41
 8012ecc:	08012f29 	.word	0x08012f29
 8012ed0:	08012f41 	.word	0x08012f41
 8012ed4:	08012f41 	.word	0x08012f41
 8012ed8:	08012f41 	.word	0x08012f41
 8012edc:	08012f41 	.word	0x08012f41
 8012ee0:	08012f41 	.word	0x08012f41
 8012ee4:	08012f41 	.word	0x08012f41
 8012ee8:	08012f41 	.word	0x08012f41
 8012eec:	08012f31 	.word	0x08012f31
 8012ef0:	08012f41 	.word	0x08012f41
 8012ef4:	08012f41 	.word	0x08012f41
 8012ef8:	08012f41 	.word	0x08012f41
 8012efc:	08012f41 	.word	0x08012f41
 8012f00:	08012f41 	.word	0x08012f41
 8012f04:	08012f41 	.word	0x08012f41
 8012f08:	08012f41 	.word	0x08012f41
 8012f0c:	08012f39 	.word	0x08012f39
 8012f10:	2301      	movs	r3, #1
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f16:	e326      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f18:	2304      	movs	r3, #4
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f1e:	e322      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f20:	2308      	movs	r3, #8
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f26:	e31e      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f28:	2310      	movs	r3, #16
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f2e:	e31a      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f30:	2320      	movs	r3, #32
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f36:	e316      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f38:	2340      	movs	r3, #64	@ 0x40
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3e:	e312      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f40:	2380      	movs	r3, #128	@ 0x80
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f46:	e30e      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4a69      	ldr	r2, [pc, #420]	@ (80130f4 <UART_SetConfig+0x33c>)
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	d130      	bne.n	8012fb4 <UART_SetConfig+0x1fc>
 8012f52:	4b67      	ldr	r3, [pc, #412]	@ (80130f0 <UART_SetConfig+0x338>)
 8012f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f56:	f003 0307 	and.w	r3, r3, #7
 8012f5a:	2b05      	cmp	r3, #5
 8012f5c:	d826      	bhi.n	8012fac <UART_SetConfig+0x1f4>
 8012f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f64 <UART_SetConfig+0x1ac>)
 8012f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f64:	08012f7d 	.word	0x08012f7d
 8012f68:	08012f85 	.word	0x08012f85
 8012f6c:	08012f8d 	.word	0x08012f8d
 8012f70:	08012f95 	.word	0x08012f95
 8012f74:	08012f9d 	.word	0x08012f9d
 8012f78:	08012fa5 	.word	0x08012fa5
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f82:	e2f0      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f84:	2304      	movs	r3, #4
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8a:	e2ec      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f8c:	2308      	movs	r3, #8
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f92:	e2e8      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f94:	2310      	movs	r3, #16
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f9a:	e2e4      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012f9c:	2320      	movs	r3, #32
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa2:	e2e0      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012fa4:	2340      	movs	r3, #64	@ 0x40
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012faa:	e2dc      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012fac:	2380      	movs	r3, #128	@ 0x80
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb2:	e2d8      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80130f8 <UART_SetConfig+0x340>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d130      	bne.n	8013020 <UART_SetConfig+0x268>
 8012fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80130f0 <UART_SetConfig+0x338>)
 8012fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fc2:	f003 0307 	and.w	r3, r3, #7
 8012fc6:	2b05      	cmp	r3, #5
 8012fc8:	d826      	bhi.n	8013018 <UART_SetConfig+0x260>
 8012fca:	a201      	add	r2, pc, #4	@ (adr r2, 8012fd0 <UART_SetConfig+0x218>)
 8012fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd0:	08012fe9 	.word	0x08012fe9
 8012fd4:	08012ff1 	.word	0x08012ff1
 8012fd8:	08012ff9 	.word	0x08012ff9
 8012fdc:	08013001 	.word	0x08013001
 8012fe0:	08013009 	.word	0x08013009
 8012fe4:	08013011 	.word	0x08013011
 8012fe8:	2300      	movs	r3, #0
 8012fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fee:	e2ba      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012ff0:	2304      	movs	r3, #4
 8012ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff6:	e2b6      	b.n	8013566 <UART_SetConfig+0x7ae>
 8012ff8:	2308      	movs	r3, #8
 8012ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffe:	e2b2      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013000:	2310      	movs	r3, #16
 8013002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013006:	e2ae      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013008:	2320      	movs	r3, #32
 801300a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801300e:	e2aa      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013010:	2340      	movs	r3, #64	@ 0x40
 8013012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013016:	e2a6      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013018:	2380      	movs	r3, #128	@ 0x80
 801301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801301e:	e2a2      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a35      	ldr	r2, [pc, #212]	@ (80130fc <UART_SetConfig+0x344>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d130      	bne.n	801308c <UART_SetConfig+0x2d4>
 801302a:	4b31      	ldr	r3, [pc, #196]	@ (80130f0 <UART_SetConfig+0x338>)
 801302c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801302e:	f003 0307 	and.w	r3, r3, #7
 8013032:	2b05      	cmp	r3, #5
 8013034:	d826      	bhi.n	8013084 <UART_SetConfig+0x2cc>
 8013036:	a201      	add	r2, pc, #4	@ (adr r2, 801303c <UART_SetConfig+0x284>)
 8013038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801303c:	08013055 	.word	0x08013055
 8013040:	0801305d 	.word	0x0801305d
 8013044:	08013065 	.word	0x08013065
 8013048:	0801306d 	.word	0x0801306d
 801304c:	08013075 	.word	0x08013075
 8013050:	0801307d 	.word	0x0801307d
 8013054:	2300      	movs	r3, #0
 8013056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801305a:	e284      	b.n	8013566 <UART_SetConfig+0x7ae>
 801305c:	2304      	movs	r3, #4
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013062:	e280      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013064:	2308      	movs	r3, #8
 8013066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801306a:	e27c      	b.n	8013566 <UART_SetConfig+0x7ae>
 801306c:	2310      	movs	r3, #16
 801306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013072:	e278      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013074:	2320      	movs	r3, #32
 8013076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801307a:	e274      	b.n	8013566 <UART_SetConfig+0x7ae>
 801307c:	2340      	movs	r3, #64	@ 0x40
 801307e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013082:	e270      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013084:	2380      	movs	r3, #128	@ 0x80
 8013086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801308a:	e26c      	b.n	8013566 <UART_SetConfig+0x7ae>
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a1b      	ldr	r2, [pc, #108]	@ (8013100 <UART_SetConfig+0x348>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d142      	bne.n	801311c <UART_SetConfig+0x364>
 8013096:	4b16      	ldr	r3, [pc, #88]	@ (80130f0 <UART_SetConfig+0x338>)
 8013098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801309a:	f003 0307 	and.w	r3, r3, #7
 801309e:	2b05      	cmp	r3, #5
 80130a0:	d838      	bhi.n	8013114 <UART_SetConfig+0x35c>
 80130a2:	a201      	add	r2, pc, #4	@ (adr r2, 80130a8 <UART_SetConfig+0x2f0>)
 80130a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a8:	080130c1 	.word	0x080130c1
 80130ac:	080130c9 	.word	0x080130c9
 80130b0:	080130d1 	.word	0x080130d1
 80130b4:	080130d9 	.word	0x080130d9
 80130b8:	08013105 	.word	0x08013105
 80130bc:	0801310d 	.word	0x0801310d
 80130c0:	2300      	movs	r3, #0
 80130c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130c6:	e24e      	b.n	8013566 <UART_SetConfig+0x7ae>
 80130c8:	2304      	movs	r3, #4
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ce:	e24a      	b.n	8013566 <UART_SetConfig+0x7ae>
 80130d0:	2308      	movs	r3, #8
 80130d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d6:	e246      	b.n	8013566 <UART_SetConfig+0x7ae>
 80130d8:	2310      	movs	r3, #16
 80130da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130de:	e242      	b.n	8013566 <UART_SetConfig+0x7ae>
 80130e0:	cfff69f3 	.word	0xcfff69f3
 80130e4:	58000c00 	.word	0x58000c00
 80130e8:	11fff4ff 	.word	0x11fff4ff
 80130ec:	40011000 	.word	0x40011000
 80130f0:	58024400 	.word	0x58024400
 80130f4:	40004400 	.word	0x40004400
 80130f8:	40004800 	.word	0x40004800
 80130fc:	40004c00 	.word	0x40004c00
 8013100:	40005000 	.word	0x40005000
 8013104:	2320      	movs	r3, #32
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801310a:	e22c      	b.n	8013566 <UART_SetConfig+0x7ae>
 801310c:	2340      	movs	r3, #64	@ 0x40
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013112:	e228      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013114:	2380      	movs	r3, #128	@ 0x80
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801311a:	e224      	b.n	8013566 <UART_SetConfig+0x7ae>
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4ab1      	ldr	r2, [pc, #708]	@ (80133e8 <UART_SetConfig+0x630>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d176      	bne.n	8013214 <UART_SetConfig+0x45c>
 8013126:	4bb1      	ldr	r3, [pc, #708]	@ (80133ec <UART_SetConfig+0x634>)
 8013128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801312a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801312e:	2b28      	cmp	r3, #40	@ 0x28
 8013130:	d86c      	bhi.n	801320c <UART_SetConfig+0x454>
 8013132:	a201      	add	r2, pc, #4	@ (adr r2, 8013138 <UART_SetConfig+0x380>)
 8013134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013138:	080131dd 	.word	0x080131dd
 801313c:	0801320d 	.word	0x0801320d
 8013140:	0801320d 	.word	0x0801320d
 8013144:	0801320d 	.word	0x0801320d
 8013148:	0801320d 	.word	0x0801320d
 801314c:	0801320d 	.word	0x0801320d
 8013150:	0801320d 	.word	0x0801320d
 8013154:	0801320d 	.word	0x0801320d
 8013158:	080131e5 	.word	0x080131e5
 801315c:	0801320d 	.word	0x0801320d
 8013160:	0801320d 	.word	0x0801320d
 8013164:	0801320d 	.word	0x0801320d
 8013168:	0801320d 	.word	0x0801320d
 801316c:	0801320d 	.word	0x0801320d
 8013170:	0801320d 	.word	0x0801320d
 8013174:	0801320d 	.word	0x0801320d
 8013178:	080131ed 	.word	0x080131ed
 801317c:	0801320d 	.word	0x0801320d
 8013180:	0801320d 	.word	0x0801320d
 8013184:	0801320d 	.word	0x0801320d
 8013188:	0801320d 	.word	0x0801320d
 801318c:	0801320d 	.word	0x0801320d
 8013190:	0801320d 	.word	0x0801320d
 8013194:	0801320d 	.word	0x0801320d
 8013198:	080131f5 	.word	0x080131f5
 801319c:	0801320d 	.word	0x0801320d
 80131a0:	0801320d 	.word	0x0801320d
 80131a4:	0801320d 	.word	0x0801320d
 80131a8:	0801320d 	.word	0x0801320d
 80131ac:	0801320d 	.word	0x0801320d
 80131b0:	0801320d 	.word	0x0801320d
 80131b4:	0801320d 	.word	0x0801320d
 80131b8:	080131fd 	.word	0x080131fd
 80131bc:	0801320d 	.word	0x0801320d
 80131c0:	0801320d 	.word	0x0801320d
 80131c4:	0801320d 	.word	0x0801320d
 80131c8:	0801320d 	.word	0x0801320d
 80131cc:	0801320d 	.word	0x0801320d
 80131d0:	0801320d 	.word	0x0801320d
 80131d4:	0801320d 	.word	0x0801320d
 80131d8:	08013205 	.word	0x08013205
 80131dc:	2301      	movs	r3, #1
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131e2:	e1c0      	b.n	8013566 <UART_SetConfig+0x7ae>
 80131e4:	2304      	movs	r3, #4
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ea:	e1bc      	b.n	8013566 <UART_SetConfig+0x7ae>
 80131ec:	2308      	movs	r3, #8
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131f2:	e1b8      	b.n	8013566 <UART_SetConfig+0x7ae>
 80131f4:	2310      	movs	r3, #16
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131fa:	e1b4      	b.n	8013566 <UART_SetConfig+0x7ae>
 80131fc:	2320      	movs	r3, #32
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013202:	e1b0      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013204:	2340      	movs	r3, #64	@ 0x40
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801320a:	e1ac      	b.n	8013566 <UART_SetConfig+0x7ae>
 801320c:	2380      	movs	r3, #128	@ 0x80
 801320e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013212:	e1a8      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a75      	ldr	r2, [pc, #468]	@ (80133f0 <UART_SetConfig+0x638>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d130      	bne.n	8013280 <UART_SetConfig+0x4c8>
 801321e:	4b73      	ldr	r3, [pc, #460]	@ (80133ec <UART_SetConfig+0x634>)
 8013220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013222:	f003 0307 	and.w	r3, r3, #7
 8013226:	2b05      	cmp	r3, #5
 8013228:	d826      	bhi.n	8013278 <UART_SetConfig+0x4c0>
 801322a:	a201      	add	r2, pc, #4	@ (adr r2, 8013230 <UART_SetConfig+0x478>)
 801322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013230:	08013249 	.word	0x08013249
 8013234:	08013251 	.word	0x08013251
 8013238:	08013259 	.word	0x08013259
 801323c:	08013261 	.word	0x08013261
 8013240:	08013269 	.word	0x08013269
 8013244:	08013271 	.word	0x08013271
 8013248:	2300      	movs	r3, #0
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801324e:	e18a      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013250:	2304      	movs	r3, #4
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013256:	e186      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013258:	2308      	movs	r3, #8
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801325e:	e182      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013260:	2310      	movs	r3, #16
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013266:	e17e      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013268:	2320      	movs	r3, #32
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801326e:	e17a      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013270:	2340      	movs	r3, #64	@ 0x40
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013276:	e176      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013278:	2380      	movs	r3, #128	@ 0x80
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801327e:	e172      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	4a5b      	ldr	r2, [pc, #364]	@ (80133f4 <UART_SetConfig+0x63c>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d130      	bne.n	80132ec <UART_SetConfig+0x534>
 801328a:	4b58      	ldr	r3, [pc, #352]	@ (80133ec <UART_SetConfig+0x634>)
 801328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801328e:	f003 0307 	and.w	r3, r3, #7
 8013292:	2b05      	cmp	r3, #5
 8013294:	d826      	bhi.n	80132e4 <UART_SetConfig+0x52c>
 8013296:	a201      	add	r2, pc, #4	@ (adr r2, 801329c <UART_SetConfig+0x4e4>)
 8013298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801329c:	080132b5 	.word	0x080132b5
 80132a0:	080132bd 	.word	0x080132bd
 80132a4:	080132c5 	.word	0x080132c5
 80132a8:	080132cd 	.word	0x080132cd
 80132ac:	080132d5 	.word	0x080132d5
 80132b0:	080132dd 	.word	0x080132dd
 80132b4:	2300      	movs	r3, #0
 80132b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ba:	e154      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132bc:	2304      	movs	r3, #4
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132c2:	e150      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132c4:	2308      	movs	r3, #8
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ca:	e14c      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132cc:	2310      	movs	r3, #16
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132d2:	e148      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132d4:	2320      	movs	r3, #32
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132da:	e144      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132dc:	2340      	movs	r3, #64	@ 0x40
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132e2:	e140      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132e4:	2380      	movs	r3, #128	@ 0x80
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ea:	e13c      	b.n	8013566 <UART_SetConfig+0x7ae>
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a41      	ldr	r2, [pc, #260]	@ (80133f8 <UART_SetConfig+0x640>)
 80132f2:	4293      	cmp	r3, r2
 80132f4:	f040 8082 	bne.w	80133fc <UART_SetConfig+0x644>
 80132f8:	4b3c      	ldr	r3, [pc, #240]	@ (80133ec <UART_SetConfig+0x634>)
 80132fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013300:	2b28      	cmp	r3, #40	@ 0x28
 8013302:	d86d      	bhi.n	80133e0 <UART_SetConfig+0x628>
 8013304:	a201      	add	r2, pc, #4	@ (adr r2, 801330c <UART_SetConfig+0x554>)
 8013306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801330a:	bf00      	nop
 801330c:	080133b1 	.word	0x080133b1
 8013310:	080133e1 	.word	0x080133e1
 8013314:	080133e1 	.word	0x080133e1
 8013318:	080133e1 	.word	0x080133e1
 801331c:	080133e1 	.word	0x080133e1
 8013320:	080133e1 	.word	0x080133e1
 8013324:	080133e1 	.word	0x080133e1
 8013328:	080133e1 	.word	0x080133e1
 801332c:	080133b9 	.word	0x080133b9
 8013330:	080133e1 	.word	0x080133e1
 8013334:	080133e1 	.word	0x080133e1
 8013338:	080133e1 	.word	0x080133e1
 801333c:	080133e1 	.word	0x080133e1
 8013340:	080133e1 	.word	0x080133e1
 8013344:	080133e1 	.word	0x080133e1
 8013348:	080133e1 	.word	0x080133e1
 801334c:	080133c1 	.word	0x080133c1
 8013350:	080133e1 	.word	0x080133e1
 8013354:	080133e1 	.word	0x080133e1
 8013358:	080133e1 	.word	0x080133e1
 801335c:	080133e1 	.word	0x080133e1
 8013360:	080133e1 	.word	0x080133e1
 8013364:	080133e1 	.word	0x080133e1
 8013368:	080133e1 	.word	0x080133e1
 801336c:	080133c9 	.word	0x080133c9
 8013370:	080133e1 	.word	0x080133e1
 8013374:	080133e1 	.word	0x080133e1
 8013378:	080133e1 	.word	0x080133e1
 801337c:	080133e1 	.word	0x080133e1
 8013380:	080133e1 	.word	0x080133e1
 8013384:	080133e1 	.word	0x080133e1
 8013388:	080133e1 	.word	0x080133e1
 801338c:	080133d1 	.word	0x080133d1
 8013390:	080133e1 	.word	0x080133e1
 8013394:	080133e1 	.word	0x080133e1
 8013398:	080133e1 	.word	0x080133e1
 801339c:	080133e1 	.word	0x080133e1
 80133a0:	080133e1 	.word	0x080133e1
 80133a4:	080133e1 	.word	0x080133e1
 80133a8:	080133e1 	.word	0x080133e1
 80133ac:	080133d9 	.word	0x080133d9
 80133b0:	2301      	movs	r3, #1
 80133b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133b6:	e0d6      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133b8:	2304      	movs	r3, #4
 80133ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133be:	e0d2      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133c0:	2308      	movs	r3, #8
 80133c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133c6:	e0ce      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133c8:	2310      	movs	r3, #16
 80133ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133ce:	e0ca      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133d0:	2320      	movs	r3, #32
 80133d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133d6:	e0c6      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133d8:	2340      	movs	r3, #64	@ 0x40
 80133da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133de:	e0c2      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133e0:	2380      	movs	r3, #128	@ 0x80
 80133e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80133e6:	e0be      	b.n	8013566 <UART_SetConfig+0x7ae>
 80133e8:	40011400 	.word	0x40011400
 80133ec:	58024400 	.word	0x58024400
 80133f0:	40007800 	.word	0x40007800
 80133f4:	40007c00 	.word	0x40007c00
 80133f8:	40011800 	.word	0x40011800
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4aad      	ldr	r2, [pc, #692]	@ (80136b8 <UART_SetConfig+0x900>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d176      	bne.n	80134f4 <UART_SetConfig+0x73c>
 8013406:	4bad      	ldr	r3, [pc, #692]	@ (80136bc <UART_SetConfig+0x904>)
 8013408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801340a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801340e:	2b28      	cmp	r3, #40	@ 0x28
 8013410:	d86c      	bhi.n	80134ec <UART_SetConfig+0x734>
 8013412:	a201      	add	r2, pc, #4	@ (adr r2, 8013418 <UART_SetConfig+0x660>)
 8013414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013418:	080134bd 	.word	0x080134bd
 801341c:	080134ed 	.word	0x080134ed
 8013420:	080134ed 	.word	0x080134ed
 8013424:	080134ed 	.word	0x080134ed
 8013428:	080134ed 	.word	0x080134ed
 801342c:	080134ed 	.word	0x080134ed
 8013430:	080134ed 	.word	0x080134ed
 8013434:	080134ed 	.word	0x080134ed
 8013438:	080134c5 	.word	0x080134c5
 801343c:	080134ed 	.word	0x080134ed
 8013440:	080134ed 	.word	0x080134ed
 8013444:	080134ed 	.word	0x080134ed
 8013448:	080134ed 	.word	0x080134ed
 801344c:	080134ed 	.word	0x080134ed
 8013450:	080134ed 	.word	0x080134ed
 8013454:	080134ed 	.word	0x080134ed
 8013458:	080134cd 	.word	0x080134cd
 801345c:	080134ed 	.word	0x080134ed
 8013460:	080134ed 	.word	0x080134ed
 8013464:	080134ed 	.word	0x080134ed
 8013468:	080134ed 	.word	0x080134ed
 801346c:	080134ed 	.word	0x080134ed
 8013470:	080134ed 	.word	0x080134ed
 8013474:	080134ed 	.word	0x080134ed
 8013478:	080134d5 	.word	0x080134d5
 801347c:	080134ed 	.word	0x080134ed
 8013480:	080134ed 	.word	0x080134ed
 8013484:	080134ed 	.word	0x080134ed
 8013488:	080134ed 	.word	0x080134ed
 801348c:	080134ed 	.word	0x080134ed
 8013490:	080134ed 	.word	0x080134ed
 8013494:	080134ed 	.word	0x080134ed
 8013498:	080134dd 	.word	0x080134dd
 801349c:	080134ed 	.word	0x080134ed
 80134a0:	080134ed 	.word	0x080134ed
 80134a4:	080134ed 	.word	0x080134ed
 80134a8:	080134ed 	.word	0x080134ed
 80134ac:	080134ed 	.word	0x080134ed
 80134b0:	080134ed 	.word	0x080134ed
 80134b4:	080134ed 	.word	0x080134ed
 80134b8:	080134e5 	.word	0x080134e5
 80134bc:	2301      	movs	r3, #1
 80134be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134c2:	e050      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134c4:	2304      	movs	r3, #4
 80134c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134ca:	e04c      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134cc:	2308      	movs	r3, #8
 80134ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134d2:	e048      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134d4:	2310      	movs	r3, #16
 80134d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134da:	e044      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134dc:	2320      	movs	r3, #32
 80134de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134e2:	e040      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134e4:	2340      	movs	r3, #64	@ 0x40
 80134e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134ea:	e03c      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134ec:	2380      	movs	r3, #128	@ 0x80
 80134ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80134f2:	e038      	b.n	8013566 <UART_SetConfig+0x7ae>
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4a71      	ldr	r2, [pc, #452]	@ (80136c0 <UART_SetConfig+0x908>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d130      	bne.n	8013560 <UART_SetConfig+0x7a8>
 80134fe:	4b6f      	ldr	r3, [pc, #444]	@ (80136bc <UART_SetConfig+0x904>)
 8013500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013502:	f003 0307 	and.w	r3, r3, #7
 8013506:	2b05      	cmp	r3, #5
 8013508:	d826      	bhi.n	8013558 <UART_SetConfig+0x7a0>
 801350a:	a201      	add	r2, pc, #4	@ (adr r2, 8013510 <UART_SetConfig+0x758>)
 801350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013510:	08013529 	.word	0x08013529
 8013514:	08013531 	.word	0x08013531
 8013518:	08013539 	.word	0x08013539
 801351c:	08013541 	.word	0x08013541
 8013520:	08013549 	.word	0x08013549
 8013524:	08013551 	.word	0x08013551
 8013528:	2302      	movs	r3, #2
 801352a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801352e:	e01a      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013530:	2304      	movs	r3, #4
 8013532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013536:	e016      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013538:	2308      	movs	r3, #8
 801353a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801353e:	e012      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013540:	2310      	movs	r3, #16
 8013542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013546:	e00e      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013548:	2320      	movs	r3, #32
 801354a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801354e:	e00a      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013550:	2340      	movs	r3, #64	@ 0x40
 8013552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013556:	e006      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013558:	2380      	movs	r3, #128	@ 0x80
 801355a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801355e:	e002      	b.n	8013566 <UART_SetConfig+0x7ae>
 8013560:	2380      	movs	r3, #128	@ 0x80
 8013562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4a55      	ldr	r2, [pc, #340]	@ (80136c0 <UART_SetConfig+0x908>)
 801356c:	4293      	cmp	r3, r2
 801356e:	f040 80f8 	bne.w	8013762 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013572:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013576:	2b20      	cmp	r3, #32
 8013578:	dc46      	bgt.n	8013608 <UART_SetConfig+0x850>
 801357a:	2b02      	cmp	r3, #2
 801357c:	db75      	blt.n	801366a <UART_SetConfig+0x8b2>
 801357e:	3b02      	subs	r3, #2
 8013580:	2b1e      	cmp	r3, #30
 8013582:	d872      	bhi.n	801366a <UART_SetConfig+0x8b2>
 8013584:	a201      	add	r2, pc, #4	@ (adr r2, 801358c <UART_SetConfig+0x7d4>)
 8013586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801358a:	bf00      	nop
 801358c:	0801360f 	.word	0x0801360f
 8013590:	0801366b 	.word	0x0801366b
 8013594:	08013617 	.word	0x08013617
 8013598:	0801366b 	.word	0x0801366b
 801359c:	0801366b 	.word	0x0801366b
 80135a0:	0801366b 	.word	0x0801366b
 80135a4:	08013627 	.word	0x08013627
 80135a8:	0801366b 	.word	0x0801366b
 80135ac:	0801366b 	.word	0x0801366b
 80135b0:	0801366b 	.word	0x0801366b
 80135b4:	0801366b 	.word	0x0801366b
 80135b8:	0801366b 	.word	0x0801366b
 80135bc:	0801366b 	.word	0x0801366b
 80135c0:	0801366b 	.word	0x0801366b
 80135c4:	08013637 	.word	0x08013637
 80135c8:	0801366b 	.word	0x0801366b
 80135cc:	0801366b 	.word	0x0801366b
 80135d0:	0801366b 	.word	0x0801366b
 80135d4:	0801366b 	.word	0x0801366b
 80135d8:	0801366b 	.word	0x0801366b
 80135dc:	0801366b 	.word	0x0801366b
 80135e0:	0801366b 	.word	0x0801366b
 80135e4:	0801366b 	.word	0x0801366b
 80135e8:	0801366b 	.word	0x0801366b
 80135ec:	0801366b 	.word	0x0801366b
 80135f0:	0801366b 	.word	0x0801366b
 80135f4:	0801366b 	.word	0x0801366b
 80135f8:	0801366b 	.word	0x0801366b
 80135fc:	0801366b 	.word	0x0801366b
 8013600:	0801366b 	.word	0x0801366b
 8013604:	0801365d 	.word	0x0801365d
 8013608:	2b40      	cmp	r3, #64	@ 0x40
 801360a:	d02a      	beq.n	8013662 <UART_SetConfig+0x8aa>
 801360c:	e02d      	b.n	801366a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801360e:	f7fd fef3 	bl	80113f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8013612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013614:	e02f      	b.n	8013676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801361a:	4618      	mov	r0, r3
 801361c:	f7fd ff02 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013624:	e027      	b.n	8013676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013626:	f107 0318 	add.w	r3, r7, #24
 801362a:	4618      	mov	r0, r3
 801362c:	f7fe f84e 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013634:	e01f      	b.n	8013676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013636:	4b21      	ldr	r3, [pc, #132]	@ (80136bc <UART_SetConfig+0x904>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f003 0320 	and.w	r3, r3, #32
 801363e:	2b00      	cmp	r3, #0
 8013640:	d009      	beq.n	8013656 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013642:	4b1e      	ldr	r3, [pc, #120]	@ (80136bc <UART_SetConfig+0x904>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	08db      	lsrs	r3, r3, #3
 8013648:	f003 0303 	and.w	r3, r3, #3
 801364c:	4a1d      	ldr	r2, [pc, #116]	@ (80136c4 <UART_SetConfig+0x90c>)
 801364e:	fa22 f303 	lsr.w	r3, r2, r3
 8013652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013654:	e00f      	b.n	8013676 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013656:	4b1b      	ldr	r3, [pc, #108]	@ (80136c4 <UART_SetConfig+0x90c>)
 8013658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801365a:	e00c      	b.n	8013676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801365c:	4b1a      	ldr	r3, [pc, #104]	@ (80136c8 <UART_SetConfig+0x910>)
 801365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013660:	e009      	b.n	8013676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013668:	e005      	b.n	8013676 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801366a:	2300      	movs	r3, #0
 801366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801366e:	2301      	movs	r3, #1
 8013670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013678:	2b00      	cmp	r3, #0
 801367a:	f000 81ee 	beq.w	8013a5a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013682:	4a12      	ldr	r2, [pc, #72]	@ (80136cc <UART_SetConfig+0x914>)
 8013684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013688:	461a      	mov	r2, r3
 801368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801368c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013690:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	685a      	ldr	r2, [r3, #4]
 8013696:	4613      	mov	r3, r2
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	4413      	add	r3, r2
 801369c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801369e:	429a      	cmp	r2, r3
 80136a0:	d305      	bcc.n	80136ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d910      	bls.n	80136d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80136ae:	2301      	movs	r3, #1
 80136b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80136b4:	e1d1      	b.n	8013a5a <UART_SetConfig+0xca2>
 80136b6:	bf00      	nop
 80136b8:	40011c00 	.word	0x40011c00
 80136bc:	58024400 	.word	0x58024400
 80136c0:	58000c00 	.word	0x58000c00
 80136c4:	03d09000 	.word	0x03d09000
 80136c8:	003d0900 	.word	0x003d0900
 80136cc:	0801e39c 	.word	0x0801e39c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136d2:	2200      	movs	r2, #0
 80136d4:	60bb      	str	r3, [r7, #8]
 80136d6:	60fa      	str	r2, [r7, #12]
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136dc:	4ac0      	ldr	r2, [pc, #768]	@ (80139e0 <UART_SetConfig+0xc28>)
 80136de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	2200      	movs	r2, #0
 80136e6:	603b      	str	r3, [r7, #0]
 80136e8:	607a      	str	r2, [r7, #4]
 80136ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80136f2:	f7ed f821 	bl	8000738 <__aeabi_uldivmod>
 80136f6:	4602      	mov	r2, r0
 80136f8:	460b      	mov	r3, r1
 80136fa:	4610      	mov	r0, r2
 80136fc:	4619      	mov	r1, r3
 80136fe:	f04f 0200 	mov.w	r2, #0
 8013702:	f04f 0300 	mov.w	r3, #0
 8013706:	020b      	lsls	r3, r1, #8
 8013708:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801370c:	0202      	lsls	r2, r0, #8
 801370e:	6979      	ldr	r1, [r7, #20]
 8013710:	6849      	ldr	r1, [r1, #4]
 8013712:	0849      	lsrs	r1, r1, #1
 8013714:	2000      	movs	r0, #0
 8013716:	460c      	mov	r4, r1
 8013718:	4605      	mov	r5, r0
 801371a:	eb12 0804 	adds.w	r8, r2, r4
 801371e:	eb43 0905 	adc.w	r9, r3, r5
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	2200      	movs	r2, #0
 8013728:	469a      	mov	sl, r3
 801372a:	4693      	mov	fp, r2
 801372c:	4652      	mov	r2, sl
 801372e:	465b      	mov	r3, fp
 8013730:	4640      	mov	r0, r8
 8013732:	4649      	mov	r1, r9
 8013734:	f7ed f800 	bl	8000738 <__aeabi_uldivmod>
 8013738:	4602      	mov	r2, r0
 801373a:	460b      	mov	r3, r1
 801373c:	4613      	mov	r3, r2
 801373e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013746:	d308      	bcc.n	801375a <UART_SetConfig+0x9a2>
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801374e:	d204      	bcs.n	801375a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013756:	60da      	str	r2, [r3, #12]
 8013758:	e17f      	b.n	8013a5a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801375a:	2301      	movs	r3, #1
 801375c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013760:	e17b      	b.n	8013a5a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	69db      	ldr	r3, [r3, #28]
 8013766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801376a:	f040 80bd 	bne.w	80138e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801376e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013772:	2b20      	cmp	r3, #32
 8013774:	dc48      	bgt.n	8013808 <UART_SetConfig+0xa50>
 8013776:	2b00      	cmp	r3, #0
 8013778:	db7b      	blt.n	8013872 <UART_SetConfig+0xaba>
 801377a:	2b20      	cmp	r3, #32
 801377c:	d879      	bhi.n	8013872 <UART_SetConfig+0xaba>
 801377e:	a201      	add	r2, pc, #4	@ (adr r2, 8013784 <UART_SetConfig+0x9cc>)
 8013780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013784:	0801380f 	.word	0x0801380f
 8013788:	08013817 	.word	0x08013817
 801378c:	08013873 	.word	0x08013873
 8013790:	08013873 	.word	0x08013873
 8013794:	0801381f 	.word	0x0801381f
 8013798:	08013873 	.word	0x08013873
 801379c:	08013873 	.word	0x08013873
 80137a0:	08013873 	.word	0x08013873
 80137a4:	0801382f 	.word	0x0801382f
 80137a8:	08013873 	.word	0x08013873
 80137ac:	08013873 	.word	0x08013873
 80137b0:	08013873 	.word	0x08013873
 80137b4:	08013873 	.word	0x08013873
 80137b8:	08013873 	.word	0x08013873
 80137bc:	08013873 	.word	0x08013873
 80137c0:	08013873 	.word	0x08013873
 80137c4:	0801383f 	.word	0x0801383f
 80137c8:	08013873 	.word	0x08013873
 80137cc:	08013873 	.word	0x08013873
 80137d0:	08013873 	.word	0x08013873
 80137d4:	08013873 	.word	0x08013873
 80137d8:	08013873 	.word	0x08013873
 80137dc:	08013873 	.word	0x08013873
 80137e0:	08013873 	.word	0x08013873
 80137e4:	08013873 	.word	0x08013873
 80137e8:	08013873 	.word	0x08013873
 80137ec:	08013873 	.word	0x08013873
 80137f0:	08013873 	.word	0x08013873
 80137f4:	08013873 	.word	0x08013873
 80137f8:	08013873 	.word	0x08013873
 80137fc:	08013873 	.word	0x08013873
 8013800:	08013873 	.word	0x08013873
 8013804:	08013865 	.word	0x08013865
 8013808:	2b40      	cmp	r3, #64	@ 0x40
 801380a:	d02e      	beq.n	801386a <UART_SetConfig+0xab2>
 801380c:	e031      	b.n	8013872 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801380e:	f7fb ff55 	bl	800f6bc <HAL_RCC_GetPCLK1Freq>
 8013812:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013814:	e033      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013816:	f7fb ff67 	bl	800f6e8 <HAL_RCC_GetPCLK2Freq>
 801381a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801381c:	e02f      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801381e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013822:	4618      	mov	r0, r3
 8013824:	f7fd fdfe 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801382c:	e027      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801382e:	f107 0318 	add.w	r3, r7, #24
 8013832:	4618      	mov	r0, r3
 8013834:	f7fd ff4a 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801383c:	e01f      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801383e:	4b69      	ldr	r3, [pc, #420]	@ (80139e4 <UART_SetConfig+0xc2c>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 0320 	and.w	r3, r3, #32
 8013846:	2b00      	cmp	r3, #0
 8013848:	d009      	beq.n	801385e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801384a:	4b66      	ldr	r3, [pc, #408]	@ (80139e4 <UART_SetConfig+0xc2c>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	08db      	lsrs	r3, r3, #3
 8013850:	f003 0303 	and.w	r3, r3, #3
 8013854:	4a64      	ldr	r2, [pc, #400]	@ (80139e8 <UART_SetConfig+0xc30>)
 8013856:	fa22 f303 	lsr.w	r3, r2, r3
 801385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801385c:	e00f      	b.n	801387e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801385e:	4b62      	ldr	r3, [pc, #392]	@ (80139e8 <UART_SetConfig+0xc30>)
 8013860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013862:	e00c      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013864:	4b61      	ldr	r3, [pc, #388]	@ (80139ec <UART_SetConfig+0xc34>)
 8013866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013868:	e009      	b.n	801387e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801386a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013870:	e005      	b.n	801387e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8013872:	2300      	movs	r3, #0
 8013874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013876:	2301      	movs	r3, #1
 8013878:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801387c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 80ea 	beq.w	8013a5a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801388a:	4a55      	ldr	r2, [pc, #340]	@ (80139e0 <UART_SetConfig+0xc28>)
 801388c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013890:	461a      	mov	r2, r3
 8013892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013894:	fbb3 f3f2 	udiv	r3, r3, r2
 8013898:	005a      	lsls	r2, r3, #1
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	085b      	lsrs	r3, r3, #1
 80138a0:	441a      	add	r2, r3
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80138aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ae:	2b0f      	cmp	r3, #15
 80138b0:	d916      	bls.n	80138e0 <UART_SetConfig+0xb28>
 80138b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138b8:	d212      	bcs.n	80138e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80138ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138bc:	b29b      	uxth	r3, r3
 80138be:	f023 030f 	bic.w	r3, r3, #15
 80138c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80138c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c6:	085b      	lsrs	r3, r3, #1
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	f003 0307 	and.w	r3, r3, #7
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80138d2:	4313      	orrs	r3, r2
 80138d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80138dc:	60da      	str	r2, [r3, #12]
 80138de:	e0bc      	b.n	8013a5a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80138e0:	2301      	movs	r3, #1
 80138e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80138e6:	e0b8      	b.n	8013a5a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80138e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80138ec:	2b20      	cmp	r3, #32
 80138ee:	dc4b      	bgt.n	8013988 <UART_SetConfig+0xbd0>
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	f2c0 8087 	blt.w	8013a04 <UART_SetConfig+0xc4c>
 80138f6:	2b20      	cmp	r3, #32
 80138f8:	f200 8084 	bhi.w	8013a04 <UART_SetConfig+0xc4c>
 80138fc:	a201      	add	r2, pc, #4	@ (adr r2, 8013904 <UART_SetConfig+0xb4c>)
 80138fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013902:	bf00      	nop
 8013904:	0801398f 	.word	0x0801398f
 8013908:	08013997 	.word	0x08013997
 801390c:	08013a05 	.word	0x08013a05
 8013910:	08013a05 	.word	0x08013a05
 8013914:	0801399f 	.word	0x0801399f
 8013918:	08013a05 	.word	0x08013a05
 801391c:	08013a05 	.word	0x08013a05
 8013920:	08013a05 	.word	0x08013a05
 8013924:	080139af 	.word	0x080139af
 8013928:	08013a05 	.word	0x08013a05
 801392c:	08013a05 	.word	0x08013a05
 8013930:	08013a05 	.word	0x08013a05
 8013934:	08013a05 	.word	0x08013a05
 8013938:	08013a05 	.word	0x08013a05
 801393c:	08013a05 	.word	0x08013a05
 8013940:	08013a05 	.word	0x08013a05
 8013944:	080139bf 	.word	0x080139bf
 8013948:	08013a05 	.word	0x08013a05
 801394c:	08013a05 	.word	0x08013a05
 8013950:	08013a05 	.word	0x08013a05
 8013954:	08013a05 	.word	0x08013a05
 8013958:	08013a05 	.word	0x08013a05
 801395c:	08013a05 	.word	0x08013a05
 8013960:	08013a05 	.word	0x08013a05
 8013964:	08013a05 	.word	0x08013a05
 8013968:	08013a05 	.word	0x08013a05
 801396c:	08013a05 	.word	0x08013a05
 8013970:	08013a05 	.word	0x08013a05
 8013974:	08013a05 	.word	0x08013a05
 8013978:	08013a05 	.word	0x08013a05
 801397c:	08013a05 	.word	0x08013a05
 8013980:	08013a05 	.word	0x08013a05
 8013984:	080139f7 	.word	0x080139f7
 8013988:	2b40      	cmp	r3, #64	@ 0x40
 801398a:	d037      	beq.n	80139fc <UART_SetConfig+0xc44>
 801398c:	e03a      	b.n	8013a04 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801398e:	f7fb fe95 	bl	800f6bc <HAL_RCC_GetPCLK1Freq>
 8013992:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013994:	e03c      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013996:	f7fb fea7 	bl	800f6e8 <HAL_RCC_GetPCLK2Freq>
 801399a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801399c:	e038      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801399e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fd fd3e 	bl	8011424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80139a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139ac:	e030      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139ae:	f107 0318 	add.w	r3, r7, #24
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7fd fe8a 	bl	80116cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139bc:	e028      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80139be:	4b09      	ldr	r3, [pc, #36]	@ (80139e4 <UART_SetConfig+0xc2c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	f003 0320 	and.w	r3, r3, #32
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d012      	beq.n	80139f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80139ca:	4b06      	ldr	r3, [pc, #24]	@ (80139e4 <UART_SetConfig+0xc2c>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	08db      	lsrs	r3, r3, #3
 80139d0:	f003 0303 	and.w	r3, r3, #3
 80139d4:	4a04      	ldr	r2, [pc, #16]	@ (80139e8 <UART_SetConfig+0xc30>)
 80139d6:	fa22 f303 	lsr.w	r3, r2, r3
 80139da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80139dc:	e018      	b.n	8013a10 <UART_SetConfig+0xc58>
 80139de:	bf00      	nop
 80139e0:	0801e39c 	.word	0x0801e39c
 80139e4:	58024400 	.word	0x58024400
 80139e8:	03d09000 	.word	0x03d09000
 80139ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80139f0:	4b24      	ldr	r3, [pc, #144]	@ (8013a84 <UART_SetConfig+0xccc>)
 80139f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139f4:	e00c      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80139f6:	4b24      	ldr	r3, [pc, #144]	@ (8013a88 <UART_SetConfig+0xcd0>)
 80139f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139fa:	e009      	b.n	8013a10 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80139fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a02:	e005      	b.n	8013a10 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013a04:	2300      	movs	r3, #0
 8013a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013a0e:	bf00      	nop
    }

    if (pclk != 0U)
 8013a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d021      	beq.n	8013a5a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8013a8c <UART_SetConfig+0xcd4>)
 8013a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a20:	461a      	mov	r2, r3
 8013a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a24:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	085b      	lsrs	r3, r3, #1
 8013a2e:	441a      	add	r2, r3
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a38:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3c:	2b0f      	cmp	r3, #15
 8013a3e:	d909      	bls.n	8013a54 <UART_SetConfig+0xc9c>
 8013a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a46:	d205      	bcs.n	8013a54 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	60da      	str	r2, [r3, #12]
 8013a52:	e002      	b.n	8013a5a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013a54:	2301      	movs	r3, #1
 8013a56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2201      	movs	r2, #1
 8013a66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	2200      	movs	r2, #0
 8013a74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013a76:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3748      	adds	r7, #72	@ 0x48
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013a84:	03d09000 	.word	0x03d09000
 8013a88:	003d0900 	.word	0x003d0900
 8013a8c:	0801e39c 	.word	0x0801e39c

08013a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a9c:	f003 0308 	and.w	r3, r3, #8
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00a      	beq.n	8013aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	430a      	orrs	r2, r1
 8013ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013abe:	f003 0301 	and.w	r3, r3, #1
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00a      	beq.n	8013adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	430a      	orrs	r2, r1
 8013ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ae0:	f003 0302 	and.w	r3, r3, #2
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d00a      	beq.n	8013afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	430a      	orrs	r2, r1
 8013afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b02:	f003 0304 	and.w	r3, r3, #4
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00a      	beq.n	8013b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	430a      	orrs	r2, r1
 8013b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b24:	f003 0310 	and.w	r3, r3, #16
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d00a      	beq.n	8013b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	689b      	ldr	r3, [r3, #8]
 8013b32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	430a      	orrs	r2, r1
 8013b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b46:	f003 0320 	and.w	r3, r3, #32
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d00a      	beq.n	8013b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	430a      	orrs	r2, r1
 8013b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d01a      	beq.n	8013ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	430a      	orrs	r2, r1
 8013b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013b8e:	d10a      	bne.n	8013ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	430a      	orrs	r2, r1
 8013ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00a      	beq.n	8013bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	430a      	orrs	r2, r1
 8013bc6:	605a      	str	r2, [r3, #4]
  }
}
 8013bc8:	bf00      	nop
 8013bca:	370c      	adds	r7, #12
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr

08013bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b098      	sub	sp, #96	@ 0x60
 8013bd8:	af02      	add	r7, sp, #8
 8013bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013be4:	f7f3 fc1c 	bl	8007420 <HAL_GetTick>
 8013be8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f003 0308 	and.w	r3, r3, #8
 8013bf4:	2b08      	cmp	r3, #8
 8013bf6:	d12f      	bne.n	8013c58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013bfc:	9300      	str	r3, [sp, #0]
 8013bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c00:	2200      	movs	r2, #0
 8013c02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f88e 	bl	8013d28 <UART_WaitOnFlagUntilTimeout>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d022      	beq.n	8013c58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1a:	e853 3f00 	ldrex	r3, [r3]
 8013c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c38:	e841 2300 	strex	r3, r2, [r1]
 8013c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1e6      	bne.n	8013c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2220      	movs	r2, #32
 8013c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013c54:	2303      	movs	r3, #3
 8013c56:	e063      	b.n	8013d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f003 0304 	and.w	r3, r3, #4
 8013c62:	2b04      	cmp	r3, #4
 8013c64:	d149      	bne.n	8013cfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013c66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 f857 	bl	8013d28 <UART_WaitOnFlagUntilTimeout>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d03c      	beq.n	8013cfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c88:	e853 3f00 	ldrex	r3, [r3]
 8013c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8013c8e:	6a3b      	ldr	r3, [r7, #32]
 8013c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ca6:	e841 2300 	strex	r3, r2, [r1]
 8013caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1e6      	bne.n	8013c80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	3308      	adds	r3, #8
 8013cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	e853 3f00 	ldrex	r3, [r3]
 8013cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	f023 0301 	bic.w	r3, r3, #1
 8013cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	3308      	adds	r3, #8
 8013cd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013cd2:	61fa      	str	r2, [r7, #28]
 8013cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd6:	69b9      	ldr	r1, [r7, #24]
 8013cd8:	69fa      	ldr	r2, [r7, #28]
 8013cda:	e841 2300 	strex	r3, r2, [r1]
 8013cde:	617b      	str	r3, [r7, #20]
   return(result);
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1e5      	bne.n	8013cb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2220      	movs	r2, #32
 8013cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013cf6:	2303      	movs	r3, #3
 8013cf8:	e012      	b.n	8013d20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2220      	movs	r2, #32
 8013cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2220      	movs	r2, #32
 8013d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2200      	movs	r2, #0
 8013d14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013d1e:	2300      	movs	r3, #0
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3758      	adds	r7, #88	@ 0x58
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	4613      	mov	r3, r2
 8013d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d38:	e04f      	b.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d3a:	69bb      	ldr	r3, [r7, #24]
 8013d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d40:	d04b      	beq.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d42:	f7f3 fb6d 	bl	8007420 <HAL_GetTick>
 8013d46:	4602      	mov	r2, r0
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	69ba      	ldr	r2, [r7, #24]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d302      	bcc.n	8013d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d101      	bne.n	8013d5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013d58:	2303      	movs	r3, #3
 8013d5a:	e04e      	b.n	8013dfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f003 0304 	and.w	r3, r3, #4
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d037      	beq.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	2b80      	cmp	r3, #128	@ 0x80
 8013d6e:	d034      	beq.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	2b40      	cmp	r3, #64	@ 0x40
 8013d74:	d031      	beq.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	69db      	ldr	r3, [r3, #28]
 8013d7c:	f003 0308 	and.w	r3, r3, #8
 8013d80:	2b08      	cmp	r3, #8
 8013d82:	d110      	bne.n	8013da6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2208      	movs	r2, #8
 8013d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f000 f839 	bl	8013e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2208      	movs	r2, #8
 8013d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013da2:	2301      	movs	r3, #1
 8013da4:	e029      	b.n	8013dfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	69db      	ldr	r3, [r3, #28]
 8013dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013db4:	d111      	bne.n	8013dda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f000 f81f 	bl	8013e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2220      	movs	r2, #32
 8013dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013dd6:	2303      	movs	r3, #3
 8013dd8:	e00f      	b.n	8013dfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	69da      	ldr	r2, [r3, #28]
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	4013      	ands	r3, r2
 8013de4:	68ba      	ldr	r2, [r7, #8]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	bf0c      	ite	eq
 8013dea:	2301      	moveq	r3, #1
 8013dec:	2300      	movne	r3, #0
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	461a      	mov	r2, r3
 8013df2:	79fb      	ldrb	r3, [r7, #7]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d0a0      	beq.n	8013d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013df8:	2300      	movs	r3, #0
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
	...

08013e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b095      	sub	sp, #84	@ 0x54
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e14:	e853 3f00 	ldrex	r3, [r3]
 8013e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e32:	e841 2300 	strex	r3, r2, [r1]
 8013e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d1e6      	bne.n	8013e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	3308      	adds	r3, #8
 8013e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	e853 3f00 	ldrex	r3, [r3]
 8013e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e4e:	69fa      	ldr	r2, [r7, #28]
 8013e50:	4b1e      	ldr	r3, [pc, #120]	@ (8013ecc <UART_EndRxTransfer+0xc8>)
 8013e52:	4013      	ands	r3, r2
 8013e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	3308      	adds	r3, #8
 8013e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e66:	e841 2300 	strex	r3, r2, [r1]
 8013e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1e5      	bne.n	8013e3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d118      	bne.n	8013eac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	e853 3f00 	ldrex	r3, [r3]
 8013e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	f023 0310 	bic.w	r3, r3, #16
 8013e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	461a      	mov	r2, r3
 8013e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e98:	61bb      	str	r3, [r7, #24]
 8013e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e9c:	6979      	ldr	r1, [r7, #20]
 8013e9e:	69ba      	ldr	r2, [r7, #24]
 8013ea0:	e841 2300 	strex	r3, r2, [r1]
 8013ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1e6      	bne.n	8013e7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2220      	movs	r2, #32
 8013eb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013ec0:	bf00      	nop
 8013ec2:	3754      	adds	r7, #84	@ 0x54
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr
 8013ecc:	effffffe 	.word	0xeffffffe

08013ed0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d101      	bne.n	8013ee6 <HAL_UARTEx_DisableFifoMode+0x16>
 8013ee2:	2302      	movs	r3, #2
 8013ee4:	e027      	b.n	8013f36 <HAL_UARTEx_DisableFifoMode+0x66>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2201      	movs	r2, #1
 8013eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2224      	movs	r2, #36	@ 0x24
 8013ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	f022 0201 	bic.w	r2, r2, #1
 8013f0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013f14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	68fa      	ldr	r2, [r7, #12]
 8013f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2220      	movs	r2, #32
 8013f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3714      	adds	r7, #20
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr

08013f42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f42:	b580      	push	{r7, lr}
 8013f44:	b084      	sub	sp, #16
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f52:	2b01      	cmp	r3, #1
 8013f54:	d101      	bne.n	8013f5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013f56:	2302      	movs	r3, #2
 8013f58:	e02d      	b.n	8013fb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2224      	movs	r2, #36	@ 0x24
 8013f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f022 0201 	bic.w	r2, r2, #1
 8013f80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	683a      	ldr	r2, [r7, #0]
 8013f92:	430a      	orrs	r2, r1
 8013f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f000 f850 	bl	801403c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2220      	movs	r2, #32
 8013fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013fb4:	2300      	movs	r3, #0
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}

08013fbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013fbe:	b580      	push	{r7, lr}
 8013fc0:	b084      	sub	sp, #16
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
 8013fc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	d101      	bne.n	8013fd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013fd2:	2302      	movs	r3, #2
 8013fd4:	e02d      	b.n	8014032 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2201      	movs	r2, #1
 8013fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2224      	movs	r2, #36	@ 0x24
 8013fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	f022 0201 	bic.w	r2, r2, #1
 8013ffc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	430a      	orrs	r2, r1
 8014010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f000 f812 	bl	801403c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	68fa      	ldr	r2, [r7, #12]
 801401e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2220      	movs	r2, #32
 8014024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2200      	movs	r2, #0
 801402c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014030:	2300      	movs	r3, #0
}
 8014032:	4618      	mov	r0, r3
 8014034:	3710      	adds	r7, #16
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
	...

0801403c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801403c:	b480      	push	{r7}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014048:	2b00      	cmp	r3, #0
 801404a:	d108      	bne.n	801405e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2201      	movs	r2, #1
 8014050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2201      	movs	r2, #1
 8014058:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801405c:	e031      	b.n	80140c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801405e:	2310      	movs	r3, #16
 8014060:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014062:	2310      	movs	r3, #16
 8014064:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	0e5b      	lsrs	r3, r3, #25
 801406e:	b2db      	uxtb	r3, r3
 8014070:	f003 0307 	and.w	r3, r3, #7
 8014074:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	689b      	ldr	r3, [r3, #8]
 801407c:	0f5b      	lsrs	r3, r3, #29
 801407e:	b2db      	uxtb	r3, r3
 8014080:	f003 0307 	and.w	r3, r3, #7
 8014084:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014086:	7bbb      	ldrb	r3, [r7, #14]
 8014088:	7b3a      	ldrb	r2, [r7, #12]
 801408a:	4911      	ldr	r1, [pc, #68]	@ (80140d0 <UARTEx_SetNbDataToProcess+0x94>)
 801408c:	5c8a      	ldrb	r2, [r1, r2]
 801408e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014092:	7b3a      	ldrb	r2, [r7, #12]
 8014094:	490f      	ldr	r1, [pc, #60]	@ (80140d4 <UARTEx_SetNbDataToProcess+0x98>)
 8014096:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014098:	fb93 f3f2 	sdiv	r3, r3, r2
 801409c:	b29a      	uxth	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140a4:	7bfb      	ldrb	r3, [r7, #15]
 80140a6:	7b7a      	ldrb	r2, [r7, #13]
 80140a8:	4909      	ldr	r1, [pc, #36]	@ (80140d0 <UARTEx_SetNbDataToProcess+0x94>)
 80140aa:	5c8a      	ldrb	r2, [r1, r2]
 80140ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80140b0:	7b7a      	ldrb	r2, [r7, #13]
 80140b2:	4908      	ldr	r1, [pc, #32]	@ (80140d4 <UARTEx_SetNbDataToProcess+0x98>)
 80140b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80140c2:	bf00      	nop
 80140c4:	3714      	adds	r7, #20
 80140c6:	46bd      	mov	sp, r7
 80140c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140cc:	4770      	bx	lr
 80140ce:	bf00      	nop
 80140d0:	0801e3b4 	.word	0x0801e3b4
 80140d4:	0801e3bc 	.word	0x0801e3bc

080140d8 <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80140d8:	b590      	push	{r4, r7, lr}
 80140da:	b087      	sub	sp, #28
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	607a      	str	r2, [r7, #4]
 80140e2:	461a      	mov	r2, r3
 80140e4:	460b      	mov	r3, r1
 80140e6:	72fb      	strb	r3, [r7, #11]
 80140e8:	4613      	mov	r3, r2
 80140ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d102      	bne.n	80140f8 <lis3mdl_read_reg+0x20>
  {
    return -1;
 80140f2:	f04f 33ff 	mov.w	r3, #4294967295
 80140f6:	e009      	b.n	801410c <lis3mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	685c      	ldr	r4, [r3, #4]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	68d8      	ldr	r0, [r3, #12]
 8014100:	893b      	ldrh	r3, [r7, #8]
 8014102:	7af9      	ldrb	r1, [r7, #11]
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	47a0      	blx	r4
 8014108:	6178      	str	r0, [r7, #20]

  return ret;
 801410a:	697b      	ldr	r3, [r7, #20]
}
 801410c:	4618      	mov	r0, r3
 801410e:	371c      	adds	r7, #28
 8014110:	46bd      	mov	sp, r7
 8014112:	bd90      	pop	{r4, r7, pc}

08014114 <lis3mdl_write_reg>:
  *
  */
int32_t __weak lis3mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8014114:	b590      	push	{r4, r7, lr}
 8014116:	b087      	sub	sp, #28
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	607a      	str	r2, [r7, #4]
 801411e:	461a      	mov	r2, r3
 8014120:	460b      	mov	r3, r1
 8014122:	72fb      	strb	r3, [r7, #11]
 8014124:	4613      	mov	r3, r2
 8014126:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d102      	bne.n	8014134 <lis3mdl_write_reg+0x20>
  {
    return -1;
 801412e:	f04f 33ff 	mov.w	r3, #4294967295
 8014132:	e009      	b.n	8014148 <lis3mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	681c      	ldr	r4, [r3, #0]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	68d8      	ldr	r0, [r3, #12]
 801413c:	893b      	ldrh	r3, [r7, #8]
 801413e:	7af9      	ldrb	r1, [r7, #11]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	47a0      	blx	r4
 8014144:	6178      	str	r0, [r7, #20]

  return ret;
 8014146:	697b      	ldr	r3, [r7, #20]
}
 8014148:	4618      	mov	r0, r3
 801414a:	371c      	adds	r7, #28
 801414c:	46bd      	mov	sp, r7
 801414e:	bd90      	pop	{r4, r7, pc}

08014150 <lis3mdl_from_fs4_to_gauss>:
  * @{
  *
  */

float_t lis3mdl_from_fs4_to_gauss(int16_t lsb)
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 6842.0f);
 801415a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801415e:	ee07 3a90 	vmov	s15, r3
 8014162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014166:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8014180 <lis3mdl_from_fs4_to_gauss+0x30>
 801416a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801416e:	eef0 7a66 	vmov.f32	s15, s13
}
 8014172:	eeb0 0a67 	vmov.f32	s0, s15
 8014176:	370c      	adds	r7, #12
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr
 8014180:	45d5d000 	.word	0x45d5d000

08014184 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(const stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b086      	sub	sp, #24
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	460b      	mov	r3, r1
 801418e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8014190:	f107 0210 	add.w	r2, r7, #16
 8014194:	2301      	movs	r3, #1
 8014196:	2120      	movs	r1, #32
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f7ff ff9d 	bl	80140d8 <lis3mdl_read_reg>
 801419e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d10f      	bne.n	80141c6 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 80141a6:	78fb      	ldrb	r3, [r7, #3]
 80141a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80141ac:	b2da      	uxtb	r2, r3
 80141ae:	7c3b      	ldrb	r3, [r7, #16]
 80141b0:	f362 0346 	bfi	r3, r2, #1, #6
 80141b4:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80141b6:	f107 0210 	add.w	r2, r7, #16
 80141ba:	2301      	movs	r3, #1
 80141bc:	2120      	movs	r1, #32
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f7ff ffa8 	bl	8014114 <lis3mdl_write_reg>
 80141c4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d107      	bne.n	80141dc <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80141cc:	f107 020c 	add.w	r2, r7, #12
 80141d0:	2301      	movs	r3, #1
 80141d2:	2123      	movs	r1, #35	@ 0x23
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff ff7f 	bl	80140d8 <lis3mdl_read_reg>
 80141da:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d111      	bne.n	8014206 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 80141e2:	78fb      	ldrb	r3, [r7, #3]
 80141e4:	091b      	lsrs	r3, r3, #4
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	f003 0303 	and.w	r3, r3, #3
 80141ec:	b2da      	uxtb	r2, r3
 80141ee:	7b3b      	ldrb	r3, [r7, #12]
 80141f0:	f362 0383 	bfi	r3, r2, #2, #2
 80141f4:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 80141f6:	f107 020c 	add.w	r2, r7, #12
 80141fa:	2301      	movs	r3, #1
 80141fc:	2123      	movs	r1, #35	@ 0x23
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7ff ff88 	bl	8014114 <lis3mdl_write_reg>
 8014204:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8014206:	697b      	ldr	r3, [r7, #20]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3718      	adds	r7, #24
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	460b      	mov	r3, r1
 801421a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 801421c:	f107 0208 	add.w	r2, r7, #8
 8014220:	2301      	movs	r3, #1
 8014222:	2120      	movs	r1, #32
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f7ff ff57 	bl	80140d8 <lis3mdl_read_reg>
 801422a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d10f      	bne.n	8014252 <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 8014232:	78fb      	ldrb	r3, [r7, #3]
 8014234:	f003 0301 	and.w	r3, r3, #1
 8014238:	b2da      	uxtb	r2, r3
 801423a:	7a3b      	ldrb	r3, [r7, #8]
 801423c:	f362 13c7 	bfi	r3, r2, #7, #1
 8014240:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8014242:	f107 0208 	add.w	r2, r7, #8
 8014246:	2301      	movs	r3, #1
 8014248:	2120      	movs	r1, #32
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f7ff ff62 	bl	8014114 <lis3mdl_write_reg>
 8014250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014252:	68fb      	ldr	r3, [r7, #12]
}
 8014254:	4618      	mov	r0, r3
 8014256:	3710      	adds	r7, #16
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(const stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	460b      	mov	r3, r1
 8014266:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8014268:	f107 0208 	add.w	r2, r7, #8
 801426c:	2301      	movs	r3, #1
 801426e:	2121      	movs	r1, #33	@ 0x21
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7ff ff31 	bl	80140d8 <lis3mdl_read_reg>
 8014276:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d10f      	bne.n	801429e <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 801427e:	78fb      	ldrb	r3, [r7, #3]
 8014280:	f003 0303 	and.w	r3, r3, #3
 8014284:	b2da      	uxtb	r2, r3
 8014286:	7a3b      	ldrb	r3, [r7, #8]
 8014288:	f362 1346 	bfi	r3, r2, #5, #2
 801428c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 801428e:	f107 0208 	add.w	r2, r7, #8
 8014292:	2301      	movs	r3, #1
 8014294:	2121      	movs	r1, #33	@ 0x21
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff ff3c 	bl	8014114 <lis3mdl_write_reg>
 801429c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801429e:	68fb      	ldr	r3, [r7, #12]
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3710      	adds	r7, #16
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b084      	sub	sp, #16
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	460b      	mov	r3, r1
 80142b2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80142b4:	f107 0208 	add.w	r2, r7, #8
 80142b8:	2301      	movs	r3, #1
 80142ba:	2122      	movs	r1, #34	@ 0x22
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff ff0b 	bl	80140d8 <lis3mdl_read_reg>
 80142c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d10f      	bne.n	80142ea <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80142ca:	78fb      	ldrb	r3, [r7, #3]
 80142cc:	f003 0303 	and.w	r3, r3, #3
 80142d0:	b2da      	uxtb	r2, r3
 80142d2:	7a3b      	ldrb	r3, [r7, #8]
 80142d4:	f362 0301 	bfi	r3, r2, #0, #2
 80142d8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80142da:	f107 0208 	add.w	r2, r7, #8
 80142de:	2301      	movs	r3, #1
 80142e0:	2122      	movs	r1, #34	@ 0x22
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7ff ff16 	bl	8014114 <lis3mdl_write_reg>
 80142e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80142ea:	68fb      	ldr	r3, [r7, #12]
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8014300:	f107 0208 	add.w	r2, r7, #8
 8014304:	2301      	movs	r3, #1
 8014306:	2124      	movs	r1, #36	@ 0x24
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7ff fee5 	bl	80140d8 <lis3mdl_read_reg>
 801430e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10f      	bne.n	8014336 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 8014316:	78fb      	ldrb	r3, [r7, #3]
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	b2da      	uxtb	r2, r3
 801431e:	7a3b      	ldrb	r3, [r7, #8]
 8014320:	f362 1386 	bfi	r3, r2, #6, #1
 8014324:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8014326:	f107 0208 	add.w	r2, r7, #8
 801432a:	2301      	movs	r3, #1
 801432c:	2124      	movs	r1, #36	@ 0x24
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f7ff fef0 	bl	8014114 <lis3mdl_write_reg>
 8014334:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014336:	68fb      	ldr	r3, [r7, #12]
}
 8014338:	4618      	mov	r0, r3
 801433a:	3710      	adds	r7, #16
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <lis3mdl_mag_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_mag_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  lis3mdl_status_reg_t status_reg;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_STATUS_REG,
 801434a:	f107 0208 	add.w	r2, r7, #8
 801434e:	2301      	movs	r3, #1
 8014350:	2127      	movs	r1, #39	@ 0x27
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff fec0 	bl	80140d8 <lis3mdl_read_reg>
 8014358:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = (uint8_t)status_reg.zyxda;
 801435a:	7a3b      	ldrb	r3, [r7, #8]
 801435c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014360:	b2db      	uxtb	r3, r3
 8014362:	461a      	mov	r2, r3
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	701a      	strb	r2, [r3, #0]

  return ret;
 8014368:	68fb      	ldr	r3, [r7, #12]
}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b086      	sub	sp, #24
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 801437c:	f107 020c 	add.w	r2, r7, #12
 8014380:	2306      	movs	r3, #6
 8014382:	2128      	movs	r1, #40	@ 0x28
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f7ff fea7 	bl	80140d8 <lis3mdl_read_reg>
 801438a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 801438c:	7b7b      	ldrb	r3, [r7, #13]
 801438e:	b21a      	sxth	r2, r3
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	f9b3 3000 	ldrsh.w	r3, [r3]
 801439a:	b29b      	uxth	r3, r3
 801439c:	021b      	lsls	r3, r3, #8
 801439e:	b29b      	uxth	r3, r3
 80143a0:	7b3a      	ldrb	r2, [r7, #12]
 80143a2:	4413      	add	r3, r2
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	b21a      	sxth	r2, r3
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80143ac:	7bfa      	ldrb	r2, [r7, #15]
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	3302      	adds	r3, #2
 80143b2:	b212      	sxth	r2, r2
 80143b4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	3302      	adds	r3, #2
 80143ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143be:	b29b      	uxth	r3, r3
 80143c0:	021b      	lsls	r3, r3, #8
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	7bba      	ldrb	r2, [r7, #14]
 80143c6:	4413      	add	r3, r2
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	3302      	adds	r3, #2
 80143ce:	b212      	sxth	r2, r2
 80143d0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80143d2:	7c7a      	ldrb	r2, [r7, #17]
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	3304      	adds	r3, #4
 80143d8:	b212      	sxth	r2, r2
 80143da:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	3304      	adds	r3, #4
 80143e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	021b      	lsls	r3, r3, #8
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	7c3a      	ldrb	r2, [r7, #16]
 80143ec:	4413      	add	r3, r2
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	3304      	adds	r3, #4
 80143f4:	b212      	sxth	r2, r2
 80143f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80143f8:	697b      	ldr	r3, [r7, #20]
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3718      	adds	r7, #24
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 801440c:	2301      	movs	r3, #1
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	210f      	movs	r1, #15
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7ff fe60 	bl	80140d8 <lis3mdl_read_reg>
 8014418:	60f8      	str	r0, [r7, #12]

  return ret;
 801441a:	68fb      	ldr	r3, [r7, #12]
}
 801441c:	4618      	mov	r0, r3
 801441e:	3710      	adds	r7, #16
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}

08014424 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	460b      	mov	r3, r1
 801442e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8014430:	f107 0208 	add.w	r2, r7, #8
 8014434:	2301      	movs	r3, #1
 8014436:	2121      	movs	r1, #33	@ 0x21
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7ff fe4d 	bl	80140d8 <lis3mdl_read_reg>
 801443e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d10f      	bne.n	8014466 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 8014446:	78fb      	ldrb	r3, [r7, #3]
 8014448:	f003 0301 	and.w	r3, r3, #1
 801444c:	b2da      	uxtb	r2, r3
 801444e:	7a3b      	ldrb	r3, [r7, #8]
 8014450:	f362 0382 	bfi	r3, r2, #2, #1
 8014454:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8014456:	f107 0208 	add.w	r2, r7, #8
 801445a:	2301      	movs	r3, #1
 801445c:	2121      	movs	r1, #33	@ 0x21
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7ff fe58 	bl	8014114 <lis3mdl_write_reg>
 8014464:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014466:	68fb      	ldr	r3, [r7, #12]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3710      	adds	r7, #16
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <lis3mdl_reset_get>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 801447a:	f107 0208 	add.w	r2, r7, #8
 801447e:	2301      	movs	r3, #1
 8014480:	2121      	movs	r1, #33	@ 0x21
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f7ff fe28 	bl	80140d8 <lis3mdl_read_reg>
 8014488:	60f8      	str	r0, [r7, #12]
  *val = (uint8_t)ctrl_reg2.soft_rst;
 801448a:	7a3b      	ldrb	r3, [r7, #8]
 801448c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014490:	b2db      	uxtb	r3, r3
 8014492:	461a      	mov	r2, r3
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	701a      	strb	r2, [r3, #0]

  return ret;
 8014498:	68fb      	ldr	r3, [r7, #12]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <lis3mdl_int_config_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_int_config_set(const stmdev_ctx_t *ctx,
                               lis3mdl_int_cfg_t *val)
{
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
 80144aa:	6039      	str	r1, [r7, #0]
  return lis3mdl_write_reg(ctx, LIS3MDL_INT_CFG, (uint8_t *) val, 1);
 80144ac:	2301      	movs	r3, #1
 80144ae:	683a      	ldr	r2, [r7, #0]
 80144b0:	2130      	movs	r1, #48	@ 0x30
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f7ff fe2e 	bl	8014114 <lis3mdl_write_reg>
 80144b8:	4603      	mov	r3, r0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <lis3mdl_int_generation_set>:
  * @param  val      change the values of ien in reg INT_CFG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_int_generation_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b084      	sub	sp, #16
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
 80144ca:	460b      	mov	r3, r1
 80144cc:	70fb      	strb	r3, [r7, #3]
  lis3mdl_int_cfg_t int_cfg;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_INT_CFG, (uint8_t *)&int_cfg, 1);
 80144ce:	f107 0208 	add.w	r2, r7, #8
 80144d2:	2301      	movs	r3, #1
 80144d4:	2130      	movs	r1, #48	@ 0x30
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f7ff fdfe 	bl	80140d8 <lis3mdl_read_reg>
 80144dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d10f      	bne.n	8014504 <lis3mdl_int_generation_set+0x42>
  {
    int_cfg.ien = val;
 80144e4:	78fb      	ldrb	r3, [r7, #3]
 80144e6:	f003 0301 	and.w	r3, r3, #1
 80144ea:	b2da      	uxtb	r2, r3
 80144ec:	7a3b      	ldrb	r3, [r7, #8]
 80144ee:	f362 0300 	bfi	r3, r2, #0, #1
 80144f2:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_INT_CFG, (uint8_t *)&int_cfg, 1);
 80144f4:	f107 0208 	add.w	r2, r7, #8
 80144f8:	2301      	movs	r3, #1
 80144fa:	2130      	movs	r1, #48	@ 0x30
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7ff fe09 	bl	8014114 <lis3mdl_write_reg>
 8014502:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014504:	68fb      	ldr	r3, [r7, #12]
}
 8014506:	4618      	mov	r0, r3
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <lis3mdl_int_threshold_set>:
  * @param buff      buffer that contains data to write(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_int_threshold_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b084      	sub	sp, #16
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
 8014516:	460b      	mov	r3, r1
 8014518:	807b      	strh	r3, [r7, #2]
  uint8_t buff[2];
  int32_t ret;

  buff[1] = (uint8_t)(val / 256U);
 801451a:	887b      	ldrh	r3, [r7, #2]
 801451c:	0a1b      	lsrs	r3, r3, #8
 801451e:	b29b      	uxth	r3, r3
 8014520:	b2db      	uxtb	r3, r3
 8014522:	727b      	strb	r3, [r7, #9]
  buff[0] = (uint8_t)(val - (buff[1] * 256U));
 8014524:	887b      	ldrh	r3, [r7, #2]
 8014526:	b2db      	uxtb	r3, r3
 8014528:	723b      	strb	r3, [r7, #8]
  ret = lis3mdl_write_reg(ctx, LIS3MDL_INT_THS_L, buff, 2);
 801452a:	f107 0208 	add.w	r2, r7, #8
 801452e:	2302      	movs	r3, #2
 8014530:	2132      	movs	r1, #50	@ 0x32
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7ff fdee 	bl	8014114 <lis3mdl_write_reg>
 8014538:	60f8      	str	r0, [r7, #12]

  return ret;
 801453a:	68fb      	ldr	r3, [r7, #12]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3710      	adds	r7, #16
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8014544:	b590      	push	{r4, r7, lr}
 8014546:	b087      	sub	sp, #28
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	607a      	str	r2, [r7, #4]
 801454e:	461a      	mov	r2, r3
 8014550:	460b      	mov	r3, r1
 8014552:	72fb      	strb	r3, [r7, #11]
 8014554:	4613      	mov	r3, r2
 8014556:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d102      	bne.n	8014564 <lsm6dsox_read_reg+0x20>
  {
    return -1;
 801455e:	f04f 33ff 	mov.w	r3, #4294967295
 8014562:	e009      	b.n	8014578 <lsm6dsox_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	685c      	ldr	r4, [r3, #4]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	68d8      	ldr	r0, [r3, #12]
 801456c:	893b      	ldrh	r3, [r7, #8]
 801456e:	7af9      	ldrb	r1, [r7, #11]
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	47a0      	blx	r4
 8014574:	6178      	str	r0, [r7, #20]

  return ret;
 8014576:	697b      	ldr	r3, [r7, #20]
}
 8014578:	4618      	mov	r0, r3
 801457a:	371c      	adds	r7, #28
 801457c:	46bd      	mov	sp, r7
 801457e:	bd90      	pop	{r4, r7, pc}

08014580 <lsm6dsox_write_reg>:
  *
  */
int32_t __weak lsm6dsox_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8014580:	b590      	push	{r4, r7, lr}
 8014582:	b087      	sub	sp, #28
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	607a      	str	r2, [r7, #4]
 801458a:	461a      	mov	r2, r3
 801458c:	460b      	mov	r3, r1
 801458e:	72fb      	strb	r3, [r7, #11]
 8014590:	4613      	mov	r3, r2
 8014592:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d102      	bne.n	80145a0 <lsm6dsox_write_reg+0x20>
  {
    return -1;
 801459a:	f04f 33ff 	mov.w	r3, #4294967295
 801459e:	e009      	b.n	80145b4 <lsm6dsox_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681c      	ldr	r4, [r3, #0]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	68d8      	ldr	r0, [r3, #12]
 80145a8:	893b      	ldrh	r3, [r7, #8]
 80145aa:	7af9      	ldrb	r1, [r7, #11]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	47a0      	blx	r4
 80145b0:	6178      	str	r0, [r7, #20]

  return ret;
 80145b2:	697b      	ldr	r3, [r7, #20]
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	371c      	adds	r7, #28
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd90      	pop	{r4, r7, pc}

080145bc <lsm6dsox_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dsox_from_fs4_to_mg(int16_t lsb)
{
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	4603      	mov	r3, r0
 80145c4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 80145c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80145ca:	ee07 3a90 	vmov	s15, r3
 80145ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145d2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80145e8 <lsm6dsox_from_fs4_to_mg+0x2c>
 80145d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80145da:	eeb0 0a67 	vmov.f32	s0, s15
 80145de:	370c      	adds	r7, #12
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr
 80145e8:	3df9db23 	.word	0x3df9db23

080145ec <lsm6dsox_from_fs1000_to_mdps>:
{
  return ((float_t)lsb) * 8.750f;
}

float_t lsm6dsox_from_fs1000_to_mdps(int16_t lsb)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	4603      	mov	r3, r0
 80145f4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 35.0f;
 80145f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80145fa:	ee07 3a90 	vmov	s15, r3
 80145fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014602:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8014618 <lsm6dsox_from_fs1000_to_mdps+0x2c>
 8014606:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 801460a:	eeb0 0a67 	vmov.f32	s0, s15
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr
 8014618:	420c0000 	.word	0x420c0000

0801461c <lsm6dsox_from_lsb_to_celsius>:
{
  return ((float_t)lsb) * 70.0f;
}

float_t lsm6dsox_from_lsb_to_celsius(int16_t lsb)
{
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	4603      	mov	r3, r0
 8014624:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8014626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801462a:	ee07 3a90 	vmov	s15, r3
 801462e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014632:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8014650 <lsm6dsox_from_lsb_to_celsius+0x34>
 8014636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801463a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 801463e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8014642:	eeb0 0a67 	vmov.f32	s0, s15
 8014646:	370c      	adds	r7, #12
 8014648:	46bd      	mov	sp, r7
 801464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464e:	4770      	bx	lr
 8014650:	43800000 	.word	0x43800000

08014654 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	460b      	mov	r3, r1
 801465e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8014660:	f107 0208 	add.w	r2, r7, #8
 8014664:	2301      	movs	r3, #1
 8014666:	2110      	movs	r1, #16
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7ff ff6b 	bl	8014544 <lsm6dsox_read_reg>
 801466e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d10f      	bne.n	8014696 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8014676:	78fb      	ldrb	r3, [r7, #3]
 8014678:	f003 0303 	and.w	r3, r3, #3
 801467c:	b2da      	uxtb	r2, r3
 801467e:	7a3b      	ldrb	r3, [r7, #8]
 8014680:	f362 0383 	bfi	r3, r2, #2, #2
 8014684:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8014686:	f107 0208 	add.w	r2, r7, #8
 801468a:	2301      	movs	r3, #1
 801468c:	2110      	movs	r1, #16
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7ff ff76 	bl	8014580 <lsm6dsox_write_reg>
 8014694:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014696:	68fb      	ldr	r3, [r7, #12]
}
 8014698:	4618      	mov	r0, r3
 801469a:	3710      	adds	r7, #16
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}

080146a0 <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b088      	sub	sp, #32
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	460b      	mov	r3, r1
 80146aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 80146ac:	78fb      	ldrb	r3, [r7, #3]
 80146ae:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80146b0:	f107 0314 	add.w	r3, r7, #20
 80146b4:	4619      	mov	r1, r3
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 fdb2 	bl	8015220 <lsm6dsox_fsm_enable_get>
 80146bc:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f040 80c4 	bne.w	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80146c6:	7d3b      	ldrb	r3, [r7, #20]
 80146c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80146cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80146ce:	7d3b      	ldrb	r3, [r7, #20]
 80146d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80146d4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80146d6:	4313      	orrs	r3, r2
 80146d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80146da:	7d3b      	ldrb	r3, [r7, #20]
 80146dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80146e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80146e2:	4313      	orrs	r3, r2
 80146e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80146e6:	7d3b      	ldrb	r3, [r7, #20]
 80146e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80146ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80146ee:	4313      	orrs	r3, r2
 80146f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80146f2:	7d3b      	ldrb	r3, [r7, #20]
 80146f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80146f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80146fa:	4313      	orrs	r3, r2
 80146fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80146fe:	7d3b      	ldrb	r3, [r7, #20]
 8014700:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014704:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8014706:	4313      	orrs	r3, r2
 8014708:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 801470a:	7d3b      	ldrb	r3, [r7, #20]
 801470c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8014710:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8014712:	4313      	orrs	r3, r2
 8014714:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8014716:	7d3b      	ldrb	r3, [r7, #20]
 8014718:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801471c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 801471e:	4313      	orrs	r3, r2
 8014720:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8014722:	7d7b      	ldrb	r3, [r7, #21]
 8014724:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014728:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 801472a:	4313      	orrs	r3, r2
 801472c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 801472e:	7d7b      	ldrb	r3, [r7, #21]
 8014730:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014734:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8014736:	4313      	orrs	r3, r2
 8014738:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 801473a:	7d7b      	ldrb	r3, [r7, #21]
 801473c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014740:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8014742:	4313      	orrs	r3, r2
 8014744:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8014746:	7d7b      	ldrb	r3, [r7, #21]
 8014748:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801474c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 801474e:	4313      	orrs	r3, r2
 8014750:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8014752:	7d7b      	ldrb	r3, [r7, #21]
 8014754:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8014758:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 801475a:	4313      	orrs	r3, r2
 801475c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 801475e:	7d7b      	ldrb	r3, [r7, #21]
 8014760:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014764:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8014766:	4313      	orrs	r3, r2
 8014768:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 801476a:	7d7b      	ldrb	r3, [r7, #21]
 801476c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8014770:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8014772:	4313      	orrs	r3, r2
 8014774:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8014776:	7d7b      	ldrb	r3, [r7, #21]
 8014778:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801477c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 801477e:	4313      	orrs	r3, r2
 8014780:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8014782:	2b01      	cmp	r3, #1
 8014784:	d163      	bne.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8014786:	f107 0313 	add.w	r3, r7, #19
 801478a:	4619      	mov	r1, r3
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f000 fd69 	bl	8015264 <lsm6dsox_fsm_data_rate_get>
 8014792:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d159      	bne.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 801479a:	7cfb      	ldrb	r3, [r7, #19]
 801479c:	2b03      	cmp	r3, #3
 801479e:	d853      	bhi.n	8014848 <lsm6dsox_xl_data_rate_set+0x1a8>
 80147a0:	a201      	add	r2, pc, #4	@ (adr r2, 80147a8 <lsm6dsox_xl_data_rate_set+0x108>)
 80147a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a6:	bf00      	nop
 80147a8:	080147b9 	.word	0x080147b9
 80147ac:	080147cb 	.word	0x080147cb
 80147b0:	080147e9 	.word	0x080147e9
 80147b4:	08014813 	.word	0x08014813
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80147b8:	78fb      	ldrb	r3, [r7, #3]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d102      	bne.n	80147c4 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80147be:	2301      	movs	r3, #1
 80147c0:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80147c2:	e044      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80147c4:	78fb      	ldrb	r3, [r7, #3]
 80147c6:	77fb      	strb	r3, [r7, #31]
            break;
 80147c8:	e041      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80147ca:	78fb      	ldrb	r3, [r7, #3]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d102      	bne.n	80147d6 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80147d0:	2302      	movs	r3, #2
 80147d2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80147d4:	e03b      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80147d6:	78fb      	ldrb	r3, [r7, #3]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d102      	bne.n	80147e2 <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80147dc:	2302      	movs	r3, #2
 80147de:	77fb      	strb	r3, [r7, #31]
            break;
 80147e0:	e035      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80147e2:	78fb      	ldrb	r3, [r7, #3]
 80147e4:	77fb      	strb	r3, [r7, #31]
            break;
 80147e6:	e032      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80147e8:	78fb      	ldrb	r3, [r7, #3]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d102      	bne.n	80147f4 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80147ee:	2303      	movs	r3, #3
 80147f0:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80147f2:	e02c      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80147f4:	78fb      	ldrb	r3, [r7, #3]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d102      	bne.n	8014800 <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80147fa:	2303      	movs	r3, #3
 80147fc:	77fb      	strb	r3, [r7, #31]
            break;
 80147fe:	e026      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8014800:	78fb      	ldrb	r3, [r7, #3]
 8014802:	2b02      	cmp	r3, #2
 8014804:	d102      	bne.n	801480c <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8014806:	2303      	movs	r3, #3
 8014808:	77fb      	strb	r3, [r7, #31]
            break;
 801480a:	e020      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 801480c:	78fb      	ldrb	r3, [r7, #3]
 801480e:	77fb      	strb	r3, [r7, #31]
            break;
 8014810:	e01d      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8014812:	78fb      	ldrb	r3, [r7, #3]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d102      	bne.n	801481e <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014818:	2304      	movs	r3, #4
 801481a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 801481c:	e017      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 801481e:	78fb      	ldrb	r3, [r7, #3]
 8014820:	2b01      	cmp	r3, #1
 8014822:	d102      	bne.n	801482a <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014824:	2304      	movs	r3, #4
 8014826:	77fb      	strb	r3, [r7, #31]
            break;
 8014828:	e011      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 801482a:	78fb      	ldrb	r3, [r7, #3]
 801482c:	2b02      	cmp	r3, #2
 801482e:	d102      	bne.n	8014836 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014830:	2304      	movs	r3, #4
 8014832:	77fb      	strb	r3, [r7, #31]
            break;
 8014834:	e00b      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8014836:	78fb      	ldrb	r3, [r7, #3]
 8014838:	2b03      	cmp	r3, #3
 801483a:	d102      	bne.n	8014842 <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 801483c:	2304      	movs	r3, #4
 801483e:	77fb      	strb	r3, [r7, #31]
            break;
 8014840:	e005      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8014842:	78fb      	ldrb	r3, [r7, #3]
 8014844:	77fb      	strb	r3, [r7, #31]
            break;
 8014846:	e002      	b.n	801484e <lsm6dsox_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8014848:	78fb      	ldrb	r3, [r7, #3]
 801484a:	77fb      	strb	r3, [r7, #31]
            break;
 801484c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 801484e:	7c3b      	ldrb	r3, [r7, #16]
 8014850:	f36f 03c3 	bfc	r3, #3, #1
 8014854:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d16e      	bne.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 801485c:	f107 0310 	add.w	r3, r7, #16
 8014860:	4619      	mov	r1, r3
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 fded 	bl	8016442 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8014868:	7c3b      	ldrb	r3, [r7, #16]
 801486a:	f003 0308 	and.w	r3, r3, #8
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b00      	cmp	r3, #0
 8014872:	d062      	beq.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8014874:	f107 030f 	add.w	r3, r7, #15
 8014878:	4619      	mov	r1, r3
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 fd3a 	bl	80152f4 <lsm6dsox_mlc_data_rate_get>
 8014880:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8014882:	69bb      	ldr	r3, [r7, #24]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d158      	bne.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
      {
        switch (mlc_odr)
 8014888:	7bfb      	ldrb	r3, [r7, #15]
 801488a:	2b03      	cmp	r3, #3
 801488c:	d852      	bhi.n	8014934 <lsm6dsox_xl_data_rate_set+0x294>
 801488e:	a201      	add	r2, pc, #4	@ (adr r2, 8014894 <lsm6dsox_xl_data_rate_set+0x1f4>)
 8014890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014894:	080148a5 	.word	0x080148a5
 8014898:	080148b7 	.word	0x080148b7
 801489c:	080148d5 	.word	0x080148d5
 80148a0:	080148ff 	.word	0x080148ff
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80148a4:	78fb      	ldrb	r3, [r7, #3]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d102      	bne.n	80148b0 <lsm6dsox_xl_data_rate_set+0x210>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80148aa:	2301      	movs	r3, #1
 80148ac:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80148ae:	e044      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80148b0:	78fb      	ldrb	r3, [r7, #3]
 80148b2:	77fb      	strb	r3, [r7, #31]
            break;
 80148b4:	e041      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80148b6:	78fb      	ldrb	r3, [r7, #3]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d102      	bne.n	80148c2 <lsm6dsox_xl_data_rate_set+0x222>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80148bc:	2302      	movs	r3, #2
 80148be:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80148c0:	e03b      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80148c2:	78fb      	ldrb	r3, [r7, #3]
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	d102      	bne.n	80148ce <lsm6dsox_xl_data_rate_set+0x22e>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80148c8:	2302      	movs	r3, #2
 80148ca:	77fb      	strb	r3, [r7, #31]
            break;
 80148cc:	e035      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80148ce:	78fb      	ldrb	r3, [r7, #3]
 80148d0:	77fb      	strb	r3, [r7, #31]
            break;
 80148d2:	e032      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80148d4:	78fb      	ldrb	r3, [r7, #3]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d102      	bne.n	80148e0 <lsm6dsox_xl_data_rate_set+0x240>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80148da:	2303      	movs	r3, #3
 80148dc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80148de:	e02c      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80148e0:	78fb      	ldrb	r3, [r7, #3]
 80148e2:	2b01      	cmp	r3, #1
 80148e4:	d102      	bne.n	80148ec <lsm6dsox_xl_data_rate_set+0x24c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80148e6:	2303      	movs	r3, #3
 80148e8:	77fb      	strb	r3, [r7, #31]
            break;
 80148ea:	e026      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80148ec:	78fb      	ldrb	r3, [r7, #3]
 80148ee:	2b02      	cmp	r3, #2
 80148f0:	d102      	bne.n	80148f8 <lsm6dsox_xl_data_rate_set+0x258>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80148f2:	2303      	movs	r3, #3
 80148f4:	77fb      	strb	r3, [r7, #31]
            break;
 80148f6:	e020      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80148f8:	78fb      	ldrb	r3, [r7, #3]
 80148fa:	77fb      	strb	r3, [r7, #31]
            break;
 80148fc:	e01d      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80148fe:	78fb      	ldrb	r3, [r7, #3]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d102      	bne.n	801490a <lsm6dsox_xl_data_rate_set+0x26a>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014904:	2304      	movs	r3, #4
 8014906:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8014908:	e017      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 801490a:	78fb      	ldrb	r3, [r7, #3]
 801490c:	2b01      	cmp	r3, #1
 801490e:	d102      	bne.n	8014916 <lsm6dsox_xl_data_rate_set+0x276>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014910:	2304      	movs	r3, #4
 8014912:	77fb      	strb	r3, [r7, #31]
            break;
 8014914:	e011      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8014916:	78fb      	ldrb	r3, [r7, #3]
 8014918:	2b02      	cmp	r3, #2
 801491a:	d102      	bne.n	8014922 <lsm6dsox_xl_data_rate_set+0x282>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 801491c:	2304      	movs	r3, #4
 801491e:	77fb      	strb	r3, [r7, #31]
            break;
 8014920:	e00b      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8014922:	78fb      	ldrb	r3, [r7, #3]
 8014924:	2b03      	cmp	r3, #3
 8014926:	d102      	bne.n	801492e <lsm6dsox_xl_data_rate_set+0x28e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8014928:	2304      	movs	r3, #4
 801492a:	77fb      	strb	r3, [r7, #31]
            break;
 801492c:	e005      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 801492e:	78fb      	ldrb	r3, [r7, #3]
 8014930:	77fb      	strb	r3, [r7, #31]
            break;
 8014932:	e002      	b.n	801493a <lsm6dsox_xl_data_rate_set+0x29a>

          default:
            odr_xl = val;
 8014934:	78fb      	ldrb	r3, [r7, #3]
 8014936:	77fb      	strb	r3, [r7, #31]
            break;
 8014938:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d107      	bne.n	8014950 <lsm6dsox_xl_data_rate_set+0x2b0>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8014940:	f107 020c 	add.w	r2, r7, #12
 8014944:	2301      	movs	r3, #1
 8014946:	2110      	movs	r1, #16
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff fdfb 	bl	8014544 <lsm6dsox_read_reg>
 801494e:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10f      	bne.n	8014976 <lsm6dsox_xl_data_rate_set+0x2d6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8014956:	7ffb      	ldrb	r3, [r7, #31]
 8014958:	f003 030f 	and.w	r3, r3, #15
 801495c:	b2da      	uxtb	r2, r3
 801495e:	7b3b      	ldrb	r3, [r7, #12]
 8014960:	f362 1307 	bfi	r3, r2, #4, #4
 8014964:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8014966:	f107 020c 	add.w	r2, r7, #12
 801496a:	2301      	movs	r3, #1
 801496c:	2110      	movs	r1, #16
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7ff fe06 	bl	8014580 <lsm6dsox_write_reg>
 8014974:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8014976:	69bb      	ldr	r3, [r7, #24]
}
 8014978:	4618      	mov	r0, r3
 801497a:	3720      	adds	r7, #32
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b084      	sub	sp, #16
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	460b      	mov	r3, r1
 801498a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 801498c:	f107 0208 	add.w	r2, r7, #8
 8014990:	2301      	movs	r3, #1
 8014992:	2111      	movs	r1, #17
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7ff fdd5 	bl	8014544 <lsm6dsox_read_reg>
 801499a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d10f      	bne.n	80149c2 <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80149a2:	78fb      	ldrb	r3, [r7, #3]
 80149a4:	f003 0307 	and.w	r3, r3, #7
 80149a8:	b2da      	uxtb	r2, r3
 80149aa:	7a3b      	ldrb	r3, [r7, #8]
 80149ac:	f362 0343 	bfi	r3, r2, #1, #3
 80149b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80149b2:	f107 0208 	add.w	r2, r7, #8
 80149b6:	2301      	movs	r3, #1
 80149b8:	2111      	movs	r1, #17
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7ff fde0 	bl	8014580 <lsm6dsox_write_reg>
 80149c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80149c2:	68fb      	ldr	r3, [r7, #12]
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3710      	adds	r7, #16
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b088      	sub	sp, #32
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	460b      	mov	r3, r1
 80149d6:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 80149d8:	78fb      	ldrb	r3, [r7, #3]
 80149da:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80149dc:	f107 0314 	add.w	r3, r7, #20
 80149e0:	4619      	mov	r1, r3
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fc1c 	bl	8015220 <lsm6dsox_fsm_enable_get>
 80149e8:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f040 80c4 	bne.w	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80149f2:	7d3b      	ldrb	r3, [r7, #20]
 80149f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80149f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80149fa:	7d3b      	ldrb	r3, [r7, #20]
 80149fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014a00:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8014a02:	4313      	orrs	r3, r2
 8014a04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8014a06:	7d3b      	ldrb	r3, [r7, #20]
 8014a08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014a0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8014a0e:	4313      	orrs	r3, r2
 8014a10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8014a12:	7d3b      	ldrb	r3, [r7, #20]
 8014a14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014a18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8014a1a:	4313      	orrs	r3, r2
 8014a1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8014a1e:	7d3b      	ldrb	r3, [r7, #20]
 8014a20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8014a24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8014a26:	4313      	orrs	r3, r2
 8014a28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8014a2a:	7d3b      	ldrb	r3, [r7, #20]
 8014a2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014a30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8014a32:	4313      	orrs	r3, r2
 8014a34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8014a36:	7d3b      	ldrb	r3, [r7, #20]
 8014a38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8014a3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8014a42:	7d3b      	ldrb	r3, [r7, #20]
 8014a44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014a48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8014a4a:	4313      	orrs	r3, r2
 8014a4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8014a4e:	7d7b      	ldrb	r3, [r7, #21]
 8014a50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014a54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8014a56:	4313      	orrs	r3, r2
 8014a58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8014a5a:	7d7b      	ldrb	r3, [r7, #21]
 8014a5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014a60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8014a62:	4313      	orrs	r3, r2
 8014a64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8014a66:	7d7b      	ldrb	r3, [r7, #21]
 8014a68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014a6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8014a6e:	4313      	orrs	r3, r2
 8014a70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8014a72:	7d7b      	ldrb	r3, [r7, #21]
 8014a74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014a78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8014a7a:	4313      	orrs	r3, r2
 8014a7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8014a7e:	7d7b      	ldrb	r3, [r7, #21]
 8014a80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8014a84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8014a86:	4313      	orrs	r3, r2
 8014a88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8014a8a:	7d7b      	ldrb	r3, [r7, #21]
 8014a8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014a90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8014a92:	4313      	orrs	r3, r2
 8014a94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8014a96:	7d7b      	ldrb	r3, [r7, #21]
 8014a98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8014a9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8014aa2:	7d7b      	ldrb	r3, [r7, #21]
 8014aa4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014aa8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8014aae:	2b01      	cmp	r3, #1
 8014ab0:	d163      	bne.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8014ab2:	f107 0313 	add.w	r3, r7, #19
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 fbd3 	bl	8015264 <lsm6dsox_fsm_data_rate_get>
 8014abe:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d159      	bne.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8014ac6:	7cfb      	ldrb	r3, [r7, #19]
 8014ac8:	2b03      	cmp	r3, #3
 8014aca:	d853      	bhi.n	8014b74 <lsm6dsox_gy_data_rate_set+0x1a8>
 8014acc:	a201      	add	r2, pc, #4	@ (adr r2, 8014ad4 <lsm6dsox_gy_data_rate_set+0x108>)
 8014ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ad2:	bf00      	nop
 8014ad4:	08014ae5 	.word	0x08014ae5
 8014ad8:	08014af7 	.word	0x08014af7
 8014adc:	08014b15 	.word	0x08014b15
 8014ae0:	08014b3f 	.word	0x08014b3f
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014ae4:	78fb      	ldrb	r3, [r7, #3]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d102      	bne.n	8014af0 <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8014aea:	2301      	movs	r3, #1
 8014aec:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014aee:	e044      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8014af0:	78fb      	ldrb	r3, [r7, #3]
 8014af2:	77fb      	strb	r3, [r7, #31]
            break;
 8014af4:	e041      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014af6:	78fb      	ldrb	r3, [r7, #3]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d102      	bne.n	8014b02 <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8014afc:	2302      	movs	r3, #2
 8014afe:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014b00:	e03b      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014b02:	78fb      	ldrb	r3, [r7, #3]
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d102      	bne.n	8014b0e <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8014b08:	2302      	movs	r3, #2
 8014b0a:	77fb      	strb	r3, [r7, #31]
            break;
 8014b0c:	e035      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8014b0e:	78fb      	ldrb	r3, [r7, #3]
 8014b10:	77fb      	strb	r3, [r7, #31]
            break;
 8014b12:	e032      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014b14:	78fb      	ldrb	r3, [r7, #3]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d102      	bne.n	8014b20 <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014b1a:	2303      	movs	r3, #3
 8014b1c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014b1e:	e02c      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014b20:	78fb      	ldrb	r3, [r7, #3]
 8014b22:	2b01      	cmp	r3, #1
 8014b24:	d102      	bne.n	8014b2c <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014b26:	2303      	movs	r3, #3
 8014b28:	77fb      	strb	r3, [r7, #31]
            break;
 8014b2a:	e026      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8014b2c:	78fb      	ldrb	r3, [r7, #3]
 8014b2e:	2b02      	cmp	r3, #2
 8014b30:	d102      	bne.n	8014b38 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014b32:	2303      	movs	r3, #3
 8014b34:	77fb      	strb	r3, [r7, #31]
            break;
 8014b36:	e020      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8014b38:	78fb      	ldrb	r3, [r7, #3]
 8014b3a:	77fb      	strb	r3, [r7, #31]
            break;
 8014b3c:	e01d      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014b3e:	78fb      	ldrb	r3, [r7, #3]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d102      	bne.n	8014b4a <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014b44:	2304      	movs	r3, #4
 8014b46:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014b48:	e017      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014b4a:	78fb      	ldrb	r3, [r7, #3]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d102      	bne.n	8014b56 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014b50:	2304      	movs	r3, #4
 8014b52:	77fb      	strb	r3, [r7, #31]
            break;
 8014b54:	e011      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8014b56:	78fb      	ldrb	r3, [r7, #3]
 8014b58:	2b02      	cmp	r3, #2
 8014b5a:	d102      	bne.n	8014b62 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014b5c:	2304      	movs	r3, #4
 8014b5e:	77fb      	strb	r3, [r7, #31]
            break;
 8014b60:	e00b      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 8014b62:	78fb      	ldrb	r3, [r7, #3]
 8014b64:	2b03      	cmp	r3, #3
 8014b66:	d102      	bne.n	8014b6e <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014b68:	2304      	movs	r3, #4
 8014b6a:	77fb      	strb	r3, [r7, #31]
            break;
 8014b6c:	e005      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8014b6e:	78fb      	ldrb	r3, [r7, #3]
 8014b70:	77fb      	strb	r3, [r7, #31]
            break;
 8014b72:	e002      	b.n	8014b7a <lsm6dsox_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8014b74:	78fb      	ldrb	r3, [r7, #3]
 8014b76:	77fb      	strb	r3, [r7, #31]
            break;
 8014b78:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8014b7a:	7c3b      	ldrb	r3, [r7, #16]
 8014b7c:	f36f 03c3 	bfc	r3, #3, #1
 8014b80:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d170      	bne.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8014b88:	f107 0310 	add.w	r3, r7, #16
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f001 fc57 	bl	8016442 <lsm6dsox_embedded_sens_get>
 8014b94:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8014b96:	7c3b      	ldrb	r3, [r7, #16]
 8014b98:	f003 0308 	and.w	r3, r3, #8
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d063      	beq.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8014ba2:	f107 030f 	add.w	r3, r7, #15
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 fba3 	bl	80152f4 <lsm6dsox_mlc_data_rate_get>
 8014bae:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d159      	bne.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8014bb6:	7bfb      	ldrb	r3, [r7, #15]
 8014bb8:	2b03      	cmp	r3, #3
 8014bba:	d853      	bhi.n	8014c64 <lsm6dsox_gy_data_rate_set+0x298>
 8014bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8014bc4 <lsm6dsox_gy_data_rate_set+0x1f8>)
 8014bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc2:	bf00      	nop
 8014bc4:	08014bd5 	.word	0x08014bd5
 8014bc8:	08014be7 	.word	0x08014be7
 8014bcc:	08014c05 	.word	0x08014c05
 8014bd0:	08014c2f 	.word	0x08014c2f
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014bd4:	78fb      	ldrb	r3, [r7, #3]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d102      	bne.n	8014be0 <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8014bda:	2301      	movs	r3, #1
 8014bdc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014bde:	e044      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8014be0:	78fb      	ldrb	r3, [r7, #3]
 8014be2:	77fb      	strb	r3, [r7, #31]
            break;
 8014be4:	e041      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014be6:	78fb      	ldrb	r3, [r7, #3]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d102      	bne.n	8014bf2 <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8014bec:	2302      	movs	r3, #2
 8014bee:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014bf0:	e03b      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014bf2:	78fb      	ldrb	r3, [r7, #3]
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d102      	bne.n	8014bfe <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8014bf8:	2302      	movs	r3, #2
 8014bfa:	77fb      	strb	r3, [r7, #31]
            break;
 8014bfc:	e035      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8014bfe:	78fb      	ldrb	r3, [r7, #3]
 8014c00:	77fb      	strb	r3, [r7, #31]
            break;
 8014c02:	e032      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014c04:	78fb      	ldrb	r3, [r7, #3]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d102      	bne.n	8014c10 <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014c0a:	2303      	movs	r3, #3
 8014c0c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014c0e:	e02c      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014c10:	78fb      	ldrb	r3, [r7, #3]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d102      	bne.n	8014c1c <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014c16:	2303      	movs	r3, #3
 8014c18:	77fb      	strb	r3, [r7, #31]
            break;
 8014c1a:	e026      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8014c1c:	78fb      	ldrb	r3, [r7, #3]
 8014c1e:	2b02      	cmp	r3, #2
 8014c20:	d102      	bne.n	8014c28 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8014c22:	2303      	movs	r3, #3
 8014c24:	77fb      	strb	r3, [r7, #31]
            break;
 8014c26:	e020      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8014c28:	78fb      	ldrb	r3, [r7, #3]
 8014c2a:	77fb      	strb	r3, [r7, #31]
            break;
 8014c2c:	e01d      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8014c2e:	78fb      	ldrb	r3, [r7, #3]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014c34:	2304      	movs	r3, #4
 8014c36:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8014c38:	e017      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8014c3a:	78fb      	ldrb	r3, [r7, #3]
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d102      	bne.n	8014c46 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014c40:	2304      	movs	r3, #4
 8014c42:	77fb      	strb	r3, [r7, #31]
            break;
 8014c44:	e011      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8014c46:	78fb      	ldrb	r3, [r7, #3]
 8014c48:	2b02      	cmp	r3, #2
 8014c4a:	d102      	bne.n	8014c52 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014c4c:	2304      	movs	r3, #4
 8014c4e:	77fb      	strb	r3, [r7, #31]
            break;
 8014c50:	e00b      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 8014c52:	78fb      	ldrb	r3, [r7, #3]
 8014c54:	2b03      	cmp	r3, #3
 8014c56:	d102      	bne.n	8014c5e <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8014c58:	2304      	movs	r3, #4
 8014c5a:	77fb      	strb	r3, [r7, #31]
            break;
 8014c5c:	e005      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8014c5e:	78fb      	ldrb	r3, [r7, #3]
 8014c60:	77fb      	strb	r3, [r7, #31]
            break;
 8014c62:	e002      	b.n	8014c6a <lsm6dsox_gy_data_rate_set+0x29e>

          default:
            odr_gy = val;
 8014c64:	78fb      	ldrb	r3, [r7, #3]
 8014c66:	77fb      	strb	r3, [r7, #31]
            break;
 8014c68:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d107      	bne.n	8014c80 <lsm6dsox_gy_data_rate_set+0x2b4>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8014c70:	f107 020c 	add.w	r2, r7, #12
 8014c74:	2301      	movs	r3, #1
 8014c76:	2111      	movs	r1, #17
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f7ff fc63 	bl	8014544 <lsm6dsox_read_reg>
 8014c7e:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d10f      	bne.n	8014ca6 <lsm6dsox_gy_data_rate_set+0x2da>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8014c86:	7ffb      	ldrb	r3, [r7, #31]
 8014c88:	f003 030f 	and.w	r3, r3, #15
 8014c8c:	b2da      	uxtb	r2, r3
 8014c8e:	7b3b      	ldrb	r3, [r7, #12]
 8014c90:	f362 1307 	bfi	r3, r2, #4, #4
 8014c94:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8014c96:	f107 020c 	add.w	r2, r7, #12
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	2111      	movs	r1, #17
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f7ff fc6e 	bl	8014580 <lsm6dsox_write_reg>
 8014ca4:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8014ca6:	69bb      	ldr	r3, [r7, #24]
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3720      	adds	r7, #32
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <lsm6dsox_xl_power_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_power_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_xl_hm_mode_t val)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b086      	sub	sp, #24
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	460b      	mov	r3, r1
 8014cba:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl5_c_t ctrl5_c;
  lsm6dsox_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *) &ctrl5_c, 1);
 8014cbc:	f107 0210 	add.w	r2, r7, #16
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	2114      	movs	r1, #20
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7ff fc3d 	bl	8014544 <lsm6dsox_read_reg>
 8014cca:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d110      	bne.n	8014cf4 <lsm6dsox_xl_power_mode_set+0x44>
  {
    ctrl5_c.xl_ulp_en = ((uint8_t)val & 0x02U) >> 1;
 8014cd2:	78fb      	ldrb	r3, [r7, #3]
 8014cd4:	085b      	lsrs	r3, r3, #1
 8014cd6:	f003 0301 	and.w	r3, r3, #1
 8014cda:	b2da      	uxtb	r2, r3
 8014cdc:	7c3b      	ldrb	r3, [r7, #16]
 8014cde:	f362 13c7 	bfi	r3, r2, #7, #1
 8014ce2:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *) &ctrl5_c, 1);
 8014ce4:	f107 0210 	add.w	r2, r7, #16
 8014ce8:	2301      	movs	r3, #1
 8014cea:	2114      	movs	r1, #20
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7ff fc47 	bl	8014580 <lsm6dsox_write_reg>
 8014cf2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d107      	bne.n	8014d0a <lsm6dsox_xl_power_mode_set+0x5a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t *) &ctrl6_c, 1);
 8014cfa:	f107 020c 	add.w	r2, r7, #12
 8014cfe:	2301      	movs	r3, #1
 8014d00:	2115      	movs	r1, #21
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f7ff fc1e 	bl	8014544 <lsm6dsox_read_reg>
 8014d08:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d10f      	bne.n	8014d30 <lsm6dsox_xl_power_mode_set+0x80>
  {
    ctrl6_c.xl_hm_mode = (uint8_t)val & 0x01U;
 8014d10:	78fb      	ldrb	r3, [r7, #3]
 8014d12:	f003 0301 	and.w	r3, r3, #1
 8014d16:	b2da      	uxtb	r2, r3
 8014d18:	7b3b      	ldrb	r3, [r7, #12]
 8014d1a:	f362 1304 	bfi	r3, r2, #4, #1
 8014d1e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t *) &ctrl6_c, 1);
 8014d20:	f107 020c 	add.w	r2, r7, #12
 8014d24:	2301      	movs	r3, #1
 8014d26:	2115      	movs	r1, #21
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f7ff fc29 	bl	8014580 <lsm6dsox_write_reg>
 8014d2e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8014d30:	697b      	ldr	r3, [r7, #20]
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3718      	adds	r7, #24
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <lsm6dsox_gy_power_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_power_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_g_hm_mode_t val)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b084      	sub	sp, #16
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	460b      	mov	r3, r1
 8014d44:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl7_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t *)&reg, 1);
 8014d46:	f107 0208 	add.w	r2, r7, #8
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	2116      	movs	r1, #22
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f7ff fbf8 	bl	8014544 <lsm6dsox_read_reg>
 8014d54:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d10f      	bne.n	8014d7c <lsm6dsox_gy_power_mode_set+0x42>
  {
    reg.g_hm_mode = (uint8_t)val;
 8014d5c:	78fb      	ldrb	r3, [r7, #3]
 8014d5e:	f003 0301 	and.w	r3, r3, #1
 8014d62:	b2da      	uxtb	r2, r3
 8014d64:	7a3b      	ldrb	r3, [r7, #8]
 8014d66:	f362 13c7 	bfi	r3, r2, #7, #1
 8014d6a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t *)&reg, 1);
 8014d6c:	f107 0208 	add.w	r2, r7, #8
 8014d70:	2301      	movs	r3, #1
 8014d72:	2116      	movs	r1, #22
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7ff fc03 	bl	8014580 <lsm6dsox_write_reg>
 8014d7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <lsm6dsox_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_status_reg_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_status_reg_t *val)
{
 8014d86:	b580      	push	{r7, lr}
 8014d88:	b084      	sub	sp, #16
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
 8014d8e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *) val, 1);
 8014d90:	2301      	movs	r3, #1
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	211e      	movs	r1, #30
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7ff fbd4 	bl	8014544 <lsm6dsox_read_reg>
 8014d9c:	60f8      	str	r0, [r7, #12]

  return ret;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3710      	adds	r7, #16
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <lsm6dsox_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 8014db2:	f107 0208 	add.w	r2, r7, #8
 8014db6:	2301      	movs	r3, #1
 8014db8:	211e      	movs	r1, #30
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7ff fbc2 	bl	8014544 <lsm6dsox_read_reg>
 8014dc0:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 8014dc2:	7a3b      	ldrb	r3, [r7, #8]
 8014dc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	461a      	mov	r2, r3
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	701a      	strb	r2, [r3, #0]

  return ret;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3710      	adds	r7, #16
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}

08014dda <lsm6dsox_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8014dda:	b580      	push	{r7, lr}
 8014ddc:	b084      	sub	sp, #16
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	6078      	str	r0, [r7, #4]
 8014de2:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 8014de4:	f107 0208 	add.w	r2, r7, #8
 8014de8:	2301      	movs	r3, #1
 8014dea:	211e      	movs	r1, #30
 8014dec:	6878      	ldr	r0, [r7, #4]
 8014dee:	f7ff fba9 	bl	8014544 <lsm6dsox_read_reg>
 8014df2:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 8014df4:	7a3b      	ldrb	r3, [r7, #8]
 8014df6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014dfa:	b2db      	uxtb	r3, r3
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	701a      	strb	r2, [r3, #0]

  return ret;
 8014e02:	68fb      	ldr	r3, [r7, #12]
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3710      	adds	r7, #16
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <lsm6dsox_temp_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_temp_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b084      	sub	sp, #16
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 8014e16:	f107 0208 	add.w	r2, r7, #8
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	211e      	movs	r1, #30
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f7ff fb90 	bl	8014544 <lsm6dsox_read_reg>
 8014e24:	60f8      	str	r0, [r7, #12]
  *val = reg.tda;
 8014e26:	7a3b      	ldrb	r3, [r7, #8]
 8014e28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	461a      	mov	r2, r3
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	701a      	strb	r2, [r3, #0]

  return ret;
 8014e34:	68fb      	ldr	r3, [r7, #12]
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3710      	adds	r7, #16
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <lsm6dsox_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b084      	sub	sp, #16
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	6078      	str	r0, [r7, #4]
 8014e46:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUT_TEMP_L, buff, 2);
 8014e48:	f107 0208 	add.w	r2, r7, #8
 8014e4c:	2302      	movs	r3, #2
 8014e4e:	2120      	movs	r1, #32
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff fb77 	bl	8014544 <lsm6dsox_read_reg>
 8014e56:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8014e58:	7a7b      	ldrb	r3, [r7, #9]
 8014e5a:	b21a      	sxth	r2, r3
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	021b      	lsls	r3, r3, #8
 8014e6a:	b29b      	uxth	r3, r3
 8014e6c:	7a3a      	ldrb	r2, [r7, #8]
 8014e6e:	4413      	add	r3, r2
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	b21a      	sxth	r2, r3
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	801a      	strh	r2, [r3, #0]

  return ret;
 8014e78:	68fb      	ldr	r3, [r7, #12]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}

08014e82 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b086      	sub	sp, #24
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
 8014e8a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 8014e8c:	f107 020c 	add.w	r2, r7, #12
 8014e90:	2306      	movs	r3, #6
 8014e92:	2122      	movs	r1, #34	@ 0x22
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7ff fb55 	bl	8014544 <lsm6dsox_read_reg>
 8014e9a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8014e9c:	7b7b      	ldrb	r3, [r7, #13]
 8014e9e:	b21a      	sxth	r2, r3
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	021b      	lsls	r3, r3, #8
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	7b3a      	ldrb	r2, [r7, #12]
 8014eb2:	4413      	add	r3, r2
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	b21a      	sxth	r2, r3
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8014ebc:	7bfa      	ldrb	r2, [r7, #15]
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	3302      	adds	r3, #2
 8014ec2:	b212      	sxth	r2, r2
 8014ec4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	3302      	adds	r3, #2
 8014eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	021b      	lsls	r3, r3, #8
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	7bba      	ldrb	r2, [r7, #14]
 8014ed6:	4413      	add	r3, r2
 8014ed8:	b29a      	uxth	r2, r3
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	3302      	adds	r3, #2
 8014ede:	b212      	sxth	r2, r2
 8014ee0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8014ee2:	7c7a      	ldrb	r2, [r7, #17]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	b212      	sxth	r2, r2
 8014eea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	021b      	lsls	r3, r3, #8
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	7c3a      	ldrb	r2, [r7, #16]
 8014efc:	4413      	add	r3, r2
 8014efe:	b29a      	uxth	r2, r3
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	3304      	adds	r3, #4
 8014f04:	b212      	sxth	r2, r2
 8014f06:	801a      	strh	r2, [r3, #0]

  return ret;
 8014f08:	697b      	ldr	r3, [r7, #20]
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3718      	adds	r7, #24
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b086      	sub	sp, #24
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8014f1c:	f107 020c 	add.w	r2, r7, #12
 8014f20:	2306      	movs	r3, #6
 8014f22:	2128      	movs	r1, #40	@ 0x28
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f7ff fb0d 	bl	8014544 <lsm6dsox_read_reg>
 8014f2a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8014f2c:	7b7b      	ldrb	r3, [r7, #13]
 8014f2e:	b21a      	sxth	r2, r3
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	021b      	lsls	r3, r3, #8
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	7b3a      	ldrb	r2, [r7, #12]
 8014f42:	4413      	add	r3, r2
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	b21a      	sxth	r2, r3
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8014f4c:	7bfa      	ldrb	r2, [r7, #15]
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	3302      	adds	r3, #2
 8014f52:	b212      	sxth	r2, r2
 8014f54:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	3302      	adds	r3, #2
 8014f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	021b      	lsls	r3, r3, #8
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	7bba      	ldrb	r2, [r7, #14]
 8014f66:	4413      	add	r3, r2
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	3302      	adds	r3, #2
 8014f6e:	b212      	sxth	r2, r2
 8014f70:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8014f72:	7c7a      	ldrb	r2, [r7, #17]
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	3304      	adds	r3, #4
 8014f78:	b212      	sxth	r2, r2
 8014f7a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	3304      	adds	r3, #4
 8014f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	021b      	lsls	r3, r3, #8
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	7c3a      	ldrb	r2, [r7, #16]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	3304      	adds	r3, #4
 8014f94:	b212      	sxth	r2, r2
 8014f96:	801a      	strh	r2, [r3, #0]

  return ret;
 8014f98:	697b      	ldr	r3, [r7, #20]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3718      	adds	r7, #24
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b084      	sub	sp, #16
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
 8014faa:	460b      	mov	r3, r1
 8014fac:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8014fae:	f107 0208 	add.w	r2, r7, #8
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7ff fac4 	bl	8014544 <lsm6dsox_read_reg>
 8014fbc:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d10f      	bne.n	8014fe4 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8014fc4:	78fb      	ldrb	r3, [r7, #3]
 8014fc6:	f003 0303 	and.w	r3, r3, #3
 8014fca:	b2da      	uxtb	r2, r3
 8014fcc:	7a3b      	ldrb	r3, [r7, #8]
 8014fce:	f362 1387 	bfi	r3, r2, #6, #2
 8014fd2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8014fd4:	f107 0208 	add.w	r2, r7, #8
 8014fd8:	2301      	movs	r3, #1
 8014fda:	2101      	movs	r1, #1
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7ff facf 	bl	8014580 <lsm6dsox_write_reg>
 8014fe2:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3710      	adds	r7, #16
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
 8014ff6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	683a      	ldr	r2, [r7, #0]
 8014ffc:	210f      	movs	r1, #15
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f7ff faa0 	bl	8014544 <lsm6dsox_read_reg>
 8015004:	60f8      	str	r0, [r7, #12]

  return ret;
 8015006:	68fb      	ldr	r3, [r7, #12]
}
 8015008:	4618      	mov	r0, r3
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	460b      	mov	r3, r1
 801501a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 801501c:	f107 0208 	add.w	r2, r7, #8
 8015020:	2301      	movs	r3, #1
 8015022:	2112      	movs	r1, #18
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7ff fa8d 	bl	8014544 <lsm6dsox_read_reg>
 801502a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d10f      	bne.n	8015052 <lsm6dsox_reset_set+0x42>
  {
    reg.sw_reset = val;
 8015032:	78fb      	ldrb	r3, [r7, #3]
 8015034:	f003 0301 	and.w	r3, r3, #1
 8015038:	b2da      	uxtb	r2, r3
 801503a:	7a3b      	ldrb	r3, [r7, #8]
 801503c:	f362 0300 	bfi	r3, r2, #0, #1
 8015040:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8015042:	f107 0208 	add.w	r2, r7, #8
 8015046:	2301      	movs	r3, #1
 8015048:	2112      	movs	r1, #18
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f7ff fa98 	bl	8014580 <lsm6dsox_write_reg>
 8015050:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8015052:	68fb      	ldr	r3, [r7, #12]
}
 8015054:	4618      	mov	r0, r3
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b084      	sub	sp, #16
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
 8015064:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8015066:	f107 0208 	add.w	r2, r7, #8
 801506a:	2301      	movs	r3, #1
 801506c:	2112      	movs	r1, #18
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7ff fa68 	bl	8014544 <lsm6dsox_read_reg>
 8015074:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8015076:	7a3b      	ldrb	r3, [r7, #8]
 8015078:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801507c:	b2db      	uxtb	r3, r3
 801507e:	461a      	mov	r2, r3
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	701a      	strb	r2, [r3, #0]

  return ret;
 8015084:	68fb      	ldr	r3, [r7, #12]
}
 8015086:	4618      	mov	r0, r3
 8015088:	3710      	adds	r7, #16
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(const stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b086      	sub	sp, #24
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
 8015096:	460b      	mov	r3, r1
 8015098:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 801509a:	f107 020c 	add.w	r2, r7, #12
 801509e:	2301      	movs	r3, #1
 80150a0:	2118      	movs	r1, #24
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f7ff fa4e 	bl	8014544 <lsm6dsox_read_reg>
 80150a8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d111      	bne.n	80150d4 <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80150b0:	78fb      	ldrb	r3, [r7, #3]
 80150b2:	09db      	lsrs	r3, r3, #7
 80150b4:	b2db      	uxtb	r3, r3
 80150b6:	f003 0301 	and.w	r3, r3, #1
 80150ba:	b2da      	uxtb	r2, r3
 80150bc:	7b3b      	ldrb	r3, [r7, #12]
 80150be:	f362 0341 	bfi	r3, r2, #1, #1
 80150c2:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80150c4:	f107 020c 	add.w	r2, r7, #12
 80150c8:	2301      	movs	r3, #1
 80150ca:	2118      	movs	r1, #24
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7ff fa57 	bl	8014580 <lsm6dsox_write_reg>
 80150d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d107      	bne.n	80150ea <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80150da:	f107 0210 	add.w	r2, r7, #16
 80150de:	2301      	movs	r3, #1
 80150e0:	2162      	movs	r1, #98	@ 0x62
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7ff fa2e 	bl	8014544 <lsm6dsox_read_reg>
 80150e8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d10f      	bne.n	8015110 <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80150f0:	78fb      	ldrb	r3, [r7, #3]
 80150f2:	f003 0303 	and.w	r3, r3, #3
 80150f6:	b2da      	uxtb	r2, r3
 80150f8:	7c3b      	ldrb	r3, [r7, #16]
 80150fa:	f362 03c4 	bfi	r3, r2, #3, #2
 80150fe:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8015100:	f107 0210 	add.w	r2, r7, #16
 8015104:	2301      	movs	r3, #1
 8015106:	2162      	movs	r1, #98	@ 0x62
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7ff fa39 	bl	8014580 <lsm6dsox_write_reg>
 801510e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8015110:	697b      	ldr	r3, [r7, #20]
}
 8015112:	4618      	mov	r0, r3
 8015114:	3718      	adds	r7, #24
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <lsm6dsox_int_notification_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_int_notification_set(const stmdev_ctx_t *ctx,
                                      lsm6dsox_lir_t val)
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b086      	sub	sp, #24
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
 8015122:	460b      	mov	r3, r1
 8015124:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_tap_cfg0_t tap_cfg0;
  lsm6dsox_page_rw_t page_rw;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG0, (uint8_t *) &tap_cfg0, 1);
 8015126:	f107 0210 	add.w	r2, r7, #16
 801512a:	2301      	movs	r3, #1
 801512c:	2156      	movs	r1, #86	@ 0x56
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff fa08 	bl	8014544 <lsm6dsox_read_reg>
 8015134:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d117      	bne.n	801516c <lsm6dsox_int_notification_set+0x52>
  {
    tap_cfg0.lir = (uint8_t)val & 0x01U;
 801513c:	78fb      	ldrb	r3, [r7, #3]
 801513e:	f003 0301 	and.w	r3, r3, #1
 8015142:	b2da      	uxtb	r2, r3
 8015144:	7c3b      	ldrb	r3, [r7, #16]
 8015146:	f362 0300 	bfi	r3, r2, #0, #1
 801514a:	743b      	strb	r3, [r7, #16]
    tap_cfg0.int_clr_on_read = (uint8_t)val & 0x01U;
 801514c:	78fb      	ldrb	r3, [r7, #3]
 801514e:	f003 0301 	and.w	r3, r3, #1
 8015152:	b2da      	uxtb	r2, r3
 8015154:	7c3b      	ldrb	r3, [r7, #16]
 8015156:	f362 1386 	bfi	r3, r2, #6, #1
 801515a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG0,
 801515c:	f107 0210 	add.w	r2, r7, #16
 8015160:	2301      	movs	r3, #1
 8015162:	2156      	movs	r1, #86	@ 0x56
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7ff fa0b 	bl	8014580 <lsm6dsox_write_reg>
 801516a:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &tap_cfg0, 1);
  }

  if (ret == 0)
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d104      	bne.n	801517c <lsm6dsox_int_notification_set+0x62>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8015172:	2102      	movs	r1, #2
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f7ff ff14 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 801517a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d107      	bne.n	8015192 <lsm6dsox_int_notification_set+0x78>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 8015182:	f107 020c 	add.w	r2, r7, #12
 8015186:	2301      	movs	r3, #1
 8015188:	2117      	movs	r1, #23
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f7ff f9da 	bl	8014544 <lsm6dsox_read_reg>
 8015190:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d110      	bne.n	80151ba <lsm6dsox_int_notification_set+0xa0>
  {
    page_rw.emb_func_lir = ((uint8_t)val & 0x02U) >> 1;
 8015198:	78fb      	ldrb	r3, [r7, #3]
 801519a:	085b      	lsrs	r3, r3, #1
 801519c:	f003 0301 	and.w	r3, r3, #1
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	7b3b      	ldrb	r3, [r7, #12]
 80151a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80151a8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_PAGE_RW, (uint8_t *) &page_rw, 1);
 80151aa:	f107 020c 	add.w	r2, r7, #12
 80151ae:	2301      	movs	r3, #1
 80151b0:	2117      	movs	r1, #23
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7ff f9e4 	bl	8014580 <lsm6dsox_write_reg>
 80151b8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d104      	bne.n	80151ca <lsm6dsox_int_notification_set+0xb0>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80151c0:	2100      	movs	r1, #0
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f7ff feed 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 80151c8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80151ca:	697b      	ldr	r3, [r7, #20]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <lsm6dsox_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fifo_mode_set(const stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	460b      	mov	r3, r1
 80151de:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80151e0:	f107 0208 	add.w	r2, r7, #8
 80151e4:	2301      	movs	r3, #1
 80151e6:	210a      	movs	r1, #10
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f7ff f9ab 	bl	8014544 <lsm6dsox_read_reg>
 80151ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d10f      	bne.n	8015216 <lsm6dsox_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80151f6:	78fb      	ldrb	r3, [r7, #3]
 80151f8:	f003 0307 	and.w	r3, r3, #7
 80151fc:	b2da      	uxtb	r2, r3
 80151fe:	7a3b      	ldrb	r3, [r7, #8]
 8015200:	f362 0302 	bfi	r3, r2, #0, #3
 8015204:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8015206:	f107 0208 	add.w	r2, r7, #8
 801520a:	2301      	movs	r3, #1
 801520c:	210a      	movs	r1, #10
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7ff f9b6 	bl	8014580 <lsm6dsox_write_reg>
 8015214:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8015216:	68fb      	ldr	r3, [r7, #12]
}
 8015218:	4618      	mov	r0, r3
 801521a:	3710      	adds	r7, #16
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 801522a:	2102      	movs	r1, #2
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7ff feb8 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015232:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d106      	bne.n	8015248 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 801523a:	2302      	movs	r3, #2
 801523c:	683a      	ldr	r2, [r7, #0]
 801523e:	2146      	movs	r1, #70	@ 0x46
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f7ff f97f 	bl	8014544 <lsm6dsox_read_reg>
 8015246:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d104      	bne.n	8015258 <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 801524e:	2100      	movs	r1, #0
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7ff fea6 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015256:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8015258:	68fb      	ldr	r3, [r7, #12]
}
 801525a:	4618      	mov	r0, r3
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
	...

08015264 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b084      	sub	sp, #16
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 801526e:	2102      	movs	r1, #2
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7ff fe96 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015276:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d107      	bne.n	801528e <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 801527e:	f107 0208 	add.w	r2, r7, #8
 8015282:	2301      	movs	r3, #1
 8015284:	215f      	movs	r1, #95	@ 0x5f
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7ff f95c 	bl	8014544 <lsm6dsox_read_reg>
 801528c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d12a      	bne.n	80152ea <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8015294:	7a3b      	ldrb	r3, [r7, #8]
 8015296:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801529a:	b2db      	uxtb	r3, r3
 801529c:	2b03      	cmp	r3, #3
 801529e:	d81b      	bhi.n	80152d8 <lsm6dsox_fsm_data_rate_get+0x74>
 80152a0:	a201      	add	r2, pc, #4	@ (adr r2, 80152a8 <lsm6dsox_fsm_data_rate_get+0x44>)
 80152a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152a6:	bf00      	nop
 80152a8:	080152b9 	.word	0x080152b9
 80152ac:	080152c1 	.word	0x080152c1
 80152b0:	080152c9 	.word	0x080152c9
 80152b4:	080152d1 	.word	0x080152d1
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	2200      	movs	r2, #0
 80152bc:	701a      	strb	r2, [r3, #0]
        break;
 80152be:	e00f      	b.n	80152e0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2201      	movs	r2, #1
 80152c4:	701a      	strb	r2, [r3, #0]
        break;
 80152c6:	e00b      	b.n	80152e0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2202      	movs	r2, #2
 80152cc:	701a      	strb	r2, [r3, #0]
        break;
 80152ce:	e007      	b.n	80152e0 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	2203      	movs	r2, #3
 80152d4:	701a      	strb	r2, [r3, #0]
        break;
 80152d6:	e003      	b.n	80152e0 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	2200      	movs	r2, #0
 80152dc:	701a      	strb	r2, [r3, #0]
        break;
 80152de:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80152e0:	2100      	movs	r1, #0
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f7ff fe5d 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 80152e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80152ea:	68fb      	ldr	r3, [r7, #12]
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3710      	adds	r7, #16
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80152fe:	2102      	movs	r1, #2
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7ff fe4e 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015306:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d107      	bne.n	801531e <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 801530e:	f107 0208 	add.w	r2, r7, #8
 8015312:	2301      	movs	r3, #1
 8015314:	2160      	movs	r1, #96	@ 0x60
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f7ff f914 	bl	8014544 <lsm6dsox_read_reg>
 801531c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d12a      	bne.n	801537a <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8015324:	7a3b      	ldrb	r3, [r7, #8]
 8015326:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801532a:	b2db      	uxtb	r3, r3
 801532c:	2b03      	cmp	r3, #3
 801532e:	d81b      	bhi.n	8015368 <lsm6dsox_mlc_data_rate_get+0x74>
 8015330:	a201      	add	r2, pc, #4	@ (adr r2, 8015338 <lsm6dsox_mlc_data_rate_get+0x44>)
 8015332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015336:	bf00      	nop
 8015338:	08015349 	.word	0x08015349
 801533c:	08015351 	.word	0x08015351
 8015340:	08015359 	.word	0x08015359
 8015344:	08015361 	.word	0x08015361
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	2200      	movs	r2, #0
 801534c:	701a      	strb	r2, [r3, #0]
        break;
 801534e:	e00f      	b.n	8015370 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	2201      	movs	r2, #1
 8015354:	701a      	strb	r2, [r3, #0]
        break;
 8015356:	e00b      	b.n	8015370 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	2202      	movs	r2, #2
 801535c:	701a      	strb	r2, [r3, #0]
        break;
 801535e:	e007      	b.n	8015370 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	2203      	movs	r2, #3
 8015364:	701a      	strb	r2, [r3, #0]
        break;
 8015366:	e003      	b.n	8015370 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2200      	movs	r2, #0
 801536c:	701a      	strb	r2, [r3, #0]
        break;
 801536e:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8015370:	2100      	movs	r1, #0
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff fe15 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015378:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801537a:	68fb      	ldr	r3, [r7, #12]
}
 801537c:	4618      	mov	r0, r3
 801537e:	3710      	adds	r7, #16
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <lsm6dsox_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t *val)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b08c      	sub	sp, #48	@ 0x30
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
  lsm6dsox_mlc_int1_t        mlc_int1;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 801538e:	2102      	movs	r1, #2
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	f7ff fe06 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015396:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if (ret == 0)
 8015398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539a:	2b00      	cmp	r3, #0
 801539c:	d107      	bne.n	80153ae <lsm6dsox_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT1,
 801539e:	f107 0214 	add.w	r2, r7, #20
 80153a2:	2301      	movs	r3, #1
 80153a4:	210d      	movs	r1, #13
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7ff f8cc 	bl	8014544 <lsm6dsox_read_reg>
 80153ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 80153ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d107      	bne.n	80153c4 <lsm6dsox_pin_int1_route_get+0x40>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 80153b4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80153b8:	2301      	movs	r3, #1
 80153ba:	210a      	movs	r1, #10
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7ff f8c1 	bl	8014544 <lsm6dsox_read_reg>
 80153c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 80153c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d107      	bne.n	80153da <lsm6dsox_pin_int1_route_get+0x56>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_A,
 80153ca:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80153ce:	2301      	movs	r3, #1
 80153d0:	210b      	movs	r1, #11
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f7ff f8b6 	bl	8014544 <lsm6dsox_read_reg>
 80153d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 80153da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d107      	bne.n	80153f0 <lsm6dsox_pin_int1_route_get+0x6c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_B,
 80153e0:	f107 0220 	add.w	r2, r7, #32
 80153e4:	2301      	movs	r3, #1
 80153e6:	210c      	movs	r1, #12
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f7ff f8ab 	bl	8014544 <lsm6dsox_read_reg>
 80153ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 80153f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d104      	bne.n	8015400 <lsm6dsox_pin_int1_route_get+0x7c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80153f6:	2100      	movs	r1, #0
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f7ff fdd2 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 80153fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ret == 0)
 8015400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015402:	2b00      	cmp	r3, #0
 8015404:	d107      	bne.n	8015416 <lsm6dsox_pin_int1_route_get+0x92>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT1_CTRL,
 8015406:	f107 021c 	add.w	r2, r7, #28
 801540a:	2301      	movs	r3, #1
 801540c:	210d      	movs	r1, #13
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7ff f898 	bl	8014544 <lsm6dsox_read_reg>
 8015414:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 8015416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015418:	2b00      	cmp	r3, #0
 801541a:	d107      	bne.n	801542c <lsm6dsox_pin_int1_route_get+0xa8>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 801541c:	f107 020c 	add.w	r2, r7, #12
 8015420:	2301      	movs	r3, #1
 8015422:	215e      	movs	r1, #94	@ 0x5e
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7ff f88d 	bl	8014544 <lsm6dsox_read_reg>
 801542a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ret == 0)
 801542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542e:	2b00      	cmp	r3, #0
 8015430:	d107      	bne.n	8015442 <lsm6dsox_pin_int1_route_get+0xbe>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8015432:	f107 0208 	add.w	r2, r7, #8
 8015436:	2301      	movs	r3, #1
 8015438:	2113      	movs	r1, #19
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f7ff f882 	bl	8014544 <lsm6dsox_read_reg>
 8015440:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 8015442:	7a3b      	ldrb	r3, [r7, #8]
 8015444:	f003 0320 	and.w	r3, r3, #32
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b00      	cmp	r3, #0
 801544c:	d028      	beq.n	80154a0 <lsm6dsox_pin_int1_route_get+0x11c>
  {
    if (ret == 0)
 801544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015450:	2b00      	cmp	r3, #0
 8015452:	d110      	bne.n	8015476 <lsm6dsox_pin_int1_route_get+0xf2>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8015454:	f107 0218 	add.w	r2, r7, #24
 8015458:	2301      	movs	r3, #1
 801545a:	210e      	movs	r1, #14
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f7ff f871 	bl	8014544 <lsm6dsox_read_reg>
 8015462:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&int2_ctrl, 1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8015464:	7e3b      	ldrb	r3, [r7, #24]
 8015466:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801546a:	b2d9      	uxtb	r1, r3
 801546c:	683a      	ldr	r2, [r7, #0]
 801546e:	7813      	ldrb	r3, [r2, #0]
 8015470:	f361 0382 	bfi	r3, r1, #2, #1
 8015474:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 8015476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015478:	2b00      	cmp	r3, #0
 801547a:	d11b      	bne.n	80154b4 <lsm6dsox_pin_int1_route_get+0x130>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 801547c:	f107 0210 	add.w	r2, r7, #16
 8015480:	2301      	movs	r3, #1
 8015482:	215f      	movs	r1, #95	@ 0x5f
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7ff f85d 	bl	8014544 <lsm6dsox_read_reg>
 801548a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      val->timestamp = md2_cfg.int2_timestamp;
 801548c:	7c3b      	ldrb	r3, [r7, #16]
 801548e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015492:	b2d9      	uxtb	r1, r3
 8015494:	683a      	ldr	r2, [r7, #0]
 8015496:	7853      	ldrb	r3, [r2, #1]
 8015498:	f361 0382 	bfi	r3, r1, #2, #1
 801549c:	7053      	strb	r3, [r2, #1]
 801549e:	e009      	b.n	80154b4 <lsm6dsox_pin_int1_route_get+0x130>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 80154a0:	683a      	ldr	r2, [r7, #0]
 80154a2:	7813      	ldrb	r3, [r2, #0]
 80154a4:	f36f 0382 	bfc	r3, #2, #1
 80154a8:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 80154aa:	683a      	ldr	r2, [r7, #0]
 80154ac:	7853      	ldrb	r3, [r2, #1]
 80154ae:	f36f 0382 	bfc	r3, #2, #1
 80154b2:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 80154b4:	7f3b      	ldrb	r3, [r7, #28]
 80154b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80154ba:	b2d9      	uxtb	r1, r3
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	7813      	ldrb	r3, [r2, #0]
 80154c0:	f361 0300 	bfi	r3, r1, #0, #1
 80154c4:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 80154c6:	7f3b      	ldrb	r3, [r7, #28]
 80154c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80154cc:	b2d9      	uxtb	r1, r3
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	7813      	ldrb	r3, [r2, #0]
 80154d2:	f361 0341 	bfi	r3, r1, #1, #1
 80154d6:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 80154d8:	7f3b      	ldrb	r3, [r7, #28]
 80154da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80154de:	b2d9      	uxtb	r1, r3
 80154e0:	683a      	ldr	r2, [r7, #0]
 80154e2:	7813      	ldrb	r3, [r2, #0]
 80154e4:	f361 03c3 	bfi	r3, r1, #3, #1
 80154e8:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 80154ea:	7f3b      	ldrb	r3, [r7, #28]
 80154ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154f0:	b2d9      	uxtb	r1, r3
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	7813      	ldrb	r3, [r2, #0]
 80154f6:	f361 1304 	bfi	r3, r1, #4, #1
 80154fa:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 80154fc:	7f3b      	ldrb	r3, [r7, #28]
 80154fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015502:	b2d9      	uxtb	r1, r3
 8015504:	683a      	ldr	r2, [r7, #0]
 8015506:	7813      	ldrb	r3, [r2, #0]
 8015508:	f361 1345 	bfi	r3, r1, #5, #1
 801550c:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 801550e:	7f3b      	ldrb	r3, [r7, #28]
 8015510:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015514:	b2d9      	uxtb	r1, r3
 8015516:	683a      	ldr	r2, [r7, #0]
 8015518:	7813      	ldrb	r3, [r2, #0]
 801551a:	f361 1386 	bfi	r3, r1, #6, #1
 801551e:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8015520:	7f3b      	ldrb	r3, [r7, #28]
 8015522:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015526:	b2d9      	uxtb	r1, r3
 8015528:	683a      	ldr	r2, [r7, #0]
 801552a:	7813      	ldrb	r3, [r2, #0]
 801552c:	f361 13c7 	bfi	r3, r1, #7, #1
 8015530:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8015532:	7f3b      	ldrb	r3, [r7, #28]
 8015534:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015538:	b2d9      	uxtb	r1, r3
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	7853      	ldrb	r3, [r2, #1]
 801553e:	f361 0300 	bfi	r3, r1, #0, #1
 8015542:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 8015544:	7b3b      	ldrb	r3, [r7, #12]
 8015546:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801554a:	b2d9      	uxtb	r1, r3
 801554c:	683a      	ldr	r2, [r7, #0]
 801554e:	7853      	ldrb	r3, [r2, #1]
 8015550:	f361 0341 	bfi	r3, r1, #1, #1
 8015554:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 8015556:	7b3b      	ldrb	r3, [r7, #12]
 8015558:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801555c:	b2d9      	uxtb	r1, r3
 801555e:	683a      	ldr	r2, [r7, #0]
 8015560:	7853      	ldrb	r3, [r2, #1]
 8015562:	f361 03c3 	bfi	r3, r1, #3, #1
 8015566:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 8015568:	7b3b      	ldrb	r3, [r7, #12]
 801556a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801556e:	b2d9      	uxtb	r1, r3
 8015570:	683a      	ldr	r2, [r7, #0]
 8015572:	7853      	ldrb	r3, [r2, #1]
 8015574:	f361 1304 	bfi	r3, r1, #4, #1
 8015578:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 801557a:	7b3b      	ldrb	r3, [r7, #12]
 801557c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015580:	b2d9      	uxtb	r1, r3
 8015582:	683a      	ldr	r2, [r7, #0]
 8015584:	7853      	ldrb	r3, [r2, #1]
 8015586:	f361 1345 	bfi	r3, r1, #5, #1
 801558a:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 801558c:	7b3b      	ldrb	r3, [r7, #12]
 801558e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015592:	b2d9      	uxtb	r1, r3
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	7853      	ldrb	r3, [r2, #1]
 8015598:	f361 1386 	bfi	r3, r1, #6, #1
 801559c:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 801559e:	7b3b      	ldrb	r3, [r7, #12]
 80155a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80155a4:	b2d9      	uxtb	r1, r3
 80155a6:	683a      	ldr	r2, [r7, #0]
 80155a8:	7853      	ldrb	r3, [r2, #1]
 80155aa:	f361 13c7 	bfi	r3, r1, #7, #1
 80155ae:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 80155b0:	7b3b      	ldrb	r3, [r7, #12]
 80155b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80155b6:	b2d9      	uxtb	r1, r3
 80155b8:	683a      	ldr	r2, [r7, #0]
 80155ba:	7893      	ldrb	r3, [r2, #2]
 80155bc:	f361 0300 	bfi	r3, r1, #0, #1
 80155c0:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 80155c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80155c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80155ca:	b2d9      	uxtb	r1, r3
 80155cc:	683a      	ldr	r2, [r7, #0]
 80155ce:	7893      	ldrb	r3, [r2, #2]
 80155d0:	f361 0341 	bfi	r3, r1, #1, #1
 80155d4:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 80155d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80155da:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80155de:	b2d9      	uxtb	r1, r3
 80155e0:	683a      	ldr	r2, [r7, #0]
 80155e2:	7893      	ldrb	r3, [r2, #2]
 80155e4:	f361 0382 	bfi	r3, r1, #2, #1
 80155e8:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 80155ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80155ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80155f2:	b2d9      	uxtb	r1, r3
 80155f4:	683a      	ldr	r2, [r7, #0]
 80155f6:	7893      	ldrb	r3, [r2, #2]
 80155f8:	f361 03c3 	bfi	r3, r1, #3, #1
 80155fc:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 80155fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015602:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015606:	b2d9      	uxtb	r1, r3
 8015608:	683a      	ldr	r2, [r7, #0]
 801560a:	7893      	ldrb	r3, [r2, #2]
 801560c:	f361 1304 	bfi	r3, r1, #4, #1
 8015610:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8015612:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015616:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801561a:	b2d9      	uxtb	r1, r3
 801561c:	683a      	ldr	r2, [r7, #0]
 801561e:	7893      	ldrb	r3, [r2, #2]
 8015620:	f361 1345 	bfi	r3, r1, #5, #1
 8015624:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 8015626:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801562a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801562e:	b2d9      	uxtb	r1, r3
 8015630:	683a      	ldr	r2, [r7, #0]
 8015632:	7893      	ldrb	r3, [r2, #2]
 8015634:	f361 1386 	bfi	r3, r1, #6, #1
 8015638:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 801563a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801563e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015642:	b2d9      	uxtb	r1, r3
 8015644:	683a      	ldr	r2, [r7, #0]
 8015646:	7893      	ldrb	r3, [r2, #2]
 8015648:	f361 13c7 	bfi	r3, r1, #7, #1
 801564c:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 801564e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015652:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015656:	b2d9      	uxtb	r1, r3
 8015658:	683a      	ldr	r2, [r7, #0]
 801565a:	78d3      	ldrb	r3, [r2, #3]
 801565c:	f361 0300 	bfi	r3, r1, #0, #1
 8015660:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 8015662:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015666:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801566a:	b2d9      	uxtb	r1, r3
 801566c:	683a      	ldr	r2, [r7, #0]
 801566e:	78d3      	ldrb	r3, [r2, #3]
 8015670:	f361 0341 	bfi	r3, r1, #1, #1
 8015674:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8015676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801567a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801567e:	b2d9      	uxtb	r1, r3
 8015680:	683a      	ldr	r2, [r7, #0]
 8015682:	78d3      	ldrb	r3, [r2, #3]
 8015684:	f361 0382 	bfi	r3, r1, #2, #1
 8015688:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 801568a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801568e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015692:	b2d9      	uxtb	r1, r3
 8015694:	683a      	ldr	r2, [r7, #0]
 8015696:	78d3      	ldrb	r3, [r2, #3]
 8015698:	f361 03c3 	bfi	r3, r1, #3, #1
 801569c:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 801569e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80156a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80156a6:	b2d9      	uxtb	r1, r3
 80156a8:	683a      	ldr	r2, [r7, #0]
 80156aa:	78d3      	ldrb	r3, [r2, #3]
 80156ac:	f361 1304 	bfi	r3, r1, #4, #1
 80156b0:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 80156b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80156ba:	b2d9      	uxtb	r1, r3
 80156bc:	683a      	ldr	r2, [r7, #0]
 80156be:	78d3      	ldrb	r3, [r2, #3]
 80156c0:	f361 1345 	bfi	r3, r1, #5, #1
 80156c4:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 80156c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80156ce:	b2d9      	uxtb	r1, r3
 80156d0:	683a      	ldr	r2, [r7, #0]
 80156d2:	78d3      	ldrb	r3, [r2, #3]
 80156d4:	f361 1386 	bfi	r3, r1, #6, #1
 80156d8:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 80156da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80156e2:	b2d9      	uxtb	r1, r3
 80156e4:	683a      	ldr	r2, [r7, #0]
 80156e6:	78d3      	ldrb	r3, [r2, #3]
 80156e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80156ec:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 80156ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80156f6:	b2d9      	uxtb	r1, r3
 80156f8:	683a      	ldr	r2, [r7, #0]
 80156fa:	7913      	ldrb	r3, [r2, #4]
 80156fc:	f361 0300 	bfi	r3, r1, #0, #1
 8015700:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 8015702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015706:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801570a:	b2d9      	uxtb	r1, r3
 801570c:	683a      	ldr	r2, [r7, #0]
 801570e:	7913      	ldrb	r3, [r2, #4]
 8015710:	f361 0341 	bfi	r3, r1, #1, #1
 8015714:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 8015716:	f897 3020 	ldrb.w	r3, [r7, #32]
 801571a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801571e:	b2d9      	uxtb	r1, r3
 8015720:	683a      	ldr	r2, [r7, #0]
 8015722:	7913      	ldrb	r3, [r2, #4]
 8015724:	f361 0382 	bfi	r3, r1, #2, #1
 8015728:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 801572a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801572e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015732:	b2d9      	uxtb	r1, r3
 8015734:	683a      	ldr	r2, [r7, #0]
 8015736:	7913      	ldrb	r3, [r2, #4]
 8015738:	f361 03c3 	bfi	r3, r1, #3, #1
 801573c:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 801573e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015742:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015746:	b2d9      	uxtb	r1, r3
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	7913      	ldrb	r3, [r2, #4]
 801574c:	f361 1304 	bfi	r3, r1, #4, #1
 8015750:	7113      	strb	r3, [r2, #4]
  val->mlc1 = mlc_int1.int1_mlc1;
 8015752:	7d3b      	ldrb	r3, [r7, #20]
 8015754:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015758:	b2d9      	uxtb	r1, r3
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	7913      	ldrb	r3, [r2, #4]
 801575e:	f361 1345 	bfi	r3, r1, #5, #1
 8015762:	7113      	strb	r3, [r2, #4]
  val->mlc2 = mlc_int1.int1_mlc2;
 8015764:	7d3b      	ldrb	r3, [r7, #20]
 8015766:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801576a:	b2d9      	uxtb	r1, r3
 801576c:	683a      	ldr	r2, [r7, #0]
 801576e:	7913      	ldrb	r3, [r2, #4]
 8015770:	f361 1386 	bfi	r3, r1, #6, #1
 8015774:	7113      	strb	r3, [r2, #4]
  val->mlc3 = mlc_int1.int1_mlc3;
 8015776:	7d3b      	ldrb	r3, [r7, #20]
 8015778:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801577c:	b2d9      	uxtb	r1, r3
 801577e:	683a      	ldr	r2, [r7, #0]
 8015780:	7913      	ldrb	r3, [r2, #4]
 8015782:	f361 13c7 	bfi	r3, r1, #7, #1
 8015786:	7113      	strb	r3, [r2, #4]
  val->mlc4 = mlc_int1.int1_mlc4;
 8015788:	7d3b      	ldrb	r3, [r7, #20]
 801578a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801578e:	b2d9      	uxtb	r1, r3
 8015790:	683a      	ldr	r2, [r7, #0]
 8015792:	7953      	ldrb	r3, [r2, #5]
 8015794:	f361 0300 	bfi	r3, r1, #0, #1
 8015798:	7153      	strb	r3, [r2, #5]
  val->mlc5 = mlc_int1.int1_mlc5;
 801579a:	7d3b      	ldrb	r3, [r7, #20]
 801579c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80157a0:	b2d9      	uxtb	r1, r3
 80157a2:	683a      	ldr	r2, [r7, #0]
 80157a4:	7953      	ldrb	r3, [r2, #5]
 80157a6:	f361 0341 	bfi	r3, r1, #1, #1
 80157aa:	7153      	strb	r3, [r2, #5]
  val->mlc6 = mlc_int1.int1_mlc6;
 80157ac:	7d3b      	ldrb	r3, [r7, #20]
 80157ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80157b2:	b2d9      	uxtb	r1, r3
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	7953      	ldrb	r3, [r2, #5]
 80157b8:	f361 0382 	bfi	r3, r1, #2, #1
 80157bc:	7153      	strb	r3, [r2, #5]
  val->mlc7 = mlc_int1.int1_mlc7;
 80157be:	7d3b      	ldrb	r3, [r7, #20]
 80157c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80157c4:	b2d9      	uxtb	r1, r3
 80157c6:	683a      	ldr	r2, [r7, #0]
 80157c8:	7953      	ldrb	r3, [r2, #5]
 80157ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80157ce:	7153      	strb	r3, [r2, #5]
  val->mlc8 = mlc_int1.int1_mlc8;
 80157d0:	7d3b      	ldrb	r3, [r7, #20]
 80157d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80157d6:	b2d9      	uxtb	r1, r3
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	7953      	ldrb	r3, [r2, #5]
 80157dc:	f361 1304 	bfi	r3, r1, #4, #1
 80157e0:	7153      	strb	r3, [r2, #5]

  return ret;
 80157e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3730      	adds	r7, #48	@ 0x30
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <lsm6dsox_pin_int2_route_set>:
  *
  */
int32_t lsm6dsox_pin_int2_route_set(const stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t val)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b090      	sub	sp, #64	@ 0x40
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	4639      	mov	r1, r7
 80157f8:	e881 000c 	stmia.w	r1, {r2, r3}
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_tap_cfg2_t       tap_cfg2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (aux_ctx != NULL)
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d01c      	beq.n	8015840 <lsm6dsox_pin_int2_route_set+0x54>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 8015806:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801580a:	2301      	movs	r3, #1
 801580c:	216f      	movs	r1, #111	@ 0x6f
 801580e:	68b8      	ldr	r0, [r7, #8]
 8015810:	f7fe fe98 	bl	8014544 <lsm6dsox_read_reg>
 8015814:	63f8      	str	r0, [r7, #60]	@ 0x3c
                            (uint8_t *)&spi2_int_ois, 1);

    if (ret == 0)
 8015816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015818:	2b00      	cmp	r3, #0
 801581a:	d111      	bne.n	8015840 <lsm6dsox_pin_int2_route_set+0x54>
    {
      spi2_int_ois.int2_drdy_ois = val.drdy_ois;
 801581c:	783b      	ldrb	r3, [r7, #0]
 801581e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015822:	b2da      	uxtb	r2, r3
 8015824:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015828:	f362 13c7 	bfi	r3, r2, #7, #1
 801582c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      ret = lsm6dsox_write_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 8015830:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8015834:	2301      	movs	r3, #1
 8015836:	216f      	movs	r1, #111	@ 0x6f
 8015838:	68b8      	ldr	r0, [r7, #8]
 801583a:	f7fe fea1 	bl	8014580 <lsm6dsox_write_reg>
 801583e:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&spi2_int_ois, 1);
    }
  }

  if (ctx != NULL)
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2b00      	cmp	r3, #0
 8015844:	f000 83b0 	beq.w	8015fa8 <lsm6dsox_pin_int2_route_set+0x7bc>
  {
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 8015848:	783b      	ldrb	r3, [r7, #0]
 801584a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801584e:	b2da      	uxtb	r2, r3
 8015850:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015854:	f362 0300 	bfi	r3, r2, #0, #1
 8015858:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 801585c:	783b      	ldrb	r3, [r7, #0]
 801585e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015862:	b2da      	uxtb	r2, r3
 8015864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015868:	f362 0341 	bfi	r3, r2, #1, #1
 801586c:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8015870:	783b      	ldrb	r3, [r7, #0]
 8015872:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015876:	b2da      	uxtb	r2, r3
 8015878:	f897 3020 	ldrb.w	r3, [r7, #32]
 801587c:	f362 0382 	bfi	r3, r2, #2, #1
 8015880:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 8015884:	783b      	ldrb	r3, [r7, #0]
 8015886:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801588a:	b2da      	uxtb	r2, r3
 801588c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015890:	f362 03c3 	bfi	r3, r2, #3, #1
 8015894:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 8015898:	783b      	ldrb	r3, [r7, #0]
 801589a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158a4:	f362 1304 	bfi	r3, r2, #4, #1
 80158a8:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_fifo_full = val.fifo_full;
 80158ac:	783b      	ldrb	r3, [r7, #0]
 80158ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158b8:	f362 1345 	bfi	r3, r2, #5, #1
 80158bc:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 80158c0:	783b      	ldrb	r3, [r7, #0]
 80158c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80158c6:	b2da      	uxtb	r2, r3
 80158c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158cc:	f362 1386 	bfi	r3, r2, #6, #1
 80158d0:	f887 3020 	strb.w	r3, [r7, #32]
    int2_ctrl.not_used_01    = 0;
 80158d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158d8:	f36f 13c7 	bfc	r3, #7, #1
 80158dc:	f887 3020 	strb.w	r3, [r7, #32]
    md2_cfg.int2_timestamp    = val.timestamp;
 80158e0:	787b      	ldrb	r3, [r7, #1]
 80158e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80158e6:	b2da      	uxtb	r2, r3
 80158e8:	7d3b      	ldrb	r3, [r7, #20]
 80158ea:	f362 0300 	bfi	r3, r2, #0, #1
 80158ee:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_6d           = val.six_d;
 80158f0:	787b      	ldrb	r3, [r7, #1]
 80158f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80158f6:	b2da      	uxtb	r2, r3
 80158f8:	7d3b      	ldrb	r3, [r7, #20]
 80158fa:	f362 0382 	bfi	r3, r2, #2, #1
 80158fe:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_double_tap   = val.double_tap;
 8015900:	787b      	ldrb	r3, [r7, #1]
 8015902:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015906:	b2da      	uxtb	r2, r3
 8015908:	7d3b      	ldrb	r3, [r7, #20]
 801590a:	f362 03c3 	bfi	r3, r2, #3, #1
 801590e:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_ff           = val.free_fall;
 8015910:	787b      	ldrb	r3, [r7, #1]
 8015912:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015916:	b2da      	uxtb	r2, r3
 8015918:	7d3b      	ldrb	r3, [r7, #20]
 801591a:	f362 1304 	bfi	r3, r2, #4, #1
 801591e:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_wu           = val.wake_up;
 8015920:	787b      	ldrb	r3, [r7, #1]
 8015922:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015926:	b2da      	uxtb	r2, r3
 8015928:	7d3b      	ldrb	r3, [r7, #20]
 801592a:	f362 1345 	bfi	r3, r2, #5, #1
 801592e:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_single_tap   = val.single_tap;
 8015930:	787b      	ldrb	r3, [r7, #1]
 8015932:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015936:	b2da      	uxtb	r2, r3
 8015938:	7d3b      	ldrb	r3, [r7, #20]
 801593a:	f362 1386 	bfi	r3, r2, #6, #1
 801593e:	753b      	strb	r3, [r7, #20]
    md2_cfg.int2_sleep_change = val.sleep_change;
 8015940:	787b      	ldrb	r3, [r7, #1]
 8015942:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015946:	b2da      	uxtb	r2, r3
 8015948:	7d3b      	ldrb	r3, [r7, #20]
 801594a:	f362 13c7 	bfi	r3, r2, #7, #1
 801594e:	753b      	strb	r3, [r7, #20]
    emb_func_int2.not_used_01 = 0;
 8015950:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015954:	f36f 0302 	bfc	r3, #0, #3
 8015958:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2. int2_step_detector = val.step_detector;
 801595c:	787b      	ldrb	r3, [r7, #1]
 801595e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015962:	b2da      	uxtb	r2, r3
 8015964:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015968:	f362 03c3 	bfi	r3, r2, #3, #1
 801596c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_tilt           = val.tilt;
 8015970:	78bb      	ldrb	r3, [r7, #2]
 8015972:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015976:	b2da      	uxtb	r2, r3
 8015978:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801597c:	f362 1304 	bfi	r3, r2, #4, #1
 8015980:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 8015984:	78bb      	ldrb	r3, [r7, #2]
 8015986:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801598a:	b2da      	uxtb	r2, r3
 801598c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015990:	f362 1345 	bfi	r3, r2, #5, #1
 8015994:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.not_used_02 = 0;
 8015998:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801599c:	f36f 1386 	bfc	r3, #6, #1
 80159a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 80159a4:	78bb      	ldrb	r3, [r7, #2]
 80159a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80159aa:	b2da      	uxtb	r2, r3
 80159ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80159b0:	f362 13c7 	bfi	r3, r2, #7, #1
 80159b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80159b8:	78bb      	ldrb	r3, [r7, #2]
 80159ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80159be:	b2da      	uxtb	r2, r3
 80159c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80159c4:	f362 0300 	bfi	r3, r2, #0, #1
 80159c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm2 = val.fsm2;
 80159cc:	78bb      	ldrb	r3, [r7, #2]
 80159ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80159d2:	b2da      	uxtb	r2, r3
 80159d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80159d8:	f362 0341 	bfi	r3, r2, #1, #1
 80159dc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm3 = val.fsm3;
 80159e0:	78bb      	ldrb	r3, [r7, #2]
 80159e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80159e6:	b2da      	uxtb	r2, r3
 80159e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80159ec:	f362 0382 	bfi	r3, r2, #2, #1
 80159f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm4 = val.fsm4;
 80159f4:	78bb      	ldrb	r3, [r7, #2]
 80159f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80159fa:	b2da      	uxtb	r2, r3
 80159fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a00:	f362 03c3 	bfi	r3, r2, #3, #1
 8015a04:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm5 = val.fsm5;
 8015a08:	78bb      	ldrb	r3, [r7, #2]
 8015a0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015a0e:	b2da      	uxtb	r2, r3
 8015a10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a14:	f362 1304 	bfi	r3, r2, #4, #1
 8015a18:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm6 = val.fsm6;
 8015a1c:	78fb      	ldrb	r3, [r7, #3]
 8015a1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a22:	b2da      	uxtb	r2, r3
 8015a24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a28:	f362 1345 	bfi	r3, r2, #5, #1
 8015a2c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm7 = val.fsm7;
 8015a30:	78fb      	ldrb	r3, [r7, #3]
 8015a32:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015a36:	b2da      	uxtb	r2, r3
 8015a38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a3c:	f362 1386 	bfi	r3, r2, #6, #1
 8015a40:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8015a44:	78fb      	ldrb	r3, [r7, #3]
 8015a46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015a4a:	b2da      	uxtb	r2, r3
 8015a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a50:	f362 13c7 	bfi	r3, r2, #7, #1
 8015a54:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8015a58:	78fb      	ldrb	r3, [r7, #3]
 8015a5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015a5e:	b2da      	uxtb	r2, r3
 8015a60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a64:	f362 0300 	bfi	r3, r2, #0, #1
 8015a68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm10 = val.fsm10;
 8015a6c:	78fb      	ldrb	r3, [r7, #3]
 8015a6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a78:	f362 0341 	bfi	r3, r2, #1, #1
 8015a7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8015a80:	78fb      	ldrb	r3, [r7, #3]
 8015a82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015a86:	b2da      	uxtb	r2, r3
 8015a88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a8c:	f362 0382 	bfi	r3, r2, #2, #1
 8015a90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8015a94:	78fb      	ldrb	r3, [r7, #3]
 8015a96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015a9a:	b2da      	uxtb	r2, r3
 8015a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015aa0:	f362 03c3 	bfi	r3, r2, #3, #1
 8015aa4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm13 = val.fsm13;
 8015aa8:	78fb      	ldrb	r3, [r7, #3]
 8015aaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015aae:	b2da      	uxtb	r2, r3
 8015ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015ab4:	f362 1304 	bfi	r3, r2, #4, #1
 8015ab8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8015abc:	793b      	ldrb	r3, [r7, #4]
 8015abe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015ac8:	f362 1345 	bfi	r3, r2, #5, #1
 8015acc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm15 = val.fsm15;
 8015ad0:	793b      	ldrb	r3, [r7, #4]
 8015ad2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015ad6:	b2da      	uxtb	r2, r3
 8015ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015adc:	f362 1386 	bfi	r3, r2, #6, #1
 8015ae0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8015ae4:	793b      	ldrb	r3, [r7, #4]
 8015ae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015aea:	b2da      	uxtb	r2, r3
 8015aec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015af0:	f362 13c7 	bfi	r3, r2, #7, #1
 8015af4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    mlc_int2.int2_mlc1 = val.mlc1;
 8015af8:	793b      	ldrb	r3, [r7, #4]
 8015afa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015afe:	b2da      	uxtb	r2, r3
 8015b00:	7f3b      	ldrb	r3, [r7, #28]
 8015b02:	f362 0300 	bfi	r3, r2, #0, #1
 8015b06:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc2 = val.mlc2;
 8015b08:	793b      	ldrb	r3, [r7, #4]
 8015b0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015b0e:	b2da      	uxtb	r2, r3
 8015b10:	7f3b      	ldrb	r3, [r7, #28]
 8015b12:	f362 0341 	bfi	r3, r2, #1, #1
 8015b16:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc3 = val.mlc3;
 8015b18:	793b      	ldrb	r3, [r7, #4]
 8015b1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015b1e:	b2da      	uxtb	r2, r3
 8015b20:	7f3b      	ldrb	r3, [r7, #28]
 8015b22:	f362 0382 	bfi	r3, r2, #2, #1
 8015b26:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc4 = val.mlc4;
 8015b28:	793b      	ldrb	r3, [r7, #4]
 8015b2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015b2e:	b2da      	uxtb	r2, r3
 8015b30:	7f3b      	ldrb	r3, [r7, #28]
 8015b32:	f362 03c3 	bfi	r3, r2, #3, #1
 8015b36:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc5 = val.mlc5;
 8015b38:	793b      	ldrb	r3, [r7, #4]
 8015b3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	7f3b      	ldrb	r3, [r7, #28]
 8015b42:	f362 1304 	bfi	r3, r2, #4, #1
 8015b46:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc6 = val.mlc6;
 8015b48:	797b      	ldrb	r3, [r7, #5]
 8015b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015b4e:	b2da      	uxtb	r2, r3
 8015b50:	7f3b      	ldrb	r3, [r7, #28]
 8015b52:	f362 1345 	bfi	r3, r2, #5, #1
 8015b56:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc7 = val.mlc7;
 8015b58:	797b      	ldrb	r3, [r7, #5]
 8015b5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015b5e:	b2da      	uxtb	r2, r3
 8015b60:	7f3b      	ldrb	r3, [r7, #28]
 8015b62:	f362 1386 	bfi	r3, r2, #6, #1
 8015b66:	773b      	strb	r3, [r7, #28]
    mlc_int2.int2_mlc8 = val.mlc8;
 8015b68:	797b      	ldrb	r3, [r7, #5]
 8015b6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	7f3b      	ldrb	r3, [r7, #28]
 8015b72:	f362 13c7 	bfi	r3, r2, #7, #1
 8015b76:	773b      	strb	r3, [r7, #28]

    if (ret == 0)
 8015b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d122      	bne.n	8015bc4 <lsm6dsox_pin_int2_route_set+0x3d8>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8015b7e:	f107 0210 	add.w	r2, r7, #16
 8015b82:	2301      	movs	r3, #1
 8015b84:	2113      	movs	r1, #19
 8015b86:	68f8      	ldr	r0, [r7, #12]
 8015b88:	f7fe fcdc 	bl	8014544 <lsm6dsox_read_reg>
 8015b8c:	63f8      	str	r0, [r7, #60]	@ 0x3c

      if (ret == 0)
 8015b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d117      	bne.n	8015bc4 <lsm6dsox_pin_int2_route_set+0x3d8>
      {
        if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8015b94:	783b      	ldrb	r3, [r7, #0]
 8015b96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015b9a:	b2da      	uxtb	r2, r3
 8015b9c:	787b      	ldrb	r3, [r7, #1]
 8015b9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d003      	beq.n	8015bb4 <lsm6dsox_pin_int2_route_set+0x3c8>
        {
          ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8015bac:	7c3b      	ldrb	r3, [r7, #16]
 8015bae:	f36f 1345 	bfc	r3, #5, #1
 8015bb2:	743b      	strb	r3, [r7, #16]
        }

        ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8015bb4:	f107 0210 	add.w	r2, r7, #16
 8015bb8:	2301      	movs	r3, #1
 8015bba:	2113      	movs	r1, #19
 8015bbc:	68f8      	ldr	r0, [r7, #12]
 8015bbe:	f7fe fcdf 	bl	8014580 <lsm6dsox_write_reg>
 8015bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
      }
    }

    if (ret == 0)
 8015bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d104      	bne.n	8015bd4 <lsm6dsox_pin_int2_route_set+0x3e8>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8015bca:	2102      	movs	r1, #2
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f7ff f9e8 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015bd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if (ret == 0)
 8015bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d107      	bne.n	8015bea <lsm6dsox_pin_int2_route_set+0x3fe>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MLC_INT2,
 8015bda:	f107 021c 	add.w	r2, r7, #28
 8015bde:	2301      	movs	r3, #1
 8015be0:	2111      	movs	r1, #17
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f7fe fccc 	bl	8014580 <lsm6dsox_write_reg>
 8015be8:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 8015bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d107      	bne.n	8015c00 <lsm6dsox_pin_int2_route_set+0x414>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 8015bf0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	210e      	movs	r1, #14
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f7fe fcc1 	bl	8014580 <lsm6dsox_write_reg>
 8015bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8015c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d107      	bne.n	8015c16 <lsm6dsox_pin_int2_route_set+0x42a>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT2_A,
 8015c06:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	210f      	movs	r1, #15
 8015c0e:	68f8      	ldr	r0, [r7, #12]
 8015c10:	f7fe fcb6 	bl	8014580 <lsm6dsox_write_reg>
 8015c14:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8015c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d107      	bne.n	8015c2c <lsm6dsox_pin_int2_route_set+0x440>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT2_B,
 8015c1c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8015c20:	2301      	movs	r3, #1
 8015c22:	2110      	movs	r1, #16
 8015c24:	68f8      	ldr	r0, [r7, #12]
 8015c26:	f7fe fcab 	bl	8014580 <lsm6dsox_write_reg>
 8015c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8015c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d104      	bne.n	8015c3c <lsm6dsox_pin_int2_route_set+0x450>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8015c32:	2100      	movs	r1, #0
 8015c34:	68f8      	ldr	r0, [r7, #12]
 8015c36:	f7ff f9b4 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8015c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if (ret == 0)
 8015c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f040 80cd 	bne.w	8015dde <lsm6dsox_pin_int2_route_set+0x5f2>
    {
      if ((emb_func_int2.int2_fsm_lc
 8015c44:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015c48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015c4c:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_sig_mot
 8015c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015c52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_step_detector
 8015c5c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015c60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	4313      	orrs	r3, r2
 8015c68:	b2da      	uxtb	r2, r3
           | emb_func_int2.int2_tilt
 8015c6a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8015c6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	4313      	orrs	r3, r2
 8015c76:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm1
 8015c78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015c80:	b2db      	uxtb	r3, r3
 8015c82:	4313      	orrs	r3, r2
 8015c84:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm2
 8015c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	4313      	orrs	r3, r2
 8015c92:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm3
 8015c94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm4
 8015ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015ca6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	4313      	orrs	r3, r2
 8015cae:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm5
 8015cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015cb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	4313      	orrs	r3, r2
 8015cbc:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm6
 8015cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015cc2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	4313      	orrs	r3, r2
 8015cca:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm7
 8015ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015cd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	4313      	orrs	r3, r2
 8015cd8:	b2da      	uxtb	r2, r3
           | fsm_int2_a.int2_fsm8
 8015cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015cde:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	4313      	orrs	r3, r2
 8015ce6:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm9
 8015ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015cec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	4313      	orrs	r3, r2
 8015cf4:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm10
 8015cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015cfa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	4313      	orrs	r3, r2
 8015d02:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm11
 8015d04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d08:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	4313      	orrs	r3, r2
 8015d10:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm12
 8015d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d16:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	4313      	orrs	r3, r2
 8015d1e:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm13
 8015d20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	4313      	orrs	r3, r2
 8015d2c:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm14
 8015d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	4313      	orrs	r3, r2
 8015d3a:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm15
 8015d3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	4313      	orrs	r3, r2
 8015d48:	b2da      	uxtb	r2, r3
           | fsm_int2_b.int2_fsm16
 8015d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015d4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	4313      	orrs	r3, r2
 8015d56:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc1
 8015d58:	7f3b      	ldrb	r3, [r7, #28]
 8015d5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	4313      	orrs	r3, r2
 8015d62:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc2
 8015d64:	7f3b      	ldrb	r3, [r7, #28]
 8015d66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015d6a:	b2db      	uxtb	r3, r3
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc3
 8015d70:	7f3b      	ldrb	r3, [r7, #28]
 8015d72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc4
 8015d7c:	7f3b      	ldrb	r3, [r7, #28]
 8015d7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	4313      	orrs	r3, r2
 8015d86:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc5
 8015d88:	7f3b      	ldrb	r3, [r7, #28]
 8015d8a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015d8e:	b2db      	uxtb	r3, r3
 8015d90:	4313      	orrs	r3, r2
 8015d92:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc6
 8015d94:	7f3b      	ldrb	r3, [r7, #28]
 8015d96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	4313      	orrs	r3, r2
 8015d9e:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc7
 8015da0:	7f3b      	ldrb	r3, [r7, #28]
 8015da2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015da6:	b2db      	uxtb	r3, r3
 8015da8:	4313      	orrs	r3, r2
 8015daa:	b2da      	uxtb	r2, r3
           | mlc_int2.int2_mlc8) != PROPERTY_DISABLE)
 8015dac:	7f3b      	ldrb	r3, [r7, #28]
 8015dae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015db2:	b2db      	uxtb	r3, r3
 8015db4:	4313      	orrs	r3, r2
 8015db6:	b2db      	uxtb	r3, r3
      if ((emb_func_int2.int2_fsm_lc
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d004      	beq.n	8015dc6 <lsm6dsox_pin_int2_route_set+0x5da>
      {
        md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8015dbc:	7d3b      	ldrb	r3, [r7, #20]
 8015dbe:	f043 0302 	orr.w	r3, r3, #2
 8015dc2:	753b      	strb	r3, [r7, #20]
 8015dc4:	e003      	b.n	8015dce <lsm6dsox_pin_int2_route_set+0x5e2>
      }

      else
      {
        md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8015dc6:	7d3b      	ldrb	r3, [r7, #20]
 8015dc8:	f36f 0341 	bfc	r3, #1, #1
 8015dcc:	753b      	strb	r3, [r7, #20]
      }

      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT2_CTRL,
 8015dce:	f107 0220 	add.w	r2, r7, #32
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	210e      	movs	r1, #14
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	f7fe fbd2 	bl	8014580 <lsm6dsox_write_reg>
 8015ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8015dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d107      	bne.n	8015df4 <lsm6dsox_pin_int2_route_set+0x608>
    {
      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8015de4:	f107 0214 	add.w	r2, r7, #20
 8015de8:	2301      	movs	r3, #1
 8015dea:	215f      	movs	r1, #95	@ 0x5f
 8015dec:	68f8      	ldr	r0, [r7, #12]
 8015dee:	f7fe fbc7 	bl	8014580 <lsm6dsox_write_reg>
 8015df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if (ret == 0)
 8015df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d107      	bne.n	8015e0a <lsm6dsox_pin_int2_route_set+0x61e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8015dfa:	f107 0218 	add.w	r2, r7, #24
 8015dfe:	2301      	movs	r3, #1
 8015e00:	2158      	movs	r1, #88	@ 0x58
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7fe fb9e 	bl	8014544 <lsm6dsox_read_reg>
 8015e08:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if (ret == 0)
 8015e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d106      	bne.n	8015e1e <lsm6dsox_pin_int2_route_set+0x632>
    {
      ret = lsm6dsox_pin_int1_route_get(ctx, &pin_int1_route);
 8015e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015e14:	4619      	mov	r1, r3
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7ff fab4 	bl	8015384 <lsm6dsox_pin_int1_route_get>
 8015e1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    }

    if (ret == 0)
 8015e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f040 80c1 	bne.w	8015fa8 <lsm6dsox_pin_int2_route_set+0x7bc>
    {
      if ((val.fifo_bdr
 8015e26:	783b      	ldrb	r3, [r7, #0]
 8015e28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015e2c:	b2da      	uxtb	r2, r3
           | val.drdy_g
 8015e2e:	783b      	ldrb	r3, [r7, #0]
 8015e30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	4313      	orrs	r3, r2
 8015e38:	b2da      	uxtb	r2, r3
           | val.drdy_temp
 8015e3a:	783b      	ldrb	r3, [r7, #0]
 8015e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	4313      	orrs	r3, r2
 8015e44:	b2da      	uxtb	r2, r3
           | val.drdy_xl
 8015e46:	783b      	ldrb	r3, [r7, #0]
 8015e48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	4313      	orrs	r3, r2
 8015e50:	b2da      	uxtb	r2, r3
           | val.fifo_full
 8015e52:	783b      	ldrb	r3, [r7, #0]
 8015e54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	4313      	orrs	r3, r2
 8015e5c:	b2da      	uxtb	r2, r3
           | val.fifo_ovr
 8015e5e:	783b      	ldrb	r3, [r7, #0]
 8015e60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015e64:	b2db      	uxtb	r3, r3
 8015e66:	4313      	orrs	r3, r2
 8015e68:	b2da      	uxtb	r2, r3
           | val.fifo_th
 8015e6a:	783b      	ldrb	r3, [r7, #0]
 8015e6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	4313      	orrs	r3, r2
 8015e74:	b2da      	uxtb	r2, r3
           | val.six_d
 8015e76:	787b      	ldrb	r3, [r7, #1]
 8015e78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	4313      	orrs	r3, r2
 8015e80:	b2da      	uxtb	r2, r3
           | val.double_tap
 8015e82:	787b      	ldrb	r3, [r7, #1]
 8015e84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	b2da      	uxtb	r2, r3
           | val.free_fall
 8015e8e:	787b      	ldrb	r3, [r7, #1]
 8015e90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	4313      	orrs	r3, r2
 8015e98:	b2da      	uxtb	r2, r3
           | val.wake_up
 8015e9a:	787b      	ldrb	r3, [r7, #1]
 8015e9c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	4313      	orrs	r3, r2
 8015ea4:	b2da      	uxtb	r2, r3
           | val.single_tap
 8015ea6:	787b      	ldrb	r3, [r7, #1]
 8015ea8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	4313      	orrs	r3, r2
 8015eb0:	b2da      	uxtb	r2, r3
           | val.sleep_change
 8015eb2:	787b      	ldrb	r3, [r7, #1]
 8015eb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	4313      	orrs	r3, r2
 8015ebc:	b2da      	uxtb	r2, r3
           | pin_int1_route.den_flag
 8015ebe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015ec2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	4313      	orrs	r3, r2
 8015eca:	b2da      	uxtb	r2, r3
           | pin_int1_route.boot
 8015ecc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015ed0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	4313      	orrs	r3, r2
 8015ed8:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_bdr
 8015eda:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015ede:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	b2da      	uxtb	r2, r3
           | pin_int1_route.drdy_g
 8015ee8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015eec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	4313      	orrs	r3, r2
 8015ef4:	b2da      	uxtb	r2, r3
           | pin_int1_route.drdy_xl
 8015ef6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015efa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	4313      	orrs	r3, r2
 8015f02:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_full
 8015f04:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015f08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	4313      	orrs	r3, r2
 8015f10:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_ovr
 8015f12:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015f16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	4313      	orrs	r3, r2
 8015f1e:	b2da      	uxtb	r2, r3
           | pin_int1_route.fifo_th
 8015f20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8015f24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015f28:	b2db      	uxtb	r3, r3
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	b2da      	uxtb	r2, r3
           | pin_int1_route.six_d
 8015f2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015f32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	b2da      	uxtb	r2, r3
           | pin_int1_route.double_tap
 8015f3c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015f40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	4313      	orrs	r3, r2
 8015f48:	b2da      	uxtb	r2, r3
           | pin_int1_route.free_fall
 8015f4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015f4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	4313      	orrs	r3, r2
 8015f56:	b2da      	uxtb	r2, r3
           | pin_int1_route.wake_up
 8015f58:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015f5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	4313      	orrs	r3, r2
 8015f64:	b2da      	uxtb	r2, r3
           | pin_int1_route.single_tap
 8015f66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8015f6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	4313      	orrs	r3, r2
 8015f72:	b2da      	uxtb	r2, r3
           | pin_int1_route.sleep_change) != PROPERTY_DISABLE)
 8015f74:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8015f78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	4313      	orrs	r3, r2
 8015f80:	b2db      	uxtb	r3, r3
      if ((val.fifo_bdr
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d004      	beq.n	8015f90 <lsm6dsox_pin_int2_route_set+0x7a4>
      {
        tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8015f86:	7e3b      	ldrb	r3, [r7, #24]
 8015f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f8c:	763b      	strb	r3, [r7, #24]
 8015f8e:	e003      	b.n	8015f98 <lsm6dsox_pin_int2_route_set+0x7ac>
      }

      else
      {
        tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8015f90:	7e3b      	ldrb	r3, [r7, #24]
 8015f92:	f36f 13c7 	bfc	r3, #7, #1
 8015f96:	763b      	strb	r3, [r7, #24]
      }

      ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2,
 8015f98:	f107 0218 	add.w	r2, r7, #24
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	2158      	movs	r1, #88	@ 0x58
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f7fe faed 	bl	8014580 <lsm6dsox_write_reg>
 8015fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
                               (uint8_t *) &tap_cfg2, 1);
    }
  }

  return ret;
 8015fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3740      	adds	r7, #64	@ 0x40
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <lsm6dsox_pin_int2_route_get>:
  *
  */
int32_t lsm6dsox_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t *val)
{
 8015fb2:	b580      	push	{r7, lr}
 8015fb4:	b08e      	sub	sp, #56	@ 0x38
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	60f8      	str	r0, [r7, #12]
 8015fba:	60b9      	str	r1, [r7, #8]
 8015fbc:	607a      	str	r2, [r7, #4]
  lsm6dsox_int2_ctrl_t      int2_ctrl;
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (aux_ctx != NULL)
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d011      	beq.n	8015fec <lsm6dsox_pin_int2_route_get+0x3a>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 8015fc8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8015fcc:	2301      	movs	r3, #1
 8015fce:	216f      	movs	r1, #111	@ 0x6f
 8015fd0:	68b8      	ldr	r0, [r7, #8]
 8015fd2:	f7fe fab7 	bl	8014544 <lsm6dsox_read_reg>
 8015fd6:	6378      	str	r0, [r7, #52]	@ 0x34
                            (uint8_t *)&spi2_int_ois, 1);
    val->drdy_ois = spi2_int_ois.int2_drdy_ois;
 8015fd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015fdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8015fe0:	b2d9      	uxtb	r1, r3
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	7813      	ldrb	r3, [r2, #0]
 8015fe6:	f361 0300 	bfi	r3, r1, #0, #1
 8015fea:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f000 8222 	beq.w	8016438 <lsm6dsox_pin_int2_route_get+0x486>
  {
    if (ret == 0)
 8015ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d104      	bne.n	8016004 <lsm6dsox_pin_int2_route_get+0x52>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8015ffa:	2102      	movs	r1, #2
 8015ffc:	68f8      	ldr	r0, [r7, #12]
 8015ffe:	f7fe ffd0 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8016002:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ret == 0)
 8016004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016006:	2b00      	cmp	r3, #0
 8016008:	d107      	bne.n	801601a <lsm6dsox_pin_int2_route_get+0x68>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT2,
 801600a:	f107 021c 	add.w	r2, r7, #28
 801600e:	2301      	movs	r3, #1
 8016010:	2111      	movs	r1, #17
 8016012:	68f8      	ldr	r0, [r7, #12]
 8016014:	f7fe fa96 	bl	8014544 <lsm6dsox_read_reg>
 8016018:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 801601a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801601c:	2b00      	cmp	r3, #0
 801601e:	d107      	bne.n	8016030 <lsm6dsox_pin_int2_route_get+0x7e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 8016020:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016024:	2301      	movs	r3, #1
 8016026:	210e      	movs	r1, #14
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f7fe fa8b 	bl	8014544 <lsm6dsox_read_reg>
 801602e:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8016030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016032:	2b00      	cmp	r3, #0
 8016034:	d107      	bne.n	8016046 <lsm6dsox_pin_int2_route_get+0x94>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_A,
 8016036:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801603a:	2301      	movs	r3, #1
 801603c:	210f      	movs	r1, #15
 801603e:	68f8      	ldr	r0, [r7, #12]
 8016040:	f7fe fa80 	bl	8014544 <lsm6dsox_read_reg>
 8016044:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8016046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016048:	2b00      	cmp	r3, #0
 801604a:	d107      	bne.n	801605c <lsm6dsox_pin_int2_route_get+0xaa>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_B,
 801604c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016050:	2301      	movs	r3, #1
 8016052:	2110      	movs	r1, #16
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f7fe fa75 	bl	8014544 <lsm6dsox_read_reg>
 801605a:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 801605c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801605e:	2b00      	cmp	r3, #0
 8016060:	d104      	bne.n	801606c <lsm6dsox_pin_int2_route_get+0xba>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8016062:	2100      	movs	r1, #0
 8016064:	68f8      	ldr	r0, [r7, #12]
 8016066:	f7fe ff9c 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 801606a:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ret == 0)
 801606c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801606e:	2b00      	cmp	r3, #0
 8016070:	d107      	bne.n	8016082 <lsm6dsox_pin_int2_route_get+0xd0>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8016072:	f107 0220 	add.w	r2, r7, #32
 8016076:	2301      	movs	r3, #1
 8016078:	210e      	movs	r1, #14
 801607a:	68f8      	ldr	r0, [r7, #12]
 801607c:	f7fe fa62 	bl	8014544 <lsm6dsox_read_reg>
 8016080:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8016082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016084:	2b00      	cmp	r3, #0
 8016086:	d107      	bne.n	8016098 <lsm6dsox_pin_int2_route_get+0xe6>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG,
 8016088:	f107 0218 	add.w	r2, r7, #24
 801608c:	2301      	movs	r3, #1
 801608e:	215f      	movs	r1, #95	@ 0x5f
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	f7fe fa57 	bl	8014544 <lsm6dsox_read_reg>
 8016096:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8016098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801609a:	2b00      	cmp	r3, #0
 801609c:	d107      	bne.n	80160ae <lsm6dsox_pin_int2_route_get+0xfc>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 801609e:	f107 0214 	add.w	r2, r7, #20
 80160a2:	2301      	movs	r3, #1
 80160a4:	2113      	movs	r1, #19
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	f7fe fa4c 	bl	8014544 <lsm6dsox_read_reg>
 80160ac:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 80160ae:	7d3b      	ldrb	r3, [r7, #20]
 80160b0:	f003 0320 	and.w	r3, r3, #32
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d129      	bne.n	801610e <lsm6dsox_pin_int2_route_get+0x15c>
    {
      if (ret == 0)
 80160ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d111      	bne.n	80160e4 <lsm6dsox_pin_int2_route_get+0x132>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 80160c0:	f107 0220 	add.w	r2, r7, #32
 80160c4:	2301      	movs	r3, #1
 80160c6:	210e      	movs	r1, #14
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	f7fe fa3b 	bl	8014544 <lsm6dsox_read_reg>
 80160ce:	6378      	str	r0, [r7, #52]	@ 0x34
                                (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80160d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80160d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80160d8:	b2d9      	uxtb	r1, r3
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	7813      	ldrb	r3, [r2, #0]
 80160de:	f361 03c3 	bfi	r3, r1, #3, #1
 80160e2:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 80160e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d11b      	bne.n	8016122 <lsm6dsox_pin_int2_route_get+0x170>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80160ea:	f107 0218 	add.w	r2, r7, #24
 80160ee:	2301      	movs	r3, #1
 80160f0:	215f      	movs	r1, #95	@ 0x5f
 80160f2:	68f8      	ldr	r0, [r7, #12]
 80160f4:	f7fe fa26 	bl	8014544 <lsm6dsox_read_reg>
 80160f8:	6378      	str	r0, [r7, #52]	@ 0x34
        val->timestamp = md2_cfg.int2_timestamp;
 80160fa:	7e3b      	ldrb	r3, [r7, #24]
 80160fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016100:	b2d9      	uxtb	r1, r3
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	7853      	ldrb	r3, [r2, #1]
 8016106:	f361 0300 	bfi	r3, r1, #0, #1
 801610a:	7053      	strb	r3, [r2, #1]
 801610c:	e009      	b.n	8016122 <lsm6dsox_pin_int2_route_get+0x170>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 801610e:	687a      	ldr	r2, [r7, #4]
 8016110:	7813      	ldrb	r3, [r2, #0]
 8016112:	f36f 03c3 	bfc	r3, #3, #1
 8016116:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	7853      	ldrb	r3, [r2, #1]
 801611c:	f36f 0300 	bfc	r3, #0, #1
 8016120:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8016122:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016126:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801612a:	b2d9      	uxtb	r1, r3
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	7813      	ldrb	r3, [r2, #0]
 8016130:	f361 0341 	bfi	r3, r1, #1, #1
 8016134:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8016136:	f897 3020 	ldrb.w	r3, [r7, #32]
 801613a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801613e:	b2d9      	uxtb	r1, r3
 8016140:	687a      	ldr	r2, [r7, #4]
 8016142:	7813      	ldrb	r3, [r2, #0]
 8016144:	f361 0382 	bfi	r3, r1, #2, #1
 8016148:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 801614a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801614e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016152:	b2d9      	uxtb	r1, r3
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	7813      	ldrb	r3, [r2, #0]
 8016158:	f361 03c3 	bfi	r3, r1, #3, #1
 801615c:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 801615e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016162:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016166:	b2d9      	uxtb	r1, r3
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	7813      	ldrb	r3, [r2, #0]
 801616c:	f361 1304 	bfi	r3, r1, #4, #1
 8016170:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8016172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016176:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801617a:	b2d9      	uxtb	r1, r3
 801617c:	687a      	ldr	r2, [r7, #4]
 801617e:	7813      	ldrb	r3, [r2, #0]
 8016180:	f361 1345 	bfi	r3, r1, #5, #1
 8016184:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8016186:	f897 3020 	ldrb.w	r3, [r7, #32]
 801618a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801618e:	b2d9      	uxtb	r1, r3
 8016190:	687a      	ldr	r2, [r7, #4]
 8016192:	7813      	ldrb	r3, [r2, #0]
 8016194:	f361 1386 	bfi	r3, r1, #6, #1
 8016198:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 801619a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801619e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80161a2:	b2d9      	uxtb	r1, r3
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	7813      	ldrb	r3, [r2, #0]
 80161a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80161ac:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 80161ae:	7e3b      	ldrb	r3, [r7, #24]
 80161b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80161b4:	b2d9      	uxtb	r1, r3
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	7853      	ldrb	r3, [r2, #1]
 80161ba:	f361 0300 	bfi	r3, r1, #0, #1
 80161be:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 80161c0:	7e3b      	ldrb	r3, [r7, #24]
 80161c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80161c6:	b2d9      	uxtb	r1, r3
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	7853      	ldrb	r3, [r2, #1]
 80161cc:	f361 0341 	bfi	r3, r1, #1, #1
 80161d0:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 80161d2:	7e3b      	ldrb	r3, [r7, #24]
 80161d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80161d8:	b2d9      	uxtb	r1, r3
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	7853      	ldrb	r3, [r2, #1]
 80161de:	f361 0382 	bfi	r3, r1, #2, #1
 80161e2:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 80161e4:	7e3b      	ldrb	r3, [r7, #24]
 80161e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80161ea:	b2d9      	uxtb	r1, r3
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	7853      	ldrb	r3, [r2, #1]
 80161f0:	f361 03c3 	bfi	r3, r1, #3, #1
 80161f4:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 80161f6:	7e3b      	ldrb	r3, [r7, #24]
 80161f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80161fc:	b2d9      	uxtb	r1, r3
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	7853      	ldrb	r3, [r2, #1]
 8016202:	f361 1304 	bfi	r3, r1, #4, #1
 8016206:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8016208:	7e3b      	ldrb	r3, [r7, #24]
 801620a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801620e:	b2d9      	uxtb	r1, r3
 8016210:	687a      	ldr	r2, [r7, #4]
 8016212:	7853      	ldrb	r3, [r2, #1]
 8016214:	f361 1345 	bfi	r3, r1, #5, #1
 8016218:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 801621a:	7e3b      	ldrb	r3, [r7, #24]
 801621c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016220:	b2d9      	uxtb	r1, r3
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	7853      	ldrb	r3, [r2, #1]
 8016226:	f361 1386 	bfi	r3, r1, #6, #1
 801622a:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 801622c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016230:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016234:	b2d9      	uxtb	r1, r3
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	7853      	ldrb	r3, [r2, #1]
 801623a:	f361 13c7 	bfi	r3, r1, #7, #1
 801623e:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8016240:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016244:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016248:	b2d9      	uxtb	r1, r3
 801624a:	687a      	ldr	r2, [r7, #4]
 801624c:	7893      	ldrb	r3, [r2, #2]
 801624e:	f361 0300 	bfi	r3, r1, #0, #1
 8016252:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8016254:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016258:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801625c:	b2d9      	uxtb	r1, r3
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	7893      	ldrb	r3, [r2, #2]
 8016262:	f361 0382 	bfi	r3, r1, #2, #1
 8016266:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8016268:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801626c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016270:	b2d9      	uxtb	r1, r3
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	7893      	ldrb	r3, [r2, #2]
 8016276:	f361 03c3 	bfi	r3, r1, #3, #1
 801627a:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 801627c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016280:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016284:	b2d9      	uxtb	r1, r3
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	7893      	ldrb	r3, [r2, #2]
 801628a:	f361 1304 	bfi	r3, r1, #4, #1
 801628e:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 8016290:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016294:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016298:	b2d9      	uxtb	r1, r3
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	7893      	ldrb	r3, [r2, #2]
 801629e:	f361 1345 	bfi	r3, r1, #5, #1
 80162a2:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 80162a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80162ac:	b2d9      	uxtb	r1, r3
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	7893      	ldrb	r3, [r2, #2]
 80162b2:	f361 1386 	bfi	r3, r1, #6, #1
 80162b6:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 80162b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80162c0:	b2d9      	uxtb	r1, r3
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	7893      	ldrb	r3, [r2, #2]
 80162c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80162ca:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80162cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80162d4:	b2d9      	uxtb	r1, r3
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	78d3      	ldrb	r3, [r2, #3]
 80162da:	f361 0300 	bfi	r3, r1, #0, #1
 80162de:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 80162e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80162e8:	b2d9      	uxtb	r1, r3
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	78d3      	ldrb	r3, [r2, #3]
 80162ee:	f361 0341 	bfi	r3, r1, #1, #1
 80162f2:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 80162f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80162fc:	b2d9      	uxtb	r1, r3
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	78d3      	ldrb	r3, [r2, #3]
 8016302:	f361 0382 	bfi	r3, r1, #2, #1
 8016306:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 8016308:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801630c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016310:	b2d9      	uxtb	r1, r3
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	78d3      	ldrb	r3, [r2, #3]
 8016316:	f361 03c3 	bfi	r3, r1, #3, #1
 801631a:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 801631c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016320:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016324:	b2d9      	uxtb	r1, r3
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	78d3      	ldrb	r3, [r2, #3]
 801632a:	f361 1304 	bfi	r3, r1, #4, #1
 801632e:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8016330:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016334:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016338:	b2d9      	uxtb	r1, r3
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	78d3      	ldrb	r3, [r2, #3]
 801633e:	f361 1345 	bfi	r3, r1, #5, #1
 8016342:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8016344:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016348:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801634c:	b2d9      	uxtb	r1, r3
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	78d3      	ldrb	r3, [r2, #3]
 8016352:	f361 1386 	bfi	r3, r1, #6, #1
 8016356:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8016358:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801635c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016360:	b2d9      	uxtb	r1, r3
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	78d3      	ldrb	r3, [r2, #3]
 8016366:	f361 13c7 	bfi	r3, r1, #7, #1
 801636a:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 801636c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016370:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016374:	b2d9      	uxtb	r1, r3
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	7913      	ldrb	r3, [r2, #4]
 801637a:	f361 0300 	bfi	r3, r1, #0, #1
 801637e:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8016380:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016384:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8016388:	b2d9      	uxtb	r1, r3
 801638a:	687a      	ldr	r2, [r7, #4]
 801638c:	7913      	ldrb	r3, [r2, #4]
 801638e:	f361 0341 	bfi	r3, r1, #1, #1
 8016392:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8016394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016398:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801639c:	b2d9      	uxtb	r1, r3
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	7913      	ldrb	r3, [r2, #4]
 80163a2:	f361 0382 	bfi	r3, r1, #2, #1
 80163a6:	7113      	strb	r3, [r2, #4]
    val->mlc1 = mlc_int2.int2_mlc1;
 80163a8:	7f3b      	ldrb	r3, [r7, #28]
 80163aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80163ae:	b2d9      	uxtb	r1, r3
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	7913      	ldrb	r3, [r2, #4]
 80163b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80163b8:	7113      	strb	r3, [r2, #4]
    val->mlc2 = mlc_int2.int2_mlc2;
 80163ba:	7f3b      	ldrb	r3, [r7, #28]
 80163bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80163c0:	b2d9      	uxtb	r1, r3
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	7913      	ldrb	r3, [r2, #4]
 80163c6:	f361 1304 	bfi	r3, r1, #4, #1
 80163ca:	7113      	strb	r3, [r2, #4]
    val->mlc3 = mlc_int2.int2_mlc3;
 80163cc:	7f3b      	ldrb	r3, [r7, #28]
 80163ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80163d2:	b2d9      	uxtb	r1, r3
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	7913      	ldrb	r3, [r2, #4]
 80163d8:	f361 1345 	bfi	r3, r1, #5, #1
 80163dc:	7113      	strb	r3, [r2, #4]
    val->mlc4 = mlc_int2.int2_mlc4;
 80163de:	7f3b      	ldrb	r3, [r7, #28]
 80163e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163e4:	b2d9      	uxtb	r1, r3
 80163e6:	687a      	ldr	r2, [r7, #4]
 80163e8:	7913      	ldrb	r3, [r2, #4]
 80163ea:	f361 1386 	bfi	r3, r1, #6, #1
 80163ee:	7113      	strb	r3, [r2, #4]
    val->mlc5 = mlc_int2.int2_mlc5;
 80163f0:	7f3b      	ldrb	r3, [r7, #28]
 80163f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80163f6:	b2d9      	uxtb	r1, r3
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	7913      	ldrb	r3, [r2, #4]
 80163fc:	f361 13c7 	bfi	r3, r1, #7, #1
 8016400:	7113      	strb	r3, [r2, #4]
    val->mlc6 = mlc_int2.int2_mlc6;
 8016402:	7f3b      	ldrb	r3, [r7, #28]
 8016404:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016408:	b2d9      	uxtb	r1, r3
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	7953      	ldrb	r3, [r2, #5]
 801640e:	f361 0300 	bfi	r3, r1, #0, #1
 8016412:	7153      	strb	r3, [r2, #5]
    val->mlc7 = mlc_int2.int2_mlc7;
 8016414:	7f3b      	ldrb	r3, [r7, #28]
 8016416:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801641a:	b2d9      	uxtb	r1, r3
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	7953      	ldrb	r3, [r2, #5]
 8016420:	f361 0341 	bfi	r3, r1, #1, #1
 8016424:	7153      	strb	r3, [r2, #5]
    val->mlc8 = mlc_int2.int2_mlc8;
 8016426:	7f3b      	ldrb	r3, [r7, #28]
 8016428:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801642c:	b2d9      	uxtb	r1, r3
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	7953      	ldrb	r3, [r2, #5]
 8016432:	f361 0382 	bfi	r3, r1, #2, #1
 8016436:	7153      	strb	r3, [r2, #5]
  }

  return ret;
 8016438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801643a:	4618      	mov	r0, r3
 801643c:	3738      	adds	r7, #56	@ 0x38
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}

08016442 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8016442:	b580      	push	{r7, lr}
 8016444:	b086      	sub	sp, #24
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
 801644a:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 801644c:	2102      	movs	r1, #2
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f7fe fda7 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 8016454:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d107      	bne.n	801646c <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 801645c:	f107 0210 	add.w	r2, r7, #16
 8016460:	2301      	movs	r3, #1
 8016462:	2104      	movs	r1, #4
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f7fe f86d 	bl	8014544 <lsm6dsox_read_reg>
 801646a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d13d      	bne.n	80164ee <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8016472:	f107 020c 	add.w	r2, r7, #12
 8016476:	2301      	movs	r3, #1
 8016478:	2105      	movs	r1, #5
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7fe f862 	bl	8014544 <lsm6dsox_read_reg>
 8016480:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8016482:	7b3b      	ldrb	r3, [r7, #12]
 8016484:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016488:	b2d9      	uxtb	r1, r3
 801648a:	683a      	ldr	r2, [r7, #0]
 801648c:	7813      	ldrb	r3, [r2, #0]
 801648e:	f361 03c3 	bfi	r3, r1, #3, #1
 8016492:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8016494:	7b3b      	ldrb	r3, [r7, #12]
 8016496:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801649a:	b2d9      	uxtb	r1, r3
 801649c:	683a      	ldr	r2, [r7, #0]
 801649e:	7813      	ldrb	r3, [r2, #0]
 80164a0:	f361 1304 	bfi	r3, r1, #4, #1
 80164a4:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 80164a6:	7c3b      	ldrb	r3, [r7, #16]
 80164a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80164ac:	b2d9      	uxtb	r1, r3
 80164ae:	683a      	ldr	r2, [r7, #0]
 80164b0:	7813      	ldrb	r3, [r2, #0]
 80164b2:	f361 0341 	bfi	r3, r1, #1, #1
 80164b6:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 80164b8:	7c3b      	ldrb	r3, [r7, #16]
 80164ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80164be:	b2d9      	uxtb	r1, r3
 80164c0:	683a      	ldr	r2, [r7, #0]
 80164c2:	7813      	ldrb	r3, [r2, #0]
 80164c4:	f361 0382 	bfi	r3, r1, #2, #1
 80164c8:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80164ca:	7c3b      	ldrb	r3, [r7, #16]
 80164cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80164d0:	b2d9      	uxtb	r1, r3
 80164d2:	683a      	ldr	r2, [r7, #0]
 80164d4:	7813      	ldrb	r3, [r2, #0]
 80164d6:	f361 0300 	bfi	r3, r1, #0, #1
 80164da:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 80164dc:	7b3b      	ldrb	r3, [r7, #12]
 80164de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80164e2:	b2d9      	uxtb	r1, r3
 80164e4:	683a      	ldr	r2, [r7, #0]
 80164e6:	7813      	ldrb	r3, [r2, #0]
 80164e8:	f361 1345 	bfi	r3, r1, #5, #1
 80164ec:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d104      	bne.n	80164fe <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80164f4:	2100      	movs	r1, #0
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f7fe fd53 	bl	8014fa2 <lsm6dsox_mem_bank_set>
 80164fc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80164fe:	697b      	ldr	r3, [r7, #20]
}
 8016500:	4618      	mov	r0, r3
 8016502:	3718      	adds	r7, #24
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <arm_rfft_32_fast_init_f32>:
 8016508:	b150      	cbz	r0, 8016520 <arm_rfft_32_fast_init_f32+0x18>
 801650a:	2110      	movs	r1, #16
 801650c:	b510      	push	{r4, lr}
 801650e:	4604      	mov	r4, r0
 8016510:	f001 fafe 	bl	8017b10 <arm_cfft_init_f32>
 8016514:	b918      	cbnz	r0, 801651e <arm_rfft_32_fast_init_f32+0x16>
 8016516:	2220      	movs	r2, #32
 8016518:	4b03      	ldr	r3, [pc, #12]	@ (8016528 <arm_rfft_32_fast_init_f32+0x20>)
 801651a:	8222      	strh	r2, [r4, #16]
 801651c:	6163      	str	r3, [r4, #20]
 801651e:	bd10      	pop	{r4, pc}
 8016520:	f04f 30ff 	mov.w	r0, #4294967295
 8016524:	4770      	bx	lr
 8016526:	bf00      	nop
 8016528:	08036e1c 	.word	0x08036e1c

0801652c <arm_rfft_64_fast_init_f32>:
 801652c:	b150      	cbz	r0, 8016544 <arm_rfft_64_fast_init_f32+0x18>
 801652e:	2120      	movs	r1, #32
 8016530:	b510      	push	{r4, lr}
 8016532:	4604      	mov	r4, r0
 8016534:	f001 faec 	bl	8017b10 <arm_cfft_init_f32>
 8016538:	b918      	cbnz	r0, 8016542 <arm_rfft_64_fast_init_f32+0x16>
 801653a:	2240      	movs	r2, #64	@ 0x40
 801653c:	4b03      	ldr	r3, [pc, #12]	@ (801654c <arm_rfft_64_fast_init_f32+0x20>)
 801653e:	8222      	strh	r2, [r4, #16]
 8016540:	6163      	str	r3, [r4, #20]
 8016542:	bd10      	pop	{r4, pc}
 8016544:	f04f 30ff 	mov.w	r0, #4294967295
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	0803b69c 	.word	0x0803b69c

08016550 <arm_rfft_128_fast_init_f32>:
 8016550:	b150      	cbz	r0, 8016568 <arm_rfft_128_fast_init_f32+0x18>
 8016552:	2140      	movs	r1, #64	@ 0x40
 8016554:	b510      	push	{r4, lr}
 8016556:	4604      	mov	r4, r0
 8016558:	f001 fada 	bl	8017b10 <arm_cfft_init_f32>
 801655c:	b918      	cbnz	r0, 8016566 <arm_rfft_128_fast_init_f32+0x16>
 801655e:	2280      	movs	r2, #128	@ 0x80
 8016560:	4b03      	ldr	r3, [pc, #12]	@ (8016570 <arm_rfft_128_fast_init_f32+0x20>)
 8016562:	8222      	strh	r2, [r4, #16]
 8016564:	6163      	str	r3, [r4, #20]
 8016566:	bd10      	pop	{r4, pc}
 8016568:	f04f 30ff 	mov.w	r0, #4294967295
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	0803481c 	.word	0x0803481c

08016574 <arm_rfft_256_fast_init_f32>:
 8016574:	b158      	cbz	r0, 801658e <arm_rfft_256_fast_init_f32+0x1a>
 8016576:	2180      	movs	r1, #128	@ 0x80
 8016578:	b510      	push	{r4, lr}
 801657a:	4604      	mov	r4, r0
 801657c:	f001 fac8 	bl	8017b10 <arm_cfft_init_f32>
 8016580:	b920      	cbnz	r0, 801658c <arm_rfft_256_fast_init_f32+0x18>
 8016582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016586:	4b03      	ldr	r3, [pc, #12]	@ (8016594 <arm_rfft_256_fast_init_f32+0x20>)
 8016588:	8222      	strh	r2, [r4, #16]
 801658a:	6163      	str	r3, [r4, #20]
 801658c:	bd10      	pop	{r4, pc}
 801658e:	f04f 30ff 	mov.w	r0, #4294967295
 8016592:	4770      	bx	lr
 8016594:	08036a1c 	.word	0x08036a1c

08016598 <arm_rfft_512_fast_init_f32>:
 8016598:	b160      	cbz	r0, 80165b4 <arm_rfft_512_fast_init_f32+0x1c>
 801659a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801659e:	b510      	push	{r4, lr}
 80165a0:	4604      	mov	r4, r0
 80165a2:	f001 fab5 	bl	8017b10 <arm_cfft_init_f32>
 80165a6:	b920      	cbnz	r0, 80165b2 <arm_rfft_512_fast_init_f32+0x1a>
 80165a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80165ac:	4b03      	ldr	r3, [pc, #12]	@ (80165bc <arm_rfft_512_fast_init_f32+0x24>)
 80165ae:	8222      	strh	r2, [r4, #16]
 80165b0:	6163      	str	r3, [r4, #20]
 80165b2:	bd10      	pop	{r4, pc}
 80165b4:	f04f 30ff 	mov.w	r0, #4294967295
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	0803ae9c 	.word	0x0803ae9c

080165c0 <arm_rfft_1024_fast_init_f32>:
 80165c0:	b160      	cbz	r0, 80165dc <arm_rfft_1024_fast_init_f32+0x1c>
 80165c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80165c6:	b510      	push	{r4, lr}
 80165c8:	4604      	mov	r4, r0
 80165ca:	f001 faa1 	bl	8017b10 <arm_cfft_init_f32>
 80165ce:	b920      	cbnz	r0, 80165da <arm_rfft_1024_fast_init_f32+0x1a>
 80165d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80165d4:	4b03      	ldr	r3, [pc, #12]	@ (80165e4 <arm_rfft_1024_fast_init_f32+0x24>)
 80165d6:	8222      	strh	r2, [r4, #16]
 80165d8:	6163      	str	r3, [r4, #20]
 80165da:	bd10      	pop	{r4, pc}
 80165dc:	f04f 30ff 	mov.w	r0, #4294967295
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop
 80165e4:	0803381c 	.word	0x0803381c

080165e8 <arm_rfft_2048_fast_init_f32>:
 80165e8:	b160      	cbz	r0, 8016604 <arm_rfft_2048_fast_init_f32+0x1c>
 80165ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80165ee:	b510      	push	{r4, lr}
 80165f0:	4604      	mov	r4, r0
 80165f2:	f001 fa8d 	bl	8017b10 <arm_cfft_init_f32>
 80165f6:	b920      	cbnz	r0, 8016602 <arm_rfft_2048_fast_init_f32+0x1a>
 80165f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80165fc:	4b03      	ldr	r3, [pc, #12]	@ (801660c <arm_rfft_2048_fast_init_f32+0x24>)
 80165fe:	8222      	strh	r2, [r4, #16]
 8016600:	6163      	str	r3, [r4, #20]
 8016602:	bd10      	pop	{r4, pc}
 8016604:	f04f 30ff 	mov.w	r0, #4294967295
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop
 801660c:	08034a1c 	.word	0x08034a1c

08016610 <arm_rfft_4096_fast_init_f32>:
 8016610:	b160      	cbz	r0, 801662c <arm_rfft_4096_fast_init_f32+0x1c>
 8016612:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016616:	b510      	push	{r4, lr}
 8016618:	4604      	mov	r4, r0
 801661a:	f001 fa79 	bl	8017b10 <arm_cfft_init_f32>
 801661e:	b920      	cbnz	r0, 801662a <arm_rfft_4096_fast_init_f32+0x1a>
 8016620:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016624:	4b03      	ldr	r3, [pc, #12]	@ (8016634 <arm_rfft_4096_fast_init_f32+0x24>)
 8016626:	8222      	strh	r2, [r4, #16]
 8016628:	6163      	str	r3, [r4, #20]
 801662a:	bd10      	pop	{r4, pc}
 801662c:	f04f 30ff 	mov.w	r0, #4294967295
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	08036e9c 	.word	0x08036e9c

08016638 <arm_rfft_fast_init_f32>:
 8016638:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801663c:	d024      	beq.n	8016688 <arm_rfft_fast_init_f32+0x50>
 801663e:	d807      	bhi.n	8016650 <arm_rfft_fast_init_f32+0x18>
 8016640:	2980      	cmp	r1, #128	@ 0x80
 8016642:	d01c      	beq.n	801667e <arm_rfft_fast_init_f32+0x46>
 8016644:	d90c      	bls.n	8016660 <arm_rfft_fast_init_f32+0x28>
 8016646:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801664a:	d11a      	bne.n	8016682 <arm_rfft_fast_init_f32+0x4a>
 801664c:	4b0f      	ldr	r3, [pc, #60]	@ (801668c <arm_rfft_fast_init_f32+0x54>)
 801664e:	4718      	bx	r3
 8016650:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8016654:	d011      	beq.n	801667a <arm_rfft_fast_init_f32+0x42>
 8016656:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 801665a:	d107      	bne.n	801666c <arm_rfft_fast_init_f32+0x34>
 801665c:	4b0c      	ldr	r3, [pc, #48]	@ (8016690 <arm_rfft_fast_init_f32+0x58>)
 801665e:	4718      	bx	r3
 8016660:	2920      	cmp	r1, #32
 8016662:	d008      	beq.n	8016676 <arm_rfft_fast_init_f32+0x3e>
 8016664:	2940      	cmp	r1, #64	@ 0x40
 8016666:	d10c      	bne.n	8016682 <arm_rfft_fast_init_f32+0x4a>
 8016668:	4b0a      	ldr	r3, [pc, #40]	@ (8016694 <arm_rfft_fast_init_f32+0x5c>)
 801666a:	e7f0      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 801666c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016670:	d107      	bne.n	8016682 <arm_rfft_fast_init_f32+0x4a>
 8016672:	4b09      	ldr	r3, [pc, #36]	@ (8016698 <arm_rfft_fast_init_f32+0x60>)
 8016674:	e7eb      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 8016676:	4b09      	ldr	r3, [pc, #36]	@ (801669c <arm_rfft_fast_init_f32+0x64>)
 8016678:	e7e9      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 801667a:	4b09      	ldr	r3, [pc, #36]	@ (80166a0 <arm_rfft_fast_init_f32+0x68>)
 801667c:	e7e7      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 801667e:	4b09      	ldr	r3, [pc, #36]	@ (80166a4 <arm_rfft_fast_init_f32+0x6c>)
 8016680:	e7e5      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 8016682:	f04f 30ff 	mov.w	r0, #4294967295
 8016686:	4770      	bx	lr
 8016688:	4b07      	ldr	r3, [pc, #28]	@ (80166a8 <arm_rfft_fast_init_f32+0x70>)
 801668a:	e7e0      	b.n	801664e <arm_rfft_fast_init_f32+0x16>
 801668c:	08016575 	.word	0x08016575
 8016690:	08016611 	.word	0x08016611
 8016694:	0801652d 	.word	0x0801652d
 8016698:	080165c1 	.word	0x080165c1
 801669c:	08016509 	.word	0x08016509
 80166a0:	080165e9 	.word	0x080165e9
 80166a4:	08016551 	.word	0x08016551
 80166a8:	08016599 	.word	0x08016599

080166ac <stage_rfft_f32>:
 80166ac:	b470      	push	{r4, r5, r6}
 80166ae:	edd1 7a00 	vldr	s15, [r1]
 80166b2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80166b6:	ed91 7a01 	vldr	s14, [r1, #4]
 80166ba:	f101 0410 	add.w	r4, r1, #16
 80166be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80166c2:	8806      	ldrh	r6, [r0, #0]
 80166c4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80166c8:	6940      	ldr	r0, [r0, #20]
 80166ca:	3e01      	subs	r6, #1
 80166cc:	eeb0 4a46 	vmov.f32	s8, s12
 80166d0:	f102 0510 	add.w	r5, r2, #16
 80166d4:	3010      	adds	r0, #16
 80166d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80166da:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80166de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166e2:	f1a1 0308 	sub.w	r3, r1, #8
 80166e6:	ee26 7a86 	vmul.f32	s14, s13, s12
 80166ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80166ee:	ed82 7a00 	vstr	s14, [r2]
 80166f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80166f6:	ed14 6a02 	vldr	s12, [r4, #-8]
 80166fa:	3e01      	subs	r6, #1
 80166fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8016700:	f104 0408 	add.w	r4, r4, #8
 8016704:	ed50 6a02 	vldr	s13, [r0, #-8]
 8016708:	f1a3 0308 	sub.w	r3, r3, #8
 801670c:	ee77 5a46 	vsub.f32	s11, s14, s12
 8016710:	edd3 4a05 	vldr	s9, [r3, #20]
 8016714:	ed54 7a03 	vldr	s15, [r4, #-12]
 8016718:	ee37 7a06 	vadd.f32	s14, s14, s12
 801671c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8016720:	f105 0508 	add.w	r5, r5, #8
 8016724:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8016728:	f100 0008 	add.w	r0, r0, #8
 801672c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8016730:	ee66 5a25 	vmul.f32	s11, s12, s11
 8016734:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8016738:	ee37 7a23 	vadd.f32	s14, s14, s7
 801673c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8016740:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016744:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8016748:	ee37 7a06 	vadd.f32	s14, s14, s12
 801674c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016750:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016754:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016758:	ed05 7a04 	vstr	s14, [r5, #-16]
 801675c:	ed45 7a03 	vstr	s15, [r5, #-12]
 8016760:	d1c9      	bne.n	80166f6 <stage_rfft_f32+0x4a>
 8016762:	bc70      	pop	{r4, r5, r6}
 8016764:	4770      	bx	lr
 8016766:	bf00      	nop

08016768 <merge_rfft_f32>:
 8016768:	b410      	push	{r4}
 801676a:	edd1 7a00 	vldr	s15, [r1]
 801676e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8016772:	edd1 6a01 	vldr	s13, [r1, #4]
 8016776:	8804      	ldrh	r4, [r0, #0]
 8016778:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801677c:	6940      	ldr	r0, [r0, #20]
 801677e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016782:	3c01      	subs	r4, #1
 8016784:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016788:	ee67 7a84 	vmul.f32	s15, s15, s8
 801678c:	ed82 7a00 	vstr	s14, [r2]
 8016790:	edc2 7a01 	vstr	s15, [r2, #4]
 8016794:	b3dc      	cbz	r4, 801680e <merge_rfft_f32+0xa6>
 8016796:	00e3      	lsls	r3, r4, #3
 8016798:	3010      	adds	r0, #16
 801679a:	3210      	adds	r2, #16
 801679c:	3b08      	subs	r3, #8
 801679e:	440b      	add	r3, r1
 80167a0:	3110      	adds	r1, #16
 80167a2:	ed11 6a02 	vldr	s12, [r1, #-8]
 80167a6:	3c01      	subs	r4, #1
 80167a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80167ac:	f101 0108 	add.w	r1, r1, #8
 80167b0:	ed50 6a02 	vldr	s13, [r0, #-8]
 80167b4:	f1a3 0308 	sub.w	r3, r3, #8
 80167b8:	ee76 5a47 	vsub.f32	s11, s12, s14
 80167bc:	edd3 4a05 	vldr	s9, [r3, #20]
 80167c0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80167c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80167c8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80167cc:	f102 0208 	add.w	r2, r2, #8
 80167d0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80167d4:	f100 0008 	add.w	r0, r0, #8
 80167d8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80167dc:	ee66 5a25 	vmul.f32	s11, s12, s11
 80167e0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80167e4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80167e8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80167ec:	ee26 6a05 	vmul.f32	s12, s12, s10
 80167f0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80167f4:	ee37 7a46 	vsub.f32	s14, s14, s12
 80167f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016800:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016804:	ed02 7a04 	vstr	s14, [r2, #-16]
 8016808:	ed42 7a03 	vstr	s15, [r2, #-12]
 801680c:	d1c9      	bne.n	80167a2 <merge_rfft_f32+0x3a>
 801680e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016812:	4770      	bx	lr

08016814 <arm_rfft_fast_f32>:
 8016814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016818:	461c      	mov	r4, r3
 801681a:	4605      	mov	r5, r0
 801681c:	4616      	mov	r6, r2
 801681e:	b14b      	cbz	r3, 8016834 <arm_rfft_fast_f32+0x20>
 8016820:	f7ff ffa2 	bl	8016768 <merge_rfft_f32>
 8016824:	4622      	mov	r2, r4
 8016826:	4631      	mov	r1, r6
 8016828:	4628      	mov	r0, r5
 801682a:	2301      	movs	r3, #1
 801682c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016830:	f000 bb38 	b.w	8016ea4 <arm_cfft_f32>
 8016834:	460f      	mov	r7, r1
 8016836:	461a      	mov	r2, r3
 8016838:	2301      	movs	r3, #1
 801683a:	f000 fb33 	bl	8016ea4 <arm_cfft_f32>
 801683e:	4632      	mov	r2, r6
 8016840:	4639      	mov	r1, r7
 8016842:	4628      	mov	r0, r5
 8016844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016848:	f7ff bf30 	b.w	80166ac <stage_rfft_f32>

0801684c <arm_cfft_radix8by2_f32>:
 801684c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016850:	4607      	mov	r7, r0
 8016852:	4608      	mov	r0, r1
 8016854:	ed2d 8b06 	vpush	{d8-d10}
 8016858:	f8b7 c000 	ldrh.w	ip, [r7]
 801685c:	b082      	sub	sp, #8
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8016864:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8016868:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801686c:	f000 80ac 	beq.w	80169c8 <arm_cfft_radix8by2_f32+0x17c>
 8016870:	008c      	lsls	r4, r1, #2
 8016872:	f100 0310 	add.w	r3, r0, #16
 8016876:	3210      	adds	r2, #16
 8016878:	f108 0610 	add.w	r6, r8, #16
 801687c:	3410      	adds	r4, #16
 801687e:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8016882:	1905      	adds	r5, r0, r4
 8016884:	4444      	add	r4, r8
 8016886:	ed16 7a04 	vldr	s14, [r6, #-16]
 801688a:	3310      	adds	r3, #16
 801688c:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 8016890:	3510      	adds	r5, #16
 8016892:	ed56 0a03 	vldr	s1, [r6, #-12]
 8016896:	3210      	adds	r2, #16
 8016898:	ee74 9a87 	vadd.f32	s19, s9, s14
 801689c:	ed56 7a02 	vldr	s15, [r6, #-8]
 80168a0:	ed56 2a01 	vldr	s5, [r6, #-4]
 80168a4:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80168a8:	ed54 5a04 	vldr	s11, [r4, #-16]
 80168ac:	3610      	adds	r6, #16
 80168ae:	ed14 5a03 	vldr	s10, [r4, #-12]
 80168b2:	3410      	adds	r4, #16
 80168b4:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 80168b8:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 80168bc:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 80168c0:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 80168c4:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 80168c8:	ee36 9aa5 	vadd.f32	s18, s13, s11
 80168cc:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 80168d0:	ee33 8a83 	vadd.f32	s16, s7, s6
 80168d4:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 80168d8:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80168dc:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80168e0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80168e4:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 80168e8:	ee77 aa20 	vadd.f32	s21, s14, s1
 80168ec:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 80168f0:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80168f4:	ee72 9a22 	vadd.f32	s19, s4, s5
 80168f8:	ee71 8a05 	vadd.f32	s17, s2, s10
 80168fc:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 8016900:	ee37 7a60 	vsub.f32	s14, s14, s1
 8016904:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 8016908:	ee35 5a41 	vsub.f32	s10, s10, s2
 801690c:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 8016910:	ee36 6a44 	vsub.f32	s12, s12, s8
 8016914:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 8016918:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 801691c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8016920:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 8016924:	ee72 7a62 	vsub.f32	s15, s4, s5
 8016928:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 801692c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8016930:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8016934:	4563      	cmp	r3, ip
 8016936:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 801693a:	ee24 3a84 	vmul.f32	s6, s9, s8
 801693e:	ee27 2a26 	vmul.f32	s4, s14, s13
 8016942:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8016946:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801694a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801694e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8016952:	ee65 6a26 	vmul.f32	s13, s10, s13
 8016956:	ee25 5a04 	vmul.f32	s10, s10, s8
 801695a:	ee37 7a64 	vsub.f32	s14, s14, s9
 801695e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016962:	ee33 4a02 	vadd.f32	s8, s6, s4
 8016966:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801696a:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 801696e:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 8016972:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 8016976:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 801697a:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 801697e:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8016982:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8016986:	ee27 4a87 	vmul.f32	s8, s15, s14
 801698a:	ee61 5a87 	vmul.f32	s11, s3, s14
 801698e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016992:	ee22 5a87 	vmul.f32	s10, s5, s14
 8016996:	ee26 7a07 	vmul.f32	s14, s12, s14
 801699a:	ee26 6a26 	vmul.f32	s12, s12, s13
 801699e:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80169a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80169a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80169aa:	ee35 6a46 	vsub.f32	s12, s10, s12
 80169ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80169b2:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 80169b6:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 80169ba:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 80169be:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 80169c2:	f47f af60 	bne.w	8016886 <arm_cfft_radix8by2_f32+0x3a>
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	b289      	uxth	r1, r1
 80169ca:	2302      	movs	r3, #2
 80169cc:	9101      	str	r1, [sp, #4]
 80169ce:	f001 f8ef 	bl	8017bb0 <arm_radix8_butterfly_f32>
 80169d2:	9901      	ldr	r1, [sp, #4]
 80169d4:	4640      	mov	r0, r8
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	2302      	movs	r3, #2
 80169da:	b002      	add	sp, #8
 80169dc:	ecbd 8b06 	vpop	{d8-d10}
 80169e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169e4:	f001 b8e4 	b.w	8017bb0 <arm_radix8_butterfly_f32>

080169e8 <arm_cfft_radix8by4_f32>:
 80169e8:	4602      	mov	r2, r0
 80169ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ee:	ed2d 8b04 	vpush	{d8-d9}
 80169f2:	8813      	ldrh	r3, [r2, #0]
 80169f4:	b08d      	sub	sp, #52	@ 0x34
 80169f6:	edd1 7a00 	vldr	s15, [r1]
 80169fa:	085b      	lsrs	r3, r3, #1
 80169fc:	6852      	ldr	r2, [r2, #4]
 80169fe:	edd1 5a01 	vldr	s11, [r1, #4]
 8016a02:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8016a06:	900a      	str	r0, [sp, #40]	@ 0x28
 8016a08:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8016a0c:	4608      	mov	r0, r1
 8016a0e:	ed98 6a00 	vldr	s12, [r8]
 8016a12:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 8016a16:	ed96 7a00 	vldr	s14, [r6]
 8016a1a:	f102 0108 	add.w	r1, r2, #8
 8016a1e:	ee77 6a86 	vadd.f32	s13, s15, s12
 8016a22:	ed95 5a00 	vldr	s10, [r5]
 8016a26:	edd8 4a01 	vldr	s9, [r8, #4]
 8016a2a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a2e:	9102      	str	r1, [sp, #8]
 8016a30:	0859      	lsrs	r1, r3, #1
 8016a32:	ee77 3a26 	vadd.f32	s7, s14, s13
 8016a36:	ed96 4a01 	vldr	s8, [r6, #4]
 8016a3a:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8016a3e:	ed95 3a01 	vldr	s6, [r5, #4]
 8016a42:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8016a46:	9109      	str	r1, [sp, #36]	@ 0x24
 8016a48:	ee73 3a85 	vadd.f32	s7, s7, s10
 8016a4c:	0859      	lsrs	r1, r3, #1
 8016a4e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016a52:	4603      	mov	r3, r0
 8016a54:	ee76 4a44 	vsub.f32	s9, s12, s8
 8016a58:	f102 0c10 	add.w	ip, r2, #16
 8016a5c:	edc0 3a00 	vstr	s7, [r0]
 8016a60:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016a64:	ed96 2a01 	vldr	s4, [r6, #4]
 8016a68:	ee74 3a27 	vadd.f32	s7, s8, s15
 8016a6c:	3308      	adds	r3, #8
 8016a6e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8016a72:	ee36 6a02 	vadd.f32	s12, s12, s4
 8016a76:	edd5 2a01 	vldr	s5, [r5, #4]
 8016a7a:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8016a7e:	9303      	str	r3, [sp, #12]
 8016a80:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016a84:	4637      	mov	r7, r6
 8016a86:	462c      	mov	r4, r5
 8016a88:	3902      	subs	r1, #2
 8016a8a:	4643      	mov	r3, r8
 8016a8c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8016a90:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016a94:	f8cd c000 	str.w	ip, [sp]
 8016a98:	ee36 6a22 	vadd.f32	s12, s12, s5
 8016a9c:	f102 0c18 	add.w	ip, r2, #24
 8016aa0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8016aa4:	3708      	adds	r7, #8
 8016aa6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8016aaa:	3308      	adds	r3, #8
 8016aac:	ee74 4a05 	vadd.f32	s9, s8, s10
 8016ab0:	3408      	adds	r4, #8
 8016ab2:	ee37 7a45 	vsub.f32	s14, s14, s10
 8016ab6:	0849      	lsrs	r1, r1, #1
 8016ab8:	ed80 6a01 	vstr	s12, [r0, #4]
 8016abc:	9508      	str	r5, [sp, #32]
 8016abe:	edc6 3a00 	vstr	s7, [r6]
 8016ac2:	edc6 4a01 	vstr	s9, [r6, #4]
 8016ac6:	9607      	str	r6, [sp, #28]
 8016ac8:	edc8 6a00 	vstr	s13, [r8]
 8016acc:	edc8 5a01 	vstr	s11, [r8, #4]
 8016ad0:	f8cd c004 	str.w	ip, [sp, #4]
 8016ad4:	9706      	str	r7, [sp, #24]
 8016ad6:	9305      	str	r3, [sp, #20]
 8016ad8:	edc5 7a00 	vstr	s15, [r5]
 8016adc:	9404      	str	r4, [sp, #16]
 8016ade:	ed85 7a01 	vstr	s14, [r5, #4]
 8016ae2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016ae4:	f000 813a 	beq.w	8016d5c <arm_cfft_radix8by4_f32+0x374>
 8016ae8:	4637      	mov	r7, r6
 8016aea:	f1a6 0c0c 	sub.w	ip, r6, #12
 8016aee:	462e      	mov	r6, r5
 8016af0:	f1aa 030c 	sub.w	r3, sl, #12
 8016af4:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 8016af8:	f102 0a20 	add.w	sl, r2, #32
 8016afc:	4632      	mov	r2, r6
 8016afe:	442b      	add	r3, r5
 8016b00:	f100 0e10 	add.w	lr, r0, #16
 8016b04:	f107 0510 	add.w	r5, r7, #16
 8016b08:	f8dd b000 	ldr.w	fp, [sp]
 8016b0c:	f1a8 040c 	sub.w	r4, r8, #12
 8016b10:	f108 0710 	add.w	r7, r8, #16
 8016b14:	3e0c      	subs	r6, #12
 8016b16:	3210      	adds	r2, #16
 8016b18:	ed17 7a02 	vldr	s14, [r7, #-8]
 8016b1c:	3901      	subs	r1, #1
 8016b1e:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8016b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8016b26:	ed55 6a02 	vldr	s13, [r5, #-8]
 8016b2a:	f10e 0e08 	add.w	lr, lr, #8
 8016b2e:	ee77 1a87 	vadd.f32	s3, s15, s14
 8016b32:	ed52 4a02 	vldr	s9, [r2, #-8]
 8016b36:	ed57 5a01 	vldr	s11, [r7, #-4]
 8016b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b3e:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8016b42:	f10b 0b08 	add.w	fp, fp, #8
 8016b46:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8016b4a:	ed15 3a01 	vldr	s6, [r5, #-4]
 8016b4e:	ee37 4a25 	vadd.f32	s8, s14, s11
 8016b52:	ed52 3a01 	vldr	s7, [r2, #-4]
 8016b56:	ee37 7a65 	vsub.f32	s14, s14, s11
 8016b5a:	f105 0508 	add.w	r5, r5, #8
 8016b5e:	ee36 6a24 	vadd.f32	s12, s12, s9
 8016b62:	f1a4 0408 	sub.w	r4, r4, #8
 8016b66:	ee73 2a27 	vadd.f32	s5, s6, s15
 8016b6a:	f10a 0a10 	add.w	sl, sl, #16
 8016b6e:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8016b72:	f107 0708 	add.w	r7, r7, #8
 8016b76:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8016b7a:	ee37 5a66 	vsub.f32	s10, s14, s13
 8016b7e:	ed55 5a03 	vldr	s11, [r5, #-12]
 8016b82:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8016b86:	ed12 6a01 	vldr	s12, [r2, #-4]
 8016b8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b8e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8016b92:	f1a6 0608 	sub.w	r6, r6, #8
 8016b96:	ee34 4a43 	vsub.f32	s8, s8, s6
 8016b9a:	f109 0918 	add.w	r9, r9, #24
 8016b9e:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8016ba2:	f102 0208 	add.w	r2, r2, #8
 8016ba6:	ee75 5a86 	vadd.f32	s11, s11, s12
 8016baa:	f1a3 0308 	sub.w	r3, r3, #8
 8016bae:	ee34 6a63 	vsub.f32	s12, s8, s7
 8016bb2:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8016bb6:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8016bba:	ee35 5a24 	vadd.f32	s10, s10, s9
 8016bbe:	ed96 4a04 	vldr	s8, [r6, #16]
 8016bc2:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8016bc6:	ed9c 3a04 	vldr	s6, [ip, #16]
 8016bca:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016bce:	edd4 7a04 	vldr	s15, [r4, #16]
 8016bd2:	ee73 6a04 	vadd.f32	s13, s6, s8
 8016bd6:	ed93 8a04 	vldr	s16, [r3, #16]
 8016bda:	edd6 5a03 	vldr	s11, [r6, #12]
 8016bde:	ee33 3a44 	vsub.f32	s6, s6, s8
 8016be2:	ed9c 2a03 	vldr	s4, [ip, #12]
 8016be6:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8016bea:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8016bee:	ed94 1a03 	vldr	s2, [r4, #12]
 8016bf2:	ee32 4a25 	vadd.f32	s8, s4, s11
 8016bf6:	edd3 2a03 	vldr	s5, [r3, #12]
 8016bfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016bfe:	ee70 0a88 	vadd.f32	s1, s1, s16
 8016c02:	ee73 4a41 	vsub.f32	s9, s6, s2
 8016c06:	ee32 2a65 	vsub.f32	s4, s4, s11
 8016c0a:	edcc 0a04 	vstr	s1, [ip, #16]
 8016c0e:	ee74 0a41 	vsub.f32	s1, s8, s2
 8016c12:	edd4 6a03 	vldr	s13, [r4, #12]
 8016c16:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8016c1a:	ed93 9a03 	vldr	s18, [r3, #12]
 8016c1e:	ee78 5a82 	vadd.f32	s11, s17, s4
 8016c22:	ee34 4a26 	vadd.f32	s8, s8, s13
 8016c26:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8016c2a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8016c2e:	ee34 4a09 	vadd.f32	s8, s8, s18
 8016c32:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8016c36:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8016c3a:	ed8c 4a03 	vstr	s8, [ip, #12]
 8016c3e:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8016c42:	ed1b 1a03 	vldr	s2, [fp, #-12]
 8016c46:	ed1b 4a04 	vldr	s8, [fp, #-16]
 8016c4a:	ee60 2a01 	vmul.f32	s5, s0, s2
 8016c4e:	ee64 6a81 	vmul.f32	s13, s9, s2
 8016c52:	ee20 8a04 	vmul.f32	s16, s0, s8
 8016c56:	ee64 4a84 	vmul.f32	s9, s9, s8
 8016c5a:	ee25 0a01 	vmul.f32	s0, s10, s2
 8016c5e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8016c62:	ee25 4a84 	vmul.f32	s8, s11, s8
 8016c66:	ee65 5a81 	vmul.f32	s11, s11, s2
 8016c6a:	ee35 5a62 	vsub.f32	s10, s10, s5
 8016c6e:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8016c72:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8016c76:	ee38 1a00 	vadd.f32	s2, s16, s0
 8016c7a:	ed05 5a03 	vstr	s10, [r5, #-12]
 8016c7e:	ed05 1a04 	vstr	s2, [r5, #-16]
 8016c82:	ed84 4a04 	vstr	s8, [r4, #16]
 8016c86:	edc4 5a03 	vstr	s11, [r4, #12]
 8016c8a:	ed1a 5a08 	vldr	s10, [sl, #-32]	@ 0xffffffe0
 8016c8e:	ed5a 5a07 	vldr	s11, [sl, #-28]	@ 0xffffffe4
 8016c92:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8016c96:	ee66 2a25 	vmul.f32	s5, s12, s11
 8016c9a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8016c9e:	ee21 4a85 	vmul.f32	s8, s3, s10
 8016ca2:	ee60 7a85 	vmul.f32	s15, s1, s10
 8016ca6:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8016caa:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016cae:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8016cb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016cb6:	ee34 5a22 	vadd.f32	s10, s8, s5
 8016cba:	ee36 6a61 	vsub.f32	s12, s12, s3
 8016cbe:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8016cc2:	ed07 5a04 	vstr	s10, [r7, #-16]
 8016cc6:	ed07 6a03 	vstr	s12, [r7, #-12]
 8016cca:	edc6 5a04 	vstr	s11, [r6, #16]
 8016cce:	edc6 6a03 	vstr	s13, [r6, #12]
 8016cd2:	ed59 2a0c 	vldr	s5, [r9, #-48]	@ 0xffffffd0
 8016cd6:	ed59 7a0b 	vldr	s15, [r9, #-44]	@ 0xffffffd4
 8016cda:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8016cde:	ee67 5a27 	vmul.f32	s11, s14, s15
 8016ce2:	ee63 6a27 	vmul.f32	s13, s6, s15
 8016ce6:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8016cea:	ee27 7a22 	vmul.f32	s14, s14, s5
 8016cee:	ee62 7a27 	vmul.f32	s15, s4, s15
 8016cf2:	ee23 3a22 	vmul.f32	s6, s6, s5
 8016cf6:	ee22 2a22 	vmul.f32	s4, s4, s5
 8016cfa:	ee36 6a25 	vadd.f32	s12, s12, s11
 8016cfe:	ee37 7a63 	vsub.f32	s14, s14, s7
 8016d02:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8016d06:	ee77 7a83 	vadd.f32	s15, s15, s6
 8016d0a:	ed02 6a04 	vstr	s12, [r2, #-16]
 8016d0e:	ed02 7a03 	vstr	s14, [r2, #-12]
 8016d12:	ed83 2a04 	vstr	s4, [r3, #16]
 8016d16:	edc3 7a03 	vstr	s15, [r3, #12]
 8016d1a:	f47f aefd 	bne.w	8016b18 <arm_cfft_radix8by4_f32+0x130>
 8016d1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016d20:	9903      	ldr	r1, [sp, #12]
 8016d22:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016d26:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d2a:	9103      	str	r1, [sp, #12]
 8016d2c:	9902      	ldr	r1, [sp, #8]
 8016d2e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d32:	9102      	str	r1, [sp, #8]
 8016d34:	9906      	ldr	r1, [sp, #24]
 8016d36:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d3a:	9106      	str	r1, [sp, #24]
 8016d3c:	9900      	ldr	r1, [sp, #0]
 8016d3e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8016d42:	9100      	str	r1, [sp, #0]
 8016d44:	9905      	ldr	r1, [sp, #20]
 8016d46:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016d4a:	9105      	str	r1, [sp, #20]
 8016d4c:	9904      	ldr	r1, [sp, #16]
 8016d4e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8016d52:	9204      	str	r2, [sp, #16]
 8016d54:	9a01      	ldr	r2, [sp, #4]
 8016d56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016d5a:	9301      	str	r3, [sp, #4]
 8016d5c:	9c03      	ldr	r4, [sp, #12]
 8016d5e:	2304      	movs	r3, #4
 8016d60:	9e05      	ldr	r6, [sp, #20]
 8016d62:	ed94 7a00 	vldr	s14, [r4]
 8016d66:	edd6 7a00 	vldr	s15, [r6]
 8016d6a:	9a06      	ldr	r2, [sp, #24]
 8016d6c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016d70:	9d04      	ldr	r5, [sp, #16]
 8016d72:	edd2 6a00 	vldr	s13, [r2]
 8016d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016d7a:	ed95 3a00 	vldr	s6, [r5]
 8016d7e:	ee76 3a86 	vadd.f32	s7, s13, s12
 8016d82:	ed96 5a01 	vldr	s10, [r6, #4]
 8016d86:	ed94 4a01 	vldr	s8, [r4, #4]
 8016d8a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016d8e:	edd5 2a01 	vldr	s5, [r5, #4]
 8016d92:	ee73 3a83 	vadd.f32	s7, s7, s6
 8016d96:	edd2 7a01 	vldr	s15, [r2, #4]
 8016d9a:	ee74 5a05 	vadd.f32	s11, s8, s10
 8016d9e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8016da2:	ee34 4a45 	vsub.f32	s8, s8, s10
 8016da6:	edc4 3a00 	vstr	s7, [r4]
 8016daa:	ee77 4a87 	vadd.f32	s9, s15, s14
 8016dae:	edd2 3a01 	vldr	s7, [r2, #4]
 8016db2:	ee36 6a43 	vsub.f32	s12, s12, s6
 8016db6:	ed95 2a01 	vldr	s4, [r5, #4]
 8016dba:	ee34 5a66 	vsub.f32	s10, s8, s13
 8016dbe:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8016dc2:	9103      	str	r1, [sp, #12]
 8016dc4:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8016dc8:	ee35 5a03 	vadd.f32	s10, s10, s6
 8016dcc:	ee73 3a82 	vadd.f32	s7, s7, s4
 8016dd0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8016dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016dd8:	edc4 3a01 	vstr	s7, [r4, #4]
 8016ddc:	ee76 6a84 	vadd.f32	s13, s13, s8
 8016de0:	9c02      	ldr	r4, [sp, #8]
 8016de2:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8016de6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8016dea:	edd4 3a00 	vldr	s7, [r4]
 8016dee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8016df2:	ed94 7a01 	vldr	s14, [r4, #4]
 8016df6:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8016dfa:	ee64 4a87 	vmul.f32	s9, s9, s14
 8016dfe:	ee25 7a07 	vmul.f32	s14, s10, s14
 8016e02:	ee25 5a23 	vmul.f32	s10, s10, s7
 8016e06:	ee34 7a07 	vadd.f32	s14, s8, s14
 8016e0a:	ee35 5a64 	vsub.f32	s10, s10, s9
 8016e0e:	ed82 7a00 	vstr	s14, [r2]
 8016e12:	ed82 5a01 	vstr	s10, [r2, #4]
 8016e16:	9a00      	ldr	r2, [sp, #0]
 8016e18:	edd2 4a01 	vldr	s9, [r2, #4]
 8016e1c:	ed92 7a00 	vldr	s14, [r2]
 8016e20:	9a01      	ldr	r2, [sp, #4]
 8016e22:	ee26 5a07 	vmul.f32	s10, s12, s14
 8016e26:	ee26 6a24 	vmul.f32	s12, s12, s9
 8016e2a:	ee25 7a87 	vmul.f32	s14, s11, s14
 8016e2e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8016e32:	ee37 6a46 	vsub.f32	s12, s14, s12
 8016e36:	ee75 5a25 	vadd.f32	s11, s10, s11
 8016e3a:	ed86 6a01 	vstr	s12, [r6, #4]
 8016e3e:	edc6 5a00 	vstr	s11, [r6]
 8016e42:	edd2 5a01 	vldr	s11, [r2, #4]
 8016e46:	ed92 7a00 	vldr	s14, [r2]
 8016e4a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e4e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016e52:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016e56:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e5e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e62:	edc5 6a00 	vstr	s13, [r5]
 8016e66:	edc5 7a01 	vstr	s15, [r5, #4]
 8016e6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016e6c:	6862      	ldr	r2, [r4, #4]
 8016e6e:	f000 fe9f 	bl	8017bb0 <arm_radix8_butterfly_f32>
 8016e72:	9903      	ldr	r1, [sp, #12]
 8016e74:	9807      	ldr	r0, [sp, #28]
 8016e76:	2304      	movs	r3, #4
 8016e78:	6862      	ldr	r2, [r4, #4]
 8016e7a:	9100      	str	r1, [sp, #0]
 8016e7c:	f000 fe98 	bl	8017bb0 <arm_radix8_butterfly_f32>
 8016e80:	4640      	mov	r0, r8
 8016e82:	9900      	ldr	r1, [sp, #0]
 8016e84:	6862      	ldr	r2, [r4, #4]
 8016e86:	2304      	movs	r3, #4
 8016e88:	f000 fe92 	bl	8017bb0 <arm_radix8_butterfly_f32>
 8016e8c:	9900      	ldr	r1, [sp, #0]
 8016e8e:	6862      	ldr	r2, [r4, #4]
 8016e90:	2304      	movs	r3, #4
 8016e92:	9808      	ldr	r0, [sp, #32]
 8016e94:	b00d      	add	sp, #52	@ 0x34
 8016e96:	ecbd 8b04 	vpop	{d8-d9}
 8016e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9e:	f000 be87 	b.w	8017bb0 <arm_radix8_butterfly_f32>
 8016ea2:	bf00      	nop

08016ea4 <arm_cfft_f32>:
 8016ea4:	2a01      	cmp	r2, #1
 8016ea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eaa:	4607      	mov	r7, r0
 8016eac:	4690      	mov	r8, r2
 8016eae:	460c      	mov	r4, r1
 8016eb0:	4699      	mov	r9, r3
 8016eb2:	8805      	ldrh	r5, [r0, #0]
 8016eb4:	d05b      	beq.n	8016f6e <arm_cfft_f32+0xca>
 8016eb6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8016eba:	d053      	beq.n	8016f64 <arm_cfft_f32+0xc0>
 8016ebc:	d810      	bhi.n	8016ee0 <arm_cfft_f32+0x3c>
 8016ebe:	2d40      	cmp	r5, #64	@ 0x40
 8016ec0:	d015      	beq.n	8016eee <arm_cfft_f32+0x4a>
 8016ec2:	d94b      	bls.n	8016f5c <arm_cfft_f32+0xb8>
 8016ec4:	2d80      	cmp	r5, #128	@ 0x80
 8016ec6:	d103      	bne.n	8016ed0 <arm_cfft_f32+0x2c>
 8016ec8:	4621      	mov	r1, r4
 8016eca:	4638      	mov	r0, r7
 8016ecc:	f7ff fcbe 	bl	801684c <arm_cfft_radix8by2_f32>
 8016ed0:	f1b9 0f00 	cmp.w	r9, #0
 8016ed4:	d114      	bne.n	8016f00 <arm_cfft_f32+0x5c>
 8016ed6:	f1b8 0f01 	cmp.w	r8, #1
 8016eda:	d019      	beq.n	8016f10 <arm_cfft_f32+0x6c>
 8016edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ee0:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8016ee4:	d03e      	beq.n	8016f64 <arm_cfft_f32+0xc0>
 8016ee6:	d932      	bls.n	8016f4e <arm_cfft_f32+0xaa>
 8016ee8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8016eec:	d1f0      	bne.n	8016ed0 <arm_cfft_f32+0x2c>
 8016eee:	2301      	movs	r3, #1
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	4629      	mov	r1, r5
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f000 fe5b 	bl	8017bb0 <arm_radix8_butterfly_f32>
 8016efa:	f1b9 0f00 	cmp.w	r9, #0
 8016efe:	d0ea      	beq.n	8016ed6 <arm_cfft_f32+0x32>
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	4620      	mov	r0, r4
 8016f04:	89b9      	ldrh	r1, [r7, #12]
 8016f06:	f000 f843 	bl	8016f90 <arm_bitreversal_32>
 8016f0a:	f1b8 0f01 	cmp.w	r8, #1
 8016f0e:	d1e5      	bne.n	8016edc <arm_cfft_f32+0x38>
 8016f10:	ee07 5a90 	vmov	s15, r5
 8016f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016f20:	2d00      	cmp	r5, #0
 8016f22:	d0db      	beq.n	8016edc <arm_cfft_f32+0x38>
 8016f24:	f104 0108 	add.w	r1, r4, #8
 8016f28:	2300      	movs	r3, #0
 8016f2a:	ed11 7a02 	vldr	s14, [r1, #-8]
 8016f2e:	3301      	adds	r3, #1
 8016f30:	ed51 7a01 	vldr	s15, [r1, #-4]
 8016f34:	3108      	adds	r1, #8
 8016f36:	429d      	cmp	r5, r3
 8016f38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016f3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016f40:	ed01 7a04 	vstr	s14, [r1, #-16]
 8016f44:	ed41 7a03 	vstr	s15, [r1, #-12]
 8016f48:	d1ef      	bne.n	8016f2a <arm_cfft_f32+0x86>
 8016f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f4e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8016f52:	d0cc      	beq.n	8016eee <arm_cfft_f32+0x4a>
 8016f54:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8016f58:	d0b6      	beq.n	8016ec8 <arm_cfft_f32+0x24>
 8016f5a:	e7b9      	b.n	8016ed0 <arm_cfft_f32+0x2c>
 8016f5c:	2d10      	cmp	r5, #16
 8016f5e:	d0b3      	beq.n	8016ec8 <arm_cfft_f32+0x24>
 8016f60:	2d20      	cmp	r5, #32
 8016f62:	d1b5      	bne.n	8016ed0 <arm_cfft_f32+0x2c>
 8016f64:	4621      	mov	r1, r4
 8016f66:	4638      	mov	r0, r7
 8016f68:	f7ff fd3e 	bl	80169e8 <arm_cfft_radix8by4_f32>
 8016f6c:	e7b0      	b.n	8016ed0 <arm_cfft_f32+0x2c>
 8016f6e:	b165      	cbz	r5, 8016f8a <arm_cfft_f32+0xe6>
 8016f70:	310c      	adds	r1, #12
 8016f72:	2600      	movs	r6, #0
 8016f74:	ed51 7a02 	vldr	s15, [r1, #-8]
 8016f78:	3601      	adds	r6, #1
 8016f7a:	3108      	adds	r1, #8
 8016f7c:	eef1 7a67 	vneg.f32	s15, s15
 8016f80:	42b5      	cmp	r5, r6
 8016f82:	ed41 7a04 	vstr	s15, [r1, #-16]
 8016f86:	d1f5      	bne.n	8016f74 <arm_cfft_f32+0xd0>
 8016f88:	e795      	b.n	8016eb6 <arm_cfft_f32+0x12>
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d0a6      	beq.n	8016edc <arm_cfft_f32+0x38>
 8016f8e:	e7b7      	b.n	8016f00 <arm_cfft_f32+0x5c>

08016f90 <arm_bitreversal_32>:
 8016f90:	b321      	cbz	r1, 8016fdc <arm_bitreversal_32+0x4c>
 8016f92:	f102 0c02 	add.w	ip, r2, #2
 8016f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f9a:	4690      	mov	r8, r2
 8016f9c:	2500      	movs	r5, #0
 8016f9e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8016fa2:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8016fa6:	3502      	adds	r5, #2
 8016fa8:	08a4      	lsrs	r4, r4, #2
 8016faa:	089b      	lsrs	r3, r3, #2
 8016fac:	428d      	cmp	r5, r1
 8016fae:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8016fb2:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8016fb6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8016fba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016fbe:	f107 0704 	add.w	r7, r7, #4
 8016fc2:	f106 0604 	add.w	r6, r6, #4
 8016fc6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8016fca:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8016fce:	59c4      	ldr	r4, [r0, r7]
 8016fd0:	5983      	ldr	r3, [r0, r6]
 8016fd2:	51c3      	str	r3, [r0, r7]
 8016fd4:	5184      	str	r4, [r0, r6]
 8016fd6:	d3e2      	bcc.n	8016f9e <arm_bitreversal_32+0xe>
 8016fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop

08016fe0 <arm_mat_trans_f32>:
 8016fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe4:	8803      	ldrh	r3, [r0, #0]
 8016fe6:	b085      	sub	sp, #20
 8016fe8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
 8016fec:	6847      	ldr	r7, [r0, #4]
 8016fee:	459b      	cmp	fp, r3
 8016ff0:	8842      	ldrh	r2, [r0, #2]
 8016ff2:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8016ff6:	f040 809a 	bne.w	801712e <arm_mat_trans_f32+0x14e>
 8016ffa:	880b      	ldrh	r3, [r1, #0]
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	f040 8096 	bne.w	801712e <arm_mat_trans_f32+0x14e>
 8017002:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8017006:	f1bb 0f01 	cmp.w	fp, #1
 801700a:	ea4f 048b 	mov.w	r4, fp, lsl #2
 801700e:	f003 0a03 	and.w	sl, r3, #3
 8017012:	fb08 f904 	mul.w	r9, r8, r4
 8017016:	d13f      	bne.n	8017098 <arm_mat_trans_f32+0xb8>
 8017018:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801701c:	46f4      	mov	ip, lr
 801701e:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8017022:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8017026:	9301      	str	r3, [sp, #4]
 8017028:	4663      	mov	r3, ip
 801702a:	f1b8 0f00 	cmp.w	r8, #0
 801702e:	d020      	beq.n	8017072 <arm_mat_trans_f32+0x92>
 8017030:	f107 0210 	add.w	r2, r7, #16
 8017034:	f10c 0108 	add.w	r1, ip, #8
 8017038:	4645      	mov	r5, r8
 801703a:	ed52 7a04 	vldr	s15, [r2, #-16]
 801703e:	191e      	adds	r6, r3, r4
 8017040:	1908      	adds	r0, r1, r4
 8017042:	3d01      	subs	r5, #1
 8017044:	edc3 7a00 	vstr	s15, [r3]
 8017048:	f101 0110 	add.w	r1, r1, #16
 801704c:	ed52 7a03 	vldr	s15, [r2, #-12]
 8017050:	f103 0310 	add.w	r3, r3, #16
 8017054:	f102 0210 	add.w	r2, r2, #16
 8017058:	edc6 7a00 	vstr	s15, [r6]
 801705c:	f852 6c18 	ldr.w	r6, [r2, #-24]
 8017060:	f841 6c10 	str.w	r6, [r1, #-16]
 8017064:	f852 6c14 	ldr.w	r6, [r2, #-20]
 8017068:	6006      	str	r6, [r0, #0]
 801706a:	d1e6      	bne.n	801703a <arm_mat_trans_f32+0x5a>
 801706c:	445f      	add	r7, fp
 801706e:	eb09 030c 	add.w	r3, r9, ip
 8017072:	f1ba 0f00 	cmp.w	sl, #0
 8017076:	d009      	beq.n	801708c <arm_mat_trans_f32+0xac>
 8017078:	4652      	mov	r2, sl
 801707a:	4639      	mov	r1, r7
 801707c:	f851 0b04 	ldr.w	r0, [r1], #4
 8017080:	3a01      	subs	r2, #1
 8017082:	6018      	str	r0, [r3, #0]
 8017084:	4423      	add	r3, r4
 8017086:	d1f9      	bne.n	801707c <arm_mat_trans_f32+0x9c>
 8017088:	9b01      	ldr	r3, [sp, #4]
 801708a:	441f      	add	r7, r3
 801708c:	45f4      	cmp	ip, lr
 801708e:	f10c 0304 	add.w	r3, ip, #4
 8017092:	d048      	beq.n	8017126 <arm_mat_trans_f32+0x146>
 8017094:	469c      	mov	ip, r3
 8017096:	e7c7      	b.n	8017028 <arm_mat_trans_f32+0x48>
 8017098:	eb0e 0304 	add.w	r3, lr, r4
 801709c:	ea4f 150b 	mov.w	r5, fp, lsl #4
 80170a0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80170a4:	9301      	str	r3, [sp, #4]
 80170a6:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80170aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80170ae:	9302      	str	r3, [sp, #8]
 80170b0:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80170b4:	9303      	str	r3, [sp, #12]
 80170b6:	4673      	mov	r3, lr
 80170b8:	f1b8 0f00 	cmp.w	r8, #0
 80170bc:	d021      	beq.n	8017102 <arm_mat_trans_f32+0x122>
 80170be:	f107 0210 	add.w	r2, r7, #16
 80170c2:	eb0b 010e 	add.w	r1, fp, lr
 80170c6:	4640      	mov	r0, r8
 80170c8:	ed52 7a04 	vldr	s15, [r2, #-16]
 80170cc:	eb03 0c04 	add.w	ip, r3, r4
 80170d0:	190e      	adds	r6, r1, r4
 80170d2:	3801      	subs	r0, #1
 80170d4:	edc3 7a00 	vstr	s15, [r3]
 80170d8:	f102 0210 	add.w	r2, r2, #16
 80170dc:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 80170e0:	442b      	add	r3, r5
 80170e2:	edcc 7a00 	vstr	s15, [ip]
 80170e6:	f852 cc18 	ldr.w	ip, [r2, #-24]
 80170ea:	f8c1 c000 	str.w	ip, [r1]
 80170ee:	4429      	add	r1, r5
 80170f0:	f852 cc14 	ldr.w	ip, [r2, #-20]
 80170f4:	f8c6 c000 	str.w	ip, [r6]
 80170f8:	d1e6      	bne.n	80170c8 <arm_mat_trans_f32+0xe8>
 80170fa:	9b02      	ldr	r3, [sp, #8]
 80170fc:	441f      	add	r7, r3
 80170fe:	eb09 030e 	add.w	r3, r9, lr
 8017102:	f1ba 0f00 	cmp.w	sl, #0
 8017106:	d009      	beq.n	801711c <arm_mat_trans_f32+0x13c>
 8017108:	4652      	mov	r2, sl
 801710a:	4639      	mov	r1, r7
 801710c:	f851 0b04 	ldr.w	r0, [r1], #4
 8017110:	3a01      	subs	r2, #1
 8017112:	6018      	str	r0, [r3, #0]
 8017114:	4423      	add	r3, r4
 8017116:	d1f9      	bne.n	801710c <arm_mat_trans_f32+0x12c>
 8017118:	9b03      	ldr	r3, [sp, #12]
 801711a:	441f      	add	r7, r3
 801711c:	f10e 0e04 	add.w	lr, lr, #4
 8017120:	9b01      	ldr	r3, [sp, #4]
 8017122:	459e      	cmp	lr, r3
 8017124:	d1c7      	bne.n	80170b6 <arm_mat_trans_f32+0xd6>
 8017126:	2000      	movs	r0, #0
 8017128:	b005      	add	sp, #20
 801712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712e:	f06f 0002 	mvn.w	r0, #2
 8017132:	e7f9      	b.n	8017128 <arm_mat_trans_f32+0x148>

08017134 <arm_mat_sub_f32>:
 8017134:	b4f0      	push	{r4, r5, r6, r7}
 8017136:	6803      	ldr	r3, [r0, #0]
 8017138:	6847      	ldr	r7, [r0, #4]
 801713a:	6855      	ldr	r5, [r2, #4]
 801713c:	e9d1 4600 	ldrd	r4, r6, [r1]
 8017140:	42a3      	cmp	r3, r4
 8017142:	d160      	bne.n	8017206 <arm_mat_sub_f32+0xd2>
 8017144:	6812      	ldr	r2, [r2, #0]
 8017146:	4293      	cmp	r3, r2
 8017148:	d15d      	bne.n	8017206 <arm_mat_sub_f32+0xd2>
 801714a:	8803      	ldrh	r3, [r0, #0]
 801714c:	8844      	ldrh	r4, [r0, #2]
 801714e:	fb04 f403 	mul.w	r4, r4, r3
 8017152:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8017156:	d034      	beq.n	80171c2 <arm_mat_sub_f32+0x8e>
 8017158:	f107 0110 	add.w	r1, r7, #16
 801715c:	f106 0210 	add.w	r2, r6, #16
 8017160:	f105 0310 	add.w	r3, r5, #16
 8017164:	4660      	mov	r0, ip
 8017166:	ed12 7a04 	vldr	s14, [r2, #-16]
 801716a:	3801      	subs	r0, #1
 801716c:	ed51 7a04 	vldr	s15, [r1, #-16]
 8017170:	f102 0210 	add.w	r2, r2, #16
 8017174:	f101 0110 	add.w	r1, r1, #16
 8017178:	f103 0310 	add.w	r3, r3, #16
 801717c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017180:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 8017184:	ed12 7a07 	vldr	s14, [r2, #-28]	@ 0xffffffe4
 8017188:	ed51 7a07 	vldr	s15, [r1, #-28]	@ 0xffffffe4
 801718c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017190:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8017194:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 8017198:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 801719c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171a0:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 80171a4:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 80171a8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80171ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171b0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80171b4:	d1d7      	bne.n	8017166 <arm_mat_sub_f32+0x32>
 80171b6:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 80171ba:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 80171be:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 80171c2:	f014 0403 	ands.w	r4, r4, #3
 80171c6:	d01b      	beq.n	8017200 <arm_mat_sub_f32+0xcc>
 80171c8:	edd7 7a00 	vldr	s15, [r7]
 80171cc:	3c01      	subs	r4, #1
 80171ce:	ed96 7a00 	vldr	s14, [r6]
 80171d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171d6:	edc5 7a00 	vstr	s15, [r5]
 80171da:	d011      	beq.n	8017200 <arm_mat_sub_f32+0xcc>
 80171dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80171e0:	2c01      	cmp	r4, #1
 80171e2:	ed96 7a01 	vldr	s14, [r6, #4]
 80171e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171ea:	edc5 7a01 	vstr	s15, [r5, #4]
 80171ee:	d007      	beq.n	8017200 <arm_mat_sub_f32+0xcc>
 80171f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80171f4:	ed96 7a02 	vldr	s14, [r6, #8]
 80171f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80171fc:	edc5 7a02 	vstr	s15, [r5, #8]
 8017200:	2000      	movs	r0, #0
 8017202:	bcf0      	pop	{r4, r5, r6, r7}
 8017204:	4770      	bx	lr
 8017206:	f06f 0002 	mvn.w	r0, #2
 801720a:	e7fa      	b.n	8017202 <arm_mat_sub_f32+0xce>

0801720c <arm_mat_mult_f32>:
 801720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017210:	460d      	mov	r5, r1
 8017212:	b08b      	sub	sp, #44	@ 0x2c
 8017214:	8806      	ldrh	r6, [r0, #0]
 8017216:	882c      	ldrh	r4, [r5, #0]
 8017218:	9107      	str	r1, [sp, #28]
 801721a:	8841      	ldrh	r1, [r0, #2]
 801721c:	6843      	ldr	r3, [r0, #4]
 801721e:	428c      	cmp	r4, r1
 8017220:	6868      	ldr	r0, [r5, #4]
 8017222:	6857      	ldr	r7, [r2, #4]
 8017224:	886d      	ldrh	r5, [r5, #2]
 8017226:	9602      	str	r6, [sp, #8]
 8017228:	f040 80ff 	bne.w	801742a <arm_mat_mult_f32+0x21e>
 801722c:	8811      	ldrh	r1, [r2, #0]
 801722e:	42b1      	cmp	r1, r6
 8017230:	f040 80fb 	bne.w	801742a <arm_mat_mult_f32+0x21e>
 8017234:	8851      	ldrh	r1, [r2, #2]
 8017236:	42a9      	cmp	r1, r5
 8017238:	f040 80f7 	bne.w	801742a <arm_mat_mult_f32+0x21e>
 801723c:	00a2      	lsls	r2, r4, #2
 801723e:	2901      	cmp	r1, #1
 8017240:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8017244:	f004 0e03 	and.w	lr, r4, #3
 8017248:	ea4f 0581 	mov.w	r5, r1, lsl #2
 801724c:	9206      	str	r2, [sp, #24]
 801724e:	d173      	bne.n	8017338 <arm_mat_mult_f32+0x12c>
 8017250:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8017254:	4602      	mov	r2, r0
 8017256:	f107 0904 	add.w	r9, r7, #4
 801725a:	f103 0a10 	add.w	sl, r3, #16
 801725e:	9101      	str	r1, [sp, #4]
 8017260:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8017264:	1d01      	adds	r1, r0, #4
 8017266:	9105      	str	r1, [sp, #20]
 8017268:	f1aa 0310 	sub.w	r3, sl, #16
 801726c:	f1a9 0704 	sub.w	r7, r9, #4
 8017270:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017274:	9303      	str	r3, [sp, #12]
 8017276:	f1bc 0f00 	cmp.w	ip, #0
 801727a:	d055      	beq.n	8017328 <arm_mat_mult_f32+0x11c>
 801727c:	f102 0008 	add.w	r0, r2, #8
 8017280:	4653      	mov	r3, sl
 8017282:	4666      	mov	r6, ip
 8017284:	4611      	mov	r1, r2
 8017286:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8017434 <arm_mat_mult_f32+0x228>
 801728a:	ed53 6a04 	vldr	s13, [r3, #-16]
 801728e:	194c      	adds	r4, r1, r5
 8017290:	ed91 7a00 	vldr	s14, [r1]
 8017294:	3e01      	subs	r6, #1
 8017296:	ed53 5a03 	vldr	s11, [r3, #-12]
 801729a:	f101 0110 	add.w	r1, r1, #16
 801729e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80172a2:	ed94 6a00 	vldr	s12, [r4]
 80172a6:	edd0 6a00 	vldr	s13, [r0]
 80172aa:	eb00 0405 	add.w	r4, r0, r5
 80172ae:	ee26 6a25 	vmul.f32	s12, s12, s11
 80172b2:	ed13 5a02 	vldr	s10, [r3, #-8]
 80172b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172ba:	edd4 5a00 	vldr	s11, [r4]
 80172be:	ee26 7a85 	vmul.f32	s14, s13, s10
 80172c2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80172c6:	f100 0010 	add.w	r0, r0, #16
 80172ca:	f103 0310 	add.w	r3, r3, #16
 80172ce:	ee76 7a27 	vadd.f32	s15, s12, s15
 80172d2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80172d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80172de:	d1d4      	bne.n	801728a <arm_mat_mult_f32+0x7e>
 80172e0:	9b01      	ldr	r3, [sp, #4]
 80172e2:	4659      	mov	r1, fp
 80172e4:	441a      	add	r2, r3
 80172e6:	f1be 0f00 	cmp.w	lr, #0
 80172ea:	d00b      	beq.n	8017304 <arm_mat_mult_f32+0xf8>
 80172ec:	4673      	mov	r3, lr
 80172ee:	ed92 7a00 	vldr	s14, [r2]
 80172f2:	3b01      	subs	r3, #1
 80172f4:	ecf1 6a01 	vldmia	r1!, {s13}
 80172f8:	442a      	add	r2, r5
 80172fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80172fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017302:	d1f4      	bne.n	80172ee <arm_mat_mult_f32+0xe2>
 8017304:	ece7 7a01 	vstmia	r7!, {s15}
 8017308:	454f      	cmp	r7, r9
 801730a:	4642      	mov	r2, r8
 801730c:	f108 0804 	add.w	r8, r8, #4
 8017310:	d1b1      	bne.n	8017276 <arm_mat_mult_f32+0x6a>
 8017312:	9b06      	ldr	r3, [sp, #24]
 8017314:	44a9      	add	r9, r5
 8017316:	449b      	add	fp, r3
 8017318:	449a      	add	sl, r3
 801731a:	9b02      	ldr	r3, [sp, #8]
 801731c:	3b01      	subs	r3, #1
 801731e:	9302      	str	r3, [sp, #8]
 8017320:	d006      	beq.n	8017330 <arm_mat_mult_f32+0x124>
 8017322:	9b07      	ldr	r3, [sp, #28]
 8017324:	685a      	ldr	r2, [r3, #4]
 8017326:	e79f      	b.n	8017268 <arm_mat_mult_f32+0x5c>
 8017328:	9903      	ldr	r1, [sp, #12]
 801732a:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8017434 <arm_mat_mult_f32+0x228>
 801732e:	e7da      	b.n	80172e6 <arm_mat_mult_f32+0xda>
 8017330:	4618      	mov	r0, r3
 8017332:	b00b      	add	sp, #44	@ 0x2c
 8017334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017338:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 801733c:	1d04      	adds	r4, r0, #4
 801733e:	010e      	lsls	r6, r1, #4
 8017340:	eb07 0a05 	add.w	sl, r7, r5
 8017344:	0092      	lsls	r2, r2, #2
 8017346:	f103 0b10 	add.w	fp, r3, #16
 801734a:	9405      	str	r4, [sp, #20]
 801734c:	9209      	str	r2, [sp, #36]	@ 0x24
 801734e:	00ca      	lsls	r2, r1, #3
 8017350:	9204      	str	r2, [sp, #16]
 8017352:	fb06 f20c 	mul.w	r2, r6, ip
 8017356:	9203      	str	r2, [sp, #12]
 8017358:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 801735c:	9201      	str	r2, [sp, #4]
 801735e:	f1ab 0310 	sub.w	r3, fp, #16
 8017362:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017366:	9308      	str	r3, [sp, #32]
 8017368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801736a:	eb0a 0803 	add.w	r8, sl, r3
 801736e:	f1bc 0f00 	cmp.w	ip, #0
 8017372:	d056      	beq.n	8017422 <arm_mat_mult_f32+0x216>
 8017374:	9b04      	ldr	r3, [sp, #16]
 8017376:	4664      	mov	r4, ip
 8017378:	4602      	mov	r2, r0
 801737a:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 8017434 <arm_mat_mult_f32+0x228>
 801737e:	18c1      	adds	r1, r0, r3
 8017380:	465b      	mov	r3, fp
 8017382:	edd2 6a00 	vldr	s13, [r2]
 8017386:	1957      	adds	r7, r2, r5
 8017388:	ed13 7a04 	vldr	s14, [r3, #-16]
 801738c:	3c01      	subs	r4, #1
 801738e:	ed53 5a03 	vldr	s11, [r3, #-12]
 8017392:	4432      	add	r2, r6
 8017394:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017398:	ed97 6a00 	vldr	s12, [r7]
 801739c:	ed53 6a02 	vldr	s13, [r3, #-8]
 80173a0:	eb01 0705 	add.w	r7, r1, r5
 80173a4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80173a8:	ed91 5a00 	vldr	s10, [r1]
 80173ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173b0:	edd7 5a00 	vldr	s11, [r7]
 80173b4:	ee26 7a85 	vmul.f32	s14, s13, s10
 80173b8:	ed53 6a01 	vldr	s13, [r3, #-4]
 80173bc:	4431      	add	r1, r6
 80173be:	f103 0310 	add.w	r3, r3, #16
 80173c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80173c6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80173ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80173d2:	d1d6      	bne.n	8017382 <arm_mat_mult_f32+0x176>
 80173d4:	9b03      	ldr	r3, [sp, #12]
 80173d6:	9a01      	ldr	r2, [sp, #4]
 80173d8:	4418      	add	r0, r3
 80173da:	f1be 0f00 	cmp.w	lr, #0
 80173de:	d00b      	beq.n	80173f8 <arm_mat_mult_f32+0x1ec>
 80173e0:	4673      	mov	r3, lr
 80173e2:	edd0 6a00 	vldr	s13, [r0]
 80173e6:	3b01      	subs	r3, #1
 80173e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80173ec:	4428      	add	r0, r5
 80173ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80173f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173f6:	d1f4      	bne.n	80173e2 <arm_mat_mult_f32+0x1d6>
 80173f8:	ece8 7a01 	vstmia	r8!, {s15}
 80173fc:	45d0      	cmp	r8, sl
 80173fe:	4648      	mov	r0, r9
 8017400:	f109 0904 	add.w	r9, r9, #4
 8017404:	d1b3      	bne.n	801736e <arm_mat_mult_f32+0x162>
 8017406:	9a01      	ldr	r2, [sp, #4]
 8017408:	44aa      	add	sl, r5
 801740a:	9b06      	ldr	r3, [sp, #24]
 801740c:	4611      	mov	r1, r2
 801740e:	449b      	add	fp, r3
 8017410:	4419      	add	r1, r3
 8017412:	9b02      	ldr	r3, [sp, #8]
 8017414:	3b01      	subs	r3, #1
 8017416:	9101      	str	r1, [sp, #4]
 8017418:	9302      	str	r3, [sp, #8]
 801741a:	d089      	beq.n	8017330 <arm_mat_mult_f32+0x124>
 801741c:	9b07      	ldr	r3, [sp, #28]
 801741e:	6858      	ldr	r0, [r3, #4]
 8017420:	e79d      	b.n	801735e <arm_mat_mult_f32+0x152>
 8017422:	9a08      	ldr	r2, [sp, #32]
 8017424:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8017434 <arm_mat_mult_f32+0x228>
 8017428:	e7d7      	b.n	80173da <arm_mat_mult_f32+0x1ce>
 801742a:	f06f 0002 	mvn.w	r0, #2
 801742e:	b00b      	add	sp, #44	@ 0x2c
 8017430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017434:	00000000 	.word	0x00000000

08017438 <arm_mat_inverse_f32>:
 8017438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801743c:	8842      	ldrh	r2, [r0, #2]
 801743e:	b08d      	sub	sp, #52	@ 0x34
 8017440:	8807      	ldrh	r7, [r0, #0]
 8017442:	684c      	ldr	r4, [r1, #4]
 8017444:	4297      	cmp	r7, r2
 8017446:	f8d0 a004 	ldr.w	sl, [r0, #4]
 801744a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801744c:	9201      	str	r2, [sp, #4]
 801744e:	9409      	str	r4, [sp, #36]	@ 0x24
 8017450:	f040 8107 	bne.w	8017662 <arm_mat_inverse_f32+0x22a>
 8017454:	880b      	ldrh	r3, [r1, #0]
 8017456:	884a      	ldrh	r2, [r1, #2]
 8017458:	429a      	cmp	r2, r3
 801745a:	f040 8102 	bne.w	8017662 <arm_mat_inverse_f32+0x22a>
 801745e:	429f      	cmp	r7, r3
 8017460:	f040 80ff 	bne.w	8017662 <arm_mat_inverse_f32+0x22a>
 8017464:	b1ff      	cbz	r7, 80174a6 <arm_mat_inverse_f32+0x6e>
 8017466:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801746a:	1e7d      	subs	r5, r7, #1
 801746c:	f844 bb04 	str.w	fp, [r4], #4
 8017470:	d019      	beq.n	80174a6 <arm_mat_inverse_f32+0x6e>
 8017472:	2601      	movs	r6, #1
 8017474:	00aa      	lsls	r2, r5, #2
 8017476:	4620      	mov	r0, r4
 8017478:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801747c:	2100      	movs	r1, #0
 801747e:	eb04 0902 	add.w	r9, r4, r2
 8017482:	f002 fe43 	bl	801a10c <memset>
 8017486:	4642      	mov	r2, r8
 8017488:	2100      	movs	r1, #0
 801748a:	eb09 0408 	add.w	r4, r9, r8
 801748e:	4648      	mov	r0, r9
 8017490:	2e00      	cmp	r6, #0
 8017492:	f000 80eb 	beq.w	801766c <arm_mat_inverse_f32+0x234>
 8017496:	f002 fe39 	bl	801a10c <memset>
 801749a:	3d01      	subs	r5, #1
 801749c:	f106 0601 	add.w	r6, r6, #1
 80174a0:	f844 bb04 	str.w	fp, [r4], #4
 80174a4:	d1e6      	bne.n	8017474 <arm_mat_inverse_f32+0x3c>
 80174a6:	9b01      	ldr	r3, [sp, #4]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f000 80d5 	beq.w	8017658 <arm_mat_inverse_f32+0x220>
 80174ae:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80174b2:	2600      	movs	r6, #0
 80174b4:	00db      	lsls	r3, r3, #3
 80174b6:	eb0a 020c 	add.w	r2, sl, ip
 80174ba:	f10c 0104 	add.w	r1, ip, #4
 80174be:	3304      	adds	r3, #4
 80174c0:	46e0      	mov	r8, ip
 80174c2:	9203      	str	r2, [sp, #12]
 80174c4:	9108      	str	r1, [sp, #32]
 80174c6:	960a      	str	r6, [sp, #40]	@ 0x28
 80174c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80174cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ce:	9302      	str	r3, [sp, #8]
 80174d0:	edda 6a00 	vldr	s13, [sl]
 80174d4:	9b06      	ldr	r3, [sp, #24]
 80174d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80174da:	eba3 0108 	sub.w	r1, r3, r8
 80174de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e2:	d07f      	beq.n	80175e4 <arm_mat_inverse_f32+0x1ac>
 80174e4:	9b01      	ldr	r3, [sp, #4]
 80174e6:	eba3 0e06 	sub.w	lr, r3, r6
 80174ea:	1c73      	adds	r3, r6, #1
 80174ec:	9304      	str	r3, [sp, #16]
 80174ee:	f1be 0f00 	cmp.w	lr, #0
 80174f2:	d009      	beq.n	8017508 <arm_mat_inverse_f32+0xd0>
 80174f4:	4672      	mov	r2, lr
 80174f6:	4653      	mov	r3, sl
 80174f8:	ed93 7a00 	vldr	s14, [r3]
 80174fc:	3a01      	subs	r2, #1
 80174fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017502:	ece3 7a01 	vstmia	r3!, {s15}
 8017506:	d1f7      	bne.n	80174f8 <arm_mat_inverse_f32+0xc0>
 8017508:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
 801750c:	ed93 7a00 	vldr	s14, [r3]
 8017510:	3c01      	subs	r4, #1
 8017512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017516:	ece3 7a01 	vstmia	r3!, {s15}
 801751a:	d1f7      	bne.n	801750c <arm_mat_inverse_f32+0xd4>
 801751c:	b397      	cbz	r7, 8017584 <arm_mat_inverse_f32+0x14c>
 801751e:	4633      	mov	r3, r6
 8017520:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8017524:	4620      	mov	r0, r4
 8017526:	4676      	mov	r6, lr
 8017528:	9405      	str	r4, [sp, #20]
 801752a:	469e      	mov	lr, r3
 801752c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801752e:	9c02      	ldr	r4, [sp, #8]
 8017530:	4586      	cmp	lr, r0
 8017532:	d054      	beq.n	80175de <arm_mat_inverse_f32+0x1a6>
 8017534:	edd1 6a00 	vldr	s13, [r1]
 8017538:	b17e      	cbz	r6, 801755a <arm_mat_inverse_f32+0x122>
 801753a:	460a      	mov	r2, r1
 801753c:	4633      	mov	r3, r6
 801753e:	46d3      	mov	fp, sl
 8017540:	ecbb 7a01 	vldmia	fp!, {s14}
 8017544:	3b01      	subs	r3, #1
 8017546:	edd2 7a00 	vldr	s15, [r2]
 801754a:	ee26 7a87 	vmul.f32	s14, s13, s14
 801754e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017552:	ece2 7a01 	vstmia	r2!, {s15}
 8017556:	d1f3      	bne.n	8017540 <arm_mat_inverse_f32+0x108>
 8017558:	4441      	add	r1, r8
 801755a:	462a      	mov	r2, r5
 801755c:	9b01      	ldr	r3, [sp, #4]
 801755e:	46a3      	mov	fp, r4
 8017560:	ecbb 7a01 	vldmia	fp!, {s14}
 8017564:	3b01      	subs	r3, #1
 8017566:	edd2 7a00 	vldr	s15, [r2]
 801756a:	ee26 7a87 	vmul.f32	s14, s13, s14
 801756e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017572:	ece2 7a01 	vstmia	r2!, {s15}
 8017576:	d1f3      	bne.n	8017560 <arm_mat_inverse_f32+0x128>
 8017578:	4465      	add	r5, ip
 801757a:	3001      	adds	r0, #1
 801757c:	4449      	add	r1, r9
 801757e:	4287      	cmp	r7, r0
 8017580:	d1d6      	bne.n	8017530 <arm_mat_inverse_f32+0xf8>
 8017582:	9c05      	ldr	r4, [sp, #20]
 8017584:	9b08      	ldr	r3, [sp, #32]
 8017586:	f1a8 0804 	sub.w	r8, r8, #4
 801758a:	9a07      	ldr	r2, [sp, #28]
 801758c:	449a      	add	sl, r3
 801758e:	9b02      	ldr	r3, [sp, #8]
 8017590:	4463      	add	r3, ip
 8017592:	9302      	str	r3, [sp, #8]
 8017594:	9b03      	ldr	r3, [sp, #12]
 8017596:	4413      	add	r3, r2
 8017598:	9a01      	ldr	r2, [sp, #4]
 801759a:	9303      	str	r3, [sp, #12]
 801759c:	9b04      	ldr	r3, [sp, #16]
 801759e:	4293      	cmp	r3, r2
 80175a0:	461e      	mov	r6, r3
 80175a2:	d195      	bne.n	80174d0 <arm_mat_inverse_f32+0x98>
 80175a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175a6:	b9b3      	cbnz	r3, 80175d6 <arm_mat_inverse_f32+0x19e>
 80175a8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80175ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b0:	d111      	bne.n	80175d6 <arm_mat_inverse_f32+0x19e>
 80175b2:	9b04      	ldr	r3, [sp, #16]
 80175b4:	fb03 f307 	mul.w	r3, r3, r7
 80175b8:	461f      	mov	r7, r3
 80175ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	b917      	cbnz	r7, 80175c6 <arm_mat_inverse_f32+0x18e>
 80175c0:	e04a      	b.n	8017658 <arm_mat_inverse_f32+0x220>
 80175c2:	42a7      	cmp	r7, r4
 80175c4:	d048      	beq.n	8017658 <arm_mat_inverse_f32+0x220>
 80175c6:	ecf3 7a01 	vldmia	r3!, {s15}
 80175ca:	3401      	adds	r4, #1
 80175cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80175d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d4:	d0f5      	beq.n	80175c2 <arm_mat_inverse_f32+0x18a>
 80175d6:	2000      	movs	r0, #0
 80175d8:	b00d      	add	sp, #52	@ 0x34
 80175da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175de:	4441      	add	r1, r8
 80175e0:	4465      	add	r5, ip
 80175e2:	e7ca      	b.n	801757a <arm_mat_inverse_f32+0x142>
 80175e4:	1c73      	adds	r3, r6, #1
 80175e6:	42bb      	cmp	r3, r7
 80175e8:	9304      	str	r3, [sp, #16]
 80175ea:	d22f      	bcs.n	801764c <arm_mat_inverse_f32+0x214>
 80175ec:	9803      	ldr	r0, [sp, #12]
 80175ee:	2301      	movs	r3, #1
 80175f0:	e003      	b.n	80175fa <arm_mat_inverse_f32+0x1c2>
 80175f2:	3301      	adds	r3, #1
 80175f4:	18f2      	adds	r2, r6, r3
 80175f6:	4297      	cmp	r7, r2
 80175f8:	d928      	bls.n	801764c <arm_mat_inverse_f32+0x214>
 80175fa:	edd0 7a00 	vldr	s15, [r0]
 80175fe:	4602      	mov	r2, r0
 8017600:	4460      	add	r0, ip
 8017602:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760a:	d0f2      	beq.n	80175f2 <arm_mat_inverse_f32+0x1ba>
 801760c:	9801      	ldr	r0, [sp, #4]
 801760e:	ebb0 0e06 	subs.w	lr, r0, r6
 8017612:	d00a      	beq.n	801762a <arm_mat_inverse_f32+0x1f2>
 8017614:	4674      	mov	r4, lr
 8017616:	4650      	mov	r0, sl
 8017618:	6815      	ldr	r5, [r2, #0]
 801761a:	3c01      	subs	r4, #1
 801761c:	f8d0 9000 	ldr.w	r9, [r0]
 8017620:	f842 9b04 	str.w	r9, [r2], #4
 8017624:	f840 5b04 	str.w	r5, [r0], #4
 8017628:	d1f6      	bne.n	8017618 <arm_mat_inverse_f32+0x1e0>
 801762a:	9a02      	ldr	r2, [sp, #8]
 801762c:	9801      	ldr	r0, [sp, #4]
 801762e:	fb03 230c 	mla	r3, r3, ip, r2
 8017632:	681c      	ldr	r4, [r3, #0]
 8017634:	3801      	subs	r0, #1
 8017636:	6815      	ldr	r5, [r2, #0]
 8017638:	f843 5b04 	str.w	r5, [r3], #4
 801763c:	f842 4b04 	str.w	r4, [r2], #4
 8017640:	d1f7      	bne.n	8017632 <arm_mat_inverse_f32+0x1fa>
 8017642:	2301      	movs	r3, #1
 8017644:	edda 6a00 	vldr	s13, [sl]
 8017648:	930a      	str	r3, [sp, #40]	@ 0x28
 801764a:	e750      	b.n	80174ee <arm_mat_inverse_f32+0xb6>
 801764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801764e:	b11b      	cbz	r3, 8017658 <arm_mat_inverse_f32+0x220>
 8017650:	9b01      	ldr	r3, [sp, #4]
 8017652:	eba3 0e06 	sub.w	lr, r3, r6
 8017656:	e74a      	b.n	80174ee <arm_mat_inverse_f32+0xb6>
 8017658:	f06f 0004 	mvn.w	r0, #4
 801765c:	b00d      	add	sp, #52	@ 0x34
 801765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017662:	f06f 0002 	mvn.w	r0, #2
 8017666:	b00d      	add	sp, #52	@ 0x34
 8017668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801766c:	464c      	mov	r4, r9
 801766e:	3d01      	subs	r5, #1
 8017670:	f844 bb04 	str.w	fp, [r4], #4
 8017674:	f47f aefd 	bne.w	8017472 <arm_mat_inverse_f32+0x3a>
 8017678:	e715      	b.n	80174a6 <arm_mat_inverse_f32+0x6e>
 801767a:	bf00      	nop

0801767c <arm_mat_init_f32>:
 801767c:	8001      	strh	r1, [r0, #0]
 801767e:	8042      	strh	r2, [r0, #2]
 8017680:	6043      	str	r3, [r0, #4]
 8017682:	4770      	bx	lr

08017684 <arm_mat_add_f32>:
 8017684:	b4f0      	push	{r4, r5, r6, r7}
 8017686:	6803      	ldr	r3, [r0, #0]
 8017688:	6847      	ldr	r7, [r0, #4]
 801768a:	6855      	ldr	r5, [r2, #4]
 801768c:	e9d1 4600 	ldrd	r4, r6, [r1]
 8017690:	42a3      	cmp	r3, r4
 8017692:	d160      	bne.n	8017756 <arm_mat_add_f32+0xd2>
 8017694:	6812      	ldr	r2, [r2, #0]
 8017696:	4293      	cmp	r3, r2
 8017698:	d15d      	bne.n	8017756 <arm_mat_add_f32+0xd2>
 801769a:	8803      	ldrh	r3, [r0, #0]
 801769c:	8844      	ldrh	r4, [r0, #2]
 801769e:	fb04 f403 	mul.w	r4, r4, r3
 80176a2:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 80176a6:	d034      	beq.n	8017712 <arm_mat_add_f32+0x8e>
 80176a8:	f107 0110 	add.w	r1, r7, #16
 80176ac:	f106 0210 	add.w	r2, r6, #16
 80176b0:	f105 0310 	add.w	r3, r5, #16
 80176b4:	4660      	mov	r0, ip
 80176b6:	ed12 7a04 	vldr	s14, [r2, #-16]
 80176ba:	3801      	subs	r0, #1
 80176bc:	ed51 7a04 	vldr	s15, [r1, #-16]
 80176c0:	f102 0210 	add.w	r2, r2, #16
 80176c4:	f101 0110 	add.w	r1, r1, #16
 80176c8:	f103 0310 	add.w	r3, r3, #16
 80176cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176d0:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 80176d4:	ed12 7a07 	vldr	s14, [r2, #-28]	@ 0xffffffe4
 80176d8:	ed51 7a07 	vldr	s15, [r1, #-28]	@ 0xffffffe4
 80176dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176e0:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 80176e4:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 80176e8:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 80176ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176f0:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 80176f4:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 80176f8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80176fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017700:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8017704:	d1d7      	bne.n	80176b6 <arm_mat_add_f32+0x32>
 8017706:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 801770a:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 801770e:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8017712:	f014 0403 	ands.w	r4, r4, #3
 8017716:	d01b      	beq.n	8017750 <arm_mat_add_f32+0xcc>
 8017718:	edd6 7a00 	vldr	s15, [r6]
 801771c:	3c01      	subs	r4, #1
 801771e:	ed97 7a00 	vldr	s14, [r7]
 8017722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017726:	edc5 7a00 	vstr	s15, [r5]
 801772a:	d011      	beq.n	8017750 <arm_mat_add_f32+0xcc>
 801772c:	edd7 7a01 	vldr	s15, [r7, #4]
 8017730:	2c01      	cmp	r4, #1
 8017732:	ed96 7a01 	vldr	s14, [r6, #4]
 8017736:	ee77 7a87 	vadd.f32	s15, s15, s14
 801773a:	edc5 7a01 	vstr	s15, [r5, #4]
 801773e:	d007      	beq.n	8017750 <arm_mat_add_f32+0xcc>
 8017740:	edd7 7a02 	vldr	s15, [r7, #8]
 8017744:	ed96 7a02 	vldr	s14, [r6, #8]
 8017748:	ee77 7a87 	vadd.f32	s15, s15, s14
 801774c:	edc5 7a02 	vstr	s15, [r5, #8]
 8017750:	2000      	movs	r0, #0
 8017752:	bcf0      	pop	{r4, r5, r6, r7}
 8017754:	4770      	bx	lr
 8017756:	f06f 0002 	mvn.w	r0, #2
 801775a:	e7fa      	b.n	8017752 <arm_mat_add_f32+0xce>

0801775c <arm_cmplx_mult_cmplx_f32>:
 801775c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8017760:	b4f0      	push	{r4, r5, r6, r7}
 8017762:	d074      	beq.n	801784e <arm_cmplx_mult_cmplx_f32+0xf2>
 8017764:	f100 0620 	add.w	r6, r0, #32
 8017768:	f101 0520 	add.w	r5, r1, #32
 801776c:	f102 0420 	add.w	r4, r2, #32
 8017770:	4667      	mov	r7, ip
 8017772:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8017776:	3f01      	subs	r7, #1
 8017778:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 801777c:	f105 0520 	add.w	r5, r5, #32
 8017780:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8017784:	f104 0420 	add.w	r4, r4, #32
 8017788:	ed15 7a10 	vldr	s14, [r5, #-64]	@ 0xffffffc0
 801778c:	f106 0620 	add.w	r6, r6, #32
 8017790:	ee27 6a87 	vmul.f32	s12, s15, s14
 8017794:	ee26 7a87 	vmul.f32	s14, s13, s14
 8017798:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801779c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80177a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80177a4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80177a8:	ed44 7a0f 	vstr	s15, [r4, #-60]	@ 0xffffffc4
 80177ac:	ed44 6a10 	vstr	s13, [r4, #-64]	@ 0xffffffc0
 80177b0:	ed55 5a0d 	vldr	s11, [r5, #-52]	@ 0xffffffcc
 80177b4:	ed56 7a0e 	vldr	s15, [r6, #-56]	@ 0xffffffc8
 80177b8:	ed15 7a0e 	vldr	s14, [r5, #-56]	@ 0xffffffc8
 80177bc:	ed56 6a0d 	vldr	s13, [r6, #-52]	@ 0xffffffcc
 80177c0:	ee27 6a87 	vmul.f32	s12, s15, s14
 80177c4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80177c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80177cc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80177d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80177d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80177d8:	ed44 7a0d 	vstr	s15, [r4, #-52]	@ 0xffffffcc
 80177dc:	ed44 6a0e 	vstr	s13, [r4, #-56]	@ 0xffffffc8
 80177e0:	ed55 5a0b 	vldr	s11, [r5, #-44]	@ 0xffffffd4
 80177e4:	ed56 7a0c 	vldr	s15, [r6, #-48]	@ 0xffffffd0
 80177e8:	ed15 7a0c 	vldr	s14, [r5, #-48]	@ 0xffffffd0
 80177ec:	ed56 6a0b 	vldr	s13, [r6, #-44]	@ 0xffffffd4
 80177f0:	ee27 6a87 	vmul.f32	s12, s15, s14
 80177f4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80177f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80177fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017804:	ee76 6a66 	vsub.f32	s13, s12, s13
 8017808:	ed44 7a0b 	vstr	s15, [r4, #-44]	@ 0xffffffd4
 801780c:	ed44 6a0c 	vstr	s13, [r4, #-48]	@ 0xffffffd0
 8017810:	ed56 7a0a 	vldr	s15, [r6, #-40]	@ 0xffffffd8
 8017814:	ed15 7a0a 	vldr	s14, [r5, #-40]	@ 0xffffffd8
 8017818:	ed56 6a09 	vldr	s13, [r6, #-36]	@ 0xffffffdc
 801781c:	ed55 5a09 	vldr	s11, [r5, #-36]	@ 0xffffffdc
 8017820:	ee27 6a87 	vmul.f32	s12, s15, s14
 8017824:	ee26 7a87 	vmul.f32	s14, s13, s14
 8017828:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801782c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8017830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017834:	ee76 6a66 	vsub.f32	s13, s12, s13
 8017838:	ed44 7a09 	vstr	s15, [r4, #-36]	@ 0xffffffdc
 801783c:	ed44 6a0a 	vstr	s13, [r4, #-40]	@ 0xffffffd8
 8017840:	d197      	bne.n	8017772 <arm_cmplx_mult_cmplx_f32+0x16>
 8017842:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8017846:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 801784a:	eb02 124c 	add.w	r2, r2, ip, lsl #5
 801784e:	f013 0303 	ands.w	r3, r3, #3
 8017852:	d04b      	beq.n	80178ec <arm_cmplx_mult_cmplx_f32+0x190>
 8017854:	edd0 5a00 	vldr	s11, [r0]
 8017858:	3b01      	subs	r3, #1
 801785a:	edd1 7a00 	vldr	s15, [r1]
 801785e:	edd0 6a01 	vldr	s13, [r0, #4]
 8017862:	ed91 7a01 	vldr	s14, [r1, #4]
 8017866:	ee27 6aa5 	vmul.f32	s12, s15, s11
 801786a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801786e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8017872:	ee27 7a25 	vmul.f32	s14, s14, s11
 8017876:	ee76 6a66 	vsub.f32	s13, s12, s13
 801787a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801787e:	edc2 6a00 	vstr	s13, [r2]
 8017882:	edc2 7a01 	vstr	s15, [r2, #4]
 8017886:	d031      	beq.n	80178ec <arm_cmplx_mult_cmplx_f32+0x190>
 8017888:	edd0 7a02 	vldr	s15, [r0, #8]
 801788c:	2b01      	cmp	r3, #1
 801788e:	ed91 7a02 	vldr	s14, [r1, #8]
 8017892:	edd0 6a03 	vldr	s13, [r0, #12]
 8017896:	edd1 5a03 	vldr	s11, [r1, #12]
 801789a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801789e:	ee26 7a87 	vmul.f32	s14, s13, s14
 80178a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80178a6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80178aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178ae:	ee76 6a66 	vsub.f32	s13, s12, s13
 80178b2:	edc2 7a03 	vstr	s15, [r2, #12]
 80178b6:	edc2 6a02 	vstr	s13, [r2, #8]
 80178ba:	d017      	beq.n	80178ec <arm_cmplx_mult_cmplx_f32+0x190>
 80178bc:	edd0 7a04 	vldr	s15, [r0, #16]
 80178c0:	ed91 7a04 	vldr	s14, [r1, #16]
 80178c4:	edd0 6a05 	vldr	s13, [r0, #20]
 80178c8:	edd1 5a05 	vldr	s11, [r1, #20]
 80178cc:	ee27 6a87 	vmul.f32	s12, s15, s14
 80178d0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80178d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80178d8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80178dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80178e4:	edc2 7a05 	vstr	s15, [r2, #20]
 80178e8:	edc2 6a04 	vstr	s13, [r2, #16]
 80178ec:	bcf0      	pop	{r4, r5, r6, r7}
 80178ee:	4770      	bx	lr

080178f0 <arm_cmplx_conj_f32>:
 80178f0:	b4f0      	push	{r4, r5, r6, r7}
 80178f2:	0897      	lsrs	r7, r2, #2
 80178f4:	d036      	beq.n	8017964 <arm_cmplx_conj_f32+0x74>
 80178f6:	f100 0420 	add.w	r4, r0, #32
 80178fa:	f101 0320 	add.w	r3, r1, #32
 80178fe:	463d      	mov	r5, r7
 8017900:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8017904:	3d01      	subs	r5, #1
 8017906:	f104 0420 	add.w	r4, r4, #32
 801790a:	f103 0320 	add.w	r3, r3, #32
 801790e:	f843 6c40 	str.w	r6, [r3, #-64]
 8017912:	ed54 7a0f 	vldr	s15, [r4, #-60]	@ 0xffffffc4
 8017916:	eef1 7a67 	vneg.f32	s15, s15
 801791a:	ed43 7a0f 	vstr	s15, [r3, #-60]	@ 0xffffffc4
 801791e:	f854 6c38 	ldr.w	r6, [r4, #-56]
 8017922:	f843 6c38 	str.w	r6, [r3, #-56]
 8017926:	ed54 7a0d 	vldr	s15, [r4, #-52]	@ 0xffffffcc
 801792a:	eef1 7a67 	vneg.f32	s15, s15
 801792e:	ed43 7a0d 	vstr	s15, [r3, #-52]	@ 0xffffffcc
 8017932:	f854 6c30 	ldr.w	r6, [r4, #-48]
 8017936:	f843 6c30 	str.w	r6, [r3, #-48]
 801793a:	ed54 7a0b 	vldr	s15, [r4, #-44]	@ 0xffffffd4
 801793e:	eef1 7a67 	vneg.f32	s15, s15
 8017942:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
 8017946:	f854 6c28 	ldr.w	r6, [r4, #-40]
 801794a:	f843 6c28 	str.w	r6, [r3, #-40]
 801794e:	ed54 7a09 	vldr	s15, [r4, #-36]	@ 0xffffffdc
 8017952:	eef1 7a67 	vneg.f32	s15, s15
 8017956:	ed43 7a09 	vstr	s15, [r3, #-36]	@ 0xffffffdc
 801795a:	d1d1      	bne.n	8017900 <arm_cmplx_conj_f32+0x10>
 801795c:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8017960:	eb01 1147 	add.w	r1, r1, r7, lsl #5
 8017964:	f012 0203 	ands.w	r2, r2, #3
 8017968:	d01b      	beq.n	80179a2 <arm_cmplx_conj_f32+0xb2>
 801796a:	6803      	ldr	r3, [r0, #0]
 801796c:	3a01      	subs	r2, #1
 801796e:	600b      	str	r3, [r1, #0]
 8017970:	edd0 7a01 	vldr	s15, [r0, #4]
 8017974:	eef1 7a67 	vneg.f32	s15, s15
 8017978:	edc1 7a01 	vstr	s15, [r1, #4]
 801797c:	d011      	beq.n	80179a2 <arm_cmplx_conj_f32+0xb2>
 801797e:	6883      	ldr	r3, [r0, #8]
 8017980:	2a01      	cmp	r2, #1
 8017982:	608b      	str	r3, [r1, #8]
 8017984:	edd0 7a03 	vldr	s15, [r0, #12]
 8017988:	eef1 7a67 	vneg.f32	s15, s15
 801798c:	edc1 7a03 	vstr	s15, [r1, #12]
 8017990:	d007      	beq.n	80179a2 <arm_cmplx_conj_f32+0xb2>
 8017992:	6903      	ldr	r3, [r0, #16]
 8017994:	610b      	str	r3, [r1, #16]
 8017996:	edd0 7a05 	vldr	s15, [r0, #20]
 801799a:	eef1 7a67 	vneg.f32	s15, s15
 801799e:	edc1 7a05 	vstr	s15, [r1, #20]
 80179a2:	bcf0      	pop	{r4, r5, r6, r7}
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop

080179a8 <arm_sub_f32>:
 80179a8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80179ac:	b4f0      	push	{r4, r5, r6, r7}
 80179ae:	d034      	beq.n	8017a1a <arm_sub_f32+0x72>
 80179b0:	f100 0610 	add.w	r6, r0, #16
 80179b4:	f101 0510 	add.w	r5, r1, #16
 80179b8:	f102 0410 	add.w	r4, r2, #16
 80179bc:	4667      	mov	r7, ip
 80179be:	ed15 7a04 	vldr	s14, [r5, #-16]
 80179c2:	3f01      	subs	r7, #1
 80179c4:	ed56 7a04 	vldr	s15, [r6, #-16]
 80179c8:	f105 0510 	add.w	r5, r5, #16
 80179cc:	f106 0610 	add.w	r6, r6, #16
 80179d0:	f104 0410 	add.w	r4, r4, #16
 80179d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179d8:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 80179dc:	ed15 7a07 	vldr	s14, [r5, #-28]	@ 0xffffffe4
 80179e0:	ed56 7a07 	vldr	s15, [r6, #-28]	@ 0xffffffe4
 80179e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179e8:	ed44 7a07 	vstr	s15, [r4, #-28]	@ 0xffffffe4
 80179ec:	ed15 7a06 	vldr	s14, [r5, #-24]	@ 0xffffffe8
 80179f0:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80179f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179f8:	ed44 7a06 	vstr	s15, [r4, #-24]	@ 0xffffffe8
 80179fc:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8017a00:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8017a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a08:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8017a0c:	d1d7      	bne.n	80179be <arm_sub_f32+0x16>
 8017a0e:	eb00 100c 	add.w	r0, r0, ip, lsl #4
 8017a12:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8017a16:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8017a1a:	f013 0303 	ands.w	r3, r3, #3
 8017a1e:	d01b      	beq.n	8017a58 <arm_sub_f32+0xb0>
 8017a20:	edd0 7a00 	vldr	s15, [r0]
 8017a24:	3b01      	subs	r3, #1
 8017a26:	ed91 7a00 	vldr	s14, [r1]
 8017a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a2e:	edc2 7a00 	vstr	s15, [r2]
 8017a32:	d011      	beq.n	8017a58 <arm_sub_f32+0xb0>
 8017a34:	edd0 7a01 	vldr	s15, [r0, #4]
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	ed91 7a01 	vldr	s14, [r1, #4]
 8017a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a42:	edc2 7a01 	vstr	s15, [r2, #4]
 8017a46:	d007      	beq.n	8017a58 <arm_sub_f32+0xb0>
 8017a48:	edd0 7a02 	vldr	s15, [r0, #8]
 8017a4c:	ed91 7a02 	vldr	s14, [r1, #8]
 8017a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a54:	edc2 7a02 	vstr	s15, [r2, #8]
 8017a58:	bcf0      	pop	{r4, r5, r6, r7}
 8017a5a:	4770      	bx	lr

08017a5c <arm_add_f32>:
 8017a5c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8017a60:	b4f0      	push	{r4, r5, r6, r7}
 8017a62:	d034      	beq.n	8017ace <arm_add_f32+0x72>
 8017a64:	f100 0610 	add.w	r6, r0, #16
 8017a68:	f101 0510 	add.w	r5, r1, #16
 8017a6c:	f102 0410 	add.w	r4, r2, #16
 8017a70:	4667      	mov	r7, ip
 8017a72:	ed15 7a04 	vldr	s14, [r5, #-16]
 8017a76:	3f01      	subs	r7, #1
 8017a78:	ed56 7a04 	vldr	s15, [r6, #-16]
 8017a7c:	f105 0510 	add.w	r5, r5, #16
 8017a80:	f106 0610 	add.w	r6, r6, #16
 8017a84:	f104 0410 	add.w	r4, r4, #16
 8017a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a8c:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 8017a90:	ed15 7a07 	vldr	s14, [r5, #-28]	@ 0xffffffe4
 8017a94:	ed56 7a07 	vldr	s15, [r6, #-28]	@ 0xffffffe4
 8017a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a9c:	ed44 7a07 	vstr	s15, [r4, #-28]	@ 0xffffffe4
 8017aa0:	ed15 7a06 	vldr	s14, [r5, #-24]	@ 0xffffffe8
 8017aa4:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8017aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017aac:	ed44 7a06 	vstr	s15, [r4, #-24]	@ 0xffffffe8
 8017ab0:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8017ab4:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8017ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017abc:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8017ac0:	d1d7      	bne.n	8017a72 <arm_add_f32+0x16>
 8017ac2:	eb00 100c 	add.w	r0, r0, ip, lsl #4
 8017ac6:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8017aca:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8017ace:	f013 0303 	ands.w	r3, r3, #3
 8017ad2:	d01b      	beq.n	8017b0c <arm_add_f32+0xb0>
 8017ad4:	edd1 7a00 	vldr	s15, [r1]
 8017ad8:	3b01      	subs	r3, #1
 8017ada:	ed90 7a00 	vldr	s14, [r0]
 8017ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ae2:	edc2 7a00 	vstr	s15, [r2]
 8017ae6:	d011      	beq.n	8017b0c <arm_add_f32+0xb0>
 8017ae8:	edd0 7a01 	vldr	s15, [r0, #4]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	ed91 7a01 	vldr	s14, [r1, #4]
 8017af2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017af6:	edc2 7a01 	vstr	s15, [r2, #4]
 8017afa:	d007      	beq.n	8017b0c <arm_add_f32+0xb0>
 8017afc:	edd0 7a02 	vldr	s15, [r0, #8]
 8017b00:	ed91 7a02 	vldr	s14, [r1, #8]
 8017b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017b08:	edc2 7a02 	vstr	s15, [r2, #8]
 8017b0c:	bcf0      	pop	{r4, r5, r6, r7}
 8017b0e:	4770      	bx	lr

08017b10 <arm_cfft_init_f32>:
 8017b10:	2200      	movs	r2, #0
 8017b12:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8017b16:	4603      	mov	r3, r0
 8017b18:	b430      	push	{r4, r5}
 8017b1a:	6042      	str	r2, [r0, #4]
 8017b1c:	8001      	strh	r1, [r0, #0]
 8017b1e:	d032      	beq.n	8017b86 <arm_cfft_init_f32+0x76>
 8017b20:	d918      	bls.n	8017b54 <arm_cfft_init_f32+0x44>
 8017b22:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8017b26:	d026      	beq.n	8017b76 <arm_cfft_init_f32+0x66>
 8017b28:	d90c      	bls.n	8017b44 <arm_cfft_init_f32+0x34>
 8017b2a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8017b2e:	d11e      	bne.n	8017b6e <arm_cfft_init_f32+0x5e>
 8017b30:	4916      	ldr	r1, [pc, #88]	@ (8017b8c <arm_cfft_init_f32+0x7c>)
 8017b32:	4610      	mov	r0, r2
 8017b34:	898d      	ldrh	r5, [r1, #12]
 8017b36:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 8017b3a:	819d      	strh	r5, [r3, #12]
 8017b3c:	e9c3 2401 	strd	r2, r4, [r3, #4]
 8017b40:	bc30      	pop	{r4, r5}
 8017b42:	4770      	bx	lr
 8017b44:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017b48:	d017      	beq.n	8017b7a <arm_cfft_init_f32+0x6a>
 8017b4a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017b4e:	d10e      	bne.n	8017b6e <arm_cfft_init_f32+0x5e>
 8017b50:	490f      	ldr	r1, [pc, #60]	@ (8017b90 <arm_cfft_init_f32+0x80>)
 8017b52:	e7ee      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b54:	2940      	cmp	r1, #64	@ 0x40
 8017b56:	d012      	beq.n	8017b7e <arm_cfft_init_f32+0x6e>
 8017b58:	d903      	bls.n	8017b62 <arm_cfft_init_f32+0x52>
 8017b5a:	2980      	cmp	r1, #128	@ 0x80
 8017b5c:	d107      	bne.n	8017b6e <arm_cfft_init_f32+0x5e>
 8017b5e:	490d      	ldr	r1, [pc, #52]	@ (8017b94 <arm_cfft_init_f32+0x84>)
 8017b60:	e7e7      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b62:	2910      	cmp	r1, #16
 8017b64:	d00d      	beq.n	8017b82 <arm_cfft_init_f32+0x72>
 8017b66:	2920      	cmp	r1, #32
 8017b68:	d101      	bne.n	8017b6e <arm_cfft_init_f32+0x5e>
 8017b6a:	490b      	ldr	r1, [pc, #44]	@ (8017b98 <arm_cfft_init_f32+0x88>)
 8017b6c:	e7e1      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b72:	bc30      	pop	{r4, r5}
 8017b74:	4770      	bx	lr
 8017b76:	4909      	ldr	r1, [pc, #36]	@ (8017b9c <arm_cfft_init_f32+0x8c>)
 8017b78:	e7db      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b7a:	4909      	ldr	r1, [pc, #36]	@ (8017ba0 <arm_cfft_init_f32+0x90>)
 8017b7c:	e7d9      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b7e:	4909      	ldr	r1, [pc, #36]	@ (8017ba4 <arm_cfft_init_f32+0x94>)
 8017b80:	e7d7      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b82:	4909      	ldr	r1, [pc, #36]	@ (8017ba8 <arm_cfft_init_f32+0x98>)
 8017b84:	e7d5      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b86:	4909      	ldr	r1, [pc, #36]	@ (8017bac <arm_cfft_init_f32+0x9c>)
 8017b88:	e7d3      	b.n	8017b32 <arm_cfft_init_f32+0x22>
 8017b8a:	bf00      	nop
 8017b8c:	0803b7fc 	.word	0x0803b7fc
 8017b90:	0803b79c 	.word	0x0803b79c
 8017b94:	0803b7ac 	.word	0x0803b7ac
 8017b98:	0803b7ec 	.word	0x0803b7ec
 8017b9c:	0803b7cc 	.word	0x0803b7cc
 8017ba0:	0803b80c 	.word	0x0803b80c
 8017ba4:	0803b81c 	.word	0x0803b81c
 8017ba8:	0803b7bc 	.word	0x0803b7bc
 8017bac:	0803b7dc 	.word	0x0803b7dc

08017bb0 <arm_radix8_butterfly_f32>:
 8017bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb4:	ed2d 8b10 	vpush	{d8-d15}
 8017bb8:	b093      	sub	sp, #76	@ 0x4c
 8017bba:	468a      	mov	sl, r1
 8017bbc:	eddf 8aba 	vldr	s17, [pc, #744]	@ 8017ea8 <arm_radix8_butterfly_f32+0x2f8>
 8017bc0:	468b      	mov	fp, r1
 8017bc2:	9010      	str	r0, [sp, #64]	@ 0x40
 8017bc4:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 8017bc8:	4603      	mov	r3, r0
 8017bca:	3304      	adds	r3, #4
 8017bcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8017bce:	ea4f 06da 	mov.w	r6, sl, lsr #3
 8017bd2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017bd4:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8017bd8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017bdc:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 8017be0:	960d      	str	r6, [sp, #52]	@ 0x34
 8017be2:	00f0      	lsls	r0, r6, #3
 8017be4:	f04f 0e00 	mov.w	lr, #0
 8017be8:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 8017bec:	0137      	lsls	r7, r6, #4
 8017bee:	9003      	str	r0, [sp, #12]
 8017bf0:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 8017bf4:	9400      	str	r4, [sp, #0]
 8017bf6:	9702      	str	r7, [sp, #8]
 8017bf8:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8017bfc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8017c00:	1d04      	adds	r4, r0, #4
 8017c02:	1d38      	adds	r0, r7, #4
 8017c04:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8017c08:	442c      	add	r4, r5
 8017c0a:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 8017c0e:	9701      	str	r7, [sp, #4]
 8017c10:	4428      	add	r0, r5
 8017c12:	9d01      	ldr	r5, [sp, #4]
 8017c14:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 8017c18:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017c1c:	00ed      	lsls	r5, r5, #3
 8017c1e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8017c22:	9501      	str	r5, [sp, #4]
 8017c24:	ea4f 1508 	mov.w	r5, r8, lsl #4
 8017c28:	9504      	str	r5, [sp, #16]
 8017c2a:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8017c2e:	9505      	str	r5, [sp, #20]
 8017c30:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017c32:	ea4f 1845 	mov.w	r8, r5, lsl #5
 8017c36:	9d00      	ldr	r5, [sp, #0]
 8017c38:	edd1 6a00 	vldr	s13, [r1]
 8017c3c:	44d6      	add	lr, sl
 8017c3e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8017c42:	ed95 7a00 	vldr	s14, [r5]
 8017c46:	45f3      	cmp	fp, lr
 8017c48:	ed14 6a01 	vldr	s12, [r4, #-4]
 8017c4c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8017c50:	edd6 2a00 	vldr	s5, [r6]
 8017c54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017c58:	edd7 3a00 	vldr	s7, [r7]
 8017c5c:	ed10 5a01 	vldr	s10, [r0, #-4]
 8017c60:	ee36 3a22 	vadd.f32	s6, s12, s5
 8017c64:	edd2 6a00 	vldr	s13, [r2]
 8017c68:	ee75 5a07 	vadd.f32	s11, s10, s14
 8017c6c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8017c70:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8017c74:	ee72 4a25 	vadd.f32	s9, s4, s11
 8017c78:	ee73 3a04 	vadd.f32	s7, s6, s8
 8017c7c:	ee35 5a47 	vsub.f32	s10, s10, s14
 8017c80:	ee36 7a62 	vsub.f32	s14, s12, s5
 8017c84:	ee32 2a65 	vsub.f32	s4, s4, s11
 8017c88:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8017c8c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8017c90:	ee37 6a66 	vsub.f32	s12, s14, s13
 8017c94:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8017c98:	ee33 3a44 	vsub.f32	s6, s6, s8
 8017c9c:	edc1 4a00 	vstr	s9, [r1]
 8017ca0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017ca4:	ed97 4a01 	vldr	s8, [r7, #4]
 8017ca8:	ee66 6a28 	vmul.f32	s13, s12, s17
 8017cac:	edd4 5a00 	vldr	s11, [r4]
 8017cb0:	ed96 6a01 	vldr	s12, [r6, #4]
 8017cb4:	ee27 7a28 	vmul.f32	s14, s14, s17
 8017cb8:	edd2 3a01 	vldr	s7, [r2, #4]
 8017cbc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8017cc0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8017cc4:	ed91 1a01 	vldr	s2, [r1, #4]
 8017cc8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 8017ccc:	edd5 0a01 	vldr	s1, [r5, #4]
 8017cd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017cd4:	eddc 6a00 	vldr	s13, [ip]
 8017cd8:	ee75 5a86 	vadd.f32	s11, s11, s12
 8017cdc:	ed90 6a00 	vldr	s12, [r0]
 8017ce0:	ee73 3a84 	vadd.f32	s7, s7, s8
 8017ce4:	ee74 1a80 	vadd.f32	s3, s9, s0
 8017ce8:	ee36 4a81 	vadd.f32	s8, s13, s2
 8017cec:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8017cf0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8017cf4:	ee36 1a20 	vadd.f32	s2, s12, s1
 8017cf8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8017cfc:	ee36 6a60 	vsub.f32	s12, s12, s1
 8017d00:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8017d04:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8017d08:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8017d0c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8017d10:	ee34 4a41 	vsub.f32	s8, s8, s2
 8017d14:	ee36 1a21 	vadd.f32	s2, s12, s3
 8017d18:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8017d1c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8017d20:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8017d24:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8017d28:	ed8c 0a00 	vstr	s0, [ip]
 8017d2c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017d30:	449c      	add	ip, r3
 8017d32:	ee75 4a07 	vadd.f32	s9, s10, s14
 8017d36:	edc1 3a01 	vstr	s7, [r1, #4]
 8017d3a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8017d3e:	4419      	add	r1, r3
 8017d40:	ee32 5a25 	vadd.f32	s10, s4, s11
 8017d44:	ee72 5a65 	vsub.f32	s11, s4, s11
 8017d48:	ee72 3a81 	vadd.f32	s7, s5, s2
 8017d4c:	ed00 5a01 	vstr	s10, [r0, #-4]
 8017d50:	ee34 2a43 	vsub.f32	s4, s8, s6
 8017d54:	edc5 5a00 	vstr	s11, [r5]
 8017d58:	ee37 5a86 	vadd.f32	s10, s15, s12
 8017d5c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8017d60:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017d64:	ed80 2a00 	vstr	s4, [r0]
 8017d68:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8017d6c:	4418      	add	r0, r3
 8017d6e:	ee33 4a04 	vadd.f32	s8, s6, s8
 8017d72:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8017d76:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8017d7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017d7e:	ed85 4a01 	vstr	s8, [r5, #4]
 8017d82:	ed44 3a01 	vstr	s7, [r4, #-4]
 8017d86:	441d      	add	r5, r3
 8017d88:	edc7 2a00 	vstr	s5, [r7]
 8017d8c:	ed86 5a00 	vstr	s10, [r6]
 8017d90:	edc2 7a00 	vstr	s15, [r2]
 8017d94:	edc4 5a00 	vstr	s11, [r4]
 8017d98:	441c      	add	r4, r3
 8017d9a:	edc7 4a01 	vstr	s9, [r7, #4]
 8017d9e:	441f      	add	r7, r3
 8017da0:	ed86 6a01 	vstr	s12, [r6, #4]
 8017da4:	441e      	add	r6, r3
 8017da6:	ed82 7a01 	vstr	s14, [r2, #4]
 8017daa:	441a      	add	r2, r3
 8017dac:	f63f af44 	bhi.w	8017c38 <arm_radix8_butterfly_f32+0x88>
 8017db0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017db2:	2a07      	cmp	r2, #7
 8017db4:	f240 81b7 	bls.w	8018126 <arm_radix8_butterfly_f32+0x576>
 8017db8:	9a03      	ldr	r2, [sp, #12]
 8017dba:	f108 0808 	add.w	r8, r8, #8
 8017dbe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017dc0:	f109 0008 	add.w	r0, r9, #8
 8017dc4:	3208      	adds	r2, #8
 8017dc6:	9e01      	ldr	r6, [sp, #4]
 8017dc8:	9d04      	ldr	r5, [sp, #16]
 8017dca:	4694      	mov	ip, r2
 8017dcc:	463a      	mov	r2, r7
 8017dce:	3608      	adds	r6, #8
 8017dd0:	9c05      	ldr	r4, [sp, #20]
 8017dd2:	4442      	add	r2, r8
 8017dd4:	3508      	adds	r5, #8
 8017dd6:	3408      	adds	r4, #8
 8017dd8:	9902      	ldr	r1, [sp, #8]
 8017dda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017ddc:	eb07 020c 	add.w	r2, r7, ip
 8017de0:	310c      	adds	r1, #12
 8017de2:	f04f 0800 	mov.w	r8, #0
 8017de6:	920a      	str	r2, [sp, #40]	@ 0x28
 8017de8:	19ba      	adds	r2, r7, r6
 8017dea:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dec:	197a      	adds	r2, r7, r5
 8017dee:	9208      	str	r2, [sp, #32]
 8017df0:	193a      	adds	r2, r7, r4
 8017df2:	9207      	str	r2, [sp, #28]
 8017df4:	183a      	adds	r2, r7, r0
 8017df6:	9206      	str	r2, [sp, #24]
 8017df8:	187a      	adds	r2, r7, r1
 8017dfa:	9204      	str	r2, [sp, #16]
 8017dfc:	f107 020c 	add.w	r2, r7, #12
 8017e00:	9205      	str	r2, [sp, #20]
 8017e02:	2201      	movs	r2, #1
 8017e04:	9203      	str	r2, [sp, #12]
 8017e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e08:	f8dd c010 	ldr.w	ip, [sp, #16]
 8017e0c:	4490      	add	r8, r2
 8017e0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017e10:	9f05      	ldr	r7, [sp, #20]
 8017e12:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8017e16:	9e06      	ldr	r6, [sp, #24]
 8017e18:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 8017e1c:	9d07      	ldr	r5, [sp, #28]
 8017e1e:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8017e22:	ed92 ea00 	vldr	s28, [r2]
 8017e26:	9c08      	ldr	r4, [sp, #32]
 8017e28:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 8017e2c:	edd1 da00 	vldr	s27, [r1]
 8017e30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e32:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8017e36:	ed92 da00 	vldr	s26, [r2]
 8017e3a:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 8017e3e:	edd1 ca00 	vldr	s25, [r1]
 8017e42:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8017e46:	ed92 ca00 	vldr	s24, [r2]
 8017e4a:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 8017e4e:	edd1 ba00 	vldr	s23, [r1]
 8017e52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e54:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8017e58:	ed92 ba00 	vldr	s22, [r2]
 8017e5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017e5e:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 8017e62:	910c      	str	r1, [sp, #48]	@ 0x30
 8017e64:	9200      	str	r2, [sp, #0]
 8017e66:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 8017e6a:	ed99 aa01 	vldr	s20, [r9, #4]
 8017e6e:	edde aa01 	vldr	s21, [lr, #4]
 8017e72:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 8017e76:	edd2 9a01 	vldr	s19, [r2, #4]
 8017e7a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8017e7e:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 8017e82:	ed99 9a01 	vldr	s18, [r9, #4]
 8017e86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017e88:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 8017e8c:	ed92 8a01 	vldr	s16, [r2, #4]
 8017e90:	edd9 7a01 	vldr	s15, [r9, #4]
 8017e94:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 8017e98:	edcd 7a01 	vstr	s15, [sp, #4]
 8017e9c:	edd2 7a01 	vldr	s15, [r2, #4]
 8017ea0:	9a00      	ldr	r2, [sp, #0]
 8017ea2:	edcd 7a02 	vstr	s15, [sp, #8]
 8017ea6:	e001      	b.n	8017eac <arm_radix8_butterfly_f32+0x2fc>
 8017ea8:	3f3504f3 	.word	0x3f3504f3
 8017eac:	ed92 7a00 	vldr	s14, [r2]
 8017eb0:	44d6      	add	lr, sl
 8017eb2:	ed17 1a01 	vldr	s2, [r7, #-4]
 8017eb6:	ed90 5a00 	vldr	s10, [r0]
 8017eba:	45f3      	cmp	fp, lr
 8017ebc:	ed1c fa01 	vldr	s30, [ip, #-4]
 8017ec0:	ee31 3a07 	vadd.f32	s6, s2, s14
 8017ec4:	edd6 5a00 	vldr	s11, [r6]
 8017ec8:	ee31 1a47 	vsub.f32	s2, s2, s14
 8017ecc:	edd4 7a00 	vldr	s15, [r4]
 8017ed0:	ed95 7a00 	vldr	s14, [r5]
 8017ed4:	ed91 4a00 	vldr	s8, [r1]
 8017ed8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8017edc:	ee77 6a25 	vadd.f32	s13, s14, s11
 8017ee0:	edd7 ea00 	vldr	s29, [r7]
 8017ee4:	ee74 fa05 	vadd.f32	s31, s8, s10
 8017ee8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8017eec:	ee34 4a45 	vsub.f32	s8, s8, s10
 8017ef0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8017ef4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8017ef8:	ee33 3a46 	vsub.f32	s6, s6, s12
 8017efc:	ee31 6a85 	vadd.f32	s12, s3, s10
 8017f00:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8017f04:	ee34 fa07 	vadd.f32	s30, s8, s14
 8017f08:	ed07 6a01 	vstr	s12, [r7, #-4]
 8017f0c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8017f10:	edd5 3a01 	vldr	s7, [r5, #4]
 8017f14:	ee7f fae6 	vsub.f32	s31, s31, s13
 8017f18:	ed90 7a01 	vldr	s14, [r0, #4]
 8017f1c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8017f20:	edd1 5a01 	vldr	s11, [r1, #4]
 8017f24:	ee24 4a28 	vmul.f32	s8, s8, s17
 8017f28:	ed96 6a01 	vldr	s12, [r6, #4]
 8017f2c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8017f30:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8017f34:	edd2 6a01 	vldr	s13, [r2, #4]
 8017f38:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8017f3c:	edd4 4a01 	vldr	s9, [r4, #4]
 8017f40:	ee75 5a87 	vadd.f32	s11, s11, s14
 8017f44:	ed9c 7a00 	vldr	s14, [ip]
 8017f48:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8017f4c:	ee33 6a86 	vadd.f32	s12, s7, s12
 8017f50:	ee37 facf 	vsub.f32	s30, s15, s30
 8017f54:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8017f58:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8017f5c:	ee7e eae6 	vsub.f32	s29, s29, s13
 8017f60:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8017f64:	ee77 6a24 	vadd.f32	s13, s14, s9
 8017f68:	ee75 0a86 	vadd.f32	s1, s11, s12
 8017f6c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8017f70:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8017f74:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017f78:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8017f7c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017f80:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8017f84:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8017f88:	ee77 4a22 	vadd.f32	s9, s14, s5
 8017f8c:	ee7e eae7 	vsub.f32	s29, s29, s15
 8017f90:	ee77 7a62 	vsub.f32	s15, s14, s5
 8017f94:	ee71 2a04 	vadd.f32	s5, s2, s8
 8017f98:	ee31 7a44 	vsub.f32	s14, s2, s8
 8017f9c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8017fa0:	ee73 1a06 	vadd.f32	s3, s6, s12
 8017fa4:	ee33 6a46 	vsub.f32	s12, s6, s12
 8017fa8:	ee33 3aef 	vsub.f32	s6, s7, s31
 8017fac:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8017fb0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8017fb4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8017fb8:	ee72 5a25 	vadd.f32	s11, s4, s11
 8017fbc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8017fc0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8017fc4:	ee77 2a27 	vadd.f32	s5, s14, s15
 8017fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017fcc:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8017fd0:	ee2c fa85 	vmul.f32	s30, s25, s10
 8017fd4:	ee69 ea01 	vmul.f32	s29, s18, s2
 8017fd8:	ee29 5a05 	vmul.f32	s10, s18, s10
 8017fdc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8017fe0:	ee6d faa1 	vmul.f32	s31, s27, s3
 8017fe4:	ee70 0a20 	vadd.f32	s1, s0, s1
 8017fe8:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8017fec:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8017ff0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8017ff4:	edc7 0a00 	vstr	s1, [r7]
 8017ff8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8017ffc:	441f      	add	r7, r3
 8017ffe:	ee2a faa3 	vmul.f32	s30, s21, s7
 8018002:	ee31 5a45 	vsub.f32	s10, s2, s10
 8018006:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801800a:	edc2 ea00 	vstr	s29, [r2]
 801800e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8018012:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018016:	ed82 5a01 	vstr	s10, [r2, #4]
 801801a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801801e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8018022:	edcd 3a00 	vstr	s7, [sp]
 8018026:	ee6b ea86 	vmul.f32	s29, s23, s12
 801802a:	eddd 3a01 	vldr	s7, [sp, #4]
 801802e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8018032:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8018036:	ee65 4a24 	vmul.f32	s9, s10, s9
 801803a:	ed8c 3a00 	vstr	s6, [ip]
 801803e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8018042:	ee23 6a86 	vmul.f32	s12, s7, s12
 8018046:	eddd 3a00 	vldr	s7, [sp]
 801804a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801804e:	441a      	add	r2, r3
 8018050:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8018054:	449c      	add	ip, r3
 8018056:	ee68 1a04 	vmul.f32	s3, s16, s8
 801805a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801805e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8018062:	ee29 faa7 	vmul.f32	s30, s19, s15
 8018066:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801806a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801806e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8018072:	ee68 2a22 	vmul.f32	s5, s16, s5
 8018076:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801807a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801807e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8018082:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8018086:	ee7e ea81 	vadd.f32	s29, s29, s2
 801808a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801808e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8018092:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8018096:	edc4 ea00 	vstr	s29, [r4]
 801809a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801809e:	ed84 6a01 	vstr	s12, [r4, #4]
 80180a2:	ee74 2a62 	vsub.f32	s5, s8, s5
 80180a6:	edc1 0a00 	vstr	s1, [r1]
 80180aa:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80180ae:	edc1 3a01 	vstr	s7, [r1, #4]
 80180b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80180b6:	ed86 5a00 	vstr	s10, [r6]
 80180ba:	edc6 4a01 	vstr	s9, [r6, #4]
 80180be:	4419      	add	r1, r3
 80180c0:	ed80 0a00 	vstr	s0, [r0]
 80180c4:	441c      	add	r4, r3
 80180c6:	edc0 2a01 	vstr	s5, [r0, #4]
 80180ca:	441e      	add	r6, r3
 80180cc:	ed85 3a00 	vstr	s6, [r5]
 80180d0:	4418      	add	r0, r3
 80180d2:	ed85 7a01 	vstr	s14, [r5, #4]
 80180d6:	441d      	add	r5, r3
 80180d8:	f63f aee8 	bhi.w	8017eac <arm_radix8_butterfly_f32+0x2fc>
 80180dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80180de:	9a03      	ldr	r2, [sp, #12]
 80180e0:	3108      	adds	r1, #8
 80180e2:	3201      	adds	r2, #1
 80180e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80180e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80180e8:	9203      	str	r2, [sp, #12]
 80180ea:	3108      	adds	r1, #8
 80180ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80180ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80180f0:	3108      	adds	r1, #8
 80180f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80180f4:	9908      	ldr	r1, [sp, #32]
 80180f6:	3108      	adds	r1, #8
 80180f8:	9108      	str	r1, [sp, #32]
 80180fa:	9907      	ldr	r1, [sp, #28]
 80180fc:	3108      	adds	r1, #8
 80180fe:	9107      	str	r1, [sp, #28]
 8018100:	9906      	ldr	r1, [sp, #24]
 8018102:	3108      	adds	r1, #8
 8018104:	9106      	str	r1, [sp, #24]
 8018106:	9905      	ldr	r1, [sp, #20]
 8018108:	3108      	adds	r1, #8
 801810a:	9105      	str	r1, [sp, #20]
 801810c:	9904      	ldr	r1, [sp, #16]
 801810e:	3108      	adds	r1, #8
 8018110:	9104      	str	r1, [sp, #16]
 8018112:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8018114:	4291      	cmp	r1, r2
 8018116:	f47f ae76 	bne.w	8017e06 <arm_radix8_butterfly_f32+0x256>
 801811a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801811c:	468a      	mov	sl, r1
 801811e:	00db      	lsls	r3, r3, #3
 8018120:	b29b      	uxth	r3, r3
 8018122:	930e      	str	r3, [sp, #56]	@ 0x38
 8018124:	e553      	b.n	8017bce <arm_radix8_butterfly_f32+0x1e>
 8018126:	b013      	add	sp, #76	@ 0x4c
 8018128:	ecbd 8b10 	vpop	{d8-d15}
 801812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018130 <atoi>:
 8018130:	220a      	movs	r2, #10
 8018132:	2100      	movs	r1, #0
 8018134:	f000 bf3e 	b.w	8018fb4 <strtol>

08018138 <malloc>:
 8018138:	4b02      	ldr	r3, [pc, #8]	@ (8018144 <malloc+0xc>)
 801813a:	4601      	mov	r1, r0
 801813c:	6818      	ldr	r0, [r3, #0]
 801813e:	f000 b82d 	b.w	801819c <_malloc_r>
 8018142:	bf00      	nop
 8018144:	240001a0 	.word	0x240001a0

08018148 <free>:
 8018148:	4b02      	ldr	r3, [pc, #8]	@ (8018154 <free+0xc>)
 801814a:	4601      	mov	r1, r0
 801814c:	6818      	ldr	r0, [r3, #0]
 801814e:	f002 be95 	b.w	801ae7c <_free_r>
 8018152:	bf00      	nop
 8018154:	240001a0 	.word	0x240001a0

08018158 <sbrk_aligned>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	4e0f      	ldr	r6, [pc, #60]	@ (8018198 <sbrk_aligned+0x40>)
 801815c:	460c      	mov	r4, r1
 801815e:	6831      	ldr	r1, [r6, #0]
 8018160:	4605      	mov	r5, r0
 8018162:	b911      	cbnz	r1, 801816a <sbrk_aligned+0x12>
 8018164:	f002 f832 	bl	801a1cc <_sbrk_r>
 8018168:	6030      	str	r0, [r6, #0]
 801816a:	4621      	mov	r1, r4
 801816c:	4628      	mov	r0, r5
 801816e:	f002 f82d 	bl	801a1cc <_sbrk_r>
 8018172:	1c43      	adds	r3, r0, #1
 8018174:	d103      	bne.n	801817e <sbrk_aligned+0x26>
 8018176:	f04f 34ff 	mov.w	r4, #4294967295
 801817a:	4620      	mov	r0, r4
 801817c:	bd70      	pop	{r4, r5, r6, pc}
 801817e:	1cc4      	adds	r4, r0, #3
 8018180:	f024 0403 	bic.w	r4, r4, #3
 8018184:	42a0      	cmp	r0, r4
 8018186:	d0f8      	beq.n	801817a <sbrk_aligned+0x22>
 8018188:	1a21      	subs	r1, r4, r0
 801818a:	4628      	mov	r0, r5
 801818c:	f002 f81e 	bl	801a1cc <_sbrk_r>
 8018190:	3001      	adds	r0, #1
 8018192:	d1f2      	bne.n	801817a <sbrk_aligned+0x22>
 8018194:	e7ef      	b.n	8018176 <sbrk_aligned+0x1e>
 8018196:	bf00      	nop
 8018198:	24004b70 	.word	0x24004b70

0801819c <_malloc_r>:
 801819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181a0:	1ccd      	adds	r5, r1, #3
 80181a2:	f025 0503 	bic.w	r5, r5, #3
 80181a6:	3508      	adds	r5, #8
 80181a8:	2d0c      	cmp	r5, #12
 80181aa:	bf38      	it	cc
 80181ac:	250c      	movcc	r5, #12
 80181ae:	2d00      	cmp	r5, #0
 80181b0:	4606      	mov	r6, r0
 80181b2:	db01      	blt.n	80181b8 <_malloc_r+0x1c>
 80181b4:	42a9      	cmp	r1, r5
 80181b6:	d904      	bls.n	80181c2 <_malloc_r+0x26>
 80181b8:	230c      	movs	r3, #12
 80181ba:	6033      	str	r3, [r6, #0]
 80181bc:	2000      	movs	r0, #0
 80181be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018298 <_malloc_r+0xfc>
 80181c6:	f000 f869 	bl	801829c <__malloc_lock>
 80181ca:	f8d8 3000 	ldr.w	r3, [r8]
 80181ce:	461c      	mov	r4, r3
 80181d0:	bb44      	cbnz	r4, 8018224 <_malloc_r+0x88>
 80181d2:	4629      	mov	r1, r5
 80181d4:	4630      	mov	r0, r6
 80181d6:	f7ff ffbf 	bl	8018158 <sbrk_aligned>
 80181da:	1c43      	adds	r3, r0, #1
 80181dc:	4604      	mov	r4, r0
 80181de:	d158      	bne.n	8018292 <_malloc_r+0xf6>
 80181e0:	f8d8 4000 	ldr.w	r4, [r8]
 80181e4:	4627      	mov	r7, r4
 80181e6:	2f00      	cmp	r7, #0
 80181e8:	d143      	bne.n	8018272 <_malloc_r+0xd6>
 80181ea:	2c00      	cmp	r4, #0
 80181ec:	d04b      	beq.n	8018286 <_malloc_r+0xea>
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	4639      	mov	r1, r7
 80181f2:	4630      	mov	r0, r6
 80181f4:	eb04 0903 	add.w	r9, r4, r3
 80181f8:	f001 ffe8 	bl	801a1cc <_sbrk_r>
 80181fc:	4581      	cmp	r9, r0
 80181fe:	d142      	bne.n	8018286 <_malloc_r+0xea>
 8018200:	6821      	ldr	r1, [r4, #0]
 8018202:	1a6d      	subs	r5, r5, r1
 8018204:	4629      	mov	r1, r5
 8018206:	4630      	mov	r0, r6
 8018208:	f7ff ffa6 	bl	8018158 <sbrk_aligned>
 801820c:	3001      	adds	r0, #1
 801820e:	d03a      	beq.n	8018286 <_malloc_r+0xea>
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	442b      	add	r3, r5
 8018214:	6023      	str	r3, [r4, #0]
 8018216:	f8d8 3000 	ldr.w	r3, [r8]
 801821a:	685a      	ldr	r2, [r3, #4]
 801821c:	bb62      	cbnz	r2, 8018278 <_malloc_r+0xdc>
 801821e:	f8c8 7000 	str.w	r7, [r8]
 8018222:	e00f      	b.n	8018244 <_malloc_r+0xa8>
 8018224:	6822      	ldr	r2, [r4, #0]
 8018226:	1b52      	subs	r2, r2, r5
 8018228:	d420      	bmi.n	801826c <_malloc_r+0xd0>
 801822a:	2a0b      	cmp	r2, #11
 801822c:	d917      	bls.n	801825e <_malloc_r+0xc2>
 801822e:	1961      	adds	r1, r4, r5
 8018230:	42a3      	cmp	r3, r4
 8018232:	6025      	str	r5, [r4, #0]
 8018234:	bf18      	it	ne
 8018236:	6059      	strne	r1, [r3, #4]
 8018238:	6863      	ldr	r3, [r4, #4]
 801823a:	bf08      	it	eq
 801823c:	f8c8 1000 	streq.w	r1, [r8]
 8018240:	5162      	str	r2, [r4, r5]
 8018242:	604b      	str	r3, [r1, #4]
 8018244:	4630      	mov	r0, r6
 8018246:	f000 f82f 	bl	80182a8 <__malloc_unlock>
 801824a:	f104 000b 	add.w	r0, r4, #11
 801824e:	1d23      	adds	r3, r4, #4
 8018250:	f020 0007 	bic.w	r0, r0, #7
 8018254:	1ac2      	subs	r2, r0, r3
 8018256:	bf1c      	itt	ne
 8018258:	1a1b      	subne	r3, r3, r0
 801825a:	50a3      	strne	r3, [r4, r2]
 801825c:	e7af      	b.n	80181be <_malloc_r+0x22>
 801825e:	6862      	ldr	r2, [r4, #4]
 8018260:	42a3      	cmp	r3, r4
 8018262:	bf0c      	ite	eq
 8018264:	f8c8 2000 	streq.w	r2, [r8]
 8018268:	605a      	strne	r2, [r3, #4]
 801826a:	e7eb      	b.n	8018244 <_malloc_r+0xa8>
 801826c:	4623      	mov	r3, r4
 801826e:	6864      	ldr	r4, [r4, #4]
 8018270:	e7ae      	b.n	80181d0 <_malloc_r+0x34>
 8018272:	463c      	mov	r4, r7
 8018274:	687f      	ldr	r7, [r7, #4]
 8018276:	e7b6      	b.n	80181e6 <_malloc_r+0x4a>
 8018278:	461a      	mov	r2, r3
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	42a3      	cmp	r3, r4
 801827e:	d1fb      	bne.n	8018278 <_malloc_r+0xdc>
 8018280:	2300      	movs	r3, #0
 8018282:	6053      	str	r3, [r2, #4]
 8018284:	e7de      	b.n	8018244 <_malloc_r+0xa8>
 8018286:	230c      	movs	r3, #12
 8018288:	6033      	str	r3, [r6, #0]
 801828a:	4630      	mov	r0, r6
 801828c:	f000 f80c 	bl	80182a8 <__malloc_unlock>
 8018290:	e794      	b.n	80181bc <_malloc_r+0x20>
 8018292:	6005      	str	r5, [r0, #0]
 8018294:	e7d6      	b.n	8018244 <_malloc_r+0xa8>
 8018296:	bf00      	nop
 8018298:	24004b74 	.word	0x24004b74

0801829c <__malloc_lock>:
 801829c:	4801      	ldr	r0, [pc, #4]	@ (80182a4 <__malloc_lock+0x8>)
 801829e:	f001 bfe2 	b.w	801a266 <__retarget_lock_acquire_recursive>
 80182a2:	bf00      	nop
 80182a4:	24004cb8 	.word	0x24004cb8

080182a8 <__malloc_unlock>:
 80182a8:	4801      	ldr	r0, [pc, #4]	@ (80182b0 <__malloc_unlock+0x8>)
 80182aa:	f001 bfdd 	b.w	801a268 <__retarget_lock_release_recursive>
 80182ae:	bf00      	nop
 80182b0:	24004cb8 	.word	0x24004cb8

080182b4 <sulp>:
 80182b4:	b570      	push	{r4, r5, r6, lr}
 80182b6:	4604      	mov	r4, r0
 80182b8:	460d      	mov	r5, r1
 80182ba:	4616      	mov	r6, r2
 80182bc:	ec45 4b10 	vmov	d0, r4, r5
 80182c0:	f003 fce6 	bl	801bc90 <__ulp>
 80182c4:	b17e      	cbz	r6, 80182e6 <sulp+0x32>
 80182c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80182ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	dd09      	ble.n	80182e6 <sulp+0x32>
 80182d2:	051b      	lsls	r3, r3, #20
 80182d4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80182d8:	2000      	movs	r0, #0
 80182da:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80182de:	ec41 0b17 	vmov	d7, r0, r1
 80182e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80182e6:	bd70      	pop	{r4, r5, r6, pc}

080182e8 <_strtod_l>:
 80182e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ec:	ed2d 8b0a 	vpush	{d8-d12}
 80182f0:	b097      	sub	sp, #92	@ 0x5c
 80182f2:	4688      	mov	r8, r1
 80182f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80182f6:	2200      	movs	r2, #0
 80182f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80182fa:	9005      	str	r0, [sp, #20]
 80182fc:	f04f 0a00 	mov.w	sl, #0
 8018300:	f04f 0b00 	mov.w	fp, #0
 8018304:	460a      	mov	r2, r1
 8018306:	9211      	str	r2, [sp, #68]	@ 0x44
 8018308:	7811      	ldrb	r1, [r2, #0]
 801830a:	292b      	cmp	r1, #43	@ 0x2b
 801830c:	d04c      	beq.n	80183a8 <_strtod_l+0xc0>
 801830e:	d839      	bhi.n	8018384 <_strtod_l+0x9c>
 8018310:	290d      	cmp	r1, #13
 8018312:	d833      	bhi.n	801837c <_strtod_l+0x94>
 8018314:	2908      	cmp	r1, #8
 8018316:	d833      	bhi.n	8018380 <_strtod_l+0x98>
 8018318:	2900      	cmp	r1, #0
 801831a:	d03c      	beq.n	8018396 <_strtod_l+0xae>
 801831c:	2200      	movs	r2, #0
 801831e:	9208      	str	r2, [sp, #32]
 8018320:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018322:	782a      	ldrb	r2, [r5, #0]
 8018324:	2a30      	cmp	r2, #48	@ 0x30
 8018326:	f040 80b5 	bne.w	8018494 <_strtod_l+0x1ac>
 801832a:	786a      	ldrb	r2, [r5, #1]
 801832c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018330:	2a58      	cmp	r2, #88	@ 0x58
 8018332:	d170      	bne.n	8018416 <_strtod_l+0x12e>
 8018334:	9302      	str	r3, [sp, #8]
 8018336:	9b08      	ldr	r3, [sp, #32]
 8018338:	9301      	str	r3, [sp, #4]
 801833a:	ab12      	add	r3, sp, #72	@ 0x48
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	4a8b      	ldr	r2, [pc, #556]	@ (801856c <_strtod_l+0x284>)
 8018340:	9805      	ldr	r0, [sp, #20]
 8018342:	ab13      	add	r3, sp, #76	@ 0x4c
 8018344:	a911      	add	r1, sp, #68	@ 0x44
 8018346:	f002 fe4b 	bl	801afe0 <__gethex>
 801834a:	f010 060f 	ands.w	r6, r0, #15
 801834e:	4604      	mov	r4, r0
 8018350:	d005      	beq.n	801835e <_strtod_l+0x76>
 8018352:	2e06      	cmp	r6, #6
 8018354:	d12a      	bne.n	80183ac <_strtod_l+0xc4>
 8018356:	3501      	adds	r5, #1
 8018358:	2300      	movs	r3, #0
 801835a:	9511      	str	r5, [sp, #68]	@ 0x44
 801835c:	9308      	str	r3, [sp, #32]
 801835e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018360:	2b00      	cmp	r3, #0
 8018362:	f040 852f 	bne.w	8018dc4 <_strtod_l+0xadc>
 8018366:	9b08      	ldr	r3, [sp, #32]
 8018368:	ec4b ab10 	vmov	d0, sl, fp
 801836c:	b1cb      	cbz	r3, 80183a2 <_strtod_l+0xba>
 801836e:	eeb1 0b40 	vneg.f64	d0, d0
 8018372:	b017      	add	sp, #92	@ 0x5c
 8018374:	ecbd 8b0a 	vpop	{d8-d12}
 8018378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801837c:	2920      	cmp	r1, #32
 801837e:	d1cd      	bne.n	801831c <_strtod_l+0x34>
 8018380:	3201      	adds	r2, #1
 8018382:	e7c0      	b.n	8018306 <_strtod_l+0x1e>
 8018384:	292d      	cmp	r1, #45	@ 0x2d
 8018386:	d1c9      	bne.n	801831c <_strtod_l+0x34>
 8018388:	2101      	movs	r1, #1
 801838a:	9108      	str	r1, [sp, #32]
 801838c:	1c51      	adds	r1, r2, #1
 801838e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018390:	7852      	ldrb	r2, [r2, #1]
 8018392:	2a00      	cmp	r2, #0
 8018394:	d1c4      	bne.n	8018320 <_strtod_l+0x38>
 8018396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018398:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801839c:	2b00      	cmp	r3, #0
 801839e:	f040 850f 	bne.w	8018dc0 <_strtod_l+0xad8>
 80183a2:	ec4b ab10 	vmov	d0, sl, fp
 80183a6:	e7e4      	b.n	8018372 <_strtod_l+0x8a>
 80183a8:	2100      	movs	r1, #0
 80183aa:	e7ee      	b.n	801838a <_strtod_l+0xa2>
 80183ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80183ae:	b13a      	cbz	r2, 80183c0 <_strtod_l+0xd8>
 80183b0:	2135      	movs	r1, #53	@ 0x35
 80183b2:	a814      	add	r0, sp, #80	@ 0x50
 80183b4:	f003 fd63 	bl	801be7e <__copybits>
 80183b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80183ba:	9805      	ldr	r0, [sp, #20]
 80183bc:	f003 f934 	bl	801b628 <_Bfree>
 80183c0:	1e73      	subs	r3, r6, #1
 80183c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80183c4:	2b04      	cmp	r3, #4
 80183c6:	d806      	bhi.n	80183d6 <_strtod_l+0xee>
 80183c8:	e8df f003 	tbb	[pc, r3]
 80183cc:	201d0314 	.word	0x201d0314
 80183d0:	14          	.byte	0x14
 80183d1:	00          	.byte	0x00
 80183d2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80183d6:	05e3      	lsls	r3, r4, #23
 80183d8:	bf48      	it	mi
 80183da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80183de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80183e2:	0d1b      	lsrs	r3, r3, #20
 80183e4:	051b      	lsls	r3, r3, #20
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d1b9      	bne.n	801835e <_strtod_l+0x76>
 80183ea:	f001 ff11 	bl	801a210 <__errno>
 80183ee:	2322      	movs	r3, #34	@ 0x22
 80183f0:	6003      	str	r3, [r0, #0]
 80183f2:	e7b4      	b.n	801835e <_strtod_l+0x76>
 80183f4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80183f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80183fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018404:	e7e7      	b.n	80183d6 <_strtod_l+0xee>
 8018406:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018574 <_strtod_l+0x28c>
 801840a:	e7e4      	b.n	80183d6 <_strtod_l+0xee>
 801840c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018410:	f04f 3aff 	mov.w	sl, #4294967295
 8018414:	e7df      	b.n	80183d6 <_strtod_l+0xee>
 8018416:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018418:	1c5a      	adds	r2, r3, #1
 801841a:	9211      	str	r2, [sp, #68]	@ 0x44
 801841c:	785b      	ldrb	r3, [r3, #1]
 801841e:	2b30      	cmp	r3, #48	@ 0x30
 8018420:	d0f9      	beq.n	8018416 <_strtod_l+0x12e>
 8018422:	2b00      	cmp	r3, #0
 8018424:	d09b      	beq.n	801835e <_strtod_l+0x76>
 8018426:	2301      	movs	r3, #1
 8018428:	2600      	movs	r6, #0
 801842a:	9307      	str	r3, [sp, #28]
 801842c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801842e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018430:	46b1      	mov	r9, r6
 8018432:	4635      	mov	r5, r6
 8018434:	220a      	movs	r2, #10
 8018436:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018438:	7804      	ldrb	r4, [r0, #0]
 801843a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801843e:	b2d9      	uxtb	r1, r3
 8018440:	2909      	cmp	r1, #9
 8018442:	d929      	bls.n	8018498 <_strtod_l+0x1b0>
 8018444:	494a      	ldr	r1, [pc, #296]	@ (8018570 <_strtod_l+0x288>)
 8018446:	2201      	movs	r2, #1
 8018448:	f001 fe75 	bl	801a136 <strncmp>
 801844c:	b378      	cbz	r0, 80184ae <_strtod_l+0x1c6>
 801844e:	2000      	movs	r0, #0
 8018450:	4622      	mov	r2, r4
 8018452:	462b      	mov	r3, r5
 8018454:	4607      	mov	r7, r0
 8018456:	9006      	str	r0, [sp, #24]
 8018458:	2a65      	cmp	r2, #101	@ 0x65
 801845a:	d001      	beq.n	8018460 <_strtod_l+0x178>
 801845c:	2a45      	cmp	r2, #69	@ 0x45
 801845e:	d117      	bne.n	8018490 <_strtod_l+0x1a8>
 8018460:	b91b      	cbnz	r3, 801846a <_strtod_l+0x182>
 8018462:	9b07      	ldr	r3, [sp, #28]
 8018464:	4303      	orrs	r3, r0
 8018466:	d096      	beq.n	8018396 <_strtod_l+0xae>
 8018468:	2300      	movs	r3, #0
 801846a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801846e:	f108 0201 	add.w	r2, r8, #1
 8018472:	9211      	str	r2, [sp, #68]	@ 0x44
 8018474:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018478:	2a2b      	cmp	r2, #43	@ 0x2b
 801847a:	d06b      	beq.n	8018554 <_strtod_l+0x26c>
 801847c:	2a2d      	cmp	r2, #45	@ 0x2d
 801847e:	d071      	beq.n	8018564 <_strtod_l+0x27c>
 8018480:	f04f 0e00 	mov.w	lr, #0
 8018484:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018488:	2c09      	cmp	r4, #9
 801848a:	d979      	bls.n	8018580 <_strtod_l+0x298>
 801848c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018490:	2400      	movs	r4, #0
 8018492:	e094      	b.n	80185be <_strtod_l+0x2d6>
 8018494:	2300      	movs	r3, #0
 8018496:	e7c7      	b.n	8018428 <_strtod_l+0x140>
 8018498:	2d08      	cmp	r5, #8
 801849a:	f100 0001 	add.w	r0, r0, #1
 801849e:	bfd4      	ite	le
 80184a0:	fb02 3909 	mlale	r9, r2, r9, r3
 80184a4:	fb02 3606 	mlagt	r6, r2, r6, r3
 80184a8:	3501      	adds	r5, #1
 80184aa:	9011      	str	r0, [sp, #68]	@ 0x44
 80184ac:	e7c3      	b.n	8018436 <_strtod_l+0x14e>
 80184ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80184b0:	1c5a      	adds	r2, r3, #1
 80184b2:	9211      	str	r2, [sp, #68]	@ 0x44
 80184b4:	785a      	ldrb	r2, [r3, #1]
 80184b6:	b375      	cbz	r5, 8018516 <_strtod_l+0x22e>
 80184b8:	4607      	mov	r7, r0
 80184ba:	462b      	mov	r3, r5
 80184bc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80184c0:	2909      	cmp	r1, #9
 80184c2:	d913      	bls.n	80184ec <_strtod_l+0x204>
 80184c4:	2101      	movs	r1, #1
 80184c6:	9106      	str	r1, [sp, #24]
 80184c8:	e7c6      	b.n	8018458 <_strtod_l+0x170>
 80184ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80184cc:	1c5a      	adds	r2, r3, #1
 80184ce:	9211      	str	r2, [sp, #68]	@ 0x44
 80184d0:	785a      	ldrb	r2, [r3, #1]
 80184d2:	3001      	adds	r0, #1
 80184d4:	2a30      	cmp	r2, #48	@ 0x30
 80184d6:	d0f8      	beq.n	80184ca <_strtod_l+0x1e2>
 80184d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80184dc:	2b08      	cmp	r3, #8
 80184de:	f200 8476 	bhi.w	8018dce <_strtod_l+0xae6>
 80184e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80184e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80184e6:	4607      	mov	r7, r0
 80184e8:	2000      	movs	r0, #0
 80184ea:	4603      	mov	r3, r0
 80184ec:	3a30      	subs	r2, #48	@ 0x30
 80184ee:	f100 0101 	add.w	r1, r0, #1
 80184f2:	d023      	beq.n	801853c <_strtod_l+0x254>
 80184f4:	440f      	add	r7, r1
 80184f6:	eb00 0c03 	add.w	ip, r0, r3
 80184fa:	4619      	mov	r1, r3
 80184fc:	240a      	movs	r4, #10
 80184fe:	4561      	cmp	r1, ip
 8018500:	d10b      	bne.n	801851a <_strtod_l+0x232>
 8018502:	1c5c      	adds	r4, r3, #1
 8018504:	4403      	add	r3, r0
 8018506:	2b08      	cmp	r3, #8
 8018508:	4404      	add	r4, r0
 801850a:	dc11      	bgt.n	8018530 <_strtod_l+0x248>
 801850c:	230a      	movs	r3, #10
 801850e:	fb03 2909 	mla	r9, r3, r9, r2
 8018512:	2100      	movs	r1, #0
 8018514:	e013      	b.n	801853e <_strtod_l+0x256>
 8018516:	4628      	mov	r0, r5
 8018518:	e7dc      	b.n	80184d4 <_strtod_l+0x1ec>
 801851a:	2908      	cmp	r1, #8
 801851c:	f101 0101 	add.w	r1, r1, #1
 8018520:	dc02      	bgt.n	8018528 <_strtod_l+0x240>
 8018522:	fb04 f909 	mul.w	r9, r4, r9
 8018526:	e7ea      	b.n	80184fe <_strtod_l+0x216>
 8018528:	2910      	cmp	r1, #16
 801852a:	bfd8      	it	le
 801852c:	4366      	mulle	r6, r4
 801852e:	e7e6      	b.n	80184fe <_strtod_l+0x216>
 8018530:	2b0f      	cmp	r3, #15
 8018532:	dcee      	bgt.n	8018512 <_strtod_l+0x22a>
 8018534:	230a      	movs	r3, #10
 8018536:	fb03 2606 	mla	r6, r3, r6, r2
 801853a:	e7ea      	b.n	8018512 <_strtod_l+0x22a>
 801853c:	461c      	mov	r4, r3
 801853e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018540:	1c5a      	adds	r2, r3, #1
 8018542:	9211      	str	r2, [sp, #68]	@ 0x44
 8018544:	785a      	ldrb	r2, [r3, #1]
 8018546:	4608      	mov	r0, r1
 8018548:	4623      	mov	r3, r4
 801854a:	e7b7      	b.n	80184bc <_strtod_l+0x1d4>
 801854c:	2301      	movs	r3, #1
 801854e:	2700      	movs	r7, #0
 8018550:	9306      	str	r3, [sp, #24]
 8018552:	e786      	b.n	8018462 <_strtod_l+0x17a>
 8018554:	f04f 0e00 	mov.w	lr, #0
 8018558:	f108 0202 	add.w	r2, r8, #2
 801855c:	9211      	str	r2, [sp, #68]	@ 0x44
 801855e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018562:	e78f      	b.n	8018484 <_strtod_l+0x19c>
 8018564:	f04f 0e01 	mov.w	lr, #1
 8018568:	e7f6      	b.n	8018558 <_strtod_l+0x270>
 801856a:	bf00      	nop
 801856c:	0803b844 	.word	0x0803b844
 8018570:	0803b82c 	.word	0x0803b82c
 8018574:	7ff00000 	.word	0x7ff00000
 8018578:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801857a:	1c54      	adds	r4, r2, #1
 801857c:	9411      	str	r4, [sp, #68]	@ 0x44
 801857e:	7852      	ldrb	r2, [r2, #1]
 8018580:	2a30      	cmp	r2, #48	@ 0x30
 8018582:	d0f9      	beq.n	8018578 <_strtod_l+0x290>
 8018584:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018588:	2c08      	cmp	r4, #8
 801858a:	d881      	bhi.n	8018490 <_strtod_l+0x1a8>
 801858c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018590:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018592:	9209      	str	r2, [sp, #36]	@ 0x24
 8018594:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018596:	1c51      	adds	r1, r2, #1
 8018598:	9111      	str	r1, [sp, #68]	@ 0x44
 801859a:	7852      	ldrb	r2, [r2, #1]
 801859c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80185a0:	2c09      	cmp	r4, #9
 80185a2:	d938      	bls.n	8018616 <_strtod_l+0x32e>
 80185a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80185a6:	1b0c      	subs	r4, r1, r4
 80185a8:	2c08      	cmp	r4, #8
 80185aa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80185ae:	dc02      	bgt.n	80185b6 <_strtod_l+0x2ce>
 80185b0:	4564      	cmp	r4, ip
 80185b2:	bfa8      	it	ge
 80185b4:	4664      	movge	r4, ip
 80185b6:	f1be 0f00 	cmp.w	lr, #0
 80185ba:	d000      	beq.n	80185be <_strtod_l+0x2d6>
 80185bc:	4264      	negs	r4, r4
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d14e      	bne.n	8018660 <_strtod_l+0x378>
 80185c2:	9b07      	ldr	r3, [sp, #28]
 80185c4:	4318      	orrs	r0, r3
 80185c6:	f47f aeca 	bne.w	801835e <_strtod_l+0x76>
 80185ca:	9b06      	ldr	r3, [sp, #24]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f47f aee2 	bne.w	8018396 <_strtod_l+0xae>
 80185d2:	2a69      	cmp	r2, #105	@ 0x69
 80185d4:	d027      	beq.n	8018626 <_strtod_l+0x33e>
 80185d6:	dc24      	bgt.n	8018622 <_strtod_l+0x33a>
 80185d8:	2a49      	cmp	r2, #73	@ 0x49
 80185da:	d024      	beq.n	8018626 <_strtod_l+0x33e>
 80185dc:	2a4e      	cmp	r2, #78	@ 0x4e
 80185de:	f47f aeda 	bne.w	8018396 <_strtod_l+0xae>
 80185e2:	4997      	ldr	r1, [pc, #604]	@ (8018840 <_strtod_l+0x558>)
 80185e4:	a811      	add	r0, sp, #68	@ 0x44
 80185e6:	f002 ff1d 	bl	801b424 <__match>
 80185ea:	2800      	cmp	r0, #0
 80185ec:	f43f aed3 	beq.w	8018396 <_strtod_l+0xae>
 80185f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80185f2:	781b      	ldrb	r3, [r3, #0]
 80185f4:	2b28      	cmp	r3, #40	@ 0x28
 80185f6:	d12d      	bne.n	8018654 <_strtod_l+0x36c>
 80185f8:	4992      	ldr	r1, [pc, #584]	@ (8018844 <_strtod_l+0x55c>)
 80185fa:	aa14      	add	r2, sp, #80	@ 0x50
 80185fc:	a811      	add	r0, sp, #68	@ 0x44
 80185fe:	f002 ff25 	bl	801b44c <__hexnan>
 8018602:	2805      	cmp	r0, #5
 8018604:	d126      	bne.n	8018654 <_strtod_l+0x36c>
 8018606:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018608:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801860c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018610:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018614:	e6a3      	b.n	801835e <_strtod_l+0x76>
 8018616:	240a      	movs	r4, #10
 8018618:	fb04 2c0c 	mla	ip, r4, ip, r2
 801861c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018620:	e7b8      	b.n	8018594 <_strtod_l+0x2ac>
 8018622:	2a6e      	cmp	r2, #110	@ 0x6e
 8018624:	e7db      	b.n	80185de <_strtod_l+0x2f6>
 8018626:	4988      	ldr	r1, [pc, #544]	@ (8018848 <_strtod_l+0x560>)
 8018628:	a811      	add	r0, sp, #68	@ 0x44
 801862a:	f002 fefb 	bl	801b424 <__match>
 801862e:	2800      	cmp	r0, #0
 8018630:	f43f aeb1 	beq.w	8018396 <_strtod_l+0xae>
 8018634:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018636:	4985      	ldr	r1, [pc, #532]	@ (801884c <_strtod_l+0x564>)
 8018638:	3b01      	subs	r3, #1
 801863a:	a811      	add	r0, sp, #68	@ 0x44
 801863c:	9311      	str	r3, [sp, #68]	@ 0x44
 801863e:	f002 fef1 	bl	801b424 <__match>
 8018642:	b910      	cbnz	r0, 801864a <_strtod_l+0x362>
 8018644:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018646:	3301      	adds	r3, #1
 8018648:	9311      	str	r3, [sp, #68]	@ 0x44
 801864a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018860 <_strtod_l+0x578>
 801864e:	f04f 0a00 	mov.w	sl, #0
 8018652:	e684      	b.n	801835e <_strtod_l+0x76>
 8018654:	487e      	ldr	r0, [pc, #504]	@ (8018850 <_strtod_l+0x568>)
 8018656:	f001 fe17 	bl	801a288 <nan>
 801865a:	ec5b ab10 	vmov	sl, fp, d0
 801865e:	e67e      	b.n	801835e <_strtod_l+0x76>
 8018660:	ee07 9a90 	vmov	s15, r9
 8018664:	1be2      	subs	r2, r4, r7
 8018666:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801866a:	2d00      	cmp	r5, #0
 801866c:	bf08      	it	eq
 801866e:	461d      	moveq	r5, r3
 8018670:	2b10      	cmp	r3, #16
 8018672:	9209      	str	r2, [sp, #36]	@ 0x24
 8018674:	461a      	mov	r2, r3
 8018676:	bfa8      	it	ge
 8018678:	2210      	movge	r2, #16
 801867a:	2b09      	cmp	r3, #9
 801867c:	ec5b ab17 	vmov	sl, fp, d7
 8018680:	dc15      	bgt.n	80186ae <_strtod_l+0x3c6>
 8018682:	1be1      	subs	r1, r4, r7
 8018684:	2900      	cmp	r1, #0
 8018686:	f43f ae6a 	beq.w	801835e <_strtod_l+0x76>
 801868a:	eba4 0107 	sub.w	r1, r4, r7
 801868e:	dd72      	ble.n	8018776 <_strtod_l+0x48e>
 8018690:	2916      	cmp	r1, #22
 8018692:	dc59      	bgt.n	8018748 <_strtod_l+0x460>
 8018694:	4b6f      	ldr	r3, [pc, #444]	@ (8018854 <_strtod_l+0x56c>)
 8018696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801869c:	ed93 7b00 	vldr	d7, [r3]
 80186a0:	ec4b ab16 	vmov	d6, sl, fp
 80186a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186a8:	ec5b ab17 	vmov	sl, fp, d7
 80186ac:	e657      	b.n	801835e <_strtod_l+0x76>
 80186ae:	4969      	ldr	r1, [pc, #420]	@ (8018854 <_strtod_l+0x56c>)
 80186b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80186b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80186b8:	ee06 6a90 	vmov	s13, r6
 80186bc:	2b0f      	cmp	r3, #15
 80186be:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80186c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80186c6:	ec5b ab16 	vmov	sl, fp, d6
 80186ca:	ddda      	ble.n	8018682 <_strtod_l+0x39a>
 80186cc:	1a9a      	subs	r2, r3, r2
 80186ce:	1be1      	subs	r1, r4, r7
 80186d0:	440a      	add	r2, r1
 80186d2:	2a00      	cmp	r2, #0
 80186d4:	f340 8094 	ble.w	8018800 <_strtod_l+0x518>
 80186d8:	f012 000f 	ands.w	r0, r2, #15
 80186dc:	d00a      	beq.n	80186f4 <_strtod_l+0x40c>
 80186de:	495d      	ldr	r1, [pc, #372]	@ (8018854 <_strtod_l+0x56c>)
 80186e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80186e4:	ed91 7b00 	vldr	d7, [r1]
 80186e8:	ec4b ab16 	vmov	d6, sl, fp
 80186ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186f0:	ec5b ab17 	vmov	sl, fp, d7
 80186f4:	f032 020f 	bics.w	r2, r2, #15
 80186f8:	d073      	beq.n	80187e2 <_strtod_l+0x4fa>
 80186fa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80186fe:	dd47      	ble.n	8018790 <_strtod_l+0x4a8>
 8018700:	2400      	movs	r4, #0
 8018702:	4625      	mov	r5, r4
 8018704:	9407      	str	r4, [sp, #28]
 8018706:	4626      	mov	r6, r4
 8018708:	9a05      	ldr	r2, [sp, #20]
 801870a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018860 <_strtod_l+0x578>
 801870e:	2322      	movs	r3, #34	@ 0x22
 8018710:	6013      	str	r3, [r2, #0]
 8018712:	f04f 0a00 	mov.w	sl, #0
 8018716:	9b07      	ldr	r3, [sp, #28]
 8018718:	2b00      	cmp	r3, #0
 801871a:	f43f ae20 	beq.w	801835e <_strtod_l+0x76>
 801871e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018720:	9805      	ldr	r0, [sp, #20]
 8018722:	f002 ff81 	bl	801b628 <_Bfree>
 8018726:	9805      	ldr	r0, [sp, #20]
 8018728:	4631      	mov	r1, r6
 801872a:	f002 ff7d 	bl	801b628 <_Bfree>
 801872e:	9805      	ldr	r0, [sp, #20]
 8018730:	4629      	mov	r1, r5
 8018732:	f002 ff79 	bl	801b628 <_Bfree>
 8018736:	9907      	ldr	r1, [sp, #28]
 8018738:	9805      	ldr	r0, [sp, #20]
 801873a:	f002 ff75 	bl	801b628 <_Bfree>
 801873e:	9805      	ldr	r0, [sp, #20]
 8018740:	4621      	mov	r1, r4
 8018742:	f002 ff71 	bl	801b628 <_Bfree>
 8018746:	e60a      	b.n	801835e <_strtod_l+0x76>
 8018748:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 801874c:	1be0      	subs	r0, r4, r7
 801874e:	4281      	cmp	r1, r0
 8018750:	dbbc      	blt.n	80186cc <_strtod_l+0x3e4>
 8018752:	4a40      	ldr	r2, [pc, #256]	@ (8018854 <_strtod_l+0x56c>)
 8018754:	f1c3 030f 	rsb	r3, r3, #15
 8018758:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801875c:	ed91 7b00 	vldr	d7, [r1]
 8018760:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018762:	ec4b ab16 	vmov	d6, sl, fp
 8018766:	1acb      	subs	r3, r1, r3
 8018768:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801876c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018770:	ed92 6b00 	vldr	d6, [r2]
 8018774:	e796      	b.n	80186a4 <_strtod_l+0x3bc>
 8018776:	3116      	adds	r1, #22
 8018778:	dba8      	blt.n	80186cc <_strtod_l+0x3e4>
 801877a:	4b36      	ldr	r3, [pc, #216]	@ (8018854 <_strtod_l+0x56c>)
 801877c:	1b3c      	subs	r4, r7, r4
 801877e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018782:	ed94 7b00 	vldr	d7, [r4]
 8018786:	ec4b ab16 	vmov	d6, sl, fp
 801878a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801878e:	e78b      	b.n	80186a8 <_strtod_l+0x3c0>
 8018790:	2000      	movs	r0, #0
 8018792:	ec4b ab17 	vmov	d7, sl, fp
 8018796:	4e30      	ldr	r6, [pc, #192]	@ (8018858 <_strtod_l+0x570>)
 8018798:	1112      	asrs	r2, r2, #4
 801879a:	4601      	mov	r1, r0
 801879c:	2a01      	cmp	r2, #1
 801879e:	dc23      	bgt.n	80187e8 <_strtod_l+0x500>
 80187a0:	b108      	cbz	r0, 80187a6 <_strtod_l+0x4be>
 80187a2:	ec5b ab17 	vmov	sl, fp, d7
 80187a6:	4a2c      	ldr	r2, [pc, #176]	@ (8018858 <_strtod_l+0x570>)
 80187a8:	482c      	ldr	r0, [pc, #176]	@ (801885c <_strtod_l+0x574>)
 80187aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80187ae:	ed92 7b00 	vldr	d7, [r2]
 80187b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80187b6:	ec4b ab16 	vmov	d6, sl, fp
 80187ba:	4a29      	ldr	r2, [pc, #164]	@ (8018860 <_strtod_l+0x578>)
 80187bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187c0:	ee17 1a90 	vmov	r1, s15
 80187c4:	400a      	ands	r2, r1
 80187c6:	4282      	cmp	r2, r0
 80187c8:	ec5b ab17 	vmov	sl, fp, d7
 80187cc:	d898      	bhi.n	8018700 <_strtod_l+0x418>
 80187ce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80187d2:	4282      	cmp	r2, r0
 80187d4:	bf86      	itte	hi
 80187d6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8018864 <_strtod_l+0x57c>
 80187da:	f04f 3aff 	movhi.w	sl, #4294967295
 80187de:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80187e2:	2200      	movs	r2, #0
 80187e4:	9206      	str	r2, [sp, #24]
 80187e6:	e076      	b.n	80188d6 <_strtod_l+0x5ee>
 80187e8:	f012 0f01 	tst.w	r2, #1
 80187ec:	d004      	beq.n	80187f8 <_strtod_l+0x510>
 80187ee:	ed96 6b00 	vldr	d6, [r6]
 80187f2:	2001      	movs	r0, #1
 80187f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187f8:	3101      	adds	r1, #1
 80187fa:	1052      	asrs	r2, r2, #1
 80187fc:	3608      	adds	r6, #8
 80187fe:	e7cd      	b.n	801879c <_strtod_l+0x4b4>
 8018800:	d0ef      	beq.n	80187e2 <_strtod_l+0x4fa>
 8018802:	4252      	negs	r2, r2
 8018804:	f012 000f 	ands.w	r0, r2, #15
 8018808:	d00a      	beq.n	8018820 <_strtod_l+0x538>
 801880a:	4912      	ldr	r1, [pc, #72]	@ (8018854 <_strtod_l+0x56c>)
 801880c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018810:	ed91 7b00 	vldr	d7, [r1]
 8018814:	ec4b ab16 	vmov	d6, sl, fp
 8018818:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801881c:	ec5b ab17 	vmov	sl, fp, d7
 8018820:	1112      	asrs	r2, r2, #4
 8018822:	d0de      	beq.n	80187e2 <_strtod_l+0x4fa>
 8018824:	2a1f      	cmp	r2, #31
 8018826:	dd1f      	ble.n	8018868 <_strtod_l+0x580>
 8018828:	2400      	movs	r4, #0
 801882a:	4625      	mov	r5, r4
 801882c:	9407      	str	r4, [sp, #28]
 801882e:	4626      	mov	r6, r4
 8018830:	9a05      	ldr	r2, [sp, #20]
 8018832:	2322      	movs	r3, #34	@ 0x22
 8018834:	f04f 0a00 	mov.w	sl, #0
 8018838:	f04f 0b00 	mov.w	fp, #0
 801883c:	6013      	str	r3, [r2, #0]
 801883e:	e76a      	b.n	8018716 <_strtod_l+0x42e>
 8018840:	0803b98e 	.word	0x0803b98e
 8018844:	0803b830 	.word	0x0803b830
 8018848:	0803b986 	.word	0x0803b986
 801884c:	0803b9c5 	.word	0x0803b9c5
 8018850:	0803bc54 	.word	0x0803bc54
 8018854:	0803bb40 	.word	0x0803bb40
 8018858:	0803bb18 	.word	0x0803bb18
 801885c:	7ca00000 	.word	0x7ca00000
 8018860:	7ff00000 	.word	0x7ff00000
 8018864:	7fefffff 	.word	0x7fefffff
 8018868:	f012 0110 	ands.w	r1, r2, #16
 801886c:	bf18      	it	ne
 801886e:	216a      	movne	r1, #106	@ 0x6a
 8018870:	9106      	str	r1, [sp, #24]
 8018872:	ec4b ab17 	vmov	d7, sl, fp
 8018876:	49b0      	ldr	r1, [pc, #704]	@ (8018b38 <_strtod_l+0x850>)
 8018878:	2000      	movs	r0, #0
 801887a:	07d6      	lsls	r6, r2, #31
 801887c:	d504      	bpl.n	8018888 <_strtod_l+0x5a0>
 801887e:	ed91 6b00 	vldr	d6, [r1]
 8018882:	2001      	movs	r0, #1
 8018884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018888:	1052      	asrs	r2, r2, #1
 801888a:	f101 0108 	add.w	r1, r1, #8
 801888e:	d1f4      	bne.n	801887a <_strtod_l+0x592>
 8018890:	b108      	cbz	r0, 8018896 <_strtod_l+0x5ae>
 8018892:	ec5b ab17 	vmov	sl, fp, d7
 8018896:	9a06      	ldr	r2, [sp, #24]
 8018898:	b1b2      	cbz	r2, 80188c8 <_strtod_l+0x5e0>
 801889a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801889e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80188a2:	2a00      	cmp	r2, #0
 80188a4:	4658      	mov	r0, fp
 80188a6:	dd0f      	ble.n	80188c8 <_strtod_l+0x5e0>
 80188a8:	2a1f      	cmp	r2, #31
 80188aa:	dd55      	ble.n	8018958 <_strtod_l+0x670>
 80188ac:	2a34      	cmp	r2, #52	@ 0x34
 80188ae:	bfde      	ittt	le
 80188b0:	f04f 32ff 	movle.w	r2, #4294967295
 80188b4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80188b8:	408a      	lslle	r2, r1
 80188ba:	f04f 0a00 	mov.w	sl, #0
 80188be:	bfcc      	ite	gt
 80188c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80188c4:	ea02 0b00 	andle.w	fp, r2, r0
 80188c8:	ec4b ab17 	vmov	d7, sl, fp
 80188cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80188d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d4:	d0a8      	beq.n	8018828 <_strtod_l+0x540>
 80188d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80188d8:	9805      	ldr	r0, [sp, #20]
 80188da:	f8cd 9000 	str.w	r9, [sp]
 80188de:	462a      	mov	r2, r5
 80188e0:	f002 ff0a 	bl	801b6f8 <__s2b>
 80188e4:	9007      	str	r0, [sp, #28]
 80188e6:	2800      	cmp	r0, #0
 80188e8:	f43f af0a 	beq.w	8018700 <_strtod_l+0x418>
 80188ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188ee:	1b3f      	subs	r7, r7, r4
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	bfb4      	ite	lt
 80188f4:	463b      	movlt	r3, r7
 80188f6:	2300      	movge	r3, #0
 80188f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80188fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188fc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8018b28 <_strtod_l+0x840>
 8018900:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018904:	2400      	movs	r4, #0
 8018906:	930d      	str	r3, [sp, #52]	@ 0x34
 8018908:	4625      	mov	r5, r4
 801890a:	9b07      	ldr	r3, [sp, #28]
 801890c:	9805      	ldr	r0, [sp, #20]
 801890e:	6859      	ldr	r1, [r3, #4]
 8018910:	f002 fe4a 	bl	801b5a8 <_Balloc>
 8018914:	4606      	mov	r6, r0
 8018916:	2800      	cmp	r0, #0
 8018918:	f43f aef6 	beq.w	8018708 <_strtod_l+0x420>
 801891c:	9b07      	ldr	r3, [sp, #28]
 801891e:	691a      	ldr	r2, [r3, #16]
 8018920:	ec4b ab19 	vmov	d9, sl, fp
 8018924:	3202      	adds	r2, #2
 8018926:	f103 010c 	add.w	r1, r3, #12
 801892a:	0092      	lsls	r2, r2, #2
 801892c:	300c      	adds	r0, #12
 801892e:	f001 fc9c 	bl	801a26a <memcpy>
 8018932:	eeb0 0b49 	vmov.f64	d0, d9
 8018936:	9805      	ldr	r0, [sp, #20]
 8018938:	aa14      	add	r2, sp, #80	@ 0x50
 801893a:	a913      	add	r1, sp, #76	@ 0x4c
 801893c:	f003 fa18 	bl	801bd70 <__d2b>
 8018940:	9012      	str	r0, [sp, #72]	@ 0x48
 8018942:	2800      	cmp	r0, #0
 8018944:	f43f aee0 	beq.w	8018708 <_strtod_l+0x420>
 8018948:	9805      	ldr	r0, [sp, #20]
 801894a:	2101      	movs	r1, #1
 801894c:	f002 ff6a 	bl	801b824 <__i2b>
 8018950:	4605      	mov	r5, r0
 8018952:	b940      	cbnz	r0, 8018966 <_strtod_l+0x67e>
 8018954:	2500      	movs	r5, #0
 8018956:	e6d7      	b.n	8018708 <_strtod_l+0x420>
 8018958:	f04f 31ff 	mov.w	r1, #4294967295
 801895c:	fa01 f202 	lsl.w	r2, r1, r2
 8018960:	ea02 0a0a 	and.w	sl, r2, sl
 8018964:	e7b0      	b.n	80188c8 <_strtod_l+0x5e0>
 8018966:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8018968:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801896a:	2f00      	cmp	r7, #0
 801896c:	bfab      	itete	ge
 801896e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8018970:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8018972:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8018976:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801897a:	bfac      	ite	ge
 801897c:	eb07 0903 	addge.w	r9, r7, r3
 8018980:	eba3 0807 	sublt.w	r8, r3, r7
 8018984:	9b06      	ldr	r3, [sp, #24]
 8018986:	1aff      	subs	r7, r7, r3
 8018988:	4417      	add	r7, r2
 801898a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801898e:	4a6b      	ldr	r2, [pc, #428]	@ (8018b3c <_strtod_l+0x854>)
 8018990:	3f01      	subs	r7, #1
 8018992:	4297      	cmp	r7, r2
 8018994:	da51      	bge.n	8018a3a <_strtod_l+0x752>
 8018996:	1bd1      	subs	r1, r2, r7
 8018998:	291f      	cmp	r1, #31
 801899a:	eba3 0301 	sub.w	r3, r3, r1
 801899e:	f04f 0201 	mov.w	r2, #1
 80189a2:	dc3e      	bgt.n	8018a22 <_strtod_l+0x73a>
 80189a4:	408a      	lsls	r2, r1
 80189a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80189a8:	2200      	movs	r2, #0
 80189aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80189ac:	eb09 0703 	add.w	r7, r9, r3
 80189b0:	4498      	add	r8, r3
 80189b2:	9b06      	ldr	r3, [sp, #24]
 80189b4:	45b9      	cmp	r9, r7
 80189b6:	4498      	add	r8, r3
 80189b8:	464b      	mov	r3, r9
 80189ba:	bfa8      	it	ge
 80189bc:	463b      	movge	r3, r7
 80189be:	4543      	cmp	r3, r8
 80189c0:	bfa8      	it	ge
 80189c2:	4643      	movge	r3, r8
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	bfc2      	ittt	gt
 80189c8:	1aff      	subgt	r7, r7, r3
 80189ca:	eba8 0803 	subgt.w	r8, r8, r3
 80189ce:	eba9 0903 	subgt.w	r9, r9, r3
 80189d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	dd16      	ble.n	8018a06 <_strtod_l+0x71e>
 80189d8:	4629      	mov	r1, r5
 80189da:	9805      	ldr	r0, [sp, #20]
 80189dc:	461a      	mov	r2, r3
 80189de:	f002 ffe1 	bl	801b9a4 <__pow5mult>
 80189e2:	4605      	mov	r5, r0
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d0b5      	beq.n	8018954 <_strtod_l+0x66c>
 80189e8:	4601      	mov	r1, r0
 80189ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80189ec:	9805      	ldr	r0, [sp, #20]
 80189ee:	f002 ff2f 	bl	801b850 <__multiply>
 80189f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80189f4:	2800      	cmp	r0, #0
 80189f6:	f43f ae87 	beq.w	8018708 <_strtod_l+0x420>
 80189fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80189fc:	9805      	ldr	r0, [sp, #20]
 80189fe:	f002 fe13 	bl	801b628 <_Bfree>
 8018a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a04:	9312      	str	r3, [sp, #72]	@ 0x48
 8018a06:	2f00      	cmp	r7, #0
 8018a08:	dc1b      	bgt.n	8018a42 <_strtod_l+0x75a>
 8018a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	dd21      	ble.n	8018a54 <_strtod_l+0x76c>
 8018a10:	4631      	mov	r1, r6
 8018a12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a14:	9805      	ldr	r0, [sp, #20]
 8018a16:	f002 ffc5 	bl	801b9a4 <__pow5mult>
 8018a1a:	4606      	mov	r6, r0
 8018a1c:	b9d0      	cbnz	r0, 8018a54 <_strtod_l+0x76c>
 8018a1e:	2600      	movs	r6, #0
 8018a20:	e672      	b.n	8018708 <_strtod_l+0x420>
 8018a22:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8018a26:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8018a2a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8018a2e:	37e2      	adds	r7, #226	@ 0xe2
 8018a30:	fa02 f107 	lsl.w	r1, r2, r7
 8018a34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8018a38:	e7b8      	b.n	80189ac <_strtod_l+0x6c4>
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018a3e:	2201      	movs	r2, #1
 8018a40:	e7f9      	b.n	8018a36 <_strtod_l+0x74e>
 8018a42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a44:	9805      	ldr	r0, [sp, #20]
 8018a46:	463a      	mov	r2, r7
 8018a48:	f003 f806 	bl	801ba58 <__lshift>
 8018a4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	d1db      	bne.n	8018a0a <_strtod_l+0x722>
 8018a52:	e659      	b.n	8018708 <_strtod_l+0x420>
 8018a54:	f1b8 0f00 	cmp.w	r8, #0
 8018a58:	dd07      	ble.n	8018a6a <_strtod_l+0x782>
 8018a5a:	4631      	mov	r1, r6
 8018a5c:	9805      	ldr	r0, [sp, #20]
 8018a5e:	4642      	mov	r2, r8
 8018a60:	f002 fffa 	bl	801ba58 <__lshift>
 8018a64:	4606      	mov	r6, r0
 8018a66:	2800      	cmp	r0, #0
 8018a68:	d0d9      	beq.n	8018a1e <_strtod_l+0x736>
 8018a6a:	f1b9 0f00 	cmp.w	r9, #0
 8018a6e:	dd08      	ble.n	8018a82 <_strtod_l+0x79a>
 8018a70:	4629      	mov	r1, r5
 8018a72:	9805      	ldr	r0, [sp, #20]
 8018a74:	464a      	mov	r2, r9
 8018a76:	f002 ffef 	bl	801ba58 <__lshift>
 8018a7a:	4605      	mov	r5, r0
 8018a7c:	2800      	cmp	r0, #0
 8018a7e:	f43f ae43 	beq.w	8018708 <_strtod_l+0x420>
 8018a82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a84:	9805      	ldr	r0, [sp, #20]
 8018a86:	4632      	mov	r2, r6
 8018a88:	f003 f86e 	bl	801bb68 <__mdiff>
 8018a8c:	4604      	mov	r4, r0
 8018a8e:	2800      	cmp	r0, #0
 8018a90:	f43f ae3a 	beq.w	8018708 <_strtod_l+0x420>
 8018a94:	2300      	movs	r3, #0
 8018a96:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8018a9a:	60c3      	str	r3, [r0, #12]
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	f003 f847 	bl	801bb30 <__mcmp>
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	da4e      	bge.n	8018b44 <_strtod_l+0x85c>
 8018aa6:	ea58 080a 	orrs.w	r8, r8, sl
 8018aaa:	d174      	bne.n	8018b96 <_strtod_l+0x8ae>
 8018aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d170      	bne.n	8018b96 <_strtod_l+0x8ae>
 8018ab4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018ab8:	0d1b      	lsrs	r3, r3, #20
 8018aba:	051b      	lsls	r3, r3, #20
 8018abc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018ac0:	d969      	bls.n	8018b96 <_strtod_l+0x8ae>
 8018ac2:	6963      	ldr	r3, [r4, #20]
 8018ac4:	b913      	cbnz	r3, 8018acc <_strtod_l+0x7e4>
 8018ac6:	6923      	ldr	r3, [r4, #16]
 8018ac8:	2b01      	cmp	r3, #1
 8018aca:	dd64      	ble.n	8018b96 <_strtod_l+0x8ae>
 8018acc:	4621      	mov	r1, r4
 8018ace:	2201      	movs	r2, #1
 8018ad0:	9805      	ldr	r0, [sp, #20]
 8018ad2:	f002 ffc1 	bl	801ba58 <__lshift>
 8018ad6:	4629      	mov	r1, r5
 8018ad8:	4604      	mov	r4, r0
 8018ada:	f003 f829 	bl	801bb30 <__mcmp>
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	dd59      	ble.n	8018b96 <_strtod_l+0x8ae>
 8018ae2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018ae6:	9a06      	ldr	r2, [sp, #24]
 8018ae8:	0d1b      	lsrs	r3, r3, #20
 8018aea:	051b      	lsls	r3, r3, #20
 8018aec:	2a00      	cmp	r2, #0
 8018aee:	d070      	beq.n	8018bd2 <_strtod_l+0x8ea>
 8018af0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018af4:	d86d      	bhi.n	8018bd2 <_strtod_l+0x8ea>
 8018af6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018afa:	f67f ae99 	bls.w	8018830 <_strtod_l+0x548>
 8018afe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8018b30 <_strtod_l+0x848>
 8018b02:	ec4b ab16 	vmov	d6, sl, fp
 8018b06:	4b0e      	ldr	r3, [pc, #56]	@ (8018b40 <_strtod_l+0x858>)
 8018b08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018b0c:	ee17 2a90 	vmov	r2, s15
 8018b10:	4013      	ands	r3, r2
 8018b12:	ec5b ab17 	vmov	sl, fp, d7
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	f47f ae01 	bne.w	801871e <_strtod_l+0x436>
 8018b1c:	9a05      	ldr	r2, [sp, #20]
 8018b1e:	2322      	movs	r3, #34	@ 0x22
 8018b20:	6013      	str	r3, [r2, #0]
 8018b22:	e5fc      	b.n	801871e <_strtod_l+0x436>
 8018b24:	f3af 8000 	nop.w
 8018b28:	ffc00000 	.word	0xffc00000
 8018b2c:	41dfffff 	.word	0x41dfffff
 8018b30:	00000000 	.word	0x00000000
 8018b34:	39500000 	.word	0x39500000
 8018b38:	0803b858 	.word	0x0803b858
 8018b3c:	fffffc02 	.word	0xfffffc02
 8018b40:	7ff00000 	.word	0x7ff00000
 8018b44:	46d9      	mov	r9, fp
 8018b46:	d15d      	bne.n	8018c04 <_strtod_l+0x91c>
 8018b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b4c:	f1b8 0f00 	cmp.w	r8, #0
 8018b50:	d02a      	beq.n	8018ba8 <_strtod_l+0x8c0>
 8018b52:	4aab      	ldr	r2, [pc, #684]	@ (8018e00 <_strtod_l+0xb18>)
 8018b54:	4293      	cmp	r3, r2
 8018b56:	d12a      	bne.n	8018bae <_strtod_l+0x8c6>
 8018b58:	9b06      	ldr	r3, [sp, #24]
 8018b5a:	4652      	mov	r2, sl
 8018b5c:	b1fb      	cbz	r3, 8018b9e <_strtod_l+0x8b6>
 8018b5e:	4ba9      	ldr	r3, [pc, #676]	@ (8018e04 <_strtod_l+0xb1c>)
 8018b60:	ea0b 0303 	and.w	r3, fp, r3
 8018b64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018b68:	f04f 31ff 	mov.w	r1, #4294967295
 8018b6c:	d81a      	bhi.n	8018ba4 <_strtod_l+0x8bc>
 8018b6e:	0d1b      	lsrs	r3, r3, #20
 8018b70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018b74:	fa01 f303 	lsl.w	r3, r1, r3
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d118      	bne.n	8018bae <_strtod_l+0x8c6>
 8018b7c:	4ba2      	ldr	r3, [pc, #648]	@ (8018e08 <_strtod_l+0xb20>)
 8018b7e:	4599      	cmp	r9, r3
 8018b80:	d102      	bne.n	8018b88 <_strtod_l+0x8a0>
 8018b82:	3201      	adds	r2, #1
 8018b84:	f43f adc0 	beq.w	8018708 <_strtod_l+0x420>
 8018b88:	4b9e      	ldr	r3, [pc, #632]	@ (8018e04 <_strtod_l+0xb1c>)
 8018b8a:	ea09 0303 	and.w	r3, r9, r3
 8018b8e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8018b92:	f04f 0a00 	mov.w	sl, #0
 8018b96:	9b06      	ldr	r3, [sp, #24]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d1b0      	bne.n	8018afe <_strtod_l+0x816>
 8018b9c:	e5bf      	b.n	801871e <_strtod_l+0x436>
 8018b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ba2:	e7e9      	b.n	8018b78 <_strtod_l+0x890>
 8018ba4:	460b      	mov	r3, r1
 8018ba6:	e7e7      	b.n	8018b78 <_strtod_l+0x890>
 8018ba8:	ea53 030a 	orrs.w	r3, r3, sl
 8018bac:	d099      	beq.n	8018ae2 <_strtod_l+0x7fa>
 8018bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018bb0:	b1c3      	cbz	r3, 8018be4 <_strtod_l+0x8fc>
 8018bb2:	ea13 0f09 	tst.w	r3, r9
 8018bb6:	d0ee      	beq.n	8018b96 <_strtod_l+0x8ae>
 8018bb8:	9a06      	ldr	r2, [sp, #24]
 8018bba:	4650      	mov	r0, sl
 8018bbc:	4659      	mov	r1, fp
 8018bbe:	f1b8 0f00 	cmp.w	r8, #0
 8018bc2:	d013      	beq.n	8018bec <_strtod_l+0x904>
 8018bc4:	f7ff fb76 	bl	80182b4 <sulp>
 8018bc8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8018bcc:	ec5b ab17 	vmov	sl, fp, d7
 8018bd0:	e7e1      	b.n	8018b96 <_strtod_l+0x8ae>
 8018bd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018bd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018bda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018bde:	f04f 3aff 	mov.w	sl, #4294967295
 8018be2:	e7d8      	b.n	8018b96 <_strtod_l+0x8ae>
 8018be4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018be6:	ea13 0f0a 	tst.w	r3, sl
 8018bea:	e7e4      	b.n	8018bb6 <_strtod_l+0x8ce>
 8018bec:	f7ff fb62 	bl	80182b4 <sulp>
 8018bf0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018bf4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bfc:	ec5b ab10 	vmov	sl, fp, d0
 8018c00:	d1c9      	bne.n	8018b96 <_strtod_l+0x8ae>
 8018c02:	e615      	b.n	8018830 <_strtod_l+0x548>
 8018c04:	4629      	mov	r1, r5
 8018c06:	4620      	mov	r0, r4
 8018c08:	f003 f90a 	bl	801be20 <__ratio>
 8018c0c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018c10:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c18:	d85d      	bhi.n	8018cd6 <_strtod_l+0x9ee>
 8018c1a:	f1b8 0f00 	cmp.w	r8, #0
 8018c1e:	d164      	bne.n	8018cea <_strtod_l+0xa02>
 8018c20:	f1ba 0f00 	cmp.w	sl, #0
 8018c24:	d14b      	bne.n	8018cbe <_strtod_l+0x9d6>
 8018c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018c2a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d160      	bne.n	8018cf4 <_strtod_l+0xa0c>
 8018c32:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8018c36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c3e:	d401      	bmi.n	8018c44 <_strtod_l+0x95c>
 8018c40:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018c44:	eeb1 ab48 	vneg.f64	d10, d8
 8018c48:	486e      	ldr	r0, [pc, #440]	@ (8018e04 <_strtod_l+0xb1c>)
 8018c4a:	4970      	ldr	r1, [pc, #448]	@ (8018e0c <_strtod_l+0xb24>)
 8018c4c:	ea09 0700 	and.w	r7, r9, r0
 8018c50:	428f      	cmp	r7, r1
 8018c52:	ec53 2b1a 	vmov	r2, r3, d10
 8018c56:	d17d      	bne.n	8018d54 <_strtod_l+0xa6c>
 8018c58:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8018c5c:	ec4b ab1c 	vmov	d12, sl, fp
 8018c60:	eeb0 0b4c 	vmov.f64	d0, d12
 8018c64:	f003 f814 	bl	801bc90 <__ulp>
 8018c68:	4866      	ldr	r0, [pc, #408]	@ (8018e04 <_strtod_l+0xb1c>)
 8018c6a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8018c6e:	ee1c 3a90 	vmov	r3, s25
 8018c72:	4a67      	ldr	r2, [pc, #412]	@ (8018e10 <_strtod_l+0xb28>)
 8018c74:	ea03 0100 	and.w	r1, r3, r0
 8018c78:	4291      	cmp	r1, r2
 8018c7a:	ec5b ab1c 	vmov	sl, fp, d12
 8018c7e:	d93c      	bls.n	8018cfa <_strtod_l+0xa12>
 8018c80:	ee19 2a90 	vmov	r2, s19
 8018c84:	4b60      	ldr	r3, [pc, #384]	@ (8018e08 <_strtod_l+0xb20>)
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d104      	bne.n	8018c94 <_strtod_l+0x9ac>
 8018c8a:	ee19 3a10 	vmov	r3, s18
 8018c8e:	3301      	adds	r3, #1
 8018c90:	f43f ad3a 	beq.w	8018708 <_strtod_l+0x420>
 8018c94:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8018e08 <_strtod_l+0xb20>
 8018c98:	f04f 3aff 	mov.w	sl, #4294967295
 8018c9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018c9e:	9805      	ldr	r0, [sp, #20]
 8018ca0:	f002 fcc2 	bl	801b628 <_Bfree>
 8018ca4:	9805      	ldr	r0, [sp, #20]
 8018ca6:	4631      	mov	r1, r6
 8018ca8:	f002 fcbe 	bl	801b628 <_Bfree>
 8018cac:	9805      	ldr	r0, [sp, #20]
 8018cae:	4629      	mov	r1, r5
 8018cb0:	f002 fcba 	bl	801b628 <_Bfree>
 8018cb4:	9805      	ldr	r0, [sp, #20]
 8018cb6:	4621      	mov	r1, r4
 8018cb8:	f002 fcb6 	bl	801b628 <_Bfree>
 8018cbc:	e625      	b.n	801890a <_strtod_l+0x622>
 8018cbe:	f1ba 0f01 	cmp.w	sl, #1
 8018cc2:	d103      	bne.n	8018ccc <_strtod_l+0x9e4>
 8018cc4:	f1bb 0f00 	cmp.w	fp, #0
 8018cc8:	f43f adb2 	beq.w	8018830 <_strtod_l+0x548>
 8018ccc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018cd0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018cd4:	e7b8      	b.n	8018c48 <_strtod_l+0x960>
 8018cd6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018cda:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018cde:	f1b8 0f00 	cmp.w	r8, #0
 8018ce2:	d0af      	beq.n	8018c44 <_strtod_l+0x95c>
 8018ce4:	eeb0 ab48 	vmov.f64	d10, d8
 8018ce8:	e7ae      	b.n	8018c48 <_strtod_l+0x960>
 8018cea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8018cee:	eeb0 8b4a 	vmov.f64	d8, d10
 8018cf2:	e7a9      	b.n	8018c48 <_strtod_l+0x960>
 8018cf4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018cf8:	e7a6      	b.n	8018c48 <_strtod_l+0x960>
 8018cfa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018cfe:	9b06      	ldr	r3, [sp, #24]
 8018d00:	46d9      	mov	r9, fp
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d1ca      	bne.n	8018c9c <_strtod_l+0x9b4>
 8018d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018d0a:	0d1b      	lsrs	r3, r3, #20
 8018d0c:	051b      	lsls	r3, r3, #20
 8018d0e:	429f      	cmp	r7, r3
 8018d10:	d1c4      	bne.n	8018c9c <_strtod_l+0x9b4>
 8018d12:	ec51 0b18 	vmov	r0, r1, d8
 8018d16:	f7e7 fd27 	bl	8000768 <__aeabi_d2lz>
 8018d1a:	f7e7 fcdf 	bl	80006dc <__aeabi_l2d>
 8018d1e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8018d22:	ec41 0b17 	vmov	d7, r0, r1
 8018d26:	ea49 090a 	orr.w	r9, r9, sl
 8018d2a:	ea59 0908 	orrs.w	r9, r9, r8
 8018d2e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018d32:	d03c      	beq.n	8018dae <_strtod_l+0xac6>
 8018d34:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018de8 <_strtod_l+0xb00>
 8018d38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d40:	f53f aced 	bmi.w	801871e <_strtod_l+0x436>
 8018d44:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018df0 <_strtod_l+0xb08>
 8018d48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d50:	dda4      	ble.n	8018c9c <_strtod_l+0x9b4>
 8018d52:	e4e4      	b.n	801871e <_strtod_l+0x436>
 8018d54:	9906      	ldr	r1, [sp, #24]
 8018d56:	b1e1      	cbz	r1, 8018d92 <_strtod_l+0xaaa>
 8018d58:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8018d5c:	d819      	bhi.n	8018d92 <_strtod_l+0xaaa>
 8018d5e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d66:	d811      	bhi.n	8018d8c <_strtod_l+0xaa4>
 8018d68:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018d6c:	ee18 3a10 	vmov	r3, s16
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	bf38      	it	cc
 8018d74:	2301      	movcc	r3, #1
 8018d76:	ee08 3a10 	vmov	s16, r3
 8018d7a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018d7e:	f1b8 0f00 	cmp.w	r8, #0
 8018d82:	d111      	bne.n	8018da8 <_strtod_l+0xac0>
 8018d84:	eeb1 7b48 	vneg.f64	d7, d8
 8018d88:	ec53 2b17 	vmov	r2, r3, d7
 8018d8c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018d90:	1bcb      	subs	r3, r1, r7
 8018d92:	eeb0 0b49 	vmov.f64	d0, d9
 8018d96:	ec43 2b1a 	vmov	d10, r2, r3
 8018d9a:	f002 ff79 	bl	801bc90 <__ulp>
 8018d9e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018da2:	ec5b ab19 	vmov	sl, fp, d9
 8018da6:	e7aa      	b.n	8018cfe <_strtod_l+0xa16>
 8018da8:	eeb0 7b48 	vmov.f64	d7, d8
 8018dac:	e7ec      	b.n	8018d88 <_strtod_l+0xaa0>
 8018dae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8018df8 <_strtod_l+0xb10>
 8018db2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dba:	f57f af6f 	bpl.w	8018c9c <_strtod_l+0x9b4>
 8018dbe:	e4ae      	b.n	801871e <_strtod_l+0x436>
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	9308      	str	r3, [sp, #32]
 8018dc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018dc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018dc8:	6013      	str	r3, [r2, #0]
 8018dca:	f7ff bacc 	b.w	8018366 <_strtod_l+0x7e>
 8018dce:	2a65      	cmp	r2, #101	@ 0x65
 8018dd0:	f43f abbc 	beq.w	801854c <_strtod_l+0x264>
 8018dd4:	2a45      	cmp	r2, #69	@ 0x45
 8018dd6:	f43f abb9 	beq.w	801854c <_strtod_l+0x264>
 8018dda:	2301      	movs	r3, #1
 8018ddc:	9306      	str	r3, [sp, #24]
 8018dde:	f7ff bbf0 	b.w	80185c2 <_strtod_l+0x2da>
 8018de2:	bf00      	nop
 8018de4:	f3af 8000 	nop.w
 8018de8:	94a03595 	.word	0x94a03595
 8018dec:	3fdfffff 	.word	0x3fdfffff
 8018df0:	35afe535 	.word	0x35afe535
 8018df4:	3fe00000 	.word	0x3fe00000
 8018df8:	94a03595 	.word	0x94a03595
 8018dfc:	3fcfffff 	.word	0x3fcfffff
 8018e00:	000fffff 	.word	0x000fffff
 8018e04:	7ff00000 	.word	0x7ff00000
 8018e08:	7fefffff 	.word	0x7fefffff
 8018e0c:	7fe00000 	.word	0x7fe00000
 8018e10:	7c9fffff 	.word	0x7c9fffff

08018e14 <_strtod_r>:
 8018e14:	4b01      	ldr	r3, [pc, #4]	@ (8018e1c <_strtod_r+0x8>)
 8018e16:	f7ff ba67 	b.w	80182e8 <_strtod_l>
 8018e1a:	bf00      	nop
 8018e1c:	24000034 	.word	0x24000034

08018e20 <strtof>:
 8018e20:	b510      	push	{r4, lr}
 8018e22:	4c21      	ldr	r4, [pc, #132]	@ (8018ea8 <strtof+0x88>)
 8018e24:	4b21      	ldr	r3, [pc, #132]	@ (8018eac <strtof+0x8c>)
 8018e26:	460a      	mov	r2, r1
 8018e28:	4601      	mov	r1, r0
 8018e2a:	6820      	ldr	r0, [r4, #0]
 8018e2c:	f7ff fa5c 	bl	80182e8 <_strtod_l>
 8018e30:	eeb4 0b40 	vcmp.f64	d0, d0
 8018e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e38:	eeb0 7b40 	vmov.f64	d7, d0
 8018e3c:	d70d      	bvc.n	8018e5a <strtof+0x3a>
 8018e3e:	ee17 3a90 	vmov	r3, s15
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	481a      	ldr	r0, [pc, #104]	@ (8018eb0 <strtof+0x90>)
 8018e46:	da04      	bge.n	8018e52 <strtof+0x32>
 8018e48:	f001 fa26 	bl	801a298 <nanf>
 8018e4c:	eeb1 0a40 	vneg.f32	s0, s0
 8018e50:	bd10      	pop	{r4, pc}
 8018e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e56:	f001 ba1f 	b.w	801a298 <nanf>
 8018e5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018e5e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8018eb4 <strtof+0x94>
 8018e62:	eeb0 6ac0 	vabs.f32	s12, s0
 8018e66:	eeb4 6a66 	vcmp.f32	s12, s13
 8018e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6e:	dd08      	ble.n	8018e82 <strtof+0x62>
 8018e70:	eeb0 6bc7 	vabs.f64	d6, d7
 8018e74:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8018ea0 <strtof+0x80>
 8018e78:	eeb4 6b45 	vcmp.f64	d6, d5
 8018e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e80:	dd0a      	ble.n	8018e98 <strtof+0x78>
 8018e82:	ee10 3a10 	vmov	r3, s0
 8018e86:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018e8a:	d1e1      	bne.n	8018e50 <strtof+0x30>
 8018e8c:	ee17 2a90 	vmov	r2, s15
 8018e90:	4b09      	ldr	r3, [pc, #36]	@ (8018eb8 <strtof+0x98>)
 8018e92:	4013      	ands	r3, r2
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d0db      	beq.n	8018e50 <strtof+0x30>
 8018e98:	6823      	ldr	r3, [r4, #0]
 8018e9a:	2222      	movs	r2, #34	@ 0x22
 8018e9c:	601a      	str	r2, [r3, #0]
 8018e9e:	e7d7      	b.n	8018e50 <strtof+0x30>
 8018ea0:	ffffffff 	.word	0xffffffff
 8018ea4:	7fefffff 	.word	0x7fefffff
 8018ea8:	240001a0 	.word	0x240001a0
 8018eac:	24000034 	.word	0x24000034
 8018eb0:	0803bc54 	.word	0x0803bc54
 8018eb4:	7f7fffff 	.word	0x7f7fffff
 8018eb8:	7ff00000 	.word	0x7ff00000

08018ebc <_strtol_l.constprop.0>:
 8018ebc:	2b24      	cmp	r3, #36	@ 0x24
 8018ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec2:	4686      	mov	lr, r0
 8018ec4:	4690      	mov	r8, r2
 8018ec6:	d801      	bhi.n	8018ecc <_strtol_l.constprop.0+0x10>
 8018ec8:	2b01      	cmp	r3, #1
 8018eca:	d106      	bne.n	8018eda <_strtol_l.constprop.0+0x1e>
 8018ecc:	f001 f9a0 	bl	801a210 <__errno>
 8018ed0:	2316      	movs	r3, #22
 8018ed2:	6003      	str	r3, [r0, #0]
 8018ed4:	2000      	movs	r0, #0
 8018ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eda:	4834      	ldr	r0, [pc, #208]	@ (8018fac <_strtol_l.constprop.0+0xf0>)
 8018edc:	460d      	mov	r5, r1
 8018ede:	462a      	mov	r2, r5
 8018ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ee4:	5d06      	ldrb	r6, [r0, r4]
 8018ee6:	f016 0608 	ands.w	r6, r6, #8
 8018eea:	d1f8      	bne.n	8018ede <_strtol_l.constprop.0+0x22>
 8018eec:	2c2d      	cmp	r4, #45	@ 0x2d
 8018eee:	d12d      	bne.n	8018f4c <_strtol_l.constprop.0+0x90>
 8018ef0:	782c      	ldrb	r4, [r5, #0]
 8018ef2:	2601      	movs	r6, #1
 8018ef4:	1c95      	adds	r5, r2, #2
 8018ef6:	f033 0210 	bics.w	r2, r3, #16
 8018efa:	d109      	bne.n	8018f10 <_strtol_l.constprop.0+0x54>
 8018efc:	2c30      	cmp	r4, #48	@ 0x30
 8018efe:	d12a      	bne.n	8018f56 <_strtol_l.constprop.0+0x9a>
 8018f00:	782a      	ldrb	r2, [r5, #0]
 8018f02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018f06:	2a58      	cmp	r2, #88	@ 0x58
 8018f08:	d125      	bne.n	8018f56 <_strtol_l.constprop.0+0x9a>
 8018f0a:	786c      	ldrb	r4, [r5, #1]
 8018f0c:	2310      	movs	r3, #16
 8018f0e:	3502      	adds	r5, #2
 8018f10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018f14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018f18:	2200      	movs	r2, #0
 8018f1a:	fbbc f9f3 	udiv	r9, ip, r3
 8018f1e:	4610      	mov	r0, r2
 8018f20:	fb03 ca19 	mls	sl, r3, r9, ip
 8018f24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018f28:	2f09      	cmp	r7, #9
 8018f2a:	d81b      	bhi.n	8018f64 <_strtol_l.constprop.0+0xa8>
 8018f2c:	463c      	mov	r4, r7
 8018f2e:	42a3      	cmp	r3, r4
 8018f30:	dd27      	ble.n	8018f82 <_strtol_l.constprop.0+0xc6>
 8018f32:	1c57      	adds	r7, r2, #1
 8018f34:	d007      	beq.n	8018f46 <_strtol_l.constprop.0+0x8a>
 8018f36:	4581      	cmp	r9, r0
 8018f38:	d320      	bcc.n	8018f7c <_strtol_l.constprop.0+0xc0>
 8018f3a:	d101      	bne.n	8018f40 <_strtol_l.constprop.0+0x84>
 8018f3c:	45a2      	cmp	sl, r4
 8018f3e:	db1d      	blt.n	8018f7c <_strtol_l.constprop.0+0xc0>
 8018f40:	fb00 4003 	mla	r0, r0, r3, r4
 8018f44:	2201      	movs	r2, #1
 8018f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018f4a:	e7eb      	b.n	8018f24 <_strtol_l.constprop.0+0x68>
 8018f4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8018f4e:	bf04      	itt	eq
 8018f50:	782c      	ldrbeq	r4, [r5, #0]
 8018f52:	1c95      	addeq	r5, r2, #2
 8018f54:	e7cf      	b.n	8018ef6 <_strtol_l.constprop.0+0x3a>
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d1da      	bne.n	8018f10 <_strtol_l.constprop.0+0x54>
 8018f5a:	2c30      	cmp	r4, #48	@ 0x30
 8018f5c:	bf0c      	ite	eq
 8018f5e:	2308      	moveq	r3, #8
 8018f60:	230a      	movne	r3, #10
 8018f62:	e7d5      	b.n	8018f10 <_strtol_l.constprop.0+0x54>
 8018f64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018f68:	2f19      	cmp	r7, #25
 8018f6a:	d801      	bhi.n	8018f70 <_strtol_l.constprop.0+0xb4>
 8018f6c:	3c37      	subs	r4, #55	@ 0x37
 8018f6e:	e7de      	b.n	8018f2e <_strtol_l.constprop.0+0x72>
 8018f70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018f74:	2f19      	cmp	r7, #25
 8018f76:	d804      	bhi.n	8018f82 <_strtol_l.constprop.0+0xc6>
 8018f78:	3c57      	subs	r4, #87	@ 0x57
 8018f7a:	e7d8      	b.n	8018f2e <_strtol_l.constprop.0+0x72>
 8018f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8018f80:	e7e1      	b.n	8018f46 <_strtol_l.constprop.0+0x8a>
 8018f82:	1c53      	adds	r3, r2, #1
 8018f84:	d108      	bne.n	8018f98 <_strtol_l.constprop.0+0xdc>
 8018f86:	2322      	movs	r3, #34	@ 0x22
 8018f88:	f8ce 3000 	str.w	r3, [lr]
 8018f8c:	4660      	mov	r0, ip
 8018f8e:	f1b8 0f00 	cmp.w	r8, #0
 8018f92:	d0a0      	beq.n	8018ed6 <_strtol_l.constprop.0+0x1a>
 8018f94:	1e69      	subs	r1, r5, #1
 8018f96:	e006      	b.n	8018fa6 <_strtol_l.constprop.0+0xea>
 8018f98:	b106      	cbz	r6, 8018f9c <_strtol_l.constprop.0+0xe0>
 8018f9a:	4240      	negs	r0, r0
 8018f9c:	f1b8 0f00 	cmp.w	r8, #0
 8018fa0:	d099      	beq.n	8018ed6 <_strtol_l.constprop.0+0x1a>
 8018fa2:	2a00      	cmp	r2, #0
 8018fa4:	d1f6      	bne.n	8018f94 <_strtol_l.constprop.0+0xd8>
 8018fa6:	f8c8 1000 	str.w	r1, [r8]
 8018faa:	e794      	b.n	8018ed6 <_strtol_l.constprop.0+0x1a>
 8018fac:	0803b881 	.word	0x0803b881

08018fb0 <_strtol_r>:
 8018fb0:	f7ff bf84 	b.w	8018ebc <_strtol_l.constprop.0>

08018fb4 <strtol>:
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	460a      	mov	r2, r1
 8018fb8:	4601      	mov	r1, r0
 8018fba:	4802      	ldr	r0, [pc, #8]	@ (8018fc4 <strtol+0x10>)
 8018fbc:	6800      	ldr	r0, [r0, #0]
 8018fbe:	f7ff bf7d 	b.w	8018ebc <_strtol_l.constprop.0>
 8018fc2:	bf00      	nop
 8018fc4:	240001a0 	.word	0x240001a0

08018fc8 <__cvt>:
 8018fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fca:	ed2d 8b02 	vpush	{d8}
 8018fce:	eeb0 8b40 	vmov.f64	d8, d0
 8018fd2:	b085      	sub	sp, #20
 8018fd4:	4617      	mov	r7, r2
 8018fd6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018fda:	ee18 2a90 	vmov	r2, s17
 8018fde:	f025 0520 	bic.w	r5, r5, #32
 8018fe2:	2a00      	cmp	r2, #0
 8018fe4:	bfb6      	itet	lt
 8018fe6:	222d      	movlt	r2, #45	@ 0x2d
 8018fe8:	2200      	movge	r2, #0
 8018fea:	eeb1 8b40 	vneglt.f64	d8, d0
 8018fee:	2d46      	cmp	r5, #70	@ 0x46
 8018ff0:	460c      	mov	r4, r1
 8018ff2:	701a      	strb	r2, [r3, #0]
 8018ff4:	d004      	beq.n	8019000 <__cvt+0x38>
 8018ff6:	2d45      	cmp	r5, #69	@ 0x45
 8018ff8:	d100      	bne.n	8018ffc <__cvt+0x34>
 8018ffa:	3401      	adds	r4, #1
 8018ffc:	2102      	movs	r1, #2
 8018ffe:	e000      	b.n	8019002 <__cvt+0x3a>
 8019000:	2103      	movs	r1, #3
 8019002:	ab03      	add	r3, sp, #12
 8019004:	9301      	str	r3, [sp, #4]
 8019006:	ab02      	add	r3, sp, #8
 8019008:	9300      	str	r3, [sp, #0]
 801900a:	4622      	mov	r2, r4
 801900c:	4633      	mov	r3, r6
 801900e:	eeb0 0b48 	vmov.f64	d0, d8
 8019012:	f001 f9dd 	bl	801a3d0 <_dtoa_r>
 8019016:	2d47      	cmp	r5, #71	@ 0x47
 8019018:	d114      	bne.n	8019044 <__cvt+0x7c>
 801901a:	07fb      	lsls	r3, r7, #31
 801901c:	d50a      	bpl.n	8019034 <__cvt+0x6c>
 801901e:	1902      	adds	r2, r0, r4
 8019020:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019028:	bf08      	it	eq
 801902a:	9203      	streq	r2, [sp, #12]
 801902c:	2130      	movs	r1, #48	@ 0x30
 801902e:	9b03      	ldr	r3, [sp, #12]
 8019030:	4293      	cmp	r3, r2
 8019032:	d319      	bcc.n	8019068 <__cvt+0xa0>
 8019034:	9b03      	ldr	r3, [sp, #12]
 8019036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019038:	1a1b      	subs	r3, r3, r0
 801903a:	6013      	str	r3, [r2, #0]
 801903c:	b005      	add	sp, #20
 801903e:	ecbd 8b02 	vpop	{d8}
 8019042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019044:	2d46      	cmp	r5, #70	@ 0x46
 8019046:	eb00 0204 	add.w	r2, r0, r4
 801904a:	d1e9      	bne.n	8019020 <__cvt+0x58>
 801904c:	7803      	ldrb	r3, [r0, #0]
 801904e:	2b30      	cmp	r3, #48	@ 0x30
 8019050:	d107      	bne.n	8019062 <__cvt+0x9a>
 8019052:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905a:	bf1c      	itt	ne
 801905c:	f1c4 0401 	rsbne	r4, r4, #1
 8019060:	6034      	strne	r4, [r6, #0]
 8019062:	6833      	ldr	r3, [r6, #0]
 8019064:	441a      	add	r2, r3
 8019066:	e7db      	b.n	8019020 <__cvt+0x58>
 8019068:	1c5c      	adds	r4, r3, #1
 801906a:	9403      	str	r4, [sp, #12]
 801906c:	7019      	strb	r1, [r3, #0]
 801906e:	e7de      	b.n	801902e <__cvt+0x66>

08019070 <__exponent>:
 8019070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019072:	2900      	cmp	r1, #0
 8019074:	bfba      	itte	lt
 8019076:	4249      	neglt	r1, r1
 8019078:	232d      	movlt	r3, #45	@ 0x2d
 801907a:	232b      	movge	r3, #43	@ 0x2b
 801907c:	2909      	cmp	r1, #9
 801907e:	7002      	strb	r2, [r0, #0]
 8019080:	7043      	strb	r3, [r0, #1]
 8019082:	dd29      	ble.n	80190d8 <__exponent+0x68>
 8019084:	f10d 0307 	add.w	r3, sp, #7
 8019088:	461d      	mov	r5, r3
 801908a:	270a      	movs	r7, #10
 801908c:	461a      	mov	r2, r3
 801908e:	fbb1 f6f7 	udiv	r6, r1, r7
 8019092:	fb07 1416 	mls	r4, r7, r6, r1
 8019096:	3430      	adds	r4, #48	@ 0x30
 8019098:	f802 4c01 	strb.w	r4, [r2, #-1]
 801909c:	460c      	mov	r4, r1
 801909e:	2c63      	cmp	r4, #99	@ 0x63
 80190a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80190a4:	4631      	mov	r1, r6
 80190a6:	dcf1      	bgt.n	801908c <__exponent+0x1c>
 80190a8:	3130      	adds	r1, #48	@ 0x30
 80190aa:	1e94      	subs	r4, r2, #2
 80190ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80190b0:	1c41      	adds	r1, r0, #1
 80190b2:	4623      	mov	r3, r4
 80190b4:	42ab      	cmp	r3, r5
 80190b6:	d30a      	bcc.n	80190ce <__exponent+0x5e>
 80190b8:	f10d 0309 	add.w	r3, sp, #9
 80190bc:	1a9b      	subs	r3, r3, r2
 80190be:	42ac      	cmp	r4, r5
 80190c0:	bf88      	it	hi
 80190c2:	2300      	movhi	r3, #0
 80190c4:	3302      	adds	r3, #2
 80190c6:	4403      	add	r3, r0
 80190c8:	1a18      	subs	r0, r3, r0
 80190ca:	b003      	add	sp, #12
 80190cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80190d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80190d6:	e7ed      	b.n	80190b4 <__exponent+0x44>
 80190d8:	2330      	movs	r3, #48	@ 0x30
 80190da:	3130      	adds	r1, #48	@ 0x30
 80190dc:	7083      	strb	r3, [r0, #2]
 80190de:	70c1      	strb	r1, [r0, #3]
 80190e0:	1d03      	adds	r3, r0, #4
 80190e2:	e7f1      	b.n	80190c8 <__exponent+0x58>
 80190e4:	0000      	movs	r0, r0
	...

080190e8 <_printf_float>:
 80190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ec:	b08d      	sub	sp, #52	@ 0x34
 80190ee:	460c      	mov	r4, r1
 80190f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80190f4:	4616      	mov	r6, r2
 80190f6:	461f      	mov	r7, r3
 80190f8:	4605      	mov	r5, r0
 80190fa:	f001 f82f 	bl	801a15c <_localeconv_r>
 80190fe:	f8d0 b000 	ldr.w	fp, [r0]
 8019102:	4658      	mov	r0, fp
 8019104:	f7e7 f954 	bl	80003b0 <strlen>
 8019108:	2300      	movs	r3, #0
 801910a:	930a      	str	r3, [sp, #40]	@ 0x28
 801910c:	f8d8 3000 	ldr.w	r3, [r8]
 8019110:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019114:	6822      	ldr	r2, [r4, #0]
 8019116:	9005      	str	r0, [sp, #20]
 8019118:	3307      	adds	r3, #7
 801911a:	f023 0307 	bic.w	r3, r3, #7
 801911e:	f103 0108 	add.w	r1, r3, #8
 8019122:	f8c8 1000 	str.w	r1, [r8]
 8019126:	ed93 0b00 	vldr	d0, [r3]
 801912a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019388 <_printf_float+0x2a0>
 801912e:	eeb0 7bc0 	vabs.f64	d7, d0
 8019132:	eeb4 7b46 	vcmp.f64	d7, d6
 8019136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801913a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801913e:	dd24      	ble.n	801918a <_printf_float+0xa2>
 8019140:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019148:	d502      	bpl.n	8019150 <_printf_float+0x68>
 801914a:	232d      	movs	r3, #45	@ 0x2d
 801914c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019150:	498f      	ldr	r1, [pc, #572]	@ (8019390 <_printf_float+0x2a8>)
 8019152:	4b90      	ldr	r3, [pc, #576]	@ (8019394 <_printf_float+0x2ac>)
 8019154:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019158:	bf94      	ite	ls
 801915a:	4688      	movls	r8, r1
 801915c:	4698      	movhi	r8, r3
 801915e:	f022 0204 	bic.w	r2, r2, #4
 8019162:	2303      	movs	r3, #3
 8019164:	6123      	str	r3, [r4, #16]
 8019166:	6022      	str	r2, [r4, #0]
 8019168:	f04f 0a00 	mov.w	sl, #0
 801916c:	9700      	str	r7, [sp, #0]
 801916e:	4633      	mov	r3, r6
 8019170:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019172:	4621      	mov	r1, r4
 8019174:	4628      	mov	r0, r5
 8019176:	f000 f9d1 	bl	801951c <_printf_common>
 801917a:	3001      	adds	r0, #1
 801917c:	f040 8089 	bne.w	8019292 <_printf_float+0x1aa>
 8019180:	f04f 30ff 	mov.w	r0, #4294967295
 8019184:	b00d      	add	sp, #52	@ 0x34
 8019186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801918a:	eeb4 0b40 	vcmp.f64	d0, d0
 801918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019192:	d709      	bvc.n	80191a8 <_printf_float+0xc0>
 8019194:	ee10 3a90 	vmov	r3, s1
 8019198:	2b00      	cmp	r3, #0
 801919a:	bfbc      	itt	lt
 801919c:	232d      	movlt	r3, #45	@ 0x2d
 801919e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80191a2:	497d      	ldr	r1, [pc, #500]	@ (8019398 <_printf_float+0x2b0>)
 80191a4:	4b7d      	ldr	r3, [pc, #500]	@ (801939c <_printf_float+0x2b4>)
 80191a6:	e7d5      	b.n	8019154 <_printf_float+0x6c>
 80191a8:	6863      	ldr	r3, [r4, #4]
 80191aa:	1c59      	adds	r1, r3, #1
 80191ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80191b0:	d139      	bne.n	8019226 <_printf_float+0x13e>
 80191b2:	2306      	movs	r3, #6
 80191b4:	6063      	str	r3, [r4, #4]
 80191b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80191ba:	2300      	movs	r3, #0
 80191bc:	6022      	str	r2, [r4, #0]
 80191be:	9303      	str	r3, [sp, #12]
 80191c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80191c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80191c6:	ab09      	add	r3, sp, #36	@ 0x24
 80191c8:	9300      	str	r3, [sp, #0]
 80191ca:	6861      	ldr	r1, [r4, #4]
 80191cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80191d0:	4628      	mov	r0, r5
 80191d2:	f7ff fef9 	bl	8018fc8 <__cvt>
 80191d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80191da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80191dc:	4680      	mov	r8, r0
 80191de:	d129      	bne.n	8019234 <_printf_float+0x14c>
 80191e0:	1cc8      	adds	r0, r1, #3
 80191e2:	db02      	blt.n	80191ea <_printf_float+0x102>
 80191e4:	6863      	ldr	r3, [r4, #4]
 80191e6:	4299      	cmp	r1, r3
 80191e8:	dd41      	ble.n	801926e <_printf_float+0x186>
 80191ea:	f1a9 0902 	sub.w	r9, r9, #2
 80191ee:	fa5f f989 	uxtb.w	r9, r9
 80191f2:	3901      	subs	r1, #1
 80191f4:	464a      	mov	r2, r9
 80191f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80191fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80191fc:	f7ff ff38 	bl	8019070 <__exponent>
 8019200:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019202:	1813      	adds	r3, r2, r0
 8019204:	2a01      	cmp	r2, #1
 8019206:	4682      	mov	sl, r0
 8019208:	6123      	str	r3, [r4, #16]
 801920a:	dc02      	bgt.n	8019212 <_printf_float+0x12a>
 801920c:	6822      	ldr	r2, [r4, #0]
 801920e:	07d2      	lsls	r2, r2, #31
 8019210:	d501      	bpl.n	8019216 <_printf_float+0x12e>
 8019212:	3301      	adds	r3, #1
 8019214:	6123      	str	r3, [r4, #16]
 8019216:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801921a:	2b00      	cmp	r3, #0
 801921c:	d0a6      	beq.n	801916c <_printf_float+0x84>
 801921e:	232d      	movs	r3, #45	@ 0x2d
 8019220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019224:	e7a2      	b.n	801916c <_printf_float+0x84>
 8019226:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801922a:	d1c4      	bne.n	80191b6 <_printf_float+0xce>
 801922c:	2b00      	cmp	r3, #0
 801922e:	d1c2      	bne.n	80191b6 <_printf_float+0xce>
 8019230:	2301      	movs	r3, #1
 8019232:	e7bf      	b.n	80191b4 <_printf_float+0xcc>
 8019234:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019238:	d9db      	bls.n	80191f2 <_printf_float+0x10a>
 801923a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801923e:	d118      	bne.n	8019272 <_printf_float+0x18a>
 8019240:	2900      	cmp	r1, #0
 8019242:	6863      	ldr	r3, [r4, #4]
 8019244:	dd0b      	ble.n	801925e <_printf_float+0x176>
 8019246:	6121      	str	r1, [r4, #16]
 8019248:	b913      	cbnz	r3, 8019250 <_printf_float+0x168>
 801924a:	6822      	ldr	r2, [r4, #0]
 801924c:	07d0      	lsls	r0, r2, #31
 801924e:	d502      	bpl.n	8019256 <_printf_float+0x16e>
 8019250:	3301      	adds	r3, #1
 8019252:	440b      	add	r3, r1
 8019254:	6123      	str	r3, [r4, #16]
 8019256:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019258:	f04f 0a00 	mov.w	sl, #0
 801925c:	e7db      	b.n	8019216 <_printf_float+0x12e>
 801925e:	b913      	cbnz	r3, 8019266 <_printf_float+0x17e>
 8019260:	6822      	ldr	r2, [r4, #0]
 8019262:	07d2      	lsls	r2, r2, #31
 8019264:	d501      	bpl.n	801926a <_printf_float+0x182>
 8019266:	3302      	adds	r3, #2
 8019268:	e7f4      	b.n	8019254 <_printf_float+0x16c>
 801926a:	2301      	movs	r3, #1
 801926c:	e7f2      	b.n	8019254 <_printf_float+0x16c>
 801926e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8019272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019274:	4299      	cmp	r1, r3
 8019276:	db05      	blt.n	8019284 <_printf_float+0x19c>
 8019278:	6823      	ldr	r3, [r4, #0]
 801927a:	6121      	str	r1, [r4, #16]
 801927c:	07d8      	lsls	r0, r3, #31
 801927e:	d5ea      	bpl.n	8019256 <_printf_float+0x16e>
 8019280:	1c4b      	adds	r3, r1, #1
 8019282:	e7e7      	b.n	8019254 <_printf_float+0x16c>
 8019284:	2900      	cmp	r1, #0
 8019286:	bfd4      	ite	le
 8019288:	f1c1 0202 	rsble	r2, r1, #2
 801928c:	2201      	movgt	r2, #1
 801928e:	4413      	add	r3, r2
 8019290:	e7e0      	b.n	8019254 <_printf_float+0x16c>
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	055a      	lsls	r2, r3, #21
 8019296:	d407      	bmi.n	80192a8 <_printf_float+0x1c0>
 8019298:	6923      	ldr	r3, [r4, #16]
 801929a:	4642      	mov	r2, r8
 801929c:	4631      	mov	r1, r6
 801929e:	4628      	mov	r0, r5
 80192a0:	47b8      	blx	r7
 80192a2:	3001      	adds	r0, #1
 80192a4:	d12a      	bne.n	80192fc <_printf_float+0x214>
 80192a6:	e76b      	b.n	8019180 <_printf_float+0x98>
 80192a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80192ac:	f240 80e0 	bls.w	8019470 <_printf_float+0x388>
 80192b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80192b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80192b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192bc:	d133      	bne.n	8019326 <_printf_float+0x23e>
 80192be:	4a38      	ldr	r2, [pc, #224]	@ (80193a0 <_printf_float+0x2b8>)
 80192c0:	2301      	movs	r3, #1
 80192c2:	4631      	mov	r1, r6
 80192c4:	4628      	mov	r0, r5
 80192c6:	47b8      	blx	r7
 80192c8:	3001      	adds	r0, #1
 80192ca:	f43f af59 	beq.w	8019180 <_printf_float+0x98>
 80192ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80192d2:	4543      	cmp	r3, r8
 80192d4:	db02      	blt.n	80192dc <_printf_float+0x1f4>
 80192d6:	6823      	ldr	r3, [r4, #0]
 80192d8:	07d8      	lsls	r0, r3, #31
 80192da:	d50f      	bpl.n	80192fc <_printf_float+0x214>
 80192dc:	9b05      	ldr	r3, [sp, #20]
 80192de:	465a      	mov	r2, fp
 80192e0:	4631      	mov	r1, r6
 80192e2:	4628      	mov	r0, r5
 80192e4:	47b8      	blx	r7
 80192e6:	3001      	adds	r0, #1
 80192e8:	f43f af4a 	beq.w	8019180 <_printf_float+0x98>
 80192ec:	f04f 0900 	mov.w	r9, #0
 80192f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80192f4:	f104 0a1a 	add.w	sl, r4, #26
 80192f8:	45c8      	cmp	r8, r9
 80192fa:	dc09      	bgt.n	8019310 <_printf_float+0x228>
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	079b      	lsls	r3, r3, #30
 8019300:	f100 8107 	bmi.w	8019512 <_printf_float+0x42a>
 8019304:	68e0      	ldr	r0, [r4, #12]
 8019306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019308:	4298      	cmp	r0, r3
 801930a:	bfb8      	it	lt
 801930c:	4618      	movlt	r0, r3
 801930e:	e739      	b.n	8019184 <_printf_float+0x9c>
 8019310:	2301      	movs	r3, #1
 8019312:	4652      	mov	r2, sl
 8019314:	4631      	mov	r1, r6
 8019316:	4628      	mov	r0, r5
 8019318:	47b8      	blx	r7
 801931a:	3001      	adds	r0, #1
 801931c:	f43f af30 	beq.w	8019180 <_printf_float+0x98>
 8019320:	f109 0901 	add.w	r9, r9, #1
 8019324:	e7e8      	b.n	80192f8 <_printf_float+0x210>
 8019326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019328:	2b00      	cmp	r3, #0
 801932a:	dc3b      	bgt.n	80193a4 <_printf_float+0x2bc>
 801932c:	4a1c      	ldr	r2, [pc, #112]	@ (80193a0 <_printf_float+0x2b8>)
 801932e:	2301      	movs	r3, #1
 8019330:	4631      	mov	r1, r6
 8019332:	4628      	mov	r0, r5
 8019334:	47b8      	blx	r7
 8019336:	3001      	adds	r0, #1
 8019338:	f43f af22 	beq.w	8019180 <_printf_float+0x98>
 801933c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019340:	ea59 0303 	orrs.w	r3, r9, r3
 8019344:	d102      	bne.n	801934c <_printf_float+0x264>
 8019346:	6823      	ldr	r3, [r4, #0]
 8019348:	07d9      	lsls	r1, r3, #31
 801934a:	d5d7      	bpl.n	80192fc <_printf_float+0x214>
 801934c:	9b05      	ldr	r3, [sp, #20]
 801934e:	465a      	mov	r2, fp
 8019350:	4631      	mov	r1, r6
 8019352:	4628      	mov	r0, r5
 8019354:	47b8      	blx	r7
 8019356:	3001      	adds	r0, #1
 8019358:	f43f af12 	beq.w	8019180 <_printf_float+0x98>
 801935c:	f04f 0a00 	mov.w	sl, #0
 8019360:	f104 0b1a 	add.w	fp, r4, #26
 8019364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019366:	425b      	negs	r3, r3
 8019368:	4553      	cmp	r3, sl
 801936a:	dc01      	bgt.n	8019370 <_printf_float+0x288>
 801936c:	464b      	mov	r3, r9
 801936e:	e794      	b.n	801929a <_printf_float+0x1b2>
 8019370:	2301      	movs	r3, #1
 8019372:	465a      	mov	r2, fp
 8019374:	4631      	mov	r1, r6
 8019376:	4628      	mov	r0, r5
 8019378:	47b8      	blx	r7
 801937a:	3001      	adds	r0, #1
 801937c:	f43f af00 	beq.w	8019180 <_printf_float+0x98>
 8019380:	f10a 0a01 	add.w	sl, sl, #1
 8019384:	e7ee      	b.n	8019364 <_printf_float+0x27c>
 8019386:	bf00      	nop
 8019388:	ffffffff 	.word	0xffffffff
 801938c:	7fefffff 	.word	0x7fefffff
 8019390:	0803b981 	.word	0x0803b981
 8019394:	0803b985 	.word	0x0803b985
 8019398:	0803b989 	.word	0x0803b989
 801939c:	0803b98d 	.word	0x0803b98d
 80193a0:	0803b991 	.word	0x0803b991
 80193a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80193a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80193aa:	4553      	cmp	r3, sl
 80193ac:	bfa8      	it	ge
 80193ae:	4653      	movge	r3, sl
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	4699      	mov	r9, r3
 80193b4:	dc37      	bgt.n	8019426 <_printf_float+0x33e>
 80193b6:	2300      	movs	r3, #0
 80193b8:	9307      	str	r3, [sp, #28]
 80193ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80193be:	f104 021a 	add.w	r2, r4, #26
 80193c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80193c4:	9907      	ldr	r1, [sp, #28]
 80193c6:	9306      	str	r3, [sp, #24]
 80193c8:	eba3 0309 	sub.w	r3, r3, r9
 80193cc:	428b      	cmp	r3, r1
 80193ce:	dc31      	bgt.n	8019434 <_printf_float+0x34c>
 80193d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193d2:	459a      	cmp	sl, r3
 80193d4:	dc3b      	bgt.n	801944e <_printf_float+0x366>
 80193d6:	6823      	ldr	r3, [r4, #0]
 80193d8:	07da      	lsls	r2, r3, #31
 80193da:	d438      	bmi.n	801944e <_printf_float+0x366>
 80193dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193de:	ebaa 0903 	sub.w	r9, sl, r3
 80193e2:	9b06      	ldr	r3, [sp, #24]
 80193e4:	ebaa 0303 	sub.w	r3, sl, r3
 80193e8:	4599      	cmp	r9, r3
 80193ea:	bfa8      	it	ge
 80193ec:	4699      	movge	r9, r3
 80193ee:	f1b9 0f00 	cmp.w	r9, #0
 80193f2:	dc34      	bgt.n	801945e <_printf_float+0x376>
 80193f4:	f04f 0800 	mov.w	r8, #0
 80193f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80193fc:	f104 0b1a 	add.w	fp, r4, #26
 8019400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019402:	ebaa 0303 	sub.w	r3, sl, r3
 8019406:	eba3 0309 	sub.w	r3, r3, r9
 801940a:	4543      	cmp	r3, r8
 801940c:	f77f af76 	ble.w	80192fc <_printf_float+0x214>
 8019410:	2301      	movs	r3, #1
 8019412:	465a      	mov	r2, fp
 8019414:	4631      	mov	r1, r6
 8019416:	4628      	mov	r0, r5
 8019418:	47b8      	blx	r7
 801941a:	3001      	adds	r0, #1
 801941c:	f43f aeb0 	beq.w	8019180 <_printf_float+0x98>
 8019420:	f108 0801 	add.w	r8, r8, #1
 8019424:	e7ec      	b.n	8019400 <_printf_float+0x318>
 8019426:	4642      	mov	r2, r8
 8019428:	4631      	mov	r1, r6
 801942a:	4628      	mov	r0, r5
 801942c:	47b8      	blx	r7
 801942e:	3001      	adds	r0, #1
 8019430:	d1c1      	bne.n	80193b6 <_printf_float+0x2ce>
 8019432:	e6a5      	b.n	8019180 <_printf_float+0x98>
 8019434:	2301      	movs	r3, #1
 8019436:	4631      	mov	r1, r6
 8019438:	4628      	mov	r0, r5
 801943a:	9206      	str	r2, [sp, #24]
 801943c:	47b8      	blx	r7
 801943e:	3001      	adds	r0, #1
 8019440:	f43f ae9e 	beq.w	8019180 <_printf_float+0x98>
 8019444:	9b07      	ldr	r3, [sp, #28]
 8019446:	9a06      	ldr	r2, [sp, #24]
 8019448:	3301      	adds	r3, #1
 801944a:	9307      	str	r3, [sp, #28]
 801944c:	e7b9      	b.n	80193c2 <_printf_float+0x2da>
 801944e:	9b05      	ldr	r3, [sp, #20]
 8019450:	465a      	mov	r2, fp
 8019452:	4631      	mov	r1, r6
 8019454:	4628      	mov	r0, r5
 8019456:	47b8      	blx	r7
 8019458:	3001      	adds	r0, #1
 801945a:	d1bf      	bne.n	80193dc <_printf_float+0x2f4>
 801945c:	e690      	b.n	8019180 <_printf_float+0x98>
 801945e:	9a06      	ldr	r2, [sp, #24]
 8019460:	464b      	mov	r3, r9
 8019462:	4442      	add	r2, r8
 8019464:	4631      	mov	r1, r6
 8019466:	4628      	mov	r0, r5
 8019468:	47b8      	blx	r7
 801946a:	3001      	adds	r0, #1
 801946c:	d1c2      	bne.n	80193f4 <_printf_float+0x30c>
 801946e:	e687      	b.n	8019180 <_printf_float+0x98>
 8019470:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019474:	f1b9 0f01 	cmp.w	r9, #1
 8019478:	dc01      	bgt.n	801947e <_printf_float+0x396>
 801947a:	07db      	lsls	r3, r3, #31
 801947c:	d536      	bpl.n	80194ec <_printf_float+0x404>
 801947e:	2301      	movs	r3, #1
 8019480:	4642      	mov	r2, r8
 8019482:	4631      	mov	r1, r6
 8019484:	4628      	mov	r0, r5
 8019486:	47b8      	blx	r7
 8019488:	3001      	adds	r0, #1
 801948a:	f43f ae79 	beq.w	8019180 <_printf_float+0x98>
 801948e:	9b05      	ldr	r3, [sp, #20]
 8019490:	465a      	mov	r2, fp
 8019492:	4631      	mov	r1, r6
 8019494:	4628      	mov	r0, r5
 8019496:	47b8      	blx	r7
 8019498:	3001      	adds	r0, #1
 801949a:	f43f ae71 	beq.w	8019180 <_printf_float+0x98>
 801949e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80194a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80194a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80194ae:	d018      	beq.n	80194e2 <_printf_float+0x3fa>
 80194b0:	464b      	mov	r3, r9
 80194b2:	f108 0201 	add.w	r2, r8, #1
 80194b6:	4631      	mov	r1, r6
 80194b8:	4628      	mov	r0, r5
 80194ba:	47b8      	blx	r7
 80194bc:	3001      	adds	r0, #1
 80194be:	d10c      	bne.n	80194da <_printf_float+0x3f2>
 80194c0:	e65e      	b.n	8019180 <_printf_float+0x98>
 80194c2:	2301      	movs	r3, #1
 80194c4:	465a      	mov	r2, fp
 80194c6:	4631      	mov	r1, r6
 80194c8:	4628      	mov	r0, r5
 80194ca:	47b8      	blx	r7
 80194cc:	3001      	adds	r0, #1
 80194ce:	f43f ae57 	beq.w	8019180 <_printf_float+0x98>
 80194d2:	f108 0801 	add.w	r8, r8, #1
 80194d6:	45c8      	cmp	r8, r9
 80194d8:	dbf3      	blt.n	80194c2 <_printf_float+0x3da>
 80194da:	4653      	mov	r3, sl
 80194dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80194e0:	e6dc      	b.n	801929c <_printf_float+0x1b4>
 80194e2:	f04f 0800 	mov.w	r8, #0
 80194e6:	f104 0b1a 	add.w	fp, r4, #26
 80194ea:	e7f4      	b.n	80194d6 <_printf_float+0x3ee>
 80194ec:	2301      	movs	r3, #1
 80194ee:	4642      	mov	r2, r8
 80194f0:	e7e1      	b.n	80194b6 <_printf_float+0x3ce>
 80194f2:	2301      	movs	r3, #1
 80194f4:	464a      	mov	r2, r9
 80194f6:	4631      	mov	r1, r6
 80194f8:	4628      	mov	r0, r5
 80194fa:	47b8      	blx	r7
 80194fc:	3001      	adds	r0, #1
 80194fe:	f43f ae3f 	beq.w	8019180 <_printf_float+0x98>
 8019502:	f108 0801 	add.w	r8, r8, #1
 8019506:	68e3      	ldr	r3, [r4, #12]
 8019508:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801950a:	1a5b      	subs	r3, r3, r1
 801950c:	4543      	cmp	r3, r8
 801950e:	dcf0      	bgt.n	80194f2 <_printf_float+0x40a>
 8019510:	e6f8      	b.n	8019304 <_printf_float+0x21c>
 8019512:	f04f 0800 	mov.w	r8, #0
 8019516:	f104 0919 	add.w	r9, r4, #25
 801951a:	e7f4      	b.n	8019506 <_printf_float+0x41e>

0801951c <_printf_common>:
 801951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019520:	4616      	mov	r6, r2
 8019522:	4698      	mov	r8, r3
 8019524:	688a      	ldr	r2, [r1, #8]
 8019526:	690b      	ldr	r3, [r1, #16]
 8019528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801952c:	4293      	cmp	r3, r2
 801952e:	bfb8      	it	lt
 8019530:	4613      	movlt	r3, r2
 8019532:	6033      	str	r3, [r6, #0]
 8019534:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019538:	4607      	mov	r7, r0
 801953a:	460c      	mov	r4, r1
 801953c:	b10a      	cbz	r2, 8019542 <_printf_common+0x26>
 801953e:	3301      	adds	r3, #1
 8019540:	6033      	str	r3, [r6, #0]
 8019542:	6823      	ldr	r3, [r4, #0]
 8019544:	0699      	lsls	r1, r3, #26
 8019546:	bf42      	ittt	mi
 8019548:	6833      	ldrmi	r3, [r6, #0]
 801954a:	3302      	addmi	r3, #2
 801954c:	6033      	strmi	r3, [r6, #0]
 801954e:	6825      	ldr	r5, [r4, #0]
 8019550:	f015 0506 	ands.w	r5, r5, #6
 8019554:	d106      	bne.n	8019564 <_printf_common+0x48>
 8019556:	f104 0a19 	add.w	sl, r4, #25
 801955a:	68e3      	ldr	r3, [r4, #12]
 801955c:	6832      	ldr	r2, [r6, #0]
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	42ab      	cmp	r3, r5
 8019562:	dc26      	bgt.n	80195b2 <_printf_common+0x96>
 8019564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019568:	6822      	ldr	r2, [r4, #0]
 801956a:	3b00      	subs	r3, #0
 801956c:	bf18      	it	ne
 801956e:	2301      	movne	r3, #1
 8019570:	0692      	lsls	r2, r2, #26
 8019572:	d42b      	bmi.n	80195cc <_printf_common+0xb0>
 8019574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019578:	4641      	mov	r1, r8
 801957a:	4638      	mov	r0, r7
 801957c:	47c8      	blx	r9
 801957e:	3001      	adds	r0, #1
 8019580:	d01e      	beq.n	80195c0 <_printf_common+0xa4>
 8019582:	6823      	ldr	r3, [r4, #0]
 8019584:	6922      	ldr	r2, [r4, #16]
 8019586:	f003 0306 	and.w	r3, r3, #6
 801958a:	2b04      	cmp	r3, #4
 801958c:	bf02      	ittt	eq
 801958e:	68e5      	ldreq	r5, [r4, #12]
 8019590:	6833      	ldreq	r3, [r6, #0]
 8019592:	1aed      	subeq	r5, r5, r3
 8019594:	68a3      	ldr	r3, [r4, #8]
 8019596:	bf0c      	ite	eq
 8019598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801959c:	2500      	movne	r5, #0
 801959e:	4293      	cmp	r3, r2
 80195a0:	bfc4      	itt	gt
 80195a2:	1a9b      	subgt	r3, r3, r2
 80195a4:	18ed      	addgt	r5, r5, r3
 80195a6:	2600      	movs	r6, #0
 80195a8:	341a      	adds	r4, #26
 80195aa:	42b5      	cmp	r5, r6
 80195ac:	d11a      	bne.n	80195e4 <_printf_common+0xc8>
 80195ae:	2000      	movs	r0, #0
 80195b0:	e008      	b.n	80195c4 <_printf_common+0xa8>
 80195b2:	2301      	movs	r3, #1
 80195b4:	4652      	mov	r2, sl
 80195b6:	4641      	mov	r1, r8
 80195b8:	4638      	mov	r0, r7
 80195ba:	47c8      	blx	r9
 80195bc:	3001      	adds	r0, #1
 80195be:	d103      	bne.n	80195c8 <_printf_common+0xac>
 80195c0:	f04f 30ff 	mov.w	r0, #4294967295
 80195c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195c8:	3501      	adds	r5, #1
 80195ca:	e7c6      	b.n	801955a <_printf_common+0x3e>
 80195cc:	18e1      	adds	r1, r4, r3
 80195ce:	1c5a      	adds	r2, r3, #1
 80195d0:	2030      	movs	r0, #48	@ 0x30
 80195d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80195d6:	4422      	add	r2, r4
 80195d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80195dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80195e0:	3302      	adds	r3, #2
 80195e2:	e7c7      	b.n	8019574 <_printf_common+0x58>
 80195e4:	2301      	movs	r3, #1
 80195e6:	4622      	mov	r2, r4
 80195e8:	4641      	mov	r1, r8
 80195ea:	4638      	mov	r0, r7
 80195ec:	47c8      	blx	r9
 80195ee:	3001      	adds	r0, #1
 80195f0:	d0e6      	beq.n	80195c0 <_printf_common+0xa4>
 80195f2:	3601      	adds	r6, #1
 80195f4:	e7d9      	b.n	80195aa <_printf_common+0x8e>
	...

080195f8 <_printf_i>:
 80195f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80195fc:	7e0f      	ldrb	r7, [r1, #24]
 80195fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019600:	2f78      	cmp	r7, #120	@ 0x78
 8019602:	4691      	mov	r9, r2
 8019604:	4680      	mov	r8, r0
 8019606:	460c      	mov	r4, r1
 8019608:	469a      	mov	sl, r3
 801960a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801960e:	d807      	bhi.n	8019620 <_printf_i+0x28>
 8019610:	2f62      	cmp	r7, #98	@ 0x62
 8019612:	d80a      	bhi.n	801962a <_printf_i+0x32>
 8019614:	2f00      	cmp	r7, #0
 8019616:	f000 80d2 	beq.w	80197be <_printf_i+0x1c6>
 801961a:	2f58      	cmp	r7, #88	@ 0x58
 801961c:	f000 80b9 	beq.w	8019792 <_printf_i+0x19a>
 8019620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019628:	e03a      	b.n	80196a0 <_printf_i+0xa8>
 801962a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801962e:	2b15      	cmp	r3, #21
 8019630:	d8f6      	bhi.n	8019620 <_printf_i+0x28>
 8019632:	a101      	add	r1, pc, #4	@ (adr r1, 8019638 <_printf_i+0x40>)
 8019634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019638:	08019691 	.word	0x08019691
 801963c:	080196a5 	.word	0x080196a5
 8019640:	08019621 	.word	0x08019621
 8019644:	08019621 	.word	0x08019621
 8019648:	08019621 	.word	0x08019621
 801964c:	08019621 	.word	0x08019621
 8019650:	080196a5 	.word	0x080196a5
 8019654:	08019621 	.word	0x08019621
 8019658:	08019621 	.word	0x08019621
 801965c:	08019621 	.word	0x08019621
 8019660:	08019621 	.word	0x08019621
 8019664:	080197a5 	.word	0x080197a5
 8019668:	080196cf 	.word	0x080196cf
 801966c:	0801975f 	.word	0x0801975f
 8019670:	08019621 	.word	0x08019621
 8019674:	08019621 	.word	0x08019621
 8019678:	080197c7 	.word	0x080197c7
 801967c:	08019621 	.word	0x08019621
 8019680:	080196cf 	.word	0x080196cf
 8019684:	08019621 	.word	0x08019621
 8019688:	08019621 	.word	0x08019621
 801968c:	08019767 	.word	0x08019767
 8019690:	6833      	ldr	r3, [r6, #0]
 8019692:	1d1a      	adds	r2, r3, #4
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	6032      	str	r2, [r6, #0]
 8019698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801969c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80196a0:	2301      	movs	r3, #1
 80196a2:	e09d      	b.n	80197e0 <_printf_i+0x1e8>
 80196a4:	6833      	ldr	r3, [r6, #0]
 80196a6:	6820      	ldr	r0, [r4, #0]
 80196a8:	1d19      	adds	r1, r3, #4
 80196aa:	6031      	str	r1, [r6, #0]
 80196ac:	0606      	lsls	r6, r0, #24
 80196ae:	d501      	bpl.n	80196b4 <_printf_i+0xbc>
 80196b0:	681d      	ldr	r5, [r3, #0]
 80196b2:	e003      	b.n	80196bc <_printf_i+0xc4>
 80196b4:	0645      	lsls	r5, r0, #25
 80196b6:	d5fb      	bpl.n	80196b0 <_printf_i+0xb8>
 80196b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80196bc:	2d00      	cmp	r5, #0
 80196be:	da03      	bge.n	80196c8 <_printf_i+0xd0>
 80196c0:	232d      	movs	r3, #45	@ 0x2d
 80196c2:	426d      	negs	r5, r5
 80196c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196c8:	4859      	ldr	r0, [pc, #356]	@ (8019830 <_printf_i+0x238>)
 80196ca:	230a      	movs	r3, #10
 80196cc:	e011      	b.n	80196f2 <_printf_i+0xfa>
 80196ce:	6821      	ldr	r1, [r4, #0]
 80196d0:	6833      	ldr	r3, [r6, #0]
 80196d2:	0608      	lsls	r0, r1, #24
 80196d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80196d8:	d402      	bmi.n	80196e0 <_printf_i+0xe8>
 80196da:	0649      	lsls	r1, r1, #25
 80196dc:	bf48      	it	mi
 80196de:	b2ad      	uxthmi	r5, r5
 80196e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80196e2:	4853      	ldr	r0, [pc, #332]	@ (8019830 <_printf_i+0x238>)
 80196e4:	6033      	str	r3, [r6, #0]
 80196e6:	bf14      	ite	ne
 80196e8:	230a      	movne	r3, #10
 80196ea:	2308      	moveq	r3, #8
 80196ec:	2100      	movs	r1, #0
 80196ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80196f2:	6866      	ldr	r6, [r4, #4]
 80196f4:	60a6      	str	r6, [r4, #8]
 80196f6:	2e00      	cmp	r6, #0
 80196f8:	bfa2      	ittt	ge
 80196fa:	6821      	ldrge	r1, [r4, #0]
 80196fc:	f021 0104 	bicge.w	r1, r1, #4
 8019700:	6021      	strge	r1, [r4, #0]
 8019702:	b90d      	cbnz	r5, 8019708 <_printf_i+0x110>
 8019704:	2e00      	cmp	r6, #0
 8019706:	d04b      	beq.n	80197a0 <_printf_i+0x1a8>
 8019708:	4616      	mov	r6, r2
 801970a:	fbb5 f1f3 	udiv	r1, r5, r3
 801970e:	fb03 5711 	mls	r7, r3, r1, r5
 8019712:	5dc7      	ldrb	r7, [r0, r7]
 8019714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019718:	462f      	mov	r7, r5
 801971a:	42bb      	cmp	r3, r7
 801971c:	460d      	mov	r5, r1
 801971e:	d9f4      	bls.n	801970a <_printf_i+0x112>
 8019720:	2b08      	cmp	r3, #8
 8019722:	d10b      	bne.n	801973c <_printf_i+0x144>
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	07df      	lsls	r7, r3, #31
 8019728:	d508      	bpl.n	801973c <_printf_i+0x144>
 801972a:	6923      	ldr	r3, [r4, #16]
 801972c:	6861      	ldr	r1, [r4, #4]
 801972e:	4299      	cmp	r1, r3
 8019730:	bfde      	ittt	le
 8019732:	2330      	movle	r3, #48	@ 0x30
 8019734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019738:	f106 36ff 	addle.w	r6, r6, #4294967295
 801973c:	1b92      	subs	r2, r2, r6
 801973e:	6122      	str	r2, [r4, #16]
 8019740:	f8cd a000 	str.w	sl, [sp]
 8019744:	464b      	mov	r3, r9
 8019746:	aa03      	add	r2, sp, #12
 8019748:	4621      	mov	r1, r4
 801974a:	4640      	mov	r0, r8
 801974c:	f7ff fee6 	bl	801951c <_printf_common>
 8019750:	3001      	adds	r0, #1
 8019752:	d14a      	bne.n	80197ea <_printf_i+0x1f2>
 8019754:	f04f 30ff 	mov.w	r0, #4294967295
 8019758:	b004      	add	sp, #16
 801975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801975e:	6823      	ldr	r3, [r4, #0]
 8019760:	f043 0320 	orr.w	r3, r3, #32
 8019764:	6023      	str	r3, [r4, #0]
 8019766:	4833      	ldr	r0, [pc, #204]	@ (8019834 <_printf_i+0x23c>)
 8019768:	2778      	movs	r7, #120	@ 0x78
 801976a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801976e:	6823      	ldr	r3, [r4, #0]
 8019770:	6831      	ldr	r1, [r6, #0]
 8019772:	061f      	lsls	r7, r3, #24
 8019774:	f851 5b04 	ldr.w	r5, [r1], #4
 8019778:	d402      	bmi.n	8019780 <_printf_i+0x188>
 801977a:	065f      	lsls	r7, r3, #25
 801977c:	bf48      	it	mi
 801977e:	b2ad      	uxthmi	r5, r5
 8019780:	6031      	str	r1, [r6, #0]
 8019782:	07d9      	lsls	r1, r3, #31
 8019784:	bf44      	itt	mi
 8019786:	f043 0320 	orrmi.w	r3, r3, #32
 801978a:	6023      	strmi	r3, [r4, #0]
 801978c:	b11d      	cbz	r5, 8019796 <_printf_i+0x19e>
 801978e:	2310      	movs	r3, #16
 8019790:	e7ac      	b.n	80196ec <_printf_i+0xf4>
 8019792:	4827      	ldr	r0, [pc, #156]	@ (8019830 <_printf_i+0x238>)
 8019794:	e7e9      	b.n	801976a <_printf_i+0x172>
 8019796:	6823      	ldr	r3, [r4, #0]
 8019798:	f023 0320 	bic.w	r3, r3, #32
 801979c:	6023      	str	r3, [r4, #0]
 801979e:	e7f6      	b.n	801978e <_printf_i+0x196>
 80197a0:	4616      	mov	r6, r2
 80197a2:	e7bd      	b.n	8019720 <_printf_i+0x128>
 80197a4:	6833      	ldr	r3, [r6, #0]
 80197a6:	6825      	ldr	r5, [r4, #0]
 80197a8:	6961      	ldr	r1, [r4, #20]
 80197aa:	1d18      	adds	r0, r3, #4
 80197ac:	6030      	str	r0, [r6, #0]
 80197ae:	062e      	lsls	r6, r5, #24
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	d501      	bpl.n	80197b8 <_printf_i+0x1c0>
 80197b4:	6019      	str	r1, [r3, #0]
 80197b6:	e002      	b.n	80197be <_printf_i+0x1c6>
 80197b8:	0668      	lsls	r0, r5, #25
 80197ba:	d5fb      	bpl.n	80197b4 <_printf_i+0x1bc>
 80197bc:	8019      	strh	r1, [r3, #0]
 80197be:	2300      	movs	r3, #0
 80197c0:	6123      	str	r3, [r4, #16]
 80197c2:	4616      	mov	r6, r2
 80197c4:	e7bc      	b.n	8019740 <_printf_i+0x148>
 80197c6:	6833      	ldr	r3, [r6, #0]
 80197c8:	1d1a      	adds	r2, r3, #4
 80197ca:	6032      	str	r2, [r6, #0]
 80197cc:	681e      	ldr	r6, [r3, #0]
 80197ce:	6862      	ldr	r2, [r4, #4]
 80197d0:	2100      	movs	r1, #0
 80197d2:	4630      	mov	r0, r6
 80197d4:	f7e6 fd9c 	bl	8000310 <memchr>
 80197d8:	b108      	cbz	r0, 80197de <_printf_i+0x1e6>
 80197da:	1b80      	subs	r0, r0, r6
 80197dc:	6060      	str	r0, [r4, #4]
 80197de:	6863      	ldr	r3, [r4, #4]
 80197e0:	6123      	str	r3, [r4, #16]
 80197e2:	2300      	movs	r3, #0
 80197e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80197e8:	e7aa      	b.n	8019740 <_printf_i+0x148>
 80197ea:	6923      	ldr	r3, [r4, #16]
 80197ec:	4632      	mov	r2, r6
 80197ee:	4649      	mov	r1, r9
 80197f0:	4640      	mov	r0, r8
 80197f2:	47d0      	blx	sl
 80197f4:	3001      	adds	r0, #1
 80197f6:	d0ad      	beq.n	8019754 <_printf_i+0x15c>
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	079b      	lsls	r3, r3, #30
 80197fc:	d413      	bmi.n	8019826 <_printf_i+0x22e>
 80197fe:	68e0      	ldr	r0, [r4, #12]
 8019800:	9b03      	ldr	r3, [sp, #12]
 8019802:	4298      	cmp	r0, r3
 8019804:	bfb8      	it	lt
 8019806:	4618      	movlt	r0, r3
 8019808:	e7a6      	b.n	8019758 <_printf_i+0x160>
 801980a:	2301      	movs	r3, #1
 801980c:	4632      	mov	r2, r6
 801980e:	4649      	mov	r1, r9
 8019810:	4640      	mov	r0, r8
 8019812:	47d0      	blx	sl
 8019814:	3001      	adds	r0, #1
 8019816:	d09d      	beq.n	8019754 <_printf_i+0x15c>
 8019818:	3501      	adds	r5, #1
 801981a:	68e3      	ldr	r3, [r4, #12]
 801981c:	9903      	ldr	r1, [sp, #12]
 801981e:	1a5b      	subs	r3, r3, r1
 8019820:	42ab      	cmp	r3, r5
 8019822:	dcf2      	bgt.n	801980a <_printf_i+0x212>
 8019824:	e7eb      	b.n	80197fe <_printf_i+0x206>
 8019826:	2500      	movs	r5, #0
 8019828:	f104 0619 	add.w	r6, r4, #25
 801982c:	e7f5      	b.n	801981a <_printf_i+0x222>
 801982e:	bf00      	nop
 8019830:	0803b993 	.word	0x0803b993
 8019834:	0803b9a4 	.word	0x0803b9a4

08019838 <_scanf_float>:
 8019838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801983c:	b087      	sub	sp, #28
 801983e:	4617      	mov	r7, r2
 8019840:	9303      	str	r3, [sp, #12]
 8019842:	688b      	ldr	r3, [r1, #8]
 8019844:	1e5a      	subs	r2, r3, #1
 8019846:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801984a:	bf81      	itttt	hi
 801984c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019850:	eb03 0b05 	addhi.w	fp, r3, r5
 8019854:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019858:	608b      	strhi	r3, [r1, #8]
 801985a:	680b      	ldr	r3, [r1, #0]
 801985c:	460a      	mov	r2, r1
 801985e:	f04f 0500 	mov.w	r5, #0
 8019862:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019866:	f842 3b1c 	str.w	r3, [r2], #28
 801986a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801986e:	4680      	mov	r8, r0
 8019870:	460c      	mov	r4, r1
 8019872:	bf98      	it	ls
 8019874:	f04f 0b00 	movls.w	fp, #0
 8019878:	9201      	str	r2, [sp, #4]
 801987a:	4616      	mov	r6, r2
 801987c:	46aa      	mov	sl, r5
 801987e:	46a9      	mov	r9, r5
 8019880:	9502      	str	r5, [sp, #8]
 8019882:	68a2      	ldr	r2, [r4, #8]
 8019884:	b152      	cbz	r2, 801989c <_scanf_float+0x64>
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	2b4e      	cmp	r3, #78	@ 0x4e
 801988c:	d864      	bhi.n	8019958 <_scanf_float+0x120>
 801988e:	2b40      	cmp	r3, #64	@ 0x40
 8019890:	d83c      	bhi.n	801990c <_scanf_float+0xd4>
 8019892:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019896:	b2c8      	uxtb	r0, r1
 8019898:	280e      	cmp	r0, #14
 801989a:	d93a      	bls.n	8019912 <_scanf_float+0xda>
 801989c:	f1b9 0f00 	cmp.w	r9, #0
 80198a0:	d003      	beq.n	80198aa <_scanf_float+0x72>
 80198a2:	6823      	ldr	r3, [r4, #0]
 80198a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80198a8:	6023      	str	r3, [r4, #0]
 80198aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80198ae:	f1ba 0f01 	cmp.w	sl, #1
 80198b2:	f200 8117 	bhi.w	8019ae4 <_scanf_float+0x2ac>
 80198b6:	9b01      	ldr	r3, [sp, #4]
 80198b8:	429e      	cmp	r6, r3
 80198ba:	f200 8108 	bhi.w	8019ace <_scanf_float+0x296>
 80198be:	2001      	movs	r0, #1
 80198c0:	b007      	add	sp, #28
 80198c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80198ca:	2a0d      	cmp	r2, #13
 80198cc:	d8e6      	bhi.n	801989c <_scanf_float+0x64>
 80198ce:	a101      	add	r1, pc, #4	@ (adr r1, 80198d4 <_scanf_float+0x9c>)
 80198d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80198d4:	08019a1b 	.word	0x08019a1b
 80198d8:	0801989d 	.word	0x0801989d
 80198dc:	0801989d 	.word	0x0801989d
 80198e0:	0801989d 	.word	0x0801989d
 80198e4:	08019a7b 	.word	0x08019a7b
 80198e8:	08019a53 	.word	0x08019a53
 80198ec:	0801989d 	.word	0x0801989d
 80198f0:	0801989d 	.word	0x0801989d
 80198f4:	08019a29 	.word	0x08019a29
 80198f8:	0801989d 	.word	0x0801989d
 80198fc:	0801989d 	.word	0x0801989d
 8019900:	0801989d 	.word	0x0801989d
 8019904:	0801989d 	.word	0x0801989d
 8019908:	080199e1 	.word	0x080199e1
 801990c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019910:	e7db      	b.n	80198ca <_scanf_float+0x92>
 8019912:	290e      	cmp	r1, #14
 8019914:	d8c2      	bhi.n	801989c <_scanf_float+0x64>
 8019916:	a001      	add	r0, pc, #4	@ (adr r0, 801991c <_scanf_float+0xe4>)
 8019918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801991c:	080199d1 	.word	0x080199d1
 8019920:	0801989d 	.word	0x0801989d
 8019924:	080199d1 	.word	0x080199d1
 8019928:	08019a67 	.word	0x08019a67
 801992c:	0801989d 	.word	0x0801989d
 8019930:	08019979 	.word	0x08019979
 8019934:	080199b7 	.word	0x080199b7
 8019938:	080199b7 	.word	0x080199b7
 801993c:	080199b7 	.word	0x080199b7
 8019940:	080199b7 	.word	0x080199b7
 8019944:	080199b7 	.word	0x080199b7
 8019948:	080199b7 	.word	0x080199b7
 801994c:	080199b7 	.word	0x080199b7
 8019950:	080199b7 	.word	0x080199b7
 8019954:	080199b7 	.word	0x080199b7
 8019958:	2b6e      	cmp	r3, #110	@ 0x6e
 801995a:	d809      	bhi.n	8019970 <_scanf_float+0x138>
 801995c:	2b60      	cmp	r3, #96	@ 0x60
 801995e:	d8b2      	bhi.n	80198c6 <_scanf_float+0x8e>
 8019960:	2b54      	cmp	r3, #84	@ 0x54
 8019962:	d07b      	beq.n	8019a5c <_scanf_float+0x224>
 8019964:	2b59      	cmp	r3, #89	@ 0x59
 8019966:	d199      	bne.n	801989c <_scanf_float+0x64>
 8019968:	2d07      	cmp	r5, #7
 801996a:	d197      	bne.n	801989c <_scanf_float+0x64>
 801996c:	2508      	movs	r5, #8
 801996e:	e02c      	b.n	80199ca <_scanf_float+0x192>
 8019970:	2b74      	cmp	r3, #116	@ 0x74
 8019972:	d073      	beq.n	8019a5c <_scanf_float+0x224>
 8019974:	2b79      	cmp	r3, #121	@ 0x79
 8019976:	e7f6      	b.n	8019966 <_scanf_float+0x12e>
 8019978:	6821      	ldr	r1, [r4, #0]
 801997a:	05c8      	lsls	r0, r1, #23
 801997c:	d51b      	bpl.n	80199b6 <_scanf_float+0x17e>
 801997e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019982:	6021      	str	r1, [r4, #0]
 8019984:	f109 0901 	add.w	r9, r9, #1
 8019988:	f1bb 0f00 	cmp.w	fp, #0
 801998c:	d003      	beq.n	8019996 <_scanf_float+0x15e>
 801998e:	3201      	adds	r2, #1
 8019990:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019994:	60a2      	str	r2, [r4, #8]
 8019996:	68a3      	ldr	r3, [r4, #8]
 8019998:	3b01      	subs	r3, #1
 801999a:	60a3      	str	r3, [r4, #8]
 801999c:	6923      	ldr	r3, [r4, #16]
 801999e:	3301      	adds	r3, #1
 80199a0:	6123      	str	r3, [r4, #16]
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	3b01      	subs	r3, #1
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	607b      	str	r3, [r7, #4]
 80199aa:	f340 8087 	ble.w	8019abc <_scanf_float+0x284>
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	3301      	adds	r3, #1
 80199b2:	603b      	str	r3, [r7, #0]
 80199b4:	e765      	b.n	8019882 <_scanf_float+0x4a>
 80199b6:	eb1a 0105 	adds.w	r1, sl, r5
 80199ba:	f47f af6f 	bne.w	801989c <_scanf_float+0x64>
 80199be:	6822      	ldr	r2, [r4, #0]
 80199c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80199c4:	6022      	str	r2, [r4, #0]
 80199c6:	460d      	mov	r5, r1
 80199c8:	468a      	mov	sl, r1
 80199ca:	f806 3b01 	strb.w	r3, [r6], #1
 80199ce:	e7e2      	b.n	8019996 <_scanf_float+0x15e>
 80199d0:	6822      	ldr	r2, [r4, #0]
 80199d2:	0610      	lsls	r0, r2, #24
 80199d4:	f57f af62 	bpl.w	801989c <_scanf_float+0x64>
 80199d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80199dc:	6022      	str	r2, [r4, #0]
 80199de:	e7f4      	b.n	80199ca <_scanf_float+0x192>
 80199e0:	f1ba 0f00 	cmp.w	sl, #0
 80199e4:	d10e      	bne.n	8019a04 <_scanf_float+0x1cc>
 80199e6:	f1b9 0f00 	cmp.w	r9, #0
 80199ea:	d10e      	bne.n	8019a0a <_scanf_float+0x1d2>
 80199ec:	6822      	ldr	r2, [r4, #0]
 80199ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80199f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80199f6:	d108      	bne.n	8019a0a <_scanf_float+0x1d2>
 80199f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80199fc:	6022      	str	r2, [r4, #0]
 80199fe:	f04f 0a01 	mov.w	sl, #1
 8019a02:	e7e2      	b.n	80199ca <_scanf_float+0x192>
 8019a04:	f1ba 0f02 	cmp.w	sl, #2
 8019a08:	d055      	beq.n	8019ab6 <_scanf_float+0x27e>
 8019a0a:	2d01      	cmp	r5, #1
 8019a0c:	d002      	beq.n	8019a14 <_scanf_float+0x1dc>
 8019a0e:	2d04      	cmp	r5, #4
 8019a10:	f47f af44 	bne.w	801989c <_scanf_float+0x64>
 8019a14:	3501      	adds	r5, #1
 8019a16:	b2ed      	uxtb	r5, r5
 8019a18:	e7d7      	b.n	80199ca <_scanf_float+0x192>
 8019a1a:	f1ba 0f01 	cmp.w	sl, #1
 8019a1e:	f47f af3d 	bne.w	801989c <_scanf_float+0x64>
 8019a22:	f04f 0a02 	mov.w	sl, #2
 8019a26:	e7d0      	b.n	80199ca <_scanf_float+0x192>
 8019a28:	b97d      	cbnz	r5, 8019a4a <_scanf_float+0x212>
 8019a2a:	f1b9 0f00 	cmp.w	r9, #0
 8019a2e:	f47f af38 	bne.w	80198a2 <_scanf_float+0x6a>
 8019a32:	6822      	ldr	r2, [r4, #0]
 8019a34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019a38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019a3c:	f040 8101 	bne.w	8019c42 <_scanf_float+0x40a>
 8019a40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019a44:	6022      	str	r2, [r4, #0]
 8019a46:	2501      	movs	r5, #1
 8019a48:	e7bf      	b.n	80199ca <_scanf_float+0x192>
 8019a4a:	2d03      	cmp	r5, #3
 8019a4c:	d0e2      	beq.n	8019a14 <_scanf_float+0x1dc>
 8019a4e:	2d05      	cmp	r5, #5
 8019a50:	e7de      	b.n	8019a10 <_scanf_float+0x1d8>
 8019a52:	2d02      	cmp	r5, #2
 8019a54:	f47f af22 	bne.w	801989c <_scanf_float+0x64>
 8019a58:	2503      	movs	r5, #3
 8019a5a:	e7b6      	b.n	80199ca <_scanf_float+0x192>
 8019a5c:	2d06      	cmp	r5, #6
 8019a5e:	f47f af1d 	bne.w	801989c <_scanf_float+0x64>
 8019a62:	2507      	movs	r5, #7
 8019a64:	e7b1      	b.n	80199ca <_scanf_float+0x192>
 8019a66:	6822      	ldr	r2, [r4, #0]
 8019a68:	0591      	lsls	r1, r2, #22
 8019a6a:	f57f af17 	bpl.w	801989c <_scanf_float+0x64>
 8019a6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8019a72:	6022      	str	r2, [r4, #0]
 8019a74:	f8cd 9008 	str.w	r9, [sp, #8]
 8019a78:	e7a7      	b.n	80199ca <_scanf_float+0x192>
 8019a7a:	6822      	ldr	r2, [r4, #0]
 8019a7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8019a80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019a84:	d006      	beq.n	8019a94 <_scanf_float+0x25c>
 8019a86:	0550      	lsls	r0, r2, #21
 8019a88:	f57f af08 	bpl.w	801989c <_scanf_float+0x64>
 8019a8c:	f1b9 0f00 	cmp.w	r9, #0
 8019a90:	f000 80d7 	beq.w	8019c42 <_scanf_float+0x40a>
 8019a94:	0591      	lsls	r1, r2, #22
 8019a96:	bf58      	it	pl
 8019a98:	9902      	ldrpl	r1, [sp, #8]
 8019a9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019a9e:	bf58      	it	pl
 8019aa0:	eba9 0101 	subpl.w	r1, r9, r1
 8019aa4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019aa8:	bf58      	it	pl
 8019aaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019aae:	6022      	str	r2, [r4, #0]
 8019ab0:	f04f 0900 	mov.w	r9, #0
 8019ab4:	e789      	b.n	80199ca <_scanf_float+0x192>
 8019ab6:	f04f 0a03 	mov.w	sl, #3
 8019aba:	e786      	b.n	80199ca <_scanf_float+0x192>
 8019abc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019ac0:	4639      	mov	r1, r7
 8019ac2:	4640      	mov	r0, r8
 8019ac4:	4798      	blx	r3
 8019ac6:	2800      	cmp	r0, #0
 8019ac8:	f43f aedb 	beq.w	8019882 <_scanf_float+0x4a>
 8019acc:	e6e6      	b.n	801989c <_scanf_float+0x64>
 8019ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019ad6:	463a      	mov	r2, r7
 8019ad8:	4640      	mov	r0, r8
 8019ada:	4798      	blx	r3
 8019adc:	6923      	ldr	r3, [r4, #16]
 8019ade:	3b01      	subs	r3, #1
 8019ae0:	6123      	str	r3, [r4, #16]
 8019ae2:	e6e8      	b.n	80198b6 <_scanf_float+0x7e>
 8019ae4:	1e6b      	subs	r3, r5, #1
 8019ae6:	2b06      	cmp	r3, #6
 8019ae8:	d824      	bhi.n	8019b34 <_scanf_float+0x2fc>
 8019aea:	2d02      	cmp	r5, #2
 8019aec:	d836      	bhi.n	8019b5c <_scanf_float+0x324>
 8019aee:	9b01      	ldr	r3, [sp, #4]
 8019af0:	429e      	cmp	r6, r3
 8019af2:	f67f aee4 	bls.w	80198be <_scanf_float+0x86>
 8019af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019afe:	463a      	mov	r2, r7
 8019b00:	4640      	mov	r0, r8
 8019b02:	4798      	blx	r3
 8019b04:	6923      	ldr	r3, [r4, #16]
 8019b06:	3b01      	subs	r3, #1
 8019b08:	6123      	str	r3, [r4, #16]
 8019b0a:	e7f0      	b.n	8019aee <_scanf_float+0x2b6>
 8019b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019b10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019b14:	463a      	mov	r2, r7
 8019b16:	4640      	mov	r0, r8
 8019b18:	4798      	blx	r3
 8019b1a:	6923      	ldr	r3, [r4, #16]
 8019b1c:	3b01      	subs	r3, #1
 8019b1e:	6123      	str	r3, [r4, #16]
 8019b20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b24:	fa5f fa8a 	uxtb.w	sl, sl
 8019b28:	f1ba 0f02 	cmp.w	sl, #2
 8019b2c:	d1ee      	bne.n	8019b0c <_scanf_float+0x2d4>
 8019b2e:	3d03      	subs	r5, #3
 8019b30:	b2ed      	uxtb	r5, r5
 8019b32:	1b76      	subs	r6, r6, r5
 8019b34:	6823      	ldr	r3, [r4, #0]
 8019b36:	05da      	lsls	r2, r3, #23
 8019b38:	d530      	bpl.n	8019b9c <_scanf_float+0x364>
 8019b3a:	055b      	lsls	r3, r3, #21
 8019b3c:	d511      	bpl.n	8019b62 <_scanf_float+0x32a>
 8019b3e:	9b01      	ldr	r3, [sp, #4]
 8019b40:	429e      	cmp	r6, r3
 8019b42:	f67f aebc 	bls.w	80198be <_scanf_float+0x86>
 8019b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019b4e:	463a      	mov	r2, r7
 8019b50:	4640      	mov	r0, r8
 8019b52:	4798      	blx	r3
 8019b54:	6923      	ldr	r3, [r4, #16]
 8019b56:	3b01      	subs	r3, #1
 8019b58:	6123      	str	r3, [r4, #16]
 8019b5a:	e7f0      	b.n	8019b3e <_scanf_float+0x306>
 8019b5c:	46aa      	mov	sl, r5
 8019b5e:	46b3      	mov	fp, r6
 8019b60:	e7de      	b.n	8019b20 <_scanf_float+0x2e8>
 8019b62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019b66:	6923      	ldr	r3, [r4, #16]
 8019b68:	2965      	cmp	r1, #101	@ 0x65
 8019b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019b6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8019b72:	6123      	str	r3, [r4, #16]
 8019b74:	d00c      	beq.n	8019b90 <_scanf_float+0x358>
 8019b76:	2945      	cmp	r1, #69	@ 0x45
 8019b78:	d00a      	beq.n	8019b90 <_scanf_float+0x358>
 8019b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019b7e:	463a      	mov	r2, r7
 8019b80:	4640      	mov	r0, r8
 8019b82:	4798      	blx	r3
 8019b84:	6923      	ldr	r3, [r4, #16]
 8019b86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019b8a:	3b01      	subs	r3, #1
 8019b8c:	1eb5      	subs	r5, r6, #2
 8019b8e:	6123      	str	r3, [r4, #16]
 8019b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019b94:	463a      	mov	r2, r7
 8019b96:	4640      	mov	r0, r8
 8019b98:	4798      	blx	r3
 8019b9a:	462e      	mov	r6, r5
 8019b9c:	6822      	ldr	r2, [r4, #0]
 8019b9e:	f012 0210 	ands.w	r2, r2, #16
 8019ba2:	d001      	beq.n	8019ba8 <_scanf_float+0x370>
 8019ba4:	2000      	movs	r0, #0
 8019ba6:	e68b      	b.n	80198c0 <_scanf_float+0x88>
 8019ba8:	7032      	strb	r2, [r6, #0]
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019bb4:	d11a      	bne.n	8019bec <_scanf_float+0x3b4>
 8019bb6:	9b02      	ldr	r3, [sp, #8]
 8019bb8:	454b      	cmp	r3, r9
 8019bba:	eba3 0209 	sub.w	r2, r3, r9
 8019bbe:	d121      	bne.n	8019c04 <_scanf_float+0x3cc>
 8019bc0:	9901      	ldr	r1, [sp, #4]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	4640      	mov	r0, r8
 8019bc6:	f7ff f925 	bl	8018e14 <_strtod_r>
 8019bca:	9b03      	ldr	r3, [sp, #12]
 8019bcc:	6821      	ldr	r1, [r4, #0]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f011 0f02 	tst.w	r1, #2
 8019bd4:	f103 0204 	add.w	r2, r3, #4
 8019bd8:	d01f      	beq.n	8019c1a <_scanf_float+0x3e2>
 8019bda:	9903      	ldr	r1, [sp, #12]
 8019bdc:	600a      	str	r2, [r1, #0]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	ed83 0b00 	vstr	d0, [r3]
 8019be4:	68e3      	ldr	r3, [r4, #12]
 8019be6:	3301      	adds	r3, #1
 8019be8:	60e3      	str	r3, [r4, #12]
 8019bea:	e7db      	b.n	8019ba4 <_scanf_float+0x36c>
 8019bec:	9b04      	ldr	r3, [sp, #16]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d0e6      	beq.n	8019bc0 <_scanf_float+0x388>
 8019bf2:	9905      	ldr	r1, [sp, #20]
 8019bf4:	230a      	movs	r3, #10
 8019bf6:	3101      	adds	r1, #1
 8019bf8:	4640      	mov	r0, r8
 8019bfa:	f7ff f9d9 	bl	8018fb0 <_strtol_r>
 8019bfe:	9b04      	ldr	r3, [sp, #16]
 8019c00:	9e05      	ldr	r6, [sp, #20]
 8019c02:	1ac2      	subs	r2, r0, r3
 8019c04:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019c08:	429e      	cmp	r6, r3
 8019c0a:	bf28      	it	cs
 8019c0c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019c10:	490d      	ldr	r1, [pc, #52]	@ (8019c48 <_scanf_float+0x410>)
 8019c12:	4630      	mov	r0, r6
 8019c14:	f000 f982 	bl	8019f1c <siprintf>
 8019c18:	e7d2      	b.n	8019bc0 <_scanf_float+0x388>
 8019c1a:	f011 0f04 	tst.w	r1, #4
 8019c1e:	9903      	ldr	r1, [sp, #12]
 8019c20:	600a      	str	r2, [r1, #0]
 8019c22:	d1dc      	bne.n	8019bde <_scanf_float+0x3a6>
 8019c24:	eeb4 0b40 	vcmp.f64	d0, d0
 8019c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2c:	681d      	ldr	r5, [r3, #0]
 8019c2e:	d705      	bvc.n	8019c3c <_scanf_float+0x404>
 8019c30:	4806      	ldr	r0, [pc, #24]	@ (8019c4c <_scanf_float+0x414>)
 8019c32:	f000 fb31 	bl	801a298 <nanf>
 8019c36:	ed85 0a00 	vstr	s0, [r5]
 8019c3a:	e7d3      	b.n	8019be4 <_scanf_float+0x3ac>
 8019c3c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019c40:	e7f9      	b.n	8019c36 <_scanf_float+0x3fe>
 8019c42:	f04f 0900 	mov.w	r9, #0
 8019c46:	e630      	b.n	80198aa <_scanf_float+0x72>
 8019c48:	0803b9b5 	.word	0x0803b9b5
 8019c4c:	0803bc54 	.word	0x0803bc54

08019c50 <std>:
 8019c50:	2300      	movs	r3, #0
 8019c52:	b510      	push	{r4, lr}
 8019c54:	4604      	mov	r4, r0
 8019c56:	e9c0 3300 	strd	r3, r3, [r0]
 8019c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019c5e:	6083      	str	r3, [r0, #8]
 8019c60:	8181      	strh	r1, [r0, #12]
 8019c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8019c64:	81c2      	strh	r2, [r0, #14]
 8019c66:	6183      	str	r3, [r0, #24]
 8019c68:	4619      	mov	r1, r3
 8019c6a:	2208      	movs	r2, #8
 8019c6c:	305c      	adds	r0, #92	@ 0x5c
 8019c6e:	f000 fa4d 	bl	801a10c <memset>
 8019c72:	4b0d      	ldr	r3, [pc, #52]	@ (8019ca8 <std+0x58>)
 8019c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8019c76:	4b0d      	ldr	r3, [pc, #52]	@ (8019cac <std+0x5c>)
 8019c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019cb0 <std+0x60>)
 8019c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019cb4 <std+0x64>)
 8019c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8019c82:	4b0d      	ldr	r3, [pc, #52]	@ (8019cb8 <std+0x68>)
 8019c84:	6224      	str	r4, [r4, #32]
 8019c86:	429c      	cmp	r4, r3
 8019c88:	d006      	beq.n	8019c98 <std+0x48>
 8019c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019c8e:	4294      	cmp	r4, r2
 8019c90:	d002      	beq.n	8019c98 <std+0x48>
 8019c92:	33d0      	adds	r3, #208	@ 0xd0
 8019c94:	429c      	cmp	r4, r3
 8019c96:	d105      	bne.n	8019ca4 <std+0x54>
 8019c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ca0:	f000 bae0 	b.w	801a264 <__retarget_lock_init_recursive>
 8019ca4:	bd10      	pop	{r4, pc}
 8019ca6:	bf00      	nop
 8019ca8:	08019f5d 	.word	0x08019f5d
 8019cac:	08019f7f 	.word	0x08019f7f
 8019cb0:	08019fb7 	.word	0x08019fb7
 8019cb4:	08019fdb 	.word	0x08019fdb
 8019cb8:	24004b78 	.word	0x24004b78

08019cbc <stdio_exit_handler>:
 8019cbc:	4a02      	ldr	r2, [pc, #8]	@ (8019cc8 <stdio_exit_handler+0xc>)
 8019cbe:	4903      	ldr	r1, [pc, #12]	@ (8019ccc <stdio_exit_handler+0x10>)
 8019cc0:	4803      	ldr	r0, [pc, #12]	@ (8019cd0 <stdio_exit_handler+0x14>)
 8019cc2:	f000 b869 	b.w	8019d98 <_fwalk_sglue>
 8019cc6:	bf00      	nop
 8019cc8:	24000028 	.word	0x24000028
 8019ccc:	0801c55d 	.word	0x0801c55d
 8019cd0:	240001a4 	.word	0x240001a4

08019cd4 <cleanup_stdio>:
 8019cd4:	6841      	ldr	r1, [r0, #4]
 8019cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8019d08 <cleanup_stdio+0x34>)
 8019cd8:	4299      	cmp	r1, r3
 8019cda:	b510      	push	{r4, lr}
 8019cdc:	4604      	mov	r4, r0
 8019cde:	d001      	beq.n	8019ce4 <cleanup_stdio+0x10>
 8019ce0:	f002 fc3c 	bl	801c55c <_fflush_r>
 8019ce4:	68a1      	ldr	r1, [r4, #8]
 8019ce6:	4b09      	ldr	r3, [pc, #36]	@ (8019d0c <cleanup_stdio+0x38>)
 8019ce8:	4299      	cmp	r1, r3
 8019cea:	d002      	beq.n	8019cf2 <cleanup_stdio+0x1e>
 8019cec:	4620      	mov	r0, r4
 8019cee:	f002 fc35 	bl	801c55c <_fflush_r>
 8019cf2:	68e1      	ldr	r1, [r4, #12]
 8019cf4:	4b06      	ldr	r3, [pc, #24]	@ (8019d10 <cleanup_stdio+0x3c>)
 8019cf6:	4299      	cmp	r1, r3
 8019cf8:	d004      	beq.n	8019d04 <cleanup_stdio+0x30>
 8019cfa:	4620      	mov	r0, r4
 8019cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d00:	f002 bc2c 	b.w	801c55c <_fflush_r>
 8019d04:	bd10      	pop	{r4, pc}
 8019d06:	bf00      	nop
 8019d08:	24004b78 	.word	0x24004b78
 8019d0c:	24004be0 	.word	0x24004be0
 8019d10:	24004c48 	.word	0x24004c48

08019d14 <global_stdio_init.part.0>:
 8019d14:	b510      	push	{r4, lr}
 8019d16:	4b0b      	ldr	r3, [pc, #44]	@ (8019d44 <global_stdio_init.part.0+0x30>)
 8019d18:	4c0b      	ldr	r4, [pc, #44]	@ (8019d48 <global_stdio_init.part.0+0x34>)
 8019d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8019d4c <global_stdio_init.part.0+0x38>)
 8019d1c:	601a      	str	r2, [r3, #0]
 8019d1e:	4620      	mov	r0, r4
 8019d20:	2200      	movs	r2, #0
 8019d22:	2104      	movs	r1, #4
 8019d24:	f7ff ff94 	bl	8019c50 <std>
 8019d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019d2c:	2201      	movs	r2, #1
 8019d2e:	2109      	movs	r1, #9
 8019d30:	f7ff ff8e 	bl	8019c50 <std>
 8019d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019d38:	2202      	movs	r2, #2
 8019d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d3e:	2112      	movs	r1, #18
 8019d40:	f7ff bf86 	b.w	8019c50 <std>
 8019d44:	24004cb0 	.word	0x24004cb0
 8019d48:	24004b78 	.word	0x24004b78
 8019d4c:	08019cbd 	.word	0x08019cbd

08019d50 <__sfp_lock_acquire>:
 8019d50:	4801      	ldr	r0, [pc, #4]	@ (8019d58 <__sfp_lock_acquire+0x8>)
 8019d52:	f000 ba88 	b.w	801a266 <__retarget_lock_acquire_recursive>
 8019d56:	bf00      	nop
 8019d58:	24004cb9 	.word	0x24004cb9

08019d5c <__sfp_lock_release>:
 8019d5c:	4801      	ldr	r0, [pc, #4]	@ (8019d64 <__sfp_lock_release+0x8>)
 8019d5e:	f000 ba83 	b.w	801a268 <__retarget_lock_release_recursive>
 8019d62:	bf00      	nop
 8019d64:	24004cb9 	.word	0x24004cb9

08019d68 <__sinit>:
 8019d68:	b510      	push	{r4, lr}
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	f7ff fff0 	bl	8019d50 <__sfp_lock_acquire>
 8019d70:	6a23      	ldr	r3, [r4, #32]
 8019d72:	b11b      	cbz	r3, 8019d7c <__sinit+0x14>
 8019d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d78:	f7ff bff0 	b.w	8019d5c <__sfp_lock_release>
 8019d7c:	4b04      	ldr	r3, [pc, #16]	@ (8019d90 <__sinit+0x28>)
 8019d7e:	6223      	str	r3, [r4, #32]
 8019d80:	4b04      	ldr	r3, [pc, #16]	@ (8019d94 <__sinit+0x2c>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1f5      	bne.n	8019d74 <__sinit+0xc>
 8019d88:	f7ff ffc4 	bl	8019d14 <global_stdio_init.part.0>
 8019d8c:	e7f2      	b.n	8019d74 <__sinit+0xc>
 8019d8e:	bf00      	nop
 8019d90:	08019cd5 	.word	0x08019cd5
 8019d94:	24004cb0 	.word	0x24004cb0

08019d98 <_fwalk_sglue>:
 8019d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d9c:	4607      	mov	r7, r0
 8019d9e:	4688      	mov	r8, r1
 8019da0:	4614      	mov	r4, r2
 8019da2:	2600      	movs	r6, #0
 8019da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019da8:	f1b9 0901 	subs.w	r9, r9, #1
 8019dac:	d505      	bpl.n	8019dba <_fwalk_sglue+0x22>
 8019dae:	6824      	ldr	r4, [r4, #0]
 8019db0:	2c00      	cmp	r4, #0
 8019db2:	d1f7      	bne.n	8019da4 <_fwalk_sglue+0xc>
 8019db4:	4630      	mov	r0, r6
 8019db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019dba:	89ab      	ldrh	r3, [r5, #12]
 8019dbc:	2b01      	cmp	r3, #1
 8019dbe:	d907      	bls.n	8019dd0 <_fwalk_sglue+0x38>
 8019dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	d003      	beq.n	8019dd0 <_fwalk_sglue+0x38>
 8019dc8:	4629      	mov	r1, r5
 8019dca:	4638      	mov	r0, r7
 8019dcc:	47c0      	blx	r8
 8019dce:	4306      	orrs	r6, r0
 8019dd0:	3568      	adds	r5, #104	@ 0x68
 8019dd2:	e7e9      	b.n	8019da8 <_fwalk_sglue+0x10>

08019dd4 <iprintf>:
 8019dd4:	b40f      	push	{r0, r1, r2, r3}
 8019dd6:	b507      	push	{r0, r1, r2, lr}
 8019dd8:	4906      	ldr	r1, [pc, #24]	@ (8019df4 <iprintf+0x20>)
 8019dda:	ab04      	add	r3, sp, #16
 8019ddc:	6808      	ldr	r0, [r1, #0]
 8019dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8019de2:	6881      	ldr	r1, [r0, #8]
 8019de4:	9301      	str	r3, [sp, #4]
 8019de6:	f002 fa1d 	bl	801c224 <_vfiprintf_r>
 8019dea:	b003      	add	sp, #12
 8019dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8019df0:	b004      	add	sp, #16
 8019df2:	4770      	bx	lr
 8019df4:	240001a0 	.word	0x240001a0

08019df8 <_puts_r>:
 8019df8:	6a03      	ldr	r3, [r0, #32]
 8019dfa:	b570      	push	{r4, r5, r6, lr}
 8019dfc:	6884      	ldr	r4, [r0, #8]
 8019dfe:	4605      	mov	r5, r0
 8019e00:	460e      	mov	r6, r1
 8019e02:	b90b      	cbnz	r3, 8019e08 <_puts_r+0x10>
 8019e04:	f7ff ffb0 	bl	8019d68 <__sinit>
 8019e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019e0a:	07db      	lsls	r3, r3, #31
 8019e0c:	d405      	bmi.n	8019e1a <_puts_r+0x22>
 8019e0e:	89a3      	ldrh	r3, [r4, #12]
 8019e10:	0598      	lsls	r0, r3, #22
 8019e12:	d402      	bmi.n	8019e1a <_puts_r+0x22>
 8019e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019e16:	f000 fa26 	bl	801a266 <__retarget_lock_acquire_recursive>
 8019e1a:	89a3      	ldrh	r3, [r4, #12]
 8019e1c:	0719      	lsls	r1, r3, #28
 8019e1e:	d502      	bpl.n	8019e26 <_puts_r+0x2e>
 8019e20:	6923      	ldr	r3, [r4, #16]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d135      	bne.n	8019e92 <_puts_r+0x9a>
 8019e26:	4621      	mov	r1, r4
 8019e28:	4628      	mov	r0, r5
 8019e2a:	f000 f919 	bl	801a060 <__swsetup_r>
 8019e2e:	b380      	cbz	r0, 8019e92 <_puts_r+0x9a>
 8019e30:	f04f 35ff 	mov.w	r5, #4294967295
 8019e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019e36:	07da      	lsls	r2, r3, #31
 8019e38:	d405      	bmi.n	8019e46 <_puts_r+0x4e>
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	059b      	lsls	r3, r3, #22
 8019e3e:	d402      	bmi.n	8019e46 <_puts_r+0x4e>
 8019e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019e42:	f000 fa11 	bl	801a268 <__retarget_lock_release_recursive>
 8019e46:	4628      	mov	r0, r5
 8019e48:	bd70      	pop	{r4, r5, r6, pc}
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	da04      	bge.n	8019e58 <_puts_r+0x60>
 8019e4e:	69a2      	ldr	r2, [r4, #24]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	dc17      	bgt.n	8019e84 <_puts_r+0x8c>
 8019e54:	290a      	cmp	r1, #10
 8019e56:	d015      	beq.n	8019e84 <_puts_r+0x8c>
 8019e58:	6823      	ldr	r3, [r4, #0]
 8019e5a:	1c5a      	adds	r2, r3, #1
 8019e5c:	6022      	str	r2, [r4, #0]
 8019e5e:	7019      	strb	r1, [r3, #0]
 8019e60:	68a3      	ldr	r3, [r4, #8]
 8019e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019e66:	3b01      	subs	r3, #1
 8019e68:	60a3      	str	r3, [r4, #8]
 8019e6a:	2900      	cmp	r1, #0
 8019e6c:	d1ed      	bne.n	8019e4a <_puts_r+0x52>
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	da11      	bge.n	8019e96 <_puts_r+0x9e>
 8019e72:	4622      	mov	r2, r4
 8019e74:	210a      	movs	r1, #10
 8019e76:	4628      	mov	r0, r5
 8019e78:	f000 f8b3 	bl	8019fe2 <__swbuf_r>
 8019e7c:	3001      	adds	r0, #1
 8019e7e:	d0d7      	beq.n	8019e30 <_puts_r+0x38>
 8019e80:	250a      	movs	r5, #10
 8019e82:	e7d7      	b.n	8019e34 <_puts_r+0x3c>
 8019e84:	4622      	mov	r2, r4
 8019e86:	4628      	mov	r0, r5
 8019e88:	f000 f8ab 	bl	8019fe2 <__swbuf_r>
 8019e8c:	3001      	adds	r0, #1
 8019e8e:	d1e7      	bne.n	8019e60 <_puts_r+0x68>
 8019e90:	e7ce      	b.n	8019e30 <_puts_r+0x38>
 8019e92:	3e01      	subs	r6, #1
 8019e94:	e7e4      	b.n	8019e60 <_puts_r+0x68>
 8019e96:	6823      	ldr	r3, [r4, #0]
 8019e98:	1c5a      	adds	r2, r3, #1
 8019e9a:	6022      	str	r2, [r4, #0]
 8019e9c:	220a      	movs	r2, #10
 8019e9e:	701a      	strb	r2, [r3, #0]
 8019ea0:	e7ee      	b.n	8019e80 <_puts_r+0x88>
	...

08019ea4 <puts>:
 8019ea4:	4b02      	ldr	r3, [pc, #8]	@ (8019eb0 <puts+0xc>)
 8019ea6:	4601      	mov	r1, r0
 8019ea8:	6818      	ldr	r0, [r3, #0]
 8019eaa:	f7ff bfa5 	b.w	8019df8 <_puts_r>
 8019eae:	bf00      	nop
 8019eb0:	240001a0 	.word	0x240001a0

08019eb4 <sniprintf>:
 8019eb4:	b40c      	push	{r2, r3}
 8019eb6:	b530      	push	{r4, r5, lr}
 8019eb8:	4b17      	ldr	r3, [pc, #92]	@ (8019f18 <sniprintf+0x64>)
 8019eba:	1e0c      	subs	r4, r1, #0
 8019ebc:	681d      	ldr	r5, [r3, #0]
 8019ebe:	b09d      	sub	sp, #116	@ 0x74
 8019ec0:	da08      	bge.n	8019ed4 <sniprintf+0x20>
 8019ec2:	238b      	movs	r3, #139	@ 0x8b
 8019ec4:	602b      	str	r3, [r5, #0]
 8019ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8019eca:	b01d      	add	sp, #116	@ 0x74
 8019ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ed0:	b002      	add	sp, #8
 8019ed2:	4770      	bx	lr
 8019ed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019edc:	bf14      	ite	ne
 8019ede:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019ee2:	4623      	moveq	r3, r4
 8019ee4:	9304      	str	r3, [sp, #16]
 8019ee6:	9307      	str	r3, [sp, #28]
 8019ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019eec:	9002      	str	r0, [sp, #8]
 8019eee:	9006      	str	r0, [sp, #24]
 8019ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019ef6:	ab21      	add	r3, sp, #132	@ 0x84
 8019ef8:	a902      	add	r1, sp, #8
 8019efa:	4628      	mov	r0, r5
 8019efc:	9301      	str	r3, [sp, #4]
 8019efe:	f002 f86b 	bl	801bfd8 <_svfiprintf_r>
 8019f02:	1c43      	adds	r3, r0, #1
 8019f04:	bfbc      	itt	lt
 8019f06:	238b      	movlt	r3, #139	@ 0x8b
 8019f08:	602b      	strlt	r3, [r5, #0]
 8019f0a:	2c00      	cmp	r4, #0
 8019f0c:	d0dd      	beq.n	8019eca <sniprintf+0x16>
 8019f0e:	9b02      	ldr	r3, [sp, #8]
 8019f10:	2200      	movs	r2, #0
 8019f12:	701a      	strb	r2, [r3, #0]
 8019f14:	e7d9      	b.n	8019eca <sniprintf+0x16>
 8019f16:	bf00      	nop
 8019f18:	240001a0 	.word	0x240001a0

08019f1c <siprintf>:
 8019f1c:	b40e      	push	{r1, r2, r3}
 8019f1e:	b500      	push	{lr}
 8019f20:	b09c      	sub	sp, #112	@ 0x70
 8019f22:	ab1d      	add	r3, sp, #116	@ 0x74
 8019f24:	9002      	str	r0, [sp, #8]
 8019f26:	9006      	str	r0, [sp, #24]
 8019f28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019f2c:	4809      	ldr	r0, [pc, #36]	@ (8019f54 <siprintf+0x38>)
 8019f2e:	9107      	str	r1, [sp, #28]
 8019f30:	9104      	str	r1, [sp, #16]
 8019f32:	4909      	ldr	r1, [pc, #36]	@ (8019f58 <siprintf+0x3c>)
 8019f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f38:	9105      	str	r1, [sp, #20]
 8019f3a:	6800      	ldr	r0, [r0, #0]
 8019f3c:	9301      	str	r3, [sp, #4]
 8019f3e:	a902      	add	r1, sp, #8
 8019f40:	f002 f84a 	bl	801bfd8 <_svfiprintf_r>
 8019f44:	9b02      	ldr	r3, [sp, #8]
 8019f46:	2200      	movs	r2, #0
 8019f48:	701a      	strb	r2, [r3, #0]
 8019f4a:	b01c      	add	sp, #112	@ 0x70
 8019f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f50:	b003      	add	sp, #12
 8019f52:	4770      	bx	lr
 8019f54:	240001a0 	.word	0x240001a0
 8019f58:	ffff0208 	.word	0xffff0208

08019f5c <__sread>:
 8019f5c:	b510      	push	{r4, lr}
 8019f5e:	460c      	mov	r4, r1
 8019f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f64:	f000 f920 	bl	801a1a8 <_read_r>
 8019f68:	2800      	cmp	r0, #0
 8019f6a:	bfab      	itete	ge
 8019f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8019f70:	181b      	addge	r3, r3, r0
 8019f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019f76:	bfac      	ite	ge
 8019f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019f7a:	81a3      	strhlt	r3, [r4, #12]
 8019f7c:	bd10      	pop	{r4, pc}

08019f7e <__swrite>:
 8019f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f82:	461f      	mov	r7, r3
 8019f84:	898b      	ldrh	r3, [r1, #12]
 8019f86:	05db      	lsls	r3, r3, #23
 8019f88:	4605      	mov	r5, r0
 8019f8a:	460c      	mov	r4, r1
 8019f8c:	4616      	mov	r6, r2
 8019f8e:	d505      	bpl.n	8019f9c <__swrite+0x1e>
 8019f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f94:	2302      	movs	r3, #2
 8019f96:	2200      	movs	r2, #0
 8019f98:	f000 f8f4 	bl	801a184 <_lseek_r>
 8019f9c:	89a3      	ldrh	r3, [r4, #12]
 8019f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019fa6:	81a3      	strh	r3, [r4, #12]
 8019fa8:	4632      	mov	r2, r6
 8019faa:	463b      	mov	r3, r7
 8019fac:	4628      	mov	r0, r5
 8019fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019fb2:	f000 b91b 	b.w	801a1ec <_write_r>

08019fb6 <__sseek>:
 8019fb6:	b510      	push	{r4, lr}
 8019fb8:	460c      	mov	r4, r1
 8019fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fbe:	f000 f8e1 	bl	801a184 <_lseek_r>
 8019fc2:	1c43      	adds	r3, r0, #1
 8019fc4:	89a3      	ldrh	r3, [r4, #12]
 8019fc6:	bf15      	itete	ne
 8019fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019fd2:	81a3      	strheq	r3, [r4, #12]
 8019fd4:	bf18      	it	ne
 8019fd6:	81a3      	strhne	r3, [r4, #12]
 8019fd8:	bd10      	pop	{r4, pc}

08019fda <__sclose>:
 8019fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fde:	f000 b8c1 	b.w	801a164 <_close_r>

08019fe2 <__swbuf_r>:
 8019fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe4:	460e      	mov	r6, r1
 8019fe6:	4614      	mov	r4, r2
 8019fe8:	4605      	mov	r5, r0
 8019fea:	b118      	cbz	r0, 8019ff4 <__swbuf_r+0x12>
 8019fec:	6a03      	ldr	r3, [r0, #32]
 8019fee:	b90b      	cbnz	r3, 8019ff4 <__swbuf_r+0x12>
 8019ff0:	f7ff feba 	bl	8019d68 <__sinit>
 8019ff4:	69a3      	ldr	r3, [r4, #24]
 8019ff6:	60a3      	str	r3, [r4, #8]
 8019ff8:	89a3      	ldrh	r3, [r4, #12]
 8019ffa:	071a      	lsls	r2, r3, #28
 8019ffc:	d501      	bpl.n	801a002 <__swbuf_r+0x20>
 8019ffe:	6923      	ldr	r3, [r4, #16]
 801a000:	b943      	cbnz	r3, 801a014 <__swbuf_r+0x32>
 801a002:	4621      	mov	r1, r4
 801a004:	4628      	mov	r0, r5
 801a006:	f000 f82b 	bl	801a060 <__swsetup_r>
 801a00a:	b118      	cbz	r0, 801a014 <__swbuf_r+0x32>
 801a00c:	f04f 37ff 	mov.w	r7, #4294967295
 801a010:	4638      	mov	r0, r7
 801a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a014:	6823      	ldr	r3, [r4, #0]
 801a016:	6922      	ldr	r2, [r4, #16]
 801a018:	1a98      	subs	r0, r3, r2
 801a01a:	6963      	ldr	r3, [r4, #20]
 801a01c:	b2f6      	uxtb	r6, r6
 801a01e:	4283      	cmp	r3, r0
 801a020:	4637      	mov	r7, r6
 801a022:	dc05      	bgt.n	801a030 <__swbuf_r+0x4e>
 801a024:	4621      	mov	r1, r4
 801a026:	4628      	mov	r0, r5
 801a028:	f002 fa98 	bl	801c55c <_fflush_r>
 801a02c:	2800      	cmp	r0, #0
 801a02e:	d1ed      	bne.n	801a00c <__swbuf_r+0x2a>
 801a030:	68a3      	ldr	r3, [r4, #8]
 801a032:	3b01      	subs	r3, #1
 801a034:	60a3      	str	r3, [r4, #8]
 801a036:	6823      	ldr	r3, [r4, #0]
 801a038:	1c5a      	adds	r2, r3, #1
 801a03a:	6022      	str	r2, [r4, #0]
 801a03c:	701e      	strb	r6, [r3, #0]
 801a03e:	6962      	ldr	r2, [r4, #20]
 801a040:	1c43      	adds	r3, r0, #1
 801a042:	429a      	cmp	r2, r3
 801a044:	d004      	beq.n	801a050 <__swbuf_r+0x6e>
 801a046:	89a3      	ldrh	r3, [r4, #12]
 801a048:	07db      	lsls	r3, r3, #31
 801a04a:	d5e1      	bpl.n	801a010 <__swbuf_r+0x2e>
 801a04c:	2e0a      	cmp	r6, #10
 801a04e:	d1df      	bne.n	801a010 <__swbuf_r+0x2e>
 801a050:	4621      	mov	r1, r4
 801a052:	4628      	mov	r0, r5
 801a054:	f002 fa82 	bl	801c55c <_fflush_r>
 801a058:	2800      	cmp	r0, #0
 801a05a:	d0d9      	beq.n	801a010 <__swbuf_r+0x2e>
 801a05c:	e7d6      	b.n	801a00c <__swbuf_r+0x2a>
	...

0801a060 <__swsetup_r>:
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4b29      	ldr	r3, [pc, #164]	@ (801a108 <__swsetup_r+0xa8>)
 801a064:	4605      	mov	r5, r0
 801a066:	6818      	ldr	r0, [r3, #0]
 801a068:	460c      	mov	r4, r1
 801a06a:	b118      	cbz	r0, 801a074 <__swsetup_r+0x14>
 801a06c:	6a03      	ldr	r3, [r0, #32]
 801a06e:	b90b      	cbnz	r3, 801a074 <__swsetup_r+0x14>
 801a070:	f7ff fe7a 	bl	8019d68 <__sinit>
 801a074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a078:	0719      	lsls	r1, r3, #28
 801a07a:	d422      	bmi.n	801a0c2 <__swsetup_r+0x62>
 801a07c:	06da      	lsls	r2, r3, #27
 801a07e:	d407      	bmi.n	801a090 <__swsetup_r+0x30>
 801a080:	2209      	movs	r2, #9
 801a082:	602a      	str	r2, [r5, #0]
 801a084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a088:	81a3      	strh	r3, [r4, #12]
 801a08a:	f04f 30ff 	mov.w	r0, #4294967295
 801a08e:	e033      	b.n	801a0f8 <__swsetup_r+0x98>
 801a090:	0758      	lsls	r0, r3, #29
 801a092:	d512      	bpl.n	801a0ba <__swsetup_r+0x5a>
 801a094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a096:	b141      	cbz	r1, 801a0aa <__swsetup_r+0x4a>
 801a098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a09c:	4299      	cmp	r1, r3
 801a09e:	d002      	beq.n	801a0a6 <__swsetup_r+0x46>
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	f000 feeb 	bl	801ae7c <_free_r>
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 801a0aa:	89a3      	ldrh	r3, [r4, #12]
 801a0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a0b0:	81a3      	strh	r3, [r4, #12]
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	6063      	str	r3, [r4, #4]
 801a0b6:	6923      	ldr	r3, [r4, #16]
 801a0b8:	6023      	str	r3, [r4, #0]
 801a0ba:	89a3      	ldrh	r3, [r4, #12]
 801a0bc:	f043 0308 	orr.w	r3, r3, #8
 801a0c0:	81a3      	strh	r3, [r4, #12]
 801a0c2:	6923      	ldr	r3, [r4, #16]
 801a0c4:	b94b      	cbnz	r3, 801a0da <__swsetup_r+0x7a>
 801a0c6:	89a3      	ldrh	r3, [r4, #12]
 801a0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a0d0:	d003      	beq.n	801a0da <__swsetup_r+0x7a>
 801a0d2:	4621      	mov	r1, r4
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	f002 fa8f 	bl	801c5f8 <__smakebuf_r>
 801a0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0de:	f013 0201 	ands.w	r2, r3, #1
 801a0e2:	d00a      	beq.n	801a0fa <__swsetup_r+0x9a>
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	60a2      	str	r2, [r4, #8]
 801a0e8:	6962      	ldr	r2, [r4, #20]
 801a0ea:	4252      	negs	r2, r2
 801a0ec:	61a2      	str	r2, [r4, #24]
 801a0ee:	6922      	ldr	r2, [r4, #16]
 801a0f0:	b942      	cbnz	r2, 801a104 <__swsetup_r+0xa4>
 801a0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a0f6:	d1c5      	bne.n	801a084 <__swsetup_r+0x24>
 801a0f8:	bd38      	pop	{r3, r4, r5, pc}
 801a0fa:	0799      	lsls	r1, r3, #30
 801a0fc:	bf58      	it	pl
 801a0fe:	6962      	ldrpl	r2, [r4, #20]
 801a100:	60a2      	str	r2, [r4, #8]
 801a102:	e7f4      	b.n	801a0ee <__swsetup_r+0x8e>
 801a104:	2000      	movs	r0, #0
 801a106:	e7f7      	b.n	801a0f8 <__swsetup_r+0x98>
 801a108:	240001a0 	.word	0x240001a0

0801a10c <memset>:
 801a10c:	4402      	add	r2, r0
 801a10e:	4603      	mov	r3, r0
 801a110:	4293      	cmp	r3, r2
 801a112:	d100      	bne.n	801a116 <memset+0xa>
 801a114:	4770      	bx	lr
 801a116:	f803 1b01 	strb.w	r1, [r3], #1
 801a11a:	e7f9      	b.n	801a110 <memset+0x4>

0801a11c <strchr>:
 801a11c:	b2c9      	uxtb	r1, r1
 801a11e:	4603      	mov	r3, r0
 801a120:	4618      	mov	r0, r3
 801a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a126:	b112      	cbz	r2, 801a12e <strchr+0x12>
 801a128:	428a      	cmp	r2, r1
 801a12a:	d1f9      	bne.n	801a120 <strchr+0x4>
 801a12c:	4770      	bx	lr
 801a12e:	2900      	cmp	r1, #0
 801a130:	bf18      	it	ne
 801a132:	2000      	movne	r0, #0
 801a134:	4770      	bx	lr

0801a136 <strncmp>:
 801a136:	b510      	push	{r4, lr}
 801a138:	b16a      	cbz	r2, 801a156 <strncmp+0x20>
 801a13a:	3901      	subs	r1, #1
 801a13c:	1884      	adds	r4, r0, r2
 801a13e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a142:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a146:	429a      	cmp	r2, r3
 801a148:	d103      	bne.n	801a152 <strncmp+0x1c>
 801a14a:	42a0      	cmp	r0, r4
 801a14c:	d001      	beq.n	801a152 <strncmp+0x1c>
 801a14e:	2a00      	cmp	r2, #0
 801a150:	d1f5      	bne.n	801a13e <strncmp+0x8>
 801a152:	1ad0      	subs	r0, r2, r3
 801a154:	bd10      	pop	{r4, pc}
 801a156:	4610      	mov	r0, r2
 801a158:	e7fc      	b.n	801a154 <strncmp+0x1e>
	...

0801a15c <_localeconv_r>:
 801a15c:	4800      	ldr	r0, [pc, #0]	@ (801a160 <_localeconv_r+0x4>)
 801a15e:	4770      	bx	lr
 801a160:	24000124 	.word	0x24000124

0801a164 <_close_r>:
 801a164:	b538      	push	{r3, r4, r5, lr}
 801a166:	4d06      	ldr	r5, [pc, #24]	@ (801a180 <_close_r+0x1c>)
 801a168:	2300      	movs	r3, #0
 801a16a:	4604      	mov	r4, r0
 801a16c:	4608      	mov	r0, r1
 801a16e:	602b      	str	r3, [r5, #0]
 801a170:	f7ec ffc4 	bl	80070fc <_close>
 801a174:	1c43      	adds	r3, r0, #1
 801a176:	d102      	bne.n	801a17e <_close_r+0x1a>
 801a178:	682b      	ldr	r3, [r5, #0]
 801a17a:	b103      	cbz	r3, 801a17e <_close_r+0x1a>
 801a17c:	6023      	str	r3, [r4, #0]
 801a17e:	bd38      	pop	{r3, r4, r5, pc}
 801a180:	24004cb4 	.word	0x24004cb4

0801a184 <_lseek_r>:
 801a184:	b538      	push	{r3, r4, r5, lr}
 801a186:	4d07      	ldr	r5, [pc, #28]	@ (801a1a4 <_lseek_r+0x20>)
 801a188:	4604      	mov	r4, r0
 801a18a:	4608      	mov	r0, r1
 801a18c:	4611      	mov	r1, r2
 801a18e:	2200      	movs	r2, #0
 801a190:	602a      	str	r2, [r5, #0]
 801a192:	461a      	mov	r2, r3
 801a194:	f7ec ffd9 	bl	800714a <_lseek>
 801a198:	1c43      	adds	r3, r0, #1
 801a19a:	d102      	bne.n	801a1a2 <_lseek_r+0x1e>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	b103      	cbz	r3, 801a1a2 <_lseek_r+0x1e>
 801a1a0:	6023      	str	r3, [r4, #0]
 801a1a2:	bd38      	pop	{r3, r4, r5, pc}
 801a1a4:	24004cb4 	.word	0x24004cb4

0801a1a8 <_read_r>:
 801a1a8:	b538      	push	{r3, r4, r5, lr}
 801a1aa:	4d07      	ldr	r5, [pc, #28]	@ (801a1c8 <_read_r+0x20>)
 801a1ac:	4604      	mov	r4, r0
 801a1ae:	4608      	mov	r0, r1
 801a1b0:	4611      	mov	r1, r2
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	602a      	str	r2, [r5, #0]
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	f7ec ff67 	bl	800708a <_read>
 801a1bc:	1c43      	adds	r3, r0, #1
 801a1be:	d102      	bne.n	801a1c6 <_read_r+0x1e>
 801a1c0:	682b      	ldr	r3, [r5, #0]
 801a1c2:	b103      	cbz	r3, 801a1c6 <_read_r+0x1e>
 801a1c4:	6023      	str	r3, [r4, #0]
 801a1c6:	bd38      	pop	{r3, r4, r5, pc}
 801a1c8:	24004cb4 	.word	0x24004cb4

0801a1cc <_sbrk_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d06      	ldr	r5, [pc, #24]	@ (801a1e8 <_sbrk_r+0x1c>)
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	602b      	str	r3, [r5, #0]
 801a1d8:	f7ec ffc4 	bl	8007164 <_sbrk>
 801a1dc:	1c43      	adds	r3, r0, #1
 801a1de:	d102      	bne.n	801a1e6 <_sbrk_r+0x1a>
 801a1e0:	682b      	ldr	r3, [r5, #0]
 801a1e2:	b103      	cbz	r3, 801a1e6 <_sbrk_r+0x1a>
 801a1e4:	6023      	str	r3, [r4, #0]
 801a1e6:	bd38      	pop	{r3, r4, r5, pc}
 801a1e8:	24004cb4 	.word	0x24004cb4

0801a1ec <_write_r>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	4d07      	ldr	r5, [pc, #28]	@ (801a20c <_write_r+0x20>)
 801a1f0:	4604      	mov	r4, r0
 801a1f2:	4608      	mov	r0, r1
 801a1f4:	4611      	mov	r1, r2
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	602a      	str	r2, [r5, #0]
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	f7ec ff62 	bl	80070c4 <_write>
 801a200:	1c43      	adds	r3, r0, #1
 801a202:	d102      	bne.n	801a20a <_write_r+0x1e>
 801a204:	682b      	ldr	r3, [r5, #0]
 801a206:	b103      	cbz	r3, 801a20a <_write_r+0x1e>
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	bd38      	pop	{r3, r4, r5, pc}
 801a20c:	24004cb4 	.word	0x24004cb4

0801a210 <__errno>:
 801a210:	4b01      	ldr	r3, [pc, #4]	@ (801a218 <__errno+0x8>)
 801a212:	6818      	ldr	r0, [r3, #0]
 801a214:	4770      	bx	lr
 801a216:	bf00      	nop
 801a218:	240001a0 	.word	0x240001a0

0801a21c <__libc_init_array>:
 801a21c:	b570      	push	{r4, r5, r6, lr}
 801a21e:	4d0d      	ldr	r5, [pc, #52]	@ (801a254 <__libc_init_array+0x38>)
 801a220:	4c0d      	ldr	r4, [pc, #52]	@ (801a258 <__libc_init_array+0x3c>)
 801a222:	1b64      	subs	r4, r4, r5
 801a224:	10a4      	asrs	r4, r4, #2
 801a226:	2600      	movs	r6, #0
 801a228:	42a6      	cmp	r6, r4
 801a22a:	d109      	bne.n	801a240 <__libc_init_array+0x24>
 801a22c:	4d0b      	ldr	r5, [pc, #44]	@ (801a25c <__libc_init_array+0x40>)
 801a22e:	4c0c      	ldr	r4, [pc, #48]	@ (801a260 <__libc_init_array+0x44>)
 801a230:	f003 fffa 	bl	801e228 <_init>
 801a234:	1b64      	subs	r4, r4, r5
 801a236:	10a4      	asrs	r4, r4, #2
 801a238:	2600      	movs	r6, #0
 801a23a:	42a6      	cmp	r6, r4
 801a23c:	d105      	bne.n	801a24a <__libc_init_array+0x2e>
 801a23e:	bd70      	pop	{r4, r5, r6, pc}
 801a240:	f855 3b04 	ldr.w	r3, [r5], #4
 801a244:	4798      	blx	r3
 801a246:	3601      	adds	r6, #1
 801a248:	e7ee      	b.n	801a228 <__libc_init_array+0xc>
 801a24a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a24e:	4798      	blx	r3
 801a250:	3601      	adds	r6, #1
 801a252:	e7f2      	b.n	801a23a <__libc_init_array+0x1e>
 801a254:	0803c270 	.word	0x0803c270
 801a258:	0803c270 	.word	0x0803c270
 801a25c:	0803c270 	.word	0x0803c270
 801a260:	0803c274 	.word	0x0803c274

0801a264 <__retarget_lock_init_recursive>:
 801a264:	4770      	bx	lr

0801a266 <__retarget_lock_acquire_recursive>:
 801a266:	4770      	bx	lr

0801a268 <__retarget_lock_release_recursive>:
 801a268:	4770      	bx	lr

0801a26a <memcpy>:
 801a26a:	440a      	add	r2, r1
 801a26c:	4291      	cmp	r1, r2
 801a26e:	f100 33ff 	add.w	r3, r0, #4294967295
 801a272:	d100      	bne.n	801a276 <memcpy+0xc>
 801a274:	4770      	bx	lr
 801a276:	b510      	push	{r4, lr}
 801a278:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a280:	4291      	cmp	r1, r2
 801a282:	d1f9      	bne.n	801a278 <memcpy+0xe>
 801a284:	bd10      	pop	{r4, pc}
	...

0801a288 <nan>:
 801a288:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a290 <nan+0x8>
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop
 801a290:	00000000 	.word	0x00000000
 801a294:	7ff80000 	.word	0x7ff80000

0801a298 <nanf>:
 801a298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a2a0 <nanf+0x8>
 801a29c:	4770      	bx	lr
 801a29e:	bf00      	nop
 801a2a0:	7fc00000 	.word	0x7fc00000

0801a2a4 <copysignf>:
 801a2a4:	ee10 3a10 	vmov	r3, s0
 801a2a8:	ee10 2a90 	vmov	r2, s1
 801a2ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a2b0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 801a2b4:	4313      	orrs	r3, r2
 801a2b6:	ee00 3a10 	vmov	s0, r3
 801a2ba:	4770      	bx	lr

0801a2bc <quorem>:
 801a2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2c0:	6903      	ldr	r3, [r0, #16]
 801a2c2:	690c      	ldr	r4, [r1, #16]
 801a2c4:	42a3      	cmp	r3, r4
 801a2c6:	4607      	mov	r7, r0
 801a2c8:	db7e      	blt.n	801a3c8 <quorem+0x10c>
 801a2ca:	3c01      	subs	r4, #1
 801a2cc:	f101 0814 	add.w	r8, r1, #20
 801a2d0:	00a3      	lsls	r3, r4, #2
 801a2d2:	f100 0514 	add.w	r5, r0, #20
 801a2d6:	9300      	str	r3, [sp, #0]
 801a2d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a2dc:	9301      	str	r3, [sp, #4]
 801a2de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a2e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a2ee:	fbb2 f6f3 	udiv	r6, r2, r3
 801a2f2:	d32e      	bcc.n	801a352 <quorem+0x96>
 801a2f4:	f04f 0a00 	mov.w	sl, #0
 801a2f8:	46c4      	mov	ip, r8
 801a2fa:	46ae      	mov	lr, r5
 801a2fc:	46d3      	mov	fp, sl
 801a2fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a302:	b298      	uxth	r0, r3
 801a304:	fb06 a000 	mla	r0, r6, r0, sl
 801a308:	0c02      	lsrs	r2, r0, #16
 801a30a:	0c1b      	lsrs	r3, r3, #16
 801a30c:	fb06 2303 	mla	r3, r6, r3, r2
 801a310:	f8de 2000 	ldr.w	r2, [lr]
 801a314:	b280      	uxth	r0, r0
 801a316:	b292      	uxth	r2, r2
 801a318:	1a12      	subs	r2, r2, r0
 801a31a:	445a      	add	r2, fp
 801a31c:	f8de 0000 	ldr.w	r0, [lr]
 801a320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a324:	b29b      	uxth	r3, r3
 801a326:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a32a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a32e:	b292      	uxth	r2, r2
 801a330:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a334:	45e1      	cmp	r9, ip
 801a336:	f84e 2b04 	str.w	r2, [lr], #4
 801a33a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a33e:	d2de      	bcs.n	801a2fe <quorem+0x42>
 801a340:	9b00      	ldr	r3, [sp, #0]
 801a342:	58eb      	ldr	r3, [r5, r3]
 801a344:	b92b      	cbnz	r3, 801a352 <quorem+0x96>
 801a346:	9b01      	ldr	r3, [sp, #4]
 801a348:	3b04      	subs	r3, #4
 801a34a:	429d      	cmp	r5, r3
 801a34c:	461a      	mov	r2, r3
 801a34e:	d32f      	bcc.n	801a3b0 <quorem+0xf4>
 801a350:	613c      	str	r4, [r7, #16]
 801a352:	4638      	mov	r0, r7
 801a354:	f001 fbec 	bl	801bb30 <__mcmp>
 801a358:	2800      	cmp	r0, #0
 801a35a:	db25      	blt.n	801a3a8 <quorem+0xec>
 801a35c:	4629      	mov	r1, r5
 801a35e:	2000      	movs	r0, #0
 801a360:	f858 2b04 	ldr.w	r2, [r8], #4
 801a364:	f8d1 c000 	ldr.w	ip, [r1]
 801a368:	fa1f fe82 	uxth.w	lr, r2
 801a36c:	fa1f f38c 	uxth.w	r3, ip
 801a370:	eba3 030e 	sub.w	r3, r3, lr
 801a374:	4403      	add	r3, r0
 801a376:	0c12      	lsrs	r2, r2, #16
 801a378:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a37c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a380:	b29b      	uxth	r3, r3
 801a382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a386:	45c1      	cmp	r9, r8
 801a388:	f841 3b04 	str.w	r3, [r1], #4
 801a38c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a390:	d2e6      	bcs.n	801a360 <quorem+0xa4>
 801a392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a39a:	b922      	cbnz	r2, 801a3a6 <quorem+0xea>
 801a39c:	3b04      	subs	r3, #4
 801a39e:	429d      	cmp	r5, r3
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	d30b      	bcc.n	801a3bc <quorem+0x100>
 801a3a4:	613c      	str	r4, [r7, #16]
 801a3a6:	3601      	adds	r6, #1
 801a3a8:	4630      	mov	r0, r6
 801a3aa:	b003      	add	sp, #12
 801a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b0:	6812      	ldr	r2, [r2, #0]
 801a3b2:	3b04      	subs	r3, #4
 801a3b4:	2a00      	cmp	r2, #0
 801a3b6:	d1cb      	bne.n	801a350 <quorem+0x94>
 801a3b8:	3c01      	subs	r4, #1
 801a3ba:	e7c6      	b.n	801a34a <quorem+0x8e>
 801a3bc:	6812      	ldr	r2, [r2, #0]
 801a3be:	3b04      	subs	r3, #4
 801a3c0:	2a00      	cmp	r2, #0
 801a3c2:	d1ef      	bne.n	801a3a4 <quorem+0xe8>
 801a3c4:	3c01      	subs	r4, #1
 801a3c6:	e7ea      	b.n	801a39e <quorem+0xe2>
 801a3c8:	2000      	movs	r0, #0
 801a3ca:	e7ee      	b.n	801a3aa <quorem+0xee>
 801a3cc:	0000      	movs	r0, r0
	...

0801a3d0 <_dtoa_r>:
 801a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d4:	ed2d 8b02 	vpush	{d8}
 801a3d8:	69c7      	ldr	r7, [r0, #28]
 801a3da:	b091      	sub	sp, #68	@ 0x44
 801a3dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a3e0:	ec55 4b10 	vmov	r4, r5, d0
 801a3e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a3e6:	9107      	str	r1, [sp, #28]
 801a3e8:	4681      	mov	r9, r0
 801a3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3ec:	930d      	str	r3, [sp, #52]	@ 0x34
 801a3ee:	b97f      	cbnz	r7, 801a410 <_dtoa_r+0x40>
 801a3f0:	2010      	movs	r0, #16
 801a3f2:	f7fd fea1 	bl	8018138 <malloc>
 801a3f6:	4602      	mov	r2, r0
 801a3f8:	f8c9 001c 	str.w	r0, [r9, #28]
 801a3fc:	b920      	cbnz	r0, 801a408 <_dtoa_r+0x38>
 801a3fe:	4ba0      	ldr	r3, [pc, #640]	@ (801a680 <_dtoa_r+0x2b0>)
 801a400:	21ef      	movs	r1, #239	@ 0xef
 801a402:	48a0      	ldr	r0, [pc, #640]	@ (801a684 <_dtoa_r+0x2b4>)
 801a404:	f002 f970 	bl	801c6e8 <__assert_func>
 801a408:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a40c:	6007      	str	r7, [r0, #0]
 801a40e:	60c7      	str	r7, [r0, #12]
 801a410:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a414:	6819      	ldr	r1, [r3, #0]
 801a416:	b159      	cbz	r1, 801a430 <_dtoa_r+0x60>
 801a418:	685a      	ldr	r2, [r3, #4]
 801a41a:	604a      	str	r2, [r1, #4]
 801a41c:	2301      	movs	r3, #1
 801a41e:	4093      	lsls	r3, r2
 801a420:	608b      	str	r3, [r1, #8]
 801a422:	4648      	mov	r0, r9
 801a424:	f001 f900 	bl	801b628 <_Bfree>
 801a428:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a42c:	2200      	movs	r2, #0
 801a42e:	601a      	str	r2, [r3, #0]
 801a430:	1e2b      	subs	r3, r5, #0
 801a432:	bfbb      	ittet	lt
 801a434:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a438:	9303      	strlt	r3, [sp, #12]
 801a43a:	2300      	movge	r3, #0
 801a43c:	2201      	movlt	r2, #1
 801a43e:	bfac      	ite	ge
 801a440:	6033      	strge	r3, [r6, #0]
 801a442:	6032      	strlt	r2, [r6, #0]
 801a444:	4b90      	ldr	r3, [pc, #576]	@ (801a688 <_dtoa_r+0x2b8>)
 801a446:	9e03      	ldr	r6, [sp, #12]
 801a448:	43b3      	bics	r3, r6
 801a44a:	d110      	bne.n	801a46e <_dtoa_r+0x9e>
 801a44c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a44e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a452:	6013      	str	r3, [r2, #0]
 801a454:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a458:	4323      	orrs	r3, r4
 801a45a:	f000 84de 	beq.w	801ae1a <_dtoa_r+0xa4a>
 801a45e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a460:	4f8a      	ldr	r7, [pc, #552]	@ (801a68c <_dtoa_r+0x2bc>)
 801a462:	2b00      	cmp	r3, #0
 801a464:	f000 84e0 	beq.w	801ae28 <_dtoa_r+0xa58>
 801a468:	1cfb      	adds	r3, r7, #3
 801a46a:	f000 bcdb 	b.w	801ae24 <_dtoa_r+0xa54>
 801a46e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a472:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a47a:	d10a      	bne.n	801a492 <_dtoa_r+0xc2>
 801a47c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a47e:	2301      	movs	r3, #1
 801a480:	6013      	str	r3, [r2, #0]
 801a482:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a484:	b113      	cbz	r3, 801a48c <_dtoa_r+0xbc>
 801a486:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a488:	4b81      	ldr	r3, [pc, #516]	@ (801a690 <_dtoa_r+0x2c0>)
 801a48a:	6013      	str	r3, [r2, #0]
 801a48c:	4f81      	ldr	r7, [pc, #516]	@ (801a694 <_dtoa_r+0x2c4>)
 801a48e:	f000 bccb 	b.w	801ae28 <_dtoa_r+0xa58>
 801a492:	aa0e      	add	r2, sp, #56	@ 0x38
 801a494:	a90f      	add	r1, sp, #60	@ 0x3c
 801a496:	4648      	mov	r0, r9
 801a498:	eeb0 0b48 	vmov.f64	d0, d8
 801a49c:	f001 fc68 	bl	801bd70 <__d2b>
 801a4a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a4a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a4a6:	9001      	str	r0, [sp, #4]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d045      	beq.n	801a538 <_dtoa_r+0x168>
 801a4ac:	eeb0 7b48 	vmov.f64	d7, d8
 801a4b0:	ee18 1a90 	vmov	r1, s17
 801a4b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a4b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a4bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a4c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a4c4:	2500      	movs	r5, #0
 801a4c6:	ee07 1a90 	vmov	s15, r1
 801a4ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a4ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a668 <_dtoa_r+0x298>
 801a4d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a4d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a670 <_dtoa_r+0x2a0>
 801a4da:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a4de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a678 <_dtoa_r+0x2a8>
 801a4e2:	ee07 3a90 	vmov	s15, r3
 801a4e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a4ea:	eeb0 7b46 	vmov.f64	d7, d6
 801a4ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a4f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a4f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4fe:	ee16 8a90 	vmov	r8, s13
 801a502:	d508      	bpl.n	801a516 <_dtoa_r+0x146>
 801a504:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a508:	eeb4 6b47 	vcmp.f64	d6, d7
 801a50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a510:	bf18      	it	ne
 801a512:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a516:	f1b8 0f16 	cmp.w	r8, #22
 801a51a:	d82b      	bhi.n	801a574 <_dtoa_r+0x1a4>
 801a51c:	495e      	ldr	r1, [pc, #376]	@ (801a698 <_dtoa_r+0x2c8>)
 801a51e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a522:	ed91 7b00 	vldr	d7, [r1]
 801a526:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a52e:	d501      	bpl.n	801a534 <_dtoa_r+0x164>
 801a530:	f108 38ff 	add.w	r8, r8, #4294967295
 801a534:	2100      	movs	r1, #0
 801a536:	e01e      	b.n	801a576 <_dtoa_r+0x1a6>
 801a538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a53a:	4413      	add	r3, r2
 801a53c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a540:	2920      	cmp	r1, #32
 801a542:	bfc1      	itttt	gt
 801a544:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a548:	408e      	lslgt	r6, r1
 801a54a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a54e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a552:	bfd6      	itet	le
 801a554:	f1c1 0120 	rsble	r1, r1, #32
 801a558:	4331      	orrgt	r1, r6
 801a55a:	fa04 f101 	lslle.w	r1, r4, r1
 801a55e:	ee07 1a90 	vmov	s15, r1
 801a562:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a566:	3b01      	subs	r3, #1
 801a568:	ee17 1a90 	vmov	r1, s15
 801a56c:	2501      	movs	r5, #1
 801a56e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a572:	e7a8      	b.n	801a4c6 <_dtoa_r+0xf6>
 801a574:	2101      	movs	r1, #1
 801a576:	1ad2      	subs	r2, r2, r3
 801a578:	1e53      	subs	r3, r2, #1
 801a57a:	9306      	str	r3, [sp, #24]
 801a57c:	bf45      	ittet	mi
 801a57e:	f1c2 0301 	rsbmi	r3, r2, #1
 801a582:	9305      	strmi	r3, [sp, #20]
 801a584:	2300      	movpl	r3, #0
 801a586:	2300      	movmi	r3, #0
 801a588:	bf4c      	ite	mi
 801a58a:	9306      	strmi	r3, [sp, #24]
 801a58c:	9305      	strpl	r3, [sp, #20]
 801a58e:	f1b8 0f00 	cmp.w	r8, #0
 801a592:	910c      	str	r1, [sp, #48]	@ 0x30
 801a594:	db18      	blt.n	801a5c8 <_dtoa_r+0x1f8>
 801a596:	9b06      	ldr	r3, [sp, #24]
 801a598:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a59c:	4443      	add	r3, r8
 801a59e:	9306      	str	r3, [sp, #24]
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	9a07      	ldr	r2, [sp, #28]
 801a5a4:	2a09      	cmp	r2, #9
 801a5a6:	d849      	bhi.n	801a63c <_dtoa_r+0x26c>
 801a5a8:	2a05      	cmp	r2, #5
 801a5aa:	bfc4      	itt	gt
 801a5ac:	3a04      	subgt	r2, #4
 801a5ae:	9207      	strgt	r2, [sp, #28]
 801a5b0:	9a07      	ldr	r2, [sp, #28]
 801a5b2:	f1a2 0202 	sub.w	r2, r2, #2
 801a5b6:	bfcc      	ite	gt
 801a5b8:	2400      	movgt	r4, #0
 801a5ba:	2401      	movle	r4, #1
 801a5bc:	2a03      	cmp	r2, #3
 801a5be:	d848      	bhi.n	801a652 <_dtoa_r+0x282>
 801a5c0:	e8df f002 	tbb	[pc, r2]
 801a5c4:	3a2c2e0b 	.word	0x3a2c2e0b
 801a5c8:	9b05      	ldr	r3, [sp, #20]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	eba3 0308 	sub.w	r3, r3, r8
 801a5d0:	9305      	str	r3, [sp, #20]
 801a5d2:	920a      	str	r2, [sp, #40]	@ 0x28
 801a5d4:	f1c8 0300 	rsb	r3, r8, #0
 801a5d8:	e7e3      	b.n	801a5a2 <_dtoa_r+0x1d2>
 801a5da:	2200      	movs	r2, #0
 801a5dc:	9208      	str	r2, [sp, #32]
 801a5de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5e0:	2a00      	cmp	r2, #0
 801a5e2:	dc39      	bgt.n	801a658 <_dtoa_r+0x288>
 801a5e4:	f04f 0b01 	mov.w	fp, #1
 801a5e8:	46da      	mov	sl, fp
 801a5ea:	465a      	mov	r2, fp
 801a5ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a5f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a5f4:	2100      	movs	r1, #0
 801a5f6:	2004      	movs	r0, #4
 801a5f8:	f100 0614 	add.w	r6, r0, #20
 801a5fc:	4296      	cmp	r6, r2
 801a5fe:	d930      	bls.n	801a662 <_dtoa_r+0x292>
 801a600:	6079      	str	r1, [r7, #4]
 801a602:	4648      	mov	r0, r9
 801a604:	9304      	str	r3, [sp, #16]
 801a606:	f000 ffcf 	bl	801b5a8 <_Balloc>
 801a60a:	9b04      	ldr	r3, [sp, #16]
 801a60c:	4607      	mov	r7, r0
 801a60e:	2800      	cmp	r0, #0
 801a610:	d146      	bne.n	801a6a0 <_dtoa_r+0x2d0>
 801a612:	4b22      	ldr	r3, [pc, #136]	@ (801a69c <_dtoa_r+0x2cc>)
 801a614:	4602      	mov	r2, r0
 801a616:	f240 11af 	movw	r1, #431	@ 0x1af
 801a61a:	e6f2      	b.n	801a402 <_dtoa_r+0x32>
 801a61c:	2201      	movs	r2, #1
 801a61e:	e7dd      	b.n	801a5dc <_dtoa_r+0x20c>
 801a620:	2200      	movs	r2, #0
 801a622:	9208      	str	r2, [sp, #32]
 801a624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a626:	eb08 0b02 	add.w	fp, r8, r2
 801a62a:	f10b 0a01 	add.w	sl, fp, #1
 801a62e:	4652      	mov	r2, sl
 801a630:	2a01      	cmp	r2, #1
 801a632:	bfb8      	it	lt
 801a634:	2201      	movlt	r2, #1
 801a636:	e7db      	b.n	801a5f0 <_dtoa_r+0x220>
 801a638:	2201      	movs	r2, #1
 801a63a:	e7f2      	b.n	801a622 <_dtoa_r+0x252>
 801a63c:	2401      	movs	r4, #1
 801a63e:	2200      	movs	r2, #0
 801a640:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a644:	f04f 3bff 	mov.w	fp, #4294967295
 801a648:	2100      	movs	r1, #0
 801a64a:	46da      	mov	sl, fp
 801a64c:	2212      	movs	r2, #18
 801a64e:	9109      	str	r1, [sp, #36]	@ 0x24
 801a650:	e7ce      	b.n	801a5f0 <_dtoa_r+0x220>
 801a652:	2201      	movs	r2, #1
 801a654:	9208      	str	r2, [sp, #32]
 801a656:	e7f5      	b.n	801a644 <_dtoa_r+0x274>
 801a658:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a65c:	46da      	mov	sl, fp
 801a65e:	465a      	mov	r2, fp
 801a660:	e7c6      	b.n	801a5f0 <_dtoa_r+0x220>
 801a662:	3101      	adds	r1, #1
 801a664:	0040      	lsls	r0, r0, #1
 801a666:	e7c7      	b.n	801a5f8 <_dtoa_r+0x228>
 801a668:	636f4361 	.word	0x636f4361
 801a66c:	3fd287a7 	.word	0x3fd287a7
 801a670:	8b60c8b3 	.word	0x8b60c8b3
 801a674:	3fc68a28 	.word	0x3fc68a28
 801a678:	509f79fb 	.word	0x509f79fb
 801a67c:	3fd34413 	.word	0x3fd34413
 801a680:	0803b9cf 	.word	0x0803b9cf
 801a684:	0803b9e6 	.word	0x0803b9e6
 801a688:	7ff00000 	.word	0x7ff00000
 801a68c:	0803b9cb 	.word	0x0803b9cb
 801a690:	0803b992 	.word	0x0803b992
 801a694:	0803b991 	.word	0x0803b991
 801a698:	0803bb40 	.word	0x0803bb40
 801a69c:	0803ba3e 	.word	0x0803ba3e
 801a6a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a6a4:	f1ba 0f0e 	cmp.w	sl, #14
 801a6a8:	6010      	str	r0, [r2, #0]
 801a6aa:	d86f      	bhi.n	801a78c <_dtoa_r+0x3bc>
 801a6ac:	2c00      	cmp	r4, #0
 801a6ae:	d06d      	beq.n	801a78c <_dtoa_r+0x3bc>
 801a6b0:	f1b8 0f00 	cmp.w	r8, #0
 801a6b4:	f340 80c2 	ble.w	801a83c <_dtoa_r+0x46c>
 801a6b8:	4aca      	ldr	r2, [pc, #808]	@ (801a9e4 <_dtoa_r+0x614>)
 801a6ba:	f008 010f 	and.w	r1, r8, #15
 801a6be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a6c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a6c6:	ed92 7b00 	vldr	d7, [r2]
 801a6ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a6ce:	f000 80a9 	beq.w	801a824 <_dtoa_r+0x454>
 801a6d2:	4ac5      	ldr	r2, [pc, #788]	@ (801a9e8 <_dtoa_r+0x618>)
 801a6d4:	ed92 6b08 	vldr	d6, [r2, #32]
 801a6d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a6dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a6e0:	f001 010f 	and.w	r1, r1, #15
 801a6e4:	2203      	movs	r2, #3
 801a6e6:	48c0      	ldr	r0, [pc, #768]	@ (801a9e8 <_dtoa_r+0x618>)
 801a6e8:	2900      	cmp	r1, #0
 801a6ea:	f040 809d 	bne.w	801a828 <_dtoa_r+0x458>
 801a6ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a6f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a6fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a700:	2900      	cmp	r1, #0
 801a702:	f000 80c1 	beq.w	801a888 <_dtoa_r+0x4b8>
 801a706:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a70a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a712:	f140 80b9 	bpl.w	801a888 <_dtoa_r+0x4b8>
 801a716:	f1ba 0f00 	cmp.w	sl, #0
 801a71a:	f000 80b5 	beq.w	801a888 <_dtoa_r+0x4b8>
 801a71e:	f1bb 0f00 	cmp.w	fp, #0
 801a722:	dd31      	ble.n	801a788 <_dtoa_r+0x3b8>
 801a724:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a728:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a72c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a730:	f108 31ff 	add.w	r1, r8, #4294967295
 801a734:	9104      	str	r1, [sp, #16]
 801a736:	3201      	adds	r2, #1
 801a738:	465c      	mov	r4, fp
 801a73a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a73e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a742:	ee07 2a90 	vmov	s15, r2
 801a746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a74a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a74e:	ee15 2a90 	vmov	r2, s11
 801a752:	ec51 0b15 	vmov	r0, r1, d5
 801a756:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a75a:	2c00      	cmp	r4, #0
 801a75c:	f040 8098 	bne.w	801a890 <_dtoa_r+0x4c0>
 801a760:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a764:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a768:	ec41 0b17 	vmov	d7, r0, r1
 801a76c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a774:	f300 8261 	bgt.w	801ac3a <_dtoa_r+0x86a>
 801a778:	eeb1 7b47 	vneg.f64	d7, d7
 801a77c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a784:	f100 80f5 	bmi.w	801a972 <_dtoa_r+0x5a2>
 801a788:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a78c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a78e:	2a00      	cmp	r2, #0
 801a790:	f2c0 812c 	blt.w	801a9ec <_dtoa_r+0x61c>
 801a794:	f1b8 0f0e 	cmp.w	r8, #14
 801a798:	f300 8128 	bgt.w	801a9ec <_dtoa_r+0x61c>
 801a79c:	4b91      	ldr	r3, [pc, #580]	@ (801a9e4 <_dtoa_r+0x614>)
 801a79e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a7a2:	ed93 6b00 	vldr	d6, [r3]
 801a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	da03      	bge.n	801a7b4 <_dtoa_r+0x3e4>
 801a7ac:	f1ba 0f00 	cmp.w	sl, #0
 801a7b0:	f340 80d2 	ble.w	801a958 <_dtoa_r+0x588>
 801a7b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a7b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a7bc:	463e      	mov	r6, r7
 801a7be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a7c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a7c6:	ee15 3a10 	vmov	r3, s10
 801a7ca:	3330      	adds	r3, #48	@ 0x30
 801a7cc:	f806 3b01 	strb.w	r3, [r6], #1
 801a7d0:	1bf3      	subs	r3, r6, r7
 801a7d2:	459a      	cmp	sl, r3
 801a7d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a7d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a7dc:	f040 80f8 	bne.w	801a9d0 <_dtoa_r+0x600>
 801a7e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a7e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ec:	f300 80dd 	bgt.w	801a9aa <_dtoa_r+0x5da>
 801a7f0:	eeb4 7b46 	vcmp.f64	d7, d6
 801a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f8:	d104      	bne.n	801a804 <_dtoa_r+0x434>
 801a7fa:	ee15 3a10 	vmov	r3, s10
 801a7fe:	07db      	lsls	r3, r3, #31
 801a800:	f100 80d3 	bmi.w	801a9aa <_dtoa_r+0x5da>
 801a804:	9901      	ldr	r1, [sp, #4]
 801a806:	4648      	mov	r0, r9
 801a808:	f000 ff0e 	bl	801b628 <_Bfree>
 801a80c:	2300      	movs	r3, #0
 801a80e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a810:	7033      	strb	r3, [r6, #0]
 801a812:	f108 0301 	add.w	r3, r8, #1
 801a816:	6013      	str	r3, [r2, #0]
 801a818:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	f000 8304 	beq.w	801ae28 <_dtoa_r+0xa58>
 801a820:	601e      	str	r6, [r3, #0]
 801a822:	e301      	b.n	801ae28 <_dtoa_r+0xa58>
 801a824:	2202      	movs	r2, #2
 801a826:	e75e      	b.n	801a6e6 <_dtoa_r+0x316>
 801a828:	07cc      	lsls	r4, r1, #31
 801a82a:	d504      	bpl.n	801a836 <_dtoa_r+0x466>
 801a82c:	ed90 6b00 	vldr	d6, [r0]
 801a830:	3201      	adds	r2, #1
 801a832:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a836:	1049      	asrs	r1, r1, #1
 801a838:	3008      	adds	r0, #8
 801a83a:	e755      	b.n	801a6e8 <_dtoa_r+0x318>
 801a83c:	d022      	beq.n	801a884 <_dtoa_r+0x4b4>
 801a83e:	f1c8 0100 	rsb	r1, r8, #0
 801a842:	4a68      	ldr	r2, [pc, #416]	@ (801a9e4 <_dtoa_r+0x614>)
 801a844:	f001 000f 	and.w	r0, r1, #15
 801a848:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a84c:	ed92 7b00 	vldr	d7, [r2]
 801a850:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a854:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a858:	4863      	ldr	r0, [pc, #396]	@ (801a9e8 <_dtoa_r+0x618>)
 801a85a:	1109      	asrs	r1, r1, #4
 801a85c:	2400      	movs	r4, #0
 801a85e:	2202      	movs	r2, #2
 801a860:	b929      	cbnz	r1, 801a86e <_dtoa_r+0x49e>
 801a862:	2c00      	cmp	r4, #0
 801a864:	f43f af49 	beq.w	801a6fa <_dtoa_r+0x32a>
 801a868:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a86c:	e745      	b.n	801a6fa <_dtoa_r+0x32a>
 801a86e:	07ce      	lsls	r6, r1, #31
 801a870:	d505      	bpl.n	801a87e <_dtoa_r+0x4ae>
 801a872:	ed90 6b00 	vldr	d6, [r0]
 801a876:	3201      	adds	r2, #1
 801a878:	2401      	movs	r4, #1
 801a87a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a87e:	1049      	asrs	r1, r1, #1
 801a880:	3008      	adds	r0, #8
 801a882:	e7ed      	b.n	801a860 <_dtoa_r+0x490>
 801a884:	2202      	movs	r2, #2
 801a886:	e738      	b.n	801a6fa <_dtoa_r+0x32a>
 801a888:	f8cd 8010 	str.w	r8, [sp, #16]
 801a88c:	4654      	mov	r4, sl
 801a88e:	e754      	b.n	801a73a <_dtoa_r+0x36a>
 801a890:	4a54      	ldr	r2, [pc, #336]	@ (801a9e4 <_dtoa_r+0x614>)
 801a892:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a896:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a89a:	9a08      	ldr	r2, [sp, #32]
 801a89c:	ec41 0b17 	vmov	d7, r0, r1
 801a8a0:	443c      	add	r4, r7
 801a8a2:	b34a      	cbz	r2, 801a8f8 <_dtoa_r+0x528>
 801a8a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a8a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a8ac:	463e      	mov	r6, r7
 801a8ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a8b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a8b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a8ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a8be:	ee14 2a90 	vmov	r2, s9
 801a8c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a8c6:	3230      	adds	r2, #48	@ 0x30
 801a8c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a8cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d4:	f806 2b01 	strb.w	r2, [r6], #1
 801a8d8:	d438      	bmi.n	801a94c <_dtoa_r+0x57c>
 801a8da:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a8de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e6:	d462      	bmi.n	801a9ae <_dtoa_r+0x5de>
 801a8e8:	42a6      	cmp	r6, r4
 801a8ea:	f43f af4d 	beq.w	801a788 <_dtoa_r+0x3b8>
 801a8ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a8f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8f6:	e7e0      	b.n	801a8ba <_dtoa_r+0x4ea>
 801a8f8:	4621      	mov	r1, r4
 801a8fa:	463e      	mov	r6, r7
 801a8fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a900:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a904:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a908:	ee14 2a90 	vmov	r2, s9
 801a90c:	3230      	adds	r2, #48	@ 0x30
 801a90e:	f806 2b01 	strb.w	r2, [r6], #1
 801a912:	42a6      	cmp	r6, r4
 801a914:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a918:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a91c:	d119      	bne.n	801a952 <_dtoa_r+0x582>
 801a91e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a922:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a926:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a92e:	dc3e      	bgt.n	801a9ae <_dtoa_r+0x5de>
 801a930:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a934:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a93c:	f57f af24 	bpl.w	801a788 <_dtoa_r+0x3b8>
 801a940:	460e      	mov	r6, r1
 801a942:	3901      	subs	r1, #1
 801a944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a948:	2b30      	cmp	r3, #48	@ 0x30
 801a94a:	d0f9      	beq.n	801a940 <_dtoa_r+0x570>
 801a94c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a950:	e758      	b.n	801a804 <_dtoa_r+0x434>
 801a952:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a956:	e7d5      	b.n	801a904 <_dtoa_r+0x534>
 801a958:	d10b      	bne.n	801a972 <_dtoa_r+0x5a2>
 801a95a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a95e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a962:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a966:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96e:	f2c0 8161 	blt.w	801ac34 <_dtoa_r+0x864>
 801a972:	2400      	movs	r4, #0
 801a974:	4625      	mov	r5, r4
 801a976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a978:	43db      	mvns	r3, r3
 801a97a:	9304      	str	r3, [sp, #16]
 801a97c:	463e      	mov	r6, r7
 801a97e:	f04f 0800 	mov.w	r8, #0
 801a982:	4621      	mov	r1, r4
 801a984:	4648      	mov	r0, r9
 801a986:	f000 fe4f 	bl	801b628 <_Bfree>
 801a98a:	2d00      	cmp	r5, #0
 801a98c:	d0de      	beq.n	801a94c <_dtoa_r+0x57c>
 801a98e:	f1b8 0f00 	cmp.w	r8, #0
 801a992:	d005      	beq.n	801a9a0 <_dtoa_r+0x5d0>
 801a994:	45a8      	cmp	r8, r5
 801a996:	d003      	beq.n	801a9a0 <_dtoa_r+0x5d0>
 801a998:	4641      	mov	r1, r8
 801a99a:	4648      	mov	r0, r9
 801a99c:	f000 fe44 	bl	801b628 <_Bfree>
 801a9a0:	4629      	mov	r1, r5
 801a9a2:	4648      	mov	r0, r9
 801a9a4:	f000 fe40 	bl	801b628 <_Bfree>
 801a9a8:	e7d0      	b.n	801a94c <_dtoa_r+0x57c>
 801a9aa:	f8cd 8010 	str.w	r8, [sp, #16]
 801a9ae:	4633      	mov	r3, r6
 801a9b0:	461e      	mov	r6, r3
 801a9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a9b6:	2a39      	cmp	r2, #57	@ 0x39
 801a9b8:	d106      	bne.n	801a9c8 <_dtoa_r+0x5f8>
 801a9ba:	429f      	cmp	r7, r3
 801a9bc:	d1f8      	bne.n	801a9b0 <_dtoa_r+0x5e0>
 801a9be:	9a04      	ldr	r2, [sp, #16]
 801a9c0:	3201      	adds	r2, #1
 801a9c2:	9204      	str	r2, [sp, #16]
 801a9c4:	2230      	movs	r2, #48	@ 0x30
 801a9c6:	703a      	strb	r2, [r7, #0]
 801a9c8:	781a      	ldrb	r2, [r3, #0]
 801a9ca:	3201      	adds	r2, #1
 801a9cc:	701a      	strb	r2, [r3, #0]
 801a9ce:	e7bd      	b.n	801a94c <_dtoa_r+0x57c>
 801a9d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a9d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9dc:	f47f aeef 	bne.w	801a7be <_dtoa_r+0x3ee>
 801a9e0:	e710      	b.n	801a804 <_dtoa_r+0x434>
 801a9e2:	bf00      	nop
 801a9e4:	0803bb40 	.word	0x0803bb40
 801a9e8:	0803bb18 	.word	0x0803bb18
 801a9ec:	9908      	ldr	r1, [sp, #32]
 801a9ee:	2900      	cmp	r1, #0
 801a9f0:	f000 80e3 	beq.w	801abba <_dtoa_r+0x7ea>
 801a9f4:	9907      	ldr	r1, [sp, #28]
 801a9f6:	2901      	cmp	r1, #1
 801a9f8:	f300 80c8 	bgt.w	801ab8c <_dtoa_r+0x7bc>
 801a9fc:	2d00      	cmp	r5, #0
 801a9fe:	f000 80c1 	beq.w	801ab84 <_dtoa_r+0x7b4>
 801aa02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801aa06:	9e05      	ldr	r6, [sp, #20]
 801aa08:	461c      	mov	r4, r3
 801aa0a:	9304      	str	r3, [sp, #16]
 801aa0c:	9b05      	ldr	r3, [sp, #20]
 801aa0e:	4413      	add	r3, r2
 801aa10:	9305      	str	r3, [sp, #20]
 801aa12:	9b06      	ldr	r3, [sp, #24]
 801aa14:	2101      	movs	r1, #1
 801aa16:	4413      	add	r3, r2
 801aa18:	4648      	mov	r0, r9
 801aa1a:	9306      	str	r3, [sp, #24]
 801aa1c:	f000 ff02 	bl	801b824 <__i2b>
 801aa20:	9b04      	ldr	r3, [sp, #16]
 801aa22:	4605      	mov	r5, r0
 801aa24:	b166      	cbz	r6, 801aa40 <_dtoa_r+0x670>
 801aa26:	9a06      	ldr	r2, [sp, #24]
 801aa28:	2a00      	cmp	r2, #0
 801aa2a:	dd09      	ble.n	801aa40 <_dtoa_r+0x670>
 801aa2c:	42b2      	cmp	r2, r6
 801aa2e:	9905      	ldr	r1, [sp, #20]
 801aa30:	bfa8      	it	ge
 801aa32:	4632      	movge	r2, r6
 801aa34:	1a89      	subs	r1, r1, r2
 801aa36:	9105      	str	r1, [sp, #20]
 801aa38:	9906      	ldr	r1, [sp, #24]
 801aa3a:	1ab6      	subs	r6, r6, r2
 801aa3c:	1a8a      	subs	r2, r1, r2
 801aa3e:	9206      	str	r2, [sp, #24]
 801aa40:	b1fb      	cbz	r3, 801aa82 <_dtoa_r+0x6b2>
 801aa42:	9a08      	ldr	r2, [sp, #32]
 801aa44:	2a00      	cmp	r2, #0
 801aa46:	f000 80bc 	beq.w	801abc2 <_dtoa_r+0x7f2>
 801aa4a:	b19c      	cbz	r4, 801aa74 <_dtoa_r+0x6a4>
 801aa4c:	4629      	mov	r1, r5
 801aa4e:	4622      	mov	r2, r4
 801aa50:	4648      	mov	r0, r9
 801aa52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa54:	f000 ffa6 	bl	801b9a4 <__pow5mult>
 801aa58:	9a01      	ldr	r2, [sp, #4]
 801aa5a:	4601      	mov	r1, r0
 801aa5c:	4605      	mov	r5, r0
 801aa5e:	4648      	mov	r0, r9
 801aa60:	f000 fef6 	bl	801b850 <__multiply>
 801aa64:	9901      	ldr	r1, [sp, #4]
 801aa66:	9004      	str	r0, [sp, #16]
 801aa68:	4648      	mov	r0, r9
 801aa6a:	f000 fddd 	bl	801b628 <_Bfree>
 801aa6e:	9a04      	ldr	r2, [sp, #16]
 801aa70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa72:	9201      	str	r2, [sp, #4]
 801aa74:	1b1a      	subs	r2, r3, r4
 801aa76:	d004      	beq.n	801aa82 <_dtoa_r+0x6b2>
 801aa78:	9901      	ldr	r1, [sp, #4]
 801aa7a:	4648      	mov	r0, r9
 801aa7c:	f000 ff92 	bl	801b9a4 <__pow5mult>
 801aa80:	9001      	str	r0, [sp, #4]
 801aa82:	2101      	movs	r1, #1
 801aa84:	4648      	mov	r0, r9
 801aa86:	f000 fecd 	bl	801b824 <__i2b>
 801aa8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa8c:	4604      	mov	r4, r0
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	f000 81d0 	beq.w	801ae34 <_dtoa_r+0xa64>
 801aa94:	461a      	mov	r2, r3
 801aa96:	4601      	mov	r1, r0
 801aa98:	4648      	mov	r0, r9
 801aa9a:	f000 ff83 	bl	801b9a4 <__pow5mult>
 801aa9e:	9b07      	ldr	r3, [sp, #28]
 801aaa0:	2b01      	cmp	r3, #1
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	f300 8095 	bgt.w	801abd2 <_dtoa_r+0x802>
 801aaa8:	9b02      	ldr	r3, [sp, #8]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	f040 808b 	bne.w	801abc6 <_dtoa_r+0x7f6>
 801aab0:	9b03      	ldr	r3, [sp, #12]
 801aab2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aab6:	2a00      	cmp	r2, #0
 801aab8:	f040 8087 	bne.w	801abca <_dtoa_r+0x7fa>
 801aabc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801aac0:	0d12      	lsrs	r2, r2, #20
 801aac2:	0512      	lsls	r2, r2, #20
 801aac4:	2a00      	cmp	r2, #0
 801aac6:	f000 8082 	beq.w	801abce <_dtoa_r+0x7fe>
 801aaca:	9b05      	ldr	r3, [sp, #20]
 801aacc:	3301      	adds	r3, #1
 801aace:	9305      	str	r3, [sp, #20]
 801aad0:	9b06      	ldr	r3, [sp, #24]
 801aad2:	3301      	adds	r3, #1
 801aad4:	9306      	str	r3, [sp, #24]
 801aad6:	2301      	movs	r3, #1
 801aad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aadc:	2b00      	cmp	r3, #0
 801aade:	f000 81af 	beq.w	801ae40 <_dtoa_r+0xa70>
 801aae2:	6922      	ldr	r2, [r4, #16]
 801aae4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aae8:	6910      	ldr	r0, [r2, #16]
 801aaea:	f000 fe4f 	bl	801b78c <__hi0bits>
 801aaee:	f1c0 0020 	rsb	r0, r0, #32
 801aaf2:	9b06      	ldr	r3, [sp, #24]
 801aaf4:	4418      	add	r0, r3
 801aaf6:	f010 001f 	ands.w	r0, r0, #31
 801aafa:	d076      	beq.n	801abea <_dtoa_r+0x81a>
 801aafc:	f1c0 0220 	rsb	r2, r0, #32
 801ab00:	2a04      	cmp	r2, #4
 801ab02:	dd69      	ble.n	801abd8 <_dtoa_r+0x808>
 801ab04:	9b05      	ldr	r3, [sp, #20]
 801ab06:	f1c0 001c 	rsb	r0, r0, #28
 801ab0a:	4403      	add	r3, r0
 801ab0c:	9305      	str	r3, [sp, #20]
 801ab0e:	9b06      	ldr	r3, [sp, #24]
 801ab10:	4406      	add	r6, r0
 801ab12:	4403      	add	r3, r0
 801ab14:	9306      	str	r3, [sp, #24]
 801ab16:	9b05      	ldr	r3, [sp, #20]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	dd05      	ble.n	801ab28 <_dtoa_r+0x758>
 801ab1c:	9901      	ldr	r1, [sp, #4]
 801ab1e:	461a      	mov	r2, r3
 801ab20:	4648      	mov	r0, r9
 801ab22:	f000 ff99 	bl	801ba58 <__lshift>
 801ab26:	9001      	str	r0, [sp, #4]
 801ab28:	9b06      	ldr	r3, [sp, #24]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	dd05      	ble.n	801ab3a <_dtoa_r+0x76a>
 801ab2e:	4621      	mov	r1, r4
 801ab30:	461a      	mov	r2, r3
 801ab32:	4648      	mov	r0, r9
 801ab34:	f000 ff90 	bl	801ba58 <__lshift>
 801ab38:	4604      	mov	r4, r0
 801ab3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d056      	beq.n	801abee <_dtoa_r+0x81e>
 801ab40:	9801      	ldr	r0, [sp, #4]
 801ab42:	4621      	mov	r1, r4
 801ab44:	f000 fff4 	bl	801bb30 <__mcmp>
 801ab48:	2800      	cmp	r0, #0
 801ab4a:	da50      	bge.n	801abee <_dtoa_r+0x81e>
 801ab4c:	f108 33ff 	add.w	r3, r8, #4294967295
 801ab50:	9304      	str	r3, [sp, #16]
 801ab52:	9901      	ldr	r1, [sp, #4]
 801ab54:	2300      	movs	r3, #0
 801ab56:	220a      	movs	r2, #10
 801ab58:	4648      	mov	r0, r9
 801ab5a:	f000 fd87 	bl	801b66c <__multadd>
 801ab5e:	9b08      	ldr	r3, [sp, #32]
 801ab60:	9001      	str	r0, [sp, #4]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	f000 816e 	beq.w	801ae44 <_dtoa_r+0xa74>
 801ab68:	4629      	mov	r1, r5
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	220a      	movs	r2, #10
 801ab6e:	4648      	mov	r0, r9
 801ab70:	f000 fd7c 	bl	801b66c <__multadd>
 801ab74:	f1bb 0f00 	cmp.w	fp, #0
 801ab78:	4605      	mov	r5, r0
 801ab7a:	dc64      	bgt.n	801ac46 <_dtoa_r+0x876>
 801ab7c:	9b07      	ldr	r3, [sp, #28]
 801ab7e:	2b02      	cmp	r3, #2
 801ab80:	dc3e      	bgt.n	801ac00 <_dtoa_r+0x830>
 801ab82:	e060      	b.n	801ac46 <_dtoa_r+0x876>
 801ab84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ab8a:	e73c      	b.n	801aa06 <_dtoa_r+0x636>
 801ab8c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801ab90:	42a3      	cmp	r3, r4
 801ab92:	bfbf      	itttt	lt
 801ab94:	1ae2      	sublt	r2, r4, r3
 801ab96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ab98:	189b      	addlt	r3, r3, r2
 801ab9a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801ab9c:	bfae      	itee	ge
 801ab9e:	1b1c      	subge	r4, r3, r4
 801aba0:	4623      	movlt	r3, r4
 801aba2:	2400      	movlt	r4, #0
 801aba4:	f1ba 0f00 	cmp.w	sl, #0
 801aba8:	bfb5      	itete	lt
 801abaa:	9a05      	ldrlt	r2, [sp, #20]
 801abac:	9e05      	ldrge	r6, [sp, #20]
 801abae:	eba2 060a 	sublt.w	r6, r2, sl
 801abb2:	4652      	movge	r2, sl
 801abb4:	bfb8      	it	lt
 801abb6:	2200      	movlt	r2, #0
 801abb8:	e727      	b.n	801aa0a <_dtoa_r+0x63a>
 801abba:	9e05      	ldr	r6, [sp, #20]
 801abbc:	9d08      	ldr	r5, [sp, #32]
 801abbe:	461c      	mov	r4, r3
 801abc0:	e730      	b.n	801aa24 <_dtoa_r+0x654>
 801abc2:	461a      	mov	r2, r3
 801abc4:	e758      	b.n	801aa78 <_dtoa_r+0x6a8>
 801abc6:	2300      	movs	r3, #0
 801abc8:	e786      	b.n	801aad8 <_dtoa_r+0x708>
 801abca:	9b02      	ldr	r3, [sp, #8]
 801abcc:	e784      	b.n	801aad8 <_dtoa_r+0x708>
 801abce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801abd0:	e783      	b.n	801aada <_dtoa_r+0x70a>
 801abd2:	2300      	movs	r3, #0
 801abd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801abd6:	e784      	b.n	801aae2 <_dtoa_r+0x712>
 801abd8:	d09d      	beq.n	801ab16 <_dtoa_r+0x746>
 801abda:	9b05      	ldr	r3, [sp, #20]
 801abdc:	321c      	adds	r2, #28
 801abde:	4413      	add	r3, r2
 801abe0:	9305      	str	r3, [sp, #20]
 801abe2:	9b06      	ldr	r3, [sp, #24]
 801abe4:	4416      	add	r6, r2
 801abe6:	4413      	add	r3, r2
 801abe8:	e794      	b.n	801ab14 <_dtoa_r+0x744>
 801abea:	4602      	mov	r2, r0
 801abec:	e7f5      	b.n	801abda <_dtoa_r+0x80a>
 801abee:	f1ba 0f00 	cmp.w	sl, #0
 801abf2:	f8cd 8010 	str.w	r8, [sp, #16]
 801abf6:	46d3      	mov	fp, sl
 801abf8:	dc21      	bgt.n	801ac3e <_dtoa_r+0x86e>
 801abfa:	9b07      	ldr	r3, [sp, #28]
 801abfc:	2b02      	cmp	r3, #2
 801abfe:	dd1e      	ble.n	801ac3e <_dtoa_r+0x86e>
 801ac00:	f1bb 0f00 	cmp.w	fp, #0
 801ac04:	f47f aeb7 	bne.w	801a976 <_dtoa_r+0x5a6>
 801ac08:	4621      	mov	r1, r4
 801ac0a:	465b      	mov	r3, fp
 801ac0c:	2205      	movs	r2, #5
 801ac0e:	4648      	mov	r0, r9
 801ac10:	f000 fd2c 	bl	801b66c <__multadd>
 801ac14:	4601      	mov	r1, r0
 801ac16:	4604      	mov	r4, r0
 801ac18:	9801      	ldr	r0, [sp, #4]
 801ac1a:	f000 ff89 	bl	801bb30 <__mcmp>
 801ac1e:	2800      	cmp	r0, #0
 801ac20:	f77f aea9 	ble.w	801a976 <_dtoa_r+0x5a6>
 801ac24:	463e      	mov	r6, r7
 801ac26:	2331      	movs	r3, #49	@ 0x31
 801ac28:	f806 3b01 	strb.w	r3, [r6], #1
 801ac2c:	9b04      	ldr	r3, [sp, #16]
 801ac2e:	3301      	adds	r3, #1
 801ac30:	9304      	str	r3, [sp, #16]
 801ac32:	e6a4      	b.n	801a97e <_dtoa_r+0x5ae>
 801ac34:	f8cd 8010 	str.w	r8, [sp, #16]
 801ac38:	4654      	mov	r4, sl
 801ac3a:	4625      	mov	r5, r4
 801ac3c:	e7f2      	b.n	801ac24 <_dtoa_r+0x854>
 801ac3e:	9b08      	ldr	r3, [sp, #32]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	f000 8103 	beq.w	801ae4c <_dtoa_r+0xa7c>
 801ac46:	2e00      	cmp	r6, #0
 801ac48:	dd05      	ble.n	801ac56 <_dtoa_r+0x886>
 801ac4a:	4629      	mov	r1, r5
 801ac4c:	4632      	mov	r2, r6
 801ac4e:	4648      	mov	r0, r9
 801ac50:	f000 ff02 	bl	801ba58 <__lshift>
 801ac54:	4605      	mov	r5, r0
 801ac56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d058      	beq.n	801ad0e <_dtoa_r+0x93e>
 801ac5c:	6869      	ldr	r1, [r5, #4]
 801ac5e:	4648      	mov	r0, r9
 801ac60:	f000 fca2 	bl	801b5a8 <_Balloc>
 801ac64:	4606      	mov	r6, r0
 801ac66:	b928      	cbnz	r0, 801ac74 <_dtoa_r+0x8a4>
 801ac68:	4b82      	ldr	r3, [pc, #520]	@ (801ae74 <_dtoa_r+0xaa4>)
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ac70:	f7ff bbc7 	b.w	801a402 <_dtoa_r+0x32>
 801ac74:	692a      	ldr	r2, [r5, #16]
 801ac76:	3202      	adds	r2, #2
 801ac78:	0092      	lsls	r2, r2, #2
 801ac7a:	f105 010c 	add.w	r1, r5, #12
 801ac7e:	300c      	adds	r0, #12
 801ac80:	f7ff faf3 	bl	801a26a <memcpy>
 801ac84:	2201      	movs	r2, #1
 801ac86:	4631      	mov	r1, r6
 801ac88:	4648      	mov	r0, r9
 801ac8a:	f000 fee5 	bl	801ba58 <__lshift>
 801ac8e:	1c7b      	adds	r3, r7, #1
 801ac90:	9305      	str	r3, [sp, #20]
 801ac92:	eb07 030b 	add.w	r3, r7, fp
 801ac96:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac98:	9b02      	ldr	r3, [sp, #8]
 801ac9a:	f003 0301 	and.w	r3, r3, #1
 801ac9e:	46a8      	mov	r8, r5
 801aca0:	9308      	str	r3, [sp, #32]
 801aca2:	4605      	mov	r5, r0
 801aca4:	9b05      	ldr	r3, [sp, #20]
 801aca6:	9801      	ldr	r0, [sp, #4]
 801aca8:	4621      	mov	r1, r4
 801acaa:	f103 3bff 	add.w	fp, r3, #4294967295
 801acae:	f7ff fb05 	bl	801a2bc <quorem>
 801acb2:	4641      	mov	r1, r8
 801acb4:	9002      	str	r0, [sp, #8]
 801acb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801acba:	9801      	ldr	r0, [sp, #4]
 801acbc:	f000 ff38 	bl	801bb30 <__mcmp>
 801acc0:	462a      	mov	r2, r5
 801acc2:	9006      	str	r0, [sp, #24]
 801acc4:	4621      	mov	r1, r4
 801acc6:	4648      	mov	r0, r9
 801acc8:	f000 ff4e 	bl	801bb68 <__mdiff>
 801accc:	68c2      	ldr	r2, [r0, #12]
 801acce:	4606      	mov	r6, r0
 801acd0:	b9fa      	cbnz	r2, 801ad12 <_dtoa_r+0x942>
 801acd2:	4601      	mov	r1, r0
 801acd4:	9801      	ldr	r0, [sp, #4]
 801acd6:	f000 ff2b 	bl	801bb30 <__mcmp>
 801acda:	4602      	mov	r2, r0
 801acdc:	4631      	mov	r1, r6
 801acde:	4648      	mov	r0, r9
 801ace0:	920a      	str	r2, [sp, #40]	@ 0x28
 801ace2:	f000 fca1 	bl	801b628 <_Bfree>
 801ace6:	9b07      	ldr	r3, [sp, #28]
 801ace8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801acea:	9e05      	ldr	r6, [sp, #20]
 801acec:	ea43 0102 	orr.w	r1, r3, r2
 801acf0:	9b08      	ldr	r3, [sp, #32]
 801acf2:	4319      	orrs	r1, r3
 801acf4:	d10f      	bne.n	801ad16 <_dtoa_r+0x946>
 801acf6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801acfa:	d028      	beq.n	801ad4e <_dtoa_r+0x97e>
 801acfc:	9b06      	ldr	r3, [sp, #24]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	dd02      	ble.n	801ad08 <_dtoa_r+0x938>
 801ad02:	9b02      	ldr	r3, [sp, #8]
 801ad04:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801ad08:	f88b a000 	strb.w	sl, [fp]
 801ad0c:	e639      	b.n	801a982 <_dtoa_r+0x5b2>
 801ad0e:	4628      	mov	r0, r5
 801ad10:	e7bd      	b.n	801ac8e <_dtoa_r+0x8be>
 801ad12:	2201      	movs	r2, #1
 801ad14:	e7e2      	b.n	801acdc <_dtoa_r+0x90c>
 801ad16:	9b06      	ldr	r3, [sp, #24]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	db04      	blt.n	801ad26 <_dtoa_r+0x956>
 801ad1c:	9907      	ldr	r1, [sp, #28]
 801ad1e:	430b      	orrs	r3, r1
 801ad20:	9908      	ldr	r1, [sp, #32]
 801ad22:	430b      	orrs	r3, r1
 801ad24:	d120      	bne.n	801ad68 <_dtoa_r+0x998>
 801ad26:	2a00      	cmp	r2, #0
 801ad28:	ddee      	ble.n	801ad08 <_dtoa_r+0x938>
 801ad2a:	9901      	ldr	r1, [sp, #4]
 801ad2c:	2201      	movs	r2, #1
 801ad2e:	4648      	mov	r0, r9
 801ad30:	f000 fe92 	bl	801ba58 <__lshift>
 801ad34:	4621      	mov	r1, r4
 801ad36:	9001      	str	r0, [sp, #4]
 801ad38:	f000 fefa 	bl	801bb30 <__mcmp>
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	dc03      	bgt.n	801ad48 <_dtoa_r+0x978>
 801ad40:	d1e2      	bne.n	801ad08 <_dtoa_r+0x938>
 801ad42:	f01a 0f01 	tst.w	sl, #1
 801ad46:	d0df      	beq.n	801ad08 <_dtoa_r+0x938>
 801ad48:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ad4c:	d1d9      	bne.n	801ad02 <_dtoa_r+0x932>
 801ad4e:	2339      	movs	r3, #57	@ 0x39
 801ad50:	f88b 3000 	strb.w	r3, [fp]
 801ad54:	4633      	mov	r3, r6
 801ad56:	461e      	mov	r6, r3
 801ad58:	3b01      	subs	r3, #1
 801ad5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ad5e:	2a39      	cmp	r2, #57	@ 0x39
 801ad60:	d053      	beq.n	801ae0a <_dtoa_r+0xa3a>
 801ad62:	3201      	adds	r2, #1
 801ad64:	701a      	strb	r2, [r3, #0]
 801ad66:	e60c      	b.n	801a982 <_dtoa_r+0x5b2>
 801ad68:	2a00      	cmp	r2, #0
 801ad6a:	dd07      	ble.n	801ad7c <_dtoa_r+0x9ac>
 801ad6c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ad70:	d0ed      	beq.n	801ad4e <_dtoa_r+0x97e>
 801ad72:	f10a 0301 	add.w	r3, sl, #1
 801ad76:	f88b 3000 	strb.w	r3, [fp]
 801ad7a:	e602      	b.n	801a982 <_dtoa_r+0x5b2>
 801ad7c:	9b05      	ldr	r3, [sp, #20]
 801ad7e:	9a05      	ldr	r2, [sp, #20]
 801ad80:	f803 ac01 	strb.w	sl, [r3, #-1]
 801ad84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d029      	beq.n	801adde <_dtoa_r+0xa0e>
 801ad8a:	9901      	ldr	r1, [sp, #4]
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	220a      	movs	r2, #10
 801ad90:	4648      	mov	r0, r9
 801ad92:	f000 fc6b 	bl	801b66c <__multadd>
 801ad96:	45a8      	cmp	r8, r5
 801ad98:	9001      	str	r0, [sp, #4]
 801ad9a:	f04f 0300 	mov.w	r3, #0
 801ad9e:	f04f 020a 	mov.w	r2, #10
 801ada2:	4641      	mov	r1, r8
 801ada4:	4648      	mov	r0, r9
 801ada6:	d107      	bne.n	801adb8 <_dtoa_r+0x9e8>
 801ada8:	f000 fc60 	bl	801b66c <__multadd>
 801adac:	4680      	mov	r8, r0
 801adae:	4605      	mov	r5, r0
 801adb0:	9b05      	ldr	r3, [sp, #20]
 801adb2:	3301      	adds	r3, #1
 801adb4:	9305      	str	r3, [sp, #20]
 801adb6:	e775      	b.n	801aca4 <_dtoa_r+0x8d4>
 801adb8:	f000 fc58 	bl	801b66c <__multadd>
 801adbc:	4629      	mov	r1, r5
 801adbe:	4680      	mov	r8, r0
 801adc0:	2300      	movs	r3, #0
 801adc2:	220a      	movs	r2, #10
 801adc4:	4648      	mov	r0, r9
 801adc6:	f000 fc51 	bl	801b66c <__multadd>
 801adca:	4605      	mov	r5, r0
 801adcc:	e7f0      	b.n	801adb0 <_dtoa_r+0x9e0>
 801adce:	f1bb 0f00 	cmp.w	fp, #0
 801add2:	bfcc      	ite	gt
 801add4:	465e      	movgt	r6, fp
 801add6:	2601      	movle	r6, #1
 801add8:	443e      	add	r6, r7
 801adda:	f04f 0800 	mov.w	r8, #0
 801adde:	9901      	ldr	r1, [sp, #4]
 801ade0:	2201      	movs	r2, #1
 801ade2:	4648      	mov	r0, r9
 801ade4:	f000 fe38 	bl	801ba58 <__lshift>
 801ade8:	4621      	mov	r1, r4
 801adea:	9001      	str	r0, [sp, #4]
 801adec:	f000 fea0 	bl	801bb30 <__mcmp>
 801adf0:	2800      	cmp	r0, #0
 801adf2:	dcaf      	bgt.n	801ad54 <_dtoa_r+0x984>
 801adf4:	d102      	bne.n	801adfc <_dtoa_r+0xa2c>
 801adf6:	f01a 0f01 	tst.w	sl, #1
 801adfa:	d1ab      	bne.n	801ad54 <_dtoa_r+0x984>
 801adfc:	4633      	mov	r3, r6
 801adfe:	461e      	mov	r6, r3
 801ae00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ae04:	2a30      	cmp	r2, #48	@ 0x30
 801ae06:	d0fa      	beq.n	801adfe <_dtoa_r+0xa2e>
 801ae08:	e5bb      	b.n	801a982 <_dtoa_r+0x5b2>
 801ae0a:	429f      	cmp	r7, r3
 801ae0c:	d1a3      	bne.n	801ad56 <_dtoa_r+0x986>
 801ae0e:	9b04      	ldr	r3, [sp, #16]
 801ae10:	3301      	adds	r3, #1
 801ae12:	9304      	str	r3, [sp, #16]
 801ae14:	2331      	movs	r3, #49	@ 0x31
 801ae16:	703b      	strb	r3, [r7, #0]
 801ae18:	e5b3      	b.n	801a982 <_dtoa_r+0x5b2>
 801ae1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae1c:	4f16      	ldr	r7, [pc, #88]	@ (801ae78 <_dtoa_r+0xaa8>)
 801ae1e:	b11b      	cbz	r3, 801ae28 <_dtoa_r+0xa58>
 801ae20:	f107 0308 	add.w	r3, r7, #8
 801ae24:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ae26:	6013      	str	r3, [r2, #0]
 801ae28:	4638      	mov	r0, r7
 801ae2a:	b011      	add	sp, #68	@ 0x44
 801ae2c:	ecbd 8b02 	vpop	{d8}
 801ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae34:	9b07      	ldr	r3, [sp, #28]
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	f77f ae36 	ble.w	801aaa8 <_dtoa_r+0x6d8>
 801ae3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ae3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae40:	2001      	movs	r0, #1
 801ae42:	e656      	b.n	801aaf2 <_dtoa_r+0x722>
 801ae44:	f1bb 0f00 	cmp.w	fp, #0
 801ae48:	f77f aed7 	ble.w	801abfa <_dtoa_r+0x82a>
 801ae4c:	463e      	mov	r6, r7
 801ae4e:	9801      	ldr	r0, [sp, #4]
 801ae50:	4621      	mov	r1, r4
 801ae52:	f7ff fa33 	bl	801a2bc <quorem>
 801ae56:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ae5a:	f806 ab01 	strb.w	sl, [r6], #1
 801ae5e:	1bf2      	subs	r2, r6, r7
 801ae60:	4593      	cmp	fp, r2
 801ae62:	ddb4      	ble.n	801adce <_dtoa_r+0x9fe>
 801ae64:	9901      	ldr	r1, [sp, #4]
 801ae66:	2300      	movs	r3, #0
 801ae68:	220a      	movs	r2, #10
 801ae6a:	4648      	mov	r0, r9
 801ae6c:	f000 fbfe 	bl	801b66c <__multadd>
 801ae70:	9001      	str	r0, [sp, #4]
 801ae72:	e7ec      	b.n	801ae4e <_dtoa_r+0xa7e>
 801ae74:	0803ba3e 	.word	0x0803ba3e
 801ae78:	0803b9c2 	.word	0x0803b9c2

0801ae7c <_free_r>:
 801ae7c:	b538      	push	{r3, r4, r5, lr}
 801ae7e:	4605      	mov	r5, r0
 801ae80:	2900      	cmp	r1, #0
 801ae82:	d041      	beq.n	801af08 <_free_r+0x8c>
 801ae84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae88:	1f0c      	subs	r4, r1, #4
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	bfb8      	it	lt
 801ae8e:	18e4      	addlt	r4, r4, r3
 801ae90:	f7fd fa04 	bl	801829c <__malloc_lock>
 801ae94:	4a1d      	ldr	r2, [pc, #116]	@ (801af0c <_free_r+0x90>)
 801ae96:	6813      	ldr	r3, [r2, #0]
 801ae98:	b933      	cbnz	r3, 801aea8 <_free_r+0x2c>
 801ae9a:	6063      	str	r3, [r4, #4]
 801ae9c:	6014      	str	r4, [r2, #0]
 801ae9e:	4628      	mov	r0, r5
 801aea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aea4:	f7fd ba00 	b.w	80182a8 <__malloc_unlock>
 801aea8:	42a3      	cmp	r3, r4
 801aeaa:	d908      	bls.n	801aebe <_free_r+0x42>
 801aeac:	6820      	ldr	r0, [r4, #0]
 801aeae:	1821      	adds	r1, r4, r0
 801aeb0:	428b      	cmp	r3, r1
 801aeb2:	bf01      	itttt	eq
 801aeb4:	6819      	ldreq	r1, [r3, #0]
 801aeb6:	685b      	ldreq	r3, [r3, #4]
 801aeb8:	1809      	addeq	r1, r1, r0
 801aeba:	6021      	streq	r1, [r4, #0]
 801aebc:	e7ed      	b.n	801ae9a <_free_r+0x1e>
 801aebe:	461a      	mov	r2, r3
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	b10b      	cbz	r3, 801aec8 <_free_r+0x4c>
 801aec4:	42a3      	cmp	r3, r4
 801aec6:	d9fa      	bls.n	801aebe <_free_r+0x42>
 801aec8:	6811      	ldr	r1, [r2, #0]
 801aeca:	1850      	adds	r0, r2, r1
 801aecc:	42a0      	cmp	r0, r4
 801aece:	d10b      	bne.n	801aee8 <_free_r+0x6c>
 801aed0:	6820      	ldr	r0, [r4, #0]
 801aed2:	4401      	add	r1, r0
 801aed4:	1850      	adds	r0, r2, r1
 801aed6:	4283      	cmp	r3, r0
 801aed8:	6011      	str	r1, [r2, #0]
 801aeda:	d1e0      	bne.n	801ae9e <_free_r+0x22>
 801aedc:	6818      	ldr	r0, [r3, #0]
 801aede:	685b      	ldr	r3, [r3, #4]
 801aee0:	6053      	str	r3, [r2, #4]
 801aee2:	4408      	add	r0, r1
 801aee4:	6010      	str	r0, [r2, #0]
 801aee6:	e7da      	b.n	801ae9e <_free_r+0x22>
 801aee8:	d902      	bls.n	801aef0 <_free_r+0x74>
 801aeea:	230c      	movs	r3, #12
 801aeec:	602b      	str	r3, [r5, #0]
 801aeee:	e7d6      	b.n	801ae9e <_free_r+0x22>
 801aef0:	6820      	ldr	r0, [r4, #0]
 801aef2:	1821      	adds	r1, r4, r0
 801aef4:	428b      	cmp	r3, r1
 801aef6:	bf04      	itt	eq
 801aef8:	6819      	ldreq	r1, [r3, #0]
 801aefa:	685b      	ldreq	r3, [r3, #4]
 801aefc:	6063      	str	r3, [r4, #4]
 801aefe:	bf04      	itt	eq
 801af00:	1809      	addeq	r1, r1, r0
 801af02:	6021      	streq	r1, [r4, #0]
 801af04:	6054      	str	r4, [r2, #4]
 801af06:	e7ca      	b.n	801ae9e <_free_r+0x22>
 801af08:	bd38      	pop	{r3, r4, r5, pc}
 801af0a:	bf00      	nop
 801af0c:	24004b74 	.word	0x24004b74

0801af10 <rshift>:
 801af10:	6903      	ldr	r3, [r0, #16]
 801af12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801af16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801af1e:	f100 0414 	add.w	r4, r0, #20
 801af22:	dd45      	ble.n	801afb0 <rshift+0xa0>
 801af24:	f011 011f 	ands.w	r1, r1, #31
 801af28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801af2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801af30:	d10c      	bne.n	801af4c <rshift+0x3c>
 801af32:	f100 0710 	add.w	r7, r0, #16
 801af36:	4629      	mov	r1, r5
 801af38:	42b1      	cmp	r1, r6
 801af3a:	d334      	bcc.n	801afa6 <rshift+0x96>
 801af3c:	1a9b      	subs	r3, r3, r2
 801af3e:	009b      	lsls	r3, r3, #2
 801af40:	1eea      	subs	r2, r5, #3
 801af42:	4296      	cmp	r6, r2
 801af44:	bf38      	it	cc
 801af46:	2300      	movcc	r3, #0
 801af48:	4423      	add	r3, r4
 801af4a:	e015      	b.n	801af78 <rshift+0x68>
 801af4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801af50:	f1c1 0820 	rsb	r8, r1, #32
 801af54:	40cf      	lsrs	r7, r1
 801af56:	f105 0e04 	add.w	lr, r5, #4
 801af5a:	46a1      	mov	r9, r4
 801af5c:	4576      	cmp	r6, lr
 801af5e:	46f4      	mov	ip, lr
 801af60:	d815      	bhi.n	801af8e <rshift+0x7e>
 801af62:	1a9a      	subs	r2, r3, r2
 801af64:	0092      	lsls	r2, r2, #2
 801af66:	3a04      	subs	r2, #4
 801af68:	3501      	adds	r5, #1
 801af6a:	42ae      	cmp	r6, r5
 801af6c:	bf38      	it	cc
 801af6e:	2200      	movcc	r2, #0
 801af70:	18a3      	adds	r3, r4, r2
 801af72:	50a7      	str	r7, [r4, r2]
 801af74:	b107      	cbz	r7, 801af78 <rshift+0x68>
 801af76:	3304      	adds	r3, #4
 801af78:	1b1a      	subs	r2, r3, r4
 801af7a:	42a3      	cmp	r3, r4
 801af7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801af80:	bf08      	it	eq
 801af82:	2300      	moveq	r3, #0
 801af84:	6102      	str	r2, [r0, #16]
 801af86:	bf08      	it	eq
 801af88:	6143      	streq	r3, [r0, #20]
 801af8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af8e:	f8dc c000 	ldr.w	ip, [ip]
 801af92:	fa0c fc08 	lsl.w	ip, ip, r8
 801af96:	ea4c 0707 	orr.w	r7, ip, r7
 801af9a:	f849 7b04 	str.w	r7, [r9], #4
 801af9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801afa2:	40cf      	lsrs	r7, r1
 801afa4:	e7da      	b.n	801af5c <rshift+0x4c>
 801afa6:	f851 cb04 	ldr.w	ip, [r1], #4
 801afaa:	f847 cf04 	str.w	ip, [r7, #4]!
 801afae:	e7c3      	b.n	801af38 <rshift+0x28>
 801afb0:	4623      	mov	r3, r4
 801afb2:	e7e1      	b.n	801af78 <rshift+0x68>

0801afb4 <__hexdig_fun>:
 801afb4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801afb8:	2b09      	cmp	r3, #9
 801afba:	d802      	bhi.n	801afc2 <__hexdig_fun+0xe>
 801afbc:	3820      	subs	r0, #32
 801afbe:	b2c0      	uxtb	r0, r0
 801afc0:	4770      	bx	lr
 801afc2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801afc6:	2b05      	cmp	r3, #5
 801afc8:	d801      	bhi.n	801afce <__hexdig_fun+0x1a>
 801afca:	3847      	subs	r0, #71	@ 0x47
 801afcc:	e7f7      	b.n	801afbe <__hexdig_fun+0xa>
 801afce:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801afd2:	2b05      	cmp	r3, #5
 801afd4:	d801      	bhi.n	801afda <__hexdig_fun+0x26>
 801afd6:	3827      	subs	r0, #39	@ 0x27
 801afd8:	e7f1      	b.n	801afbe <__hexdig_fun+0xa>
 801afda:	2000      	movs	r0, #0
 801afdc:	4770      	bx	lr
	...

0801afe0 <__gethex>:
 801afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afe4:	b085      	sub	sp, #20
 801afe6:	468a      	mov	sl, r1
 801afe8:	9302      	str	r3, [sp, #8]
 801afea:	680b      	ldr	r3, [r1, #0]
 801afec:	9001      	str	r0, [sp, #4]
 801afee:	4690      	mov	r8, r2
 801aff0:	1c9c      	adds	r4, r3, #2
 801aff2:	46a1      	mov	r9, r4
 801aff4:	f814 0b01 	ldrb.w	r0, [r4], #1
 801aff8:	2830      	cmp	r0, #48	@ 0x30
 801affa:	d0fa      	beq.n	801aff2 <__gethex+0x12>
 801affc:	eba9 0303 	sub.w	r3, r9, r3
 801b000:	f1a3 0b02 	sub.w	fp, r3, #2
 801b004:	f7ff ffd6 	bl	801afb4 <__hexdig_fun>
 801b008:	4605      	mov	r5, r0
 801b00a:	2800      	cmp	r0, #0
 801b00c:	d168      	bne.n	801b0e0 <__gethex+0x100>
 801b00e:	49a0      	ldr	r1, [pc, #640]	@ (801b290 <__gethex+0x2b0>)
 801b010:	2201      	movs	r2, #1
 801b012:	4648      	mov	r0, r9
 801b014:	f7ff f88f 	bl	801a136 <strncmp>
 801b018:	4607      	mov	r7, r0
 801b01a:	2800      	cmp	r0, #0
 801b01c:	d167      	bne.n	801b0ee <__gethex+0x10e>
 801b01e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b022:	4626      	mov	r6, r4
 801b024:	f7ff ffc6 	bl	801afb4 <__hexdig_fun>
 801b028:	2800      	cmp	r0, #0
 801b02a:	d062      	beq.n	801b0f2 <__gethex+0x112>
 801b02c:	4623      	mov	r3, r4
 801b02e:	7818      	ldrb	r0, [r3, #0]
 801b030:	2830      	cmp	r0, #48	@ 0x30
 801b032:	4699      	mov	r9, r3
 801b034:	f103 0301 	add.w	r3, r3, #1
 801b038:	d0f9      	beq.n	801b02e <__gethex+0x4e>
 801b03a:	f7ff ffbb 	bl	801afb4 <__hexdig_fun>
 801b03e:	fab0 f580 	clz	r5, r0
 801b042:	096d      	lsrs	r5, r5, #5
 801b044:	f04f 0b01 	mov.w	fp, #1
 801b048:	464a      	mov	r2, r9
 801b04a:	4616      	mov	r6, r2
 801b04c:	3201      	adds	r2, #1
 801b04e:	7830      	ldrb	r0, [r6, #0]
 801b050:	f7ff ffb0 	bl	801afb4 <__hexdig_fun>
 801b054:	2800      	cmp	r0, #0
 801b056:	d1f8      	bne.n	801b04a <__gethex+0x6a>
 801b058:	498d      	ldr	r1, [pc, #564]	@ (801b290 <__gethex+0x2b0>)
 801b05a:	2201      	movs	r2, #1
 801b05c:	4630      	mov	r0, r6
 801b05e:	f7ff f86a 	bl	801a136 <strncmp>
 801b062:	2800      	cmp	r0, #0
 801b064:	d13f      	bne.n	801b0e6 <__gethex+0x106>
 801b066:	b944      	cbnz	r4, 801b07a <__gethex+0x9a>
 801b068:	1c74      	adds	r4, r6, #1
 801b06a:	4622      	mov	r2, r4
 801b06c:	4616      	mov	r6, r2
 801b06e:	3201      	adds	r2, #1
 801b070:	7830      	ldrb	r0, [r6, #0]
 801b072:	f7ff ff9f 	bl	801afb4 <__hexdig_fun>
 801b076:	2800      	cmp	r0, #0
 801b078:	d1f8      	bne.n	801b06c <__gethex+0x8c>
 801b07a:	1ba4      	subs	r4, r4, r6
 801b07c:	00a7      	lsls	r7, r4, #2
 801b07e:	7833      	ldrb	r3, [r6, #0]
 801b080:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b084:	2b50      	cmp	r3, #80	@ 0x50
 801b086:	d13e      	bne.n	801b106 <__gethex+0x126>
 801b088:	7873      	ldrb	r3, [r6, #1]
 801b08a:	2b2b      	cmp	r3, #43	@ 0x2b
 801b08c:	d033      	beq.n	801b0f6 <__gethex+0x116>
 801b08e:	2b2d      	cmp	r3, #45	@ 0x2d
 801b090:	d034      	beq.n	801b0fc <__gethex+0x11c>
 801b092:	1c71      	adds	r1, r6, #1
 801b094:	2400      	movs	r4, #0
 801b096:	7808      	ldrb	r0, [r1, #0]
 801b098:	f7ff ff8c 	bl	801afb4 <__hexdig_fun>
 801b09c:	1e43      	subs	r3, r0, #1
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	2b18      	cmp	r3, #24
 801b0a2:	d830      	bhi.n	801b106 <__gethex+0x126>
 801b0a4:	f1a0 0210 	sub.w	r2, r0, #16
 801b0a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b0ac:	f7ff ff82 	bl	801afb4 <__hexdig_fun>
 801b0b0:	f100 3cff 	add.w	ip, r0, #4294967295
 801b0b4:	fa5f fc8c 	uxtb.w	ip, ip
 801b0b8:	f1bc 0f18 	cmp.w	ip, #24
 801b0bc:	f04f 030a 	mov.w	r3, #10
 801b0c0:	d91e      	bls.n	801b100 <__gethex+0x120>
 801b0c2:	b104      	cbz	r4, 801b0c6 <__gethex+0xe6>
 801b0c4:	4252      	negs	r2, r2
 801b0c6:	4417      	add	r7, r2
 801b0c8:	f8ca 1000 	str.w	r1, [sl]
 801b0cc:	b1ed      	cbz	r5, 801b10a <__gethex+0x12a>
 801b0ce:	f1bb 0f00 	cmp.w	fp, #0
 801b0d2:	bf0c      	ite	eq
 801b0d4:	2506      	moveq	r5, #6
 801b0d6:	2500      	movne	r5, #0
 801b0d8:	4628      	mov	r0, r5
 801b0da:	b005      	add	sp, #20
 801b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0e0:	2500      	movs	r5, #0
 801b0e2:	462c      	mov	r4, r5
 801b0e4:	e7b0      	b.n	801b048 <__gethex+0x68>
 801b0e6:	2c00      	cmp	r4, #0
 801b0e8:	d1c7      	bne.n	801b07a <__gethex+0x9a>
 801b0ea:	4627      	mov	r7, r4
 801b0ec:	e7c7      	b.n	801b07e <__gethex+0x9e>
 801b0ee:	464e      	mov	r6, r9
 801b0f0:	462f      	mov	r7, r5
 801b0f2:	2501      	movs	r5, #1
 801b0f4:	e7c3      	b.n	801b07e <__gethex+0x9e>
 801b0f6:	2400      	movs	r4, #0
 801b0f8:	1cb1      	adds	r1, r6, #2
 801b0fa:	e7cc      	b.n	801b096 <__gethex+0xb6>
 801b0fc:	2401      	movs	r4, #1
 801b0fe:	e7fb      	b.n	801b0f8 <__gethex+0x118>
 801b100:	fb03 0002 	mla	r0, r3, r2, r0
 801b104:	e7ce      	b.n	801b0a4 <__gethex+0xc4>
 801b106:	4631      	mov	r1, r6
 801b108:	e7de      	b.n	801b0c8 <__gethex+0xe8>
 801b10a:	eba6 0309 	sub.w	r3, r6, r9
 801b10e:	3b01      	subs	r3, #1
 801b110:	4629      	mov	r1, r5
 801b112:	2b07      	cmp	r3, #7
 801b114:	dc0a      	bgt.n	801b12c <__gethex+0x14c>
 801b116:	9801      	ldr	r0, [sp, #4]
 801b118:	f000 fa46 	bl	801b5a8 <_Balloc>
 801b11c:	4604      	mov	r4, r0
 801b11e:	b940      	cbnz	r0, 801b132 <__gethex+0x152>
 801b120:	4b5c      	ldr	r3, [pc, #368]	@ (801b294 <__gethex+0x2b4>)
 801b122:	4602      	mov	r2, r0
 801b124:	21e4      	movs	r1, #228	@ 0xe4
 801b126:	485c      	ldr	r0, [pc, #368]	@ (801b298 <__gethex+0x2b8>)
 801b128:	f001 fade 	bl	801c6e8 <__assert_func>
 801b12c:	3101      	adds	r1, #1
 801b12e:	105b      	asrs	r3, r3, #1
 801b130:	e7ef      	b.n	801b112 <__gethex+0x132>
 801b132:	f100 0a14 	add.w	sl, r0, #20
 801b136:	2300      	movs	r3, #0
 801b138:	4655      	mov	r5, sl
 801b13a:	469b      	mov	fp, r3
 801b13c:	45b1      	cmp	r9, r6
 801b13e:	d337      	bcc.n	801b1b0 <__gethex+0x1d0>
 801b140:	f845 bb04 	str.w	fp, [r5], #4
 801b144:	eba5 050a 	sub.w	r5, r5, sl
 801b148:	10ad      	asrs	r5, r5, #2
 801b14a:	6125      	str	r5, [r4, #16]
 801b14c:	4658      	mov	r0, fp
 801b14e:	f000 fb1d 	bl	801b78c <__hi0bits>
 801b152:	016d      	lsls	r5, r5, #5
 801b154:	f8d8 6000 	ldr.w	r6, [r8]
 801b158:	1a2d      	subs	r5, r5, r0
 801b15a:	42b5      	cmp	r5, r6
 801b15c:	dd54      	ble.n	801b208 <__gethex+0x228>
 801b15e:	1bad      	subs	r5, r5, r6
 801b160:	4629      	mov	r1, r5
 801b162:	4620      	mov	r0, r4
 801b164:	f000 feae 	bl	801bec4 <__any_on>
 801b168:	4681      	mov	r9, r0
 801b16a:	b178      	cbz	r0, 801b18c <__gethex+0x1ac>
 801b16c:	1e6b      	subs	r3, r5, #1
 801b16e:	1159      	asrs	r1, r3, #5
 801b170:	f003 021f 	and.w	r2, r3, #31
 801b174:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b178:	f04f 0901 	mov.w	r9, #1
 801b17c:	fa09 f202 	lsl.w	r2, r9, r2
 801b180:	420a      	tst	r2, r1
 801b182:	d003      	beq.n	801b18c <__gethex+0x1ac>
 801b184:	454b      	cmp	r3, r9
 801b186:	dc36      	bgt.n	801b1f6 <__gethex+0x216>
 801b188:	f04f 0902 	mov.w	r9, #2
 801b18c:	4629      	mov	r1, r5
 801b18e:	4620      	mov	r0, r4
 801b190:	f7ff febe 	bl	801af10 <rshift>
 801b194:	442f      	add	r7, r5
 801b196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b19a:	42bb      	cmp	r3, r7
 801b19c:	da42      	bge.n	801b224 <__gethex+0x244>
 801b19e:	9801      	ldr	r0, [sp, #4]
 801b1a0:	4621      	mov	r1, r4
 801b1a2:	f000 fa41 	bl	801b628 <_Bfree>
 801b1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	6013      	str	r3, [r2, #0]
 801b1ac:	25a3      	movs	r5, #163	@ 0xa3
 801b1ae:	e793      	b.n	801b0d8 <__gethex+0xf8>
 801b1b0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b1b4:	2a2e      	cmp	r2, #46	@ 0x2e
 801b1b6:	d012      	beq.n	801b1de <__gethex+0x1fe>
 801b1b8:	2b20      	cmp	r3, #32
 801b1ba:	d104      	bne.n	801b1c6 <__gethex+0x1e6>
 801b1bc:	f845 bb04 	str.w	fp, [r5], #4
 801b1c0:	f04f 0b00 	mov.w	fp, #0
 801b1c4:	465b      	mov	r3, fp
 801b1c6:	7830      	ldrb	r0, [r6, #0]
 801b1c8:	9303      	str	r3, [sp, #12]
 801b1ca:	f7ff fef3 	bl	801afb4 <__hexdig_fun>
 801b1ce:	9b03      	ldr	r3, [sp, #12]
 801b1d0:	f000 000f 	and.w	r0, r0, #15
 801b1d4:	4098      	lsls	r0, r3
 801b1d6:	ea4b 0b00 	orr.w	fp, fp, r0
 801b1da:	3304      	adds	r3, #4
 801b1dc:	e7ae      	b.n	801b13c <__gethex+0x15c>
 801b1de:	45b1      	cmp	r9, r6
 801b1e0:	d8ea      	bhi.n	801b1b8 <__gethex+0x1d8>
 801b1e2:	492b      	ldr	r1, [pc, #172]	@ (801b290 <__gethex+0x2b0>)
 801b1e4:	9303      	str	r3, [sp, #12]
 801b1e6:	2201      	movs	r2, #1
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	f7fe ffa4 	bl	801a136 <strncmp>
 801b1ee:	9b03      	ldr	r3, [sp, #12]
 801b1f0:	2800      	cmp	r0, #0
 801b1f2:	d1e1      	bne.n	801b1b8 <__gethex+0x1d8>
 801b1f4:	e7a2      	b.n	801b13c <__gethex+0x15c>
 801b1f6:	1ea9      	subs	r1, r5, #2
 801b1f8:	4620      	mov	r0, r4
 801b1fa:	f000 fe63 	bl	801bec4 <__any_on>
 801b1fe:	2800      	cmp	r0, #0
 801b200:	d0c2      	beq.n	801b188 <__gethex+0x1a8>
 801b202:	f04f 0903 	mov.w	r9, #3
 801b206:	e7c1      	b.n	801b18c <__gethex+0x1ac>
 801b208:	da09      	bge.n	801b21e <__gethex+0x23e>
 801b20a:	1b75      	subs	r5, r6, r5
 801b20c:	4621      	mov	r1, r4
 801b20e:	9801      	ldr	r0, [sp, #4]
 801b210:	462a      	mov	r2, r5
 801b212:	f000 fc21 	bl	801ba58 <__lshift>
 801b216:	1b7f      	subs	r7, r7, r5
 801b218:	4604      	mov	r4, r0
 801b21a:	f100 0a14 	add.w	sl, r0, #20
 801b21e:	f04f 0900 	mov.w	r9, #0
 801b222:	e7b8      	b.n	801b196 <__gethex+0x1b6>
 801b224:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b228:	42bd      	cmp	r5, r7
 801b22a:	dd6f      	ble.n	801b30c <__gethex+0x32c>
 801b22c:	1bed      	subs	r5, r5, r7
 801b22e:	42ae      	cmp	r6, r5
 801b230:	dc34      	bgt.n	801b29c <__gethex+0x2bc>
 801b232:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b236:	2b02      	cmp	r3, #2
 801b238:	d022      	beq.n	801b280 <__gethex+0x2a0>
 801b23a:	2b03      	cmp	r3, #3
 801b23c:	d024      	beq.n	801b288 <__gethex+0x2a8>
 801b23e:	2b01      	cmp	r3, #1
 801b240:	d115      	bne.n	801b26e <__gethex+0x28e>
 801b242:	42ae      	cmp	r6, r5
 801b244:	d113      	bne.n	801b26e <__gethex+0x28e>
 801b246:	2e01      	cmp	r6, #1
 801b248:	d10b      	bne.n	801b262 <__gethex+0x282>
 801b24a:	9a02      	ldr	r2, [sp, #8]
 801b24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b250:	6013      	str	r3, [r2, #0]
 801b252:	2301      	movs	r3, #1
 801b254:	6123      	str	r3, [r4, #16]
 801b256:	f8ca 3000 	str.w	r3, [sl]
 801b25a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b25c:	2562      	movs	r5, #98	@ 0x62
 801b25e:	601c      	str	r4, [r3, #0]
 801b260:	e73a      	b.n	801b0d8 <__gethex+0xf8>
 801b262:	1e71      	subs	r1, r6, #1
 801b264:	4620      	mov	r0, r4
 801b266:	f000 fe2d 	bl	801bec4 <__any_on>
 801b26a:	2800      	cmp	r0, #0
 801b26c:	d1ed      	bne.n	801b24a <__gethex+0x26a>
 801b26e:	9801      	ldr	r0, [sp, #4]
 801b270:	4621      	mov	r1, r4
 801b272:	f000 f9d9 	bl	801b628 <_Bfree>
 801b276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b278:	2300      	movs	r3, #0
 801b27a:	6013      	str	r3, [r2, #0]
 801b27c:	2550      	movs	r5, #80	@ 0x50
 801b27e:	e72b      	b.n	801b0d8 <__gethex+0xf8>
 801b280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b282:	2b00      	cmp	r3, #0
 801b284:	d1f3      	bne.n	801b26e <__gethex+0x28e>
 801b286:	e7e0      	b.n	801b24a <__gethex+0x26a>
 801b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d1dd      	bne.n	801b24a <__gethex+0x26a>
 801b28e:	e7ee      	b.n	801b26e <__gethex+0x28e>
 801b290:	0803b82c 	.word	0x0803b82c
 801b294:	0803ba3e 	.word	0x0803ba3e
 801b298:	0803ba4f 	.word	0x0803ba4f
 801b29c:	1e6f      	subs	r7, r5, #1
 801b29e:	f1b9 0f00 	cmp.w	r9, #0
 801b2a2:	d130      	bne.n	801b306 <__gethex+0x326>
 801b2a4:	b127      	cbz	r7, 801b2b0 <__gethex+0x2d0>
 801b2a6:	4639      	mov	r1, r7
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	f000 fe0b 	bl	801bec4 <__any_on>
 801b2ae:	4681      	mov	r9, r0
 801b2b0:	117a      	asrs	r2, r7, #5
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b2b8:	f007 071f 	and.w	r7, r7, #31
 801b2bc:	40bb      	lsls	r3, r7
 801b2be:	4213      	tst	r3, r2
 801b2c0:	4629      	mov	r1, r5
 801b2c2:	4620      	mov	r0, r4
 801b2c4:	bf18      	it	ne
 801b2c6:	f049 0902 	orrne.w	r9, r9, #2
 801b2ca:	f7ff fe21 	bl	801af10 <rshift>
 801b2ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b2d2:	1b76      	subs	r6, r6, r5
 801b2d4:	2502      	movs	r5, #2
 801b2d6:	f1b9 0f00 	cmp.w	r9, #0
 801b2da:	d047      	beq.n	801b36c <__gethex+0x38c>
 801b2dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b2e0:	2b02      	cmp	r3, #2
 801b2e2:	d015      	beq.n	801b310 <__gethex+0x330>
 801b2e4:	2b03      	cmp	r3, #3
 801b2e6:	d017      	beq.n	801b318 <__gethex+0x338>
 801b2e8:	2b01      	cmp	r3, #1
 801b2ea:	d109      	bne.n	801b300 <__gethex+0x320>
 801b2ec:	f019 0f02 	tst.w	r9, #2
 801b2f0:	d006      	beq.n	801b300 <__gethex+0x320>
 801b2f2:	f8da 3000 	ldr.w	r3, [sl]
 801b2f6:	ea49 0903 	orr.w	r9, r9, r3
 801b2fa:	f019 0f01 	tst.w	r9, #1
 801b2fe:	d10e      	bne.n	801b31e <__gethex+0x33e>
 801b300:	f045 0510 	orr.w	r5, r5, #16
 801b304:	e032      	b.n	801b36c <__gethex+0x38c>
 801b306:	f04f 0901 	mov.w	r9, #1
 801b30a:	e7d1      	b.n	801b2b0 <__gethex+0x2d0>
 801b30c:	2501      	movs	r5, #1
 801b30e:	e7e2      	b.n	801b2d6 <__gethex+0x2f6>
 801b310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b312:	f1c3 0301 	rsb	r3, r3, #1
 801b316:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d0f0      	beq.n	801b300 <__gethex+0x320>
 801b31e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b322:	f104 0314 	add.w	r3, r4, #20
 801b326:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b32a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b32e:	f04f 0c00 	mov.w	ip, #0
 801b332:	4618      	mov	r0, r3
 801b334:	f853 2b04 	ldr.w	r2, [r3], #4
 801b338:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b33c:	d01b      	beq.n	801b376 <__gethex+0x396>
 801b33e:	3201      	adds	r2, #1
 801b340:	6002      	str	r2, [r0, #0]
 801b342:	2d02      	cmp	r5, #2
 801b344:	f104 0314 	add.w	r3, r4, #20
 801b348:	d13c      	bne.n	801b3c4 <__gethex+0x3e4>
 801b34a:	f8d8 2000 	ldr.w	r2, [r8]
 801b34e:	3a01      	subs	r2, #1
 801b350:	42b2      	cmp	r2, r6
 801b352:	d109      	bne.n	801b368 <__gethex+0x388>
 801b354:	1171      	asrs	r1, r6, #5
 801b356:	2201      	movs	r2, #1
 801b358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b35c:	f006 061f 	and.w	r6, r6, #31
 801b360:	fa02 f606 	lsl.w	r6, r2, r6
 801b364:	421e      	tst	r6, r3
 801b366:	d13a      	bne.n	801b3de <__gethex+0x3fe>
 801b368:	f045 0520 	orr.w	r5, r5, #32
 801b36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b36e:	601c      	str	r4, [r3, #0]
 801b370:	9b02      	ldr	r3, [sp, #8]
 801b372:	601f      	str	r7, [r3, #0]
 801b374:	e6b0      	b.n	801b0d8 <__gethex+0xf8>
 801b376:	4299      	cmp	r1, r3
 801b378:	f843 cc04 	str.w	ip, [r3, #-4]
 801b37c:	d8d9      	bhi.n	801b332 <__gethex+0x352>
 801b37e:	68a3      	ldr	r3, [r4, #8]
 801b380:	459b      	cmp	fp, r3
 801b382:	db17      	blt.n	801b3b4 <__gethex+0x3d4>
 801b384:	6861      	ldr	r1, [r4, #4]
 801b386:	9801      	ldr	r0, [sp, #4]
 801b388:	3101      	adds	r1, #1
 801b38a:	f000 f90d 	bl	801b5a8 <_Balloc>
 801b38e:	4681      	mov	r9, r0
 801b390:	b918      	cbnz	r0, 801b39a <__gethex+0x3ba>
 801b392:	4b1a      	ldr	r3, [pc, #104]	@ (801b3fc <__gethex+0x41c>)
 801b394:	4602      	mov	r2, r0
 801b396:	2184      	movs	r1, #132	@ 0x84
 801b398:	e6c5      	b.n	801b126 <__gethex+0x146>
 801b39a:	6922      	ldr	r2, [r4, #16]
 801b39c:	3202      	adds	r2, #2
 801b39e:	f104 010c 	add.w	r1, r4, #12
 801b3a2:	0092      	lsls	r2, r2, #2
 801b3a4:	300c      	adds	r0, #12
 801b3a6:	f7fe ff60 	bl	801a26a <memcpy>
 801b3aa:	4621      	mov	r1, r4
 801b3ac:	9801      	ldr	r0, [sp, #4]
 801b3ae:	f000 f93b 	bl	801b628 <_Bfree>
 801b3b2:	464c      	mov	r4, r9
 801b3b4:	6923      	ldr	r3, [r4, #16]
 801b3b6:	1c5a      	adds	r2, r3, #1
 801b3b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b3bc:	6122      	str	r2, [r4, #16]
 801b3be:	2201      	movs	r2, #1
 801b3c0:	615a      	str	r2, [r3, #20]
 801b3c2:	e7be      	b.n	801b342 <__gethex+0x362>
 801b3c4:	6922      	ldr	r2, [r4, #16]
 801b3c6:	455a      	cmp	r2, fp
 801b3c8:	dd0b      	ble.n	801b3e2 <__gethex+0x402>
 801b3ca:	2101      	movs	r1, #1
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	f7ff fd9f 	bl	801af10 <rshift>
 801b3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b3d6:	3701      	adds	r7, #1
 801b3d8:	42bb      	cmp	r3, r7
 801b3da:	f6ff aee0 	blt.w	801b19e <__gethex+0x1be>
 801b3de:	2501      	movs	r5, #1
 801b3e0:	e7c2      	b.n	801b368 <__gethex+0x388>
 801b3e2:	f016 061f 	ands.w	r6, r6, #31
 801b3e6:	d0fa      	beq.n	801b3de <__gethex+0x3fe>
 801b3e8:	4453      	add	r3, sl
 801b3ea:	f1c6 0620 	rsb	r6, r6, #32
 801b3ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b3f2:	f000 f9cb 	bl	801b78c <__hi0bits>
 801b3f6:	42b0      	cmp	r0, r6
 801b3f8:	dbe7      	blt.n	801b3ca <__gethex+0x3ea>
 801b3fa:	e7f0      	b.n	801b3de <__gethex+0x3fe>
 801b3fc:	0803ba3e 	.word	0x0803ba3e

0801b400 <L_shift>:
 801b400:	f1c2 0208 	rsb	r2, r2, #8
 801b404:	0092      	lsls	r2, r2, #2
 801b406:	b570      	push	{r4, r5, r6, lr}
 801b408:	f1c2 0620 	rsb	r6, r2, #32
 801b40c:	6843      	ldr	r3, [r0, #4]
 801b40e:	6804      	ldr	r4, [r0, #0]
 801b410:	fa03 f506 	lsl.w	r5, r3, r6
 801b414:	432c      	orrs	r4, r5
 801b416:	40d3      	lsrs	r3, r2
 801b418:	6004      	str	r4, [r0, #0]
 801b41a:	f840 3f04 	str.w	r3, [r0, #4]!
 801b41e:	4288      	cmp	r0, r1
 801b420:	d3f4      	bcc.n	801b40c <L_shift+0xc>
 801b422:	bd70      	pop	{r4, r5, r6, pc}

0801b424 <__match>:
 801b424:	b530      	push	{r4, r5, lr}
 801b426:	6803      	ldr	r3, [r0, #0]
 801b428:	3301      	adds	r3, #1
 801b42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b42e:	b914      	cbnz	r4, 801b436 <__match+0x12>
 801b430:	6003      	str	r3, [r0, #0]
 801b432:	2001      	movs	r0, #1
 801b434:	bd30      	pop	{r4, r5, pc}
 801b436:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b43a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b43e:	2d19      	cmp	r5, #25
 801b440:	bf98      	it	ls
 801b442:	3220      	addls	r2, #32
 801b444:	42a2      	cmp	r2, r4
 801b446:	d0f0      	beq.n	801b42a <__match+0x6>
 801b448:	2000      	movs	r0, #0
 801b44a:	e7f3      	b.n	801b434 <__match+0x10>

0801b44c <__hexnan>:
 801b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b450:	680b      	ldr	r3, [r1, #0]
 801b452:	6801      	ldr	r1, [r0, #0]
 801b454:	115e      	asrs	r6, r3, #5
 801b456:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b45a:	f013 031f 	ands.w	r3, r3, #31
 801b45e:	b087      	sub	sp, #28
 801b460:	bf18      	it	ne
 801b462:	3604      	addne	r6, #4
 801b464:	2500      	movs	r5, #0
 801b466:	1f37      	subs	r7, r6, #4
 801b468:	4682      	mov	sl, r0
 801b46a:	4690      	mov	r8, r2
 801b46c:	9301      	str	r3, [sp, #4]
 801b46e:	f846 5c04 	str.w	r5, [r6, #-4]
 801b472:	46b9      	mov	r9, r7
 801b474:	463c      	mov	r4, r7
 801b476:	9502      	str	r5, [sp, #8]
 801b478:	46ab      	mov	fp, r5
 801b47a:	784a      	ldrb	r2, [r1, #1]
 801b47c:	1c4b      	adds	r3, r1, #1
 801b47e:	9303      	str	r3, [sp, #12]
 801b480:	b342      	cbz	r2, 801b4d4 <__hexnan+0x88>
 801b482:	4610      	mov	r0, r2
 801b484:	9105      	str	r1, [sp, #20]
 801b486:	9204      	str	r2, [sp, #16]
 801b488:	f7ff fd94 	bl	801afb4 <__hexdig_fun>
 801b48c:	2800      	cmp	r0, #0
 801b48e:	d151      	bne.n	801b534 <__hexnan+0xe8>
 801b490:	9a04      	ldr	r2, [sp, #16]
 801b492:	9905      	ldr	r1, [sp, #20]
 801b494:	2a20      	cmp	r2, #32
 801b496:	d818      	bhi.n	801b4ca <__hexnan+0x7e>
 801b498:	9b02      	ldr	r3, [sp, #8]
 801b49a:	459b      	cmp	fp, r3
 801b49c:	dd13      	ble.n	801b4c6 <__hexnan+0x7a>
 801b49e:	454c      	cmp	r4, r9
 801b4a0:	d206      	bcs.n	801b4b0 <__hexnan+0x64>
 801b4a2:	2d07      	cmp	r5, #7
 801b4a4:	dc04      	bgt.n	801b4b0 <__hexnan+0x64>
 801b4a6:	462a      	mov	r2, r5
 801b4a8:	4649      	mov	r1, r9
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	f7ff ffa8 	bl	801b400 <L_shift>
 801b4b0:	4544      	cmp	r4, r8
 801b4b2:	d952      	bls.n	801b55a <__hexnan+0x10e>
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	f1a4 0904 	sub.w	r9, r4, #4
 801b4ba:	f844 3c04 	str.w	r3, [r4, #-4]
 801b4be:	f8cd b008 	str.w	fp, [sp, #8]
 801b4c2:	464c      	mov	r4, r9
 801b4c4:	461d      	mov	r5, r3
 801b4c6:	9903      	ldr	r1, [sp, #12]
 801b4c8:	e7d7      	b.n	801b47a <__hexnan+0x2e>
 801b4ca:	2a29      	cmp	r2, #41	@ 0x29
 801b4cc:	d157      	bne.n	801b57e <__hexnan+0x132>
 801b4ce:	3102      	adds	r1, #2
 801b4d0:	f8ca 1000 	str.w	r1, [sl]
 801b4d4:	f1bb 0f00 	cmp.w	fp, #0
 801b4d8:	d051      	beq.n	801b57e <__hexnan+0x132>
 801b4da:	454c      	cmp	r4, r9
 801b4dc:	d206      	bcs.n	801b4ec <__hexnan+0xa0>
 801b4de:	2d07      	cmp	r5, #7
 801b4e0:	dc04      	bgt.n	801b4ec <__hexnan+0xa0>
 801b4e2:	462a      	mov	r2, r5
 801b4e4:	4649      	mov	r1, r9
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	f7ff ff8a 	bl	801b400 <L_shift>
 801b4ec:	4544      	cmp	r4, r8
 801b4ee:	d936      	bls.n	801b55e <__hexnan+0x112>
 801b4f0:	f1a8 0204 	sub.w	r2, r8, #4
 801b4f4:	4623      	mov	r3, r4
 801b4f6:	f853 1b04 	ldr.w	r1, [r3], #4
 801b4fa:	f842 1f04 	str.w	r1, [r2, #4]!
 801b4fe:	429f      	cmp	r7, r3
 801b500:	d2f9      	bcs.n	801b4f6 <__hexnan+0xaa>
 801b502:	1b3b      	subs	r3, r7, r4
 801b504:	f023 0303 	bic.w	r3, r3, #3
 801b508:	3304      	adds	r3, #4
 801b50a:	3401      	adds	r4, #1
 801b50c:	3e03      	subs	r6, #3
 801b50e:	42b4      	cmp	r4, r6
 801b510:	bf88      	it	hi
 801b512:	2304      	movhi	r3, #4
 801b514:	4443      	add	r3, r8
 801b516:	2200      	movs	r2, #0
 801b518:	f843 2b04 	str.w	r2, [r3], #4
 801b51c:	429f      	cmp	r7, r3
 801b51e:	d2fb      	bcs.n	801b518 <__hexnan+0xcc>
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	b91b      	cbnz	r3, 801b52c <__hexnan+0xe0>
 801b524:	4547      	cmp	r7, r8
 801b526:	d128      	bne.n	801b57a <__hexnan+0x12e>
 801b528:	2301      	movs	r3, #1
 801b52a:	603b      	str	r3, [r7, #0]
 801b52c:	2005      	movs	r0, #5
 801b52e:	b007      	add	sp, #28
 801b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b534:	3501      	adds	r5, #1
 801b536:	2d08      	cmp	r5, #8
 801b538:	f10b 0b01 	add.w	fp, fp, #1
 801b53c:	dd06      	ble.n	801b54c <__hexnan+0x100>
 801b53e:	4544      	cmp	r4, r8
 801b540:	d9c1      	bls.n	801b4c6 <__hexnan+0x7a>
 801b542:	2300      	movs	r3, #0
 801b544:	f844 3c04 	str.w	r3, [r4, #-4]
 801b548:	2501      	movs	r5, #1
 801b54a:	3c04      	subs	r4, #4
 801b54c:	6822      	ldr	r2, [r4, #0]
 801b54e:	f000 000f 	and.w	r0, r0, #15
 801b552:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b556:	6020      	str	r0, [r4, #0]
 801b558:	e7b5      	b.n	801b4c6 <__hexnan+0x7a>
 801b55a:	2508      	movs	r5, #8
 801b55c:	e7b3      	b.n	801b4c6 <__hexnan+0x7a>
 801b55e:	9b01      	ldr	r3, [sp, #4]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d0dd      	beq.n	801b520 <__hexnan+0xd4>
 801b564:	f1c3 0320 	rsb	r3, r3, #32
 801b568:	f04f 32ff 	mov.w	r2, #4294967295
 801b56c:	40da      	lsrs	r2, r3
 801b56e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b572:	4013      	ands	r3, r2
 801b574:	f846 3c04 	str.w	r3, [r6, #-4]
 801b578:	e7d2      	b.n	801b520 <__hexnan+0xd4>
 801b57a:	3f04      	subs	r7, #4
 801b57c:	e7d0      	b.n	801b520 <__hexnan+0xd4>
 801b57e:	2004      	movs	r0, #4
 801b580:	e7d5      	b.n	801b52e <__hexnan+0xe2>

0801b582 <__ascii_mbtowc>:
 801b582:	b082      	sub	sp, #8
 801b584:	b901      	cbnz	r1, 801b588 <__ascii_mbtowc+0x6>
 801b586:	a901      	add	r1, sp, #4
 801b588:	b142      	cbz	r2, 801b59c <__ascii_mbtowc+0x1a>
 801b58a:	b14b      	cbz	r3, 801b5a0 <__ascii_mbtowc+0x1e>
 801b58c:	7813      	ldrb	r3, [r2, #0]
 801b58e:	600b      	str	r3, [r1, #0]
 801b590:	7812      	ldrb	r2, [r2, #0]
 801b592:	1e10      	subs	r0, r2, #0
 801b594:	bf18      	it	ne
 801b596:	2001      	movne	r0, #1
 801b598:	b002      	add	sp, #8
 801b59a:	4770      	bx	lr
 801b59c:	4610      	mov	r0, r2
 801b59e:	e7fb      	b.n	801b598 <__ascii_mbtowc+0x16>
 801b5a0:	f06f 0001 	mvn.w	r0, #1
 801b5a4:	e7f8      	b.n	801b598 <__ascii_mbtowc+0x16>
	...

0801b5a8 <_Balloc>:
 801b5a8:	b570      	push	{r4, r5, r6, lr}
 801b5aa:	69c6      	ldr	r6, [r0, #28]
 801b5ac:	4604      	mov	r4, r0
 801b5ae:	460d      	mov	r5, r1
 801b5b0:	b976      	cbnz	r6, 801b5d0 <_Balloc+0x28>
 801b5b2:	2010      	movs	r0, #16
 801b5b4:	f7fc fdc0 	bl	8018138 <malloc>
 801b5b8:	4602      	mov	r2, r0
 801b5ba:	61e0      	str	r0, [r4, #28]
 801b5bc:	b920      	cbnz	r0, 801b5c8 <_Balloc+0x20>
 801b5be:	4b18      	ldr	r3, [pc, #96]	@ (801b620 <_Balloc+0x78>)
 801b5c0:	4818      	ldr	r0, [pc, #96]	@ (801b624 <_Balloc+0x7c>)
 801b5c2:	216b      	movs	r1, #107	@ 0x6b
 801b5c4:	f001 f890 	bl	801c6e8 <__assert_func>
 801b5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b5cc:	6006      	str	r6, [r0, #0]
 801b5ce:	60c6      	str	r6, [r0, #12]
 801b5d0:	69e6      	ldr	r6, [r4, #28]
 801b5d2:	68f3      	ldr	r3, [r6, #12]
 801b5d4:	b183      	cbz	r3, 801b5f8 <_Balloc+0x50>
 801b5d6:	69e3      	ldr	r3, [r4, #28]
 801b5d8:	68db      	ldr	r3, [r3, #12]
 801b5da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b5de:	b9b8      	cbnz	r0, 801b610 <_Balloc+0x68>
 801b5e0:	2101      	movs	r1, #1
 801b5e2:	fa01 f605 	lsl.w	r6, r1, r5
 801b5e6:	1d72      	adds	r2, r6, #5
 801b5e8:	0092      	lsls	r2, r2, #2
 801b5ea:	4620      	mov	r0, r4
 801b5ec:	f001 f89a 	bl	801c724 <_calloc_r>
 801b5f0:	b160      	cbz	r0, 801b60c <_Balloc+0x64>
 801b5f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b5f6:	e00e      	b.n	801b616 <_Balloc+0x6e>
 801b5f8:	2221      	movs	r2, #33	@ 0x21
 801b5fa:	2104      	movs	r1, #4
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	f001 f891 	bl	801c724 <_calloc_r>
 801b602:	69e3      	ldr	r3, [r4, #28]
 801b604:	60f0      	str	r0, [r6, #12]
 801b606:	68db      	ldr	r3, [r3, #12]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d1e4      	bne.n	801b5d6 <_Balloc+0x2e>
 801b60c:	2000      	movs	r0, #0
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	6802      	ldr	r2, [r0, #0]
 801b612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b616:	2300      	movs	r3, #0
 801b618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b61c:	e7f7      	b.n	801b60e <_Balloc+0x66>
 801b61e:	bf00      	nop
 801b620:	0803b9cf 	.word	0x0803b9cf
 801b624:	0803baaf 	.word	0x0803baaf

0801b628 <_Bfree>:
 801b628:	b570      	push	{r4, r5, r6, lr}
 801b62a:	69c6      	ldr	r6, [r0, #28]
 801b62c:	4605      	mov	r5, r0
 801b62e:	460c      	mov	r4, r1
 801b630:	b976      	cbnz	r6, 801b650 <_Bfree+0x28>
 801b632:	2010      	movs	r0, #16
 801b634:	f7fc fd80 	bl	8018138 <malloc>
 801b638:	4602      	mov	r2, r0
 801b63a:	61e8      	str	r0, [r5, #28]
 801b63c:	b920      	cbnz	r0, 801b648 <_Bfree+0x20>
 801b63e:	4b09      	ldr	r3, [pc, #36]	@ (801b664 <_Bfree+0x3c>)
 801b640:	4809      	ldr	r0, [pc, #36]	@ (801b668 <_Bfree+0x40>)
 801b642:	218f      	movs	r1, #143	@ 0x8f
 801b644:	f001 f850 	bl	801c6e8 <__assert_func>
 801b648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b64c:	6006      	str	r6, [r0, #0]
 801b64e:	60c6      	str	r6, [r0, #12]
 801b650:	b13c      	cbz	r4, 801b662 <_Bfree+0x3a>
 801b652:	69eb      	ldr	r3, [r5, #28]
 801b654:	6862      	ldr	r2, [r4, #4]
 801b656:	68db      	ldr	r3, [r3, #12]
 801b658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b65c:	6021      	str	r1, [r4, #0]
 801b65e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b662:	bd70      	pop	{r4, r5, r6, pc}
 801b664:	0803b9cf 	.word	0x0803b9cf
 801b668:	0803baaf 	.word	0x0803baaf

0801b66c <__multadd>:
 801b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b670:	690d      	ldr	r5, [r1, #16]
 801b672:	4607      	mov	r7, r0
 801b674:	460c      	mov	r4, r1
 801b676:	461e      	mov	r6, r3
 801b678:	f101 0c14 	add.w	ip, r1, #20
 801b67c:	2000      	movs	r0, #0
 801b67e:	f8dc 3000 	ldr.w	r3, [ip]
 801b682:	b299      	uxth	r1, r3
 801b684:	fb02 6101 	mla	r1, r2, r1, r6
 801b688:	0c1e      	lsrs	r6, r3, #16
 801b68a:	0c0b      	lsrs	r3, r1, #16
 801b68c:	fb02 3306 	mla	r3, r2, r6, r3
 801b690:	b289      	uxth	r1, r1
 801b692:	3001      	adds	r0, #1
 801b694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b698:	4285      	cmp	r5, r0
 801b69a:	f84c 1b04 	str.w	r1, [ip], #4
 801b69e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b6a2:	dcec      	bgt.n	801b67e <__multadd+0x12>
 801b6a4:	b30e      	cbz	r6, 801b6ea <__multadd+0x7e>
 801b6a6:	68a3      	ldr	r3, [r4, #8]
 801b6a8:	42ab      	cmp	r3, r5
 801b6aa:	dc19      	bgt.n	801b6e0 <__multadd+0x74>
 801b6ac:	6861      	ldr	r1, [r4, #4]
 801b6ae:	4638      	mov	r0, r7
 801b6b0:	3101      	adds	r1, #1
 801b6b2:	f7ff ff79 	bl	801b5a8 <_Balloc>
 801b6b6:	4680      	mov	r8, r0
 801b6b8:	b928      	cbnz	r0, 801b6c6 <__multadd+0x5a>
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	4b0c      	ldr	r3, [pc, #48]	@ (801b6f0 <__multadd+0x84>)
 801b6be:	480d      	ldr	r0, [pc, #52]	@ (801b6f4 <__multadd+0x88>)
 801b6c0:	21ba      	movs	r1, #186	@ 0xba
 801b6c2:	f001 f811 	bl	801c6e8 <__assert_func>
 801b6c6:	6922      	ldr	r2, [r4, #16]
 801b6c8:	3202      	adds	r2, #2
 801b6ca:	f104 010c 	add.w	r1, r4, #12
 801b6ce:	0092      	lsls	r2, r2, #2
 801b6d0:	300c      	adds	r0, #12
 801b6d2:	f7fe fdca 	bl	801a26a <memcpy>
 801b6d6:	4621      	mov	r1, r4
 801b6d8:	4638      	mov	r0, r7
 801b6da:	f7ff ffa5 	bl	801b628 <_Bfree>
 801b6de:	4644      	mov	r4, r8
 801b6e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b6e4:	3501      	adds	r5, #1
 801b6e6:	615e      	str	r6, [r3, #20]
 801b6e8:	6125      	str	r5, [r4, #16]
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6f0:	0803ba3e 	.word	0x0803ba3e
 801b6f4:	0803baaf 	.word	0x0803baaf

0801b6f8 <__s2b>:
 801b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6fc:	460c      	mov	r4, r1
 801b6fe:	4615      	mov	r5, r2
 801b700:	461f      	mov	r7, r3
 801b702:	2209      	movs	r2, #9
 801b704:	3308      	adds	r3, #8
 801b706:	4606      	mov	r6, r0
 801b708:	fb93 f3f2 	sdiv	r3, r3, r2
 801b70c:	2100      	movs	r1, #0
 801b70e:	2201      	movs	r2, #1
 801b710:	429a      	cmp	r2, r3
 801b712:	db09      	blt.n	801b728 <__s2b+0x30>
 801b714:	4630      	mov	r0, r6
 801b716:	f7ff ff47 	bl	801b5a8 <_Balloc>
 801b71a:	b940      	cbnz	r0, 801b72e <__s2b+0x36>
 801b71c:	4602      	mov	r2, r0
 801b71e:	4b19      	ldr	r3, [pc, #100]	@ (801b784 <__s2b+0x8c>)
 801b720:	4819      	ldr	r0, [pc, #100]	@ (801b788 <__s2b+0x90>)
 801b722:	21d3      	movs	r1, #211	@ 0xd3
 801b724:	f000 ffe0 	bl	801c6e8 <__assert_func>
 801b728:	0052      	lsls	r2, r2, #1
 801b72a:	3101      	adds	r1, #1
 801b72c:	e7f0      	b.n	801b710 <__s2b+0x18>
 801b72e:	9b08      	ldr	r3, [sp, #32]
 801b730:	6143      	str	r3, [r0, #20]
 801b732:	2d09      	cmp	r5, #9
 801b734:	f04f 0301 	mov.w	r3, #1
 801b738:	6103      	str	r3, [r0, #16]
 801b73a:	dd16      	ble.n	801b76a <__s2b+0x72>
 801b73c:	f104 0909 	add.w	r9, r4, #9
 801b740:	46c8      	mov	r8, r9
 801b742:	442c      	add	r4, r5
 801b744:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b748:	4601      	mov	r1, r0
 801b74a:	3b30      	subs	r3, #48	@ 0x30
 801b74c:	220a      	movs	r2, #10
 801b74e:	4630      	mov	r0, r6
 801b750:	f7ff ff8c 	bl	801b66c <__multadd>
 801b754:	45a0      	cmp	r8, r4
 801b756:	d1f5      	bne.n	801b744 <__s2b+0x4c>
 801b758:	f1a5 0408 	sub.w	r4, r5, #8
 801b75c:	444c      	add	r4, r9
 801b75e:	1b2d      	subs	r5, r5, r4
 801b760:	1963      	adds	r3, r4, r5
 801b762:	42bb      	cmp	r3, r7
 801b764:	db04      	blt.n	801b770 <__s2b+0x78>
 801b766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b76a:	340a      	adds	r4, #10
 801b76c:	2509      	movs	r5, #9
 801b76e:	e7f6      	b.n	801b75e <__s2b+0x66>
 801b770:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b774:	4601      	mov	r1, r0
 801b776:	3b30      	subs	r3, #48	@ 0x30
 801b778:	220a      	movs	r2, #10
 801b77a:	4630      	mov	r0, r6
 801b77c:	f7ff ff76 	bl	801b66c <__multadd>
 801b780:	e7ee      	b.n	801b760 <__s2b+0x68>
 801b782:	bf00      	nop
 801b784:	0803ba3e 	.word	0x0803ba3e
 801b788:	0803baaf 	.word	0x0803baaf

0801b78c <__hi0bits>:
 801b78c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b790:	4603      	mov	r3, r0
 801b792:	bf36      	itet	cc
 801b794:	0403      	lslcc	r3, r0, #16
 801b796:	2000      	movcs	r0, #0
 801b798:	2010      	movcc	r0, #16
 801b79a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b79e:	bf3c      	itt	cc
 801b7a0:	021b      	lslcc	r3, r3, #8
 801b7a2:	3008      	addcc	r0, #8
 801b7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b7a8:	bf3c      	itt	cc
 801b7aa:	011b      	lslcc	r3, r3, #4
 801b7ac:	3004      	addcc	r0, #4
 801b7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b7b2:	bf3c      	itt	cc
 801b7b4:	009b      	lslcc	r3, r3, #2
 801b7b6:	3002      	addcc	r0, #2
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	db05      	blt.n	801b7c8 <__hi0bits+0x3c>
 801b7bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b7c0:	f100 0001 	add.w	r0, r0, #1
 801b7c4:	bf08      	it	eq
 801b7c6:	2020      	moveq	r0, #32
 801b7c8:	4770      	bx	lr

0801b7ca <__lo0bits>:
 801b7ca:	6803      	ldr	r3, [r0, #0]
 801b7cc:	4602      	mov	r2, r0
 801b7ce:	f013 0007 	ands.w	r0, r3, #7
 801b7d2:	d00b      	beq.n	801b7ec <__lo0bits+0x22>
 801b7d4:	07d9      	lsls	r1, r3, #31
 801b7d6:	d421      	bmi.n	801b81c <__lo0bits+0x52>
 801b7d8:	0798      	lsls	r0, r3, #30
 801b7da:	bf49      	itett	mi
 801b7dc:	085b      	lsrmi	r3, r3, #1
 801b7de:	089b      	lsrpl	r3, r3, #2
 801b7e0:	2001      	movmi	r0, #1
 801b7e2:	6013      	strmi	r3, [r2, #0]
 801b7e4:	bf5c      	itt	pl
 801b7e6:	6013      	strpl	r3, [r2, #0]
 801b7e8:	2002      	movpl	r0, #2
 801b7ea:	4770      	bx	lr
 801b7ec:	b299      	uxth	r1, r3
 801b7ee:	b909      	cbnz	r1, 801b7f4 <__lo0bits+0x2a>
 801b7f0:	0c1b      	lsrs	r3, r3, #16
 801b7f2:	2010      	movs	r0, #16
 801b7f4:	b2d9      	uxtb	r1, r3
 801b7f6:	b909      	cbnz	r1, 801b7fc <__lo0bits+0x32>
 801b7f8:	3008      	adds	r0, #8
 801b7fa:	0a1b      	lsrs	r3, r3, #8
 801b7fc:	0719      	lsls	r1, r3, #28
 801b7fe:	bf04      	itt	eq
 801b800:	091b      	lsreq	r3, r3, #4
 801b802:	3004      	addeq	r0, #4
 801b804:	0799      	lsls	r1, r3, #30
 801b806:	bf04      	itt	eq
 801b808:	089b      	lsreq	r3, r3, #2
 801b80a:	3002      	addeq	r0, #2
 801b80c:	07d9      	lsls	r1, r3, #31
 801b80e:	d403      	bmi.n	801b818 <__lo0bits+0x4e>
 801b810:	085b      	lsrs	r3, r3, #1
 801b812:	f100 0001 	add.w	r0, r0, #1
 801b816:	d003      	beq.n	801b820 <__lo0bits+0x56>
 801b818:	6013      	str	r3, [r2, #0]
 801b81a:	4770      	bx	lr
 801b81c:	2000      	movs	r0, #0
 801b81e:	4770      	bx	lr
 801b820:	2020      	movs	r0, #32
 801b822:	4770      	bx	lr

0801b824 <__i2b>:
 801b824:	b510      	push	{r4, lr}
 801b826:	460c      	mov	r4, r1
 801b828:	2101      	movs	r1, #1
 801b82a:	f7ff febd 	bl	801b5a8 <_Balloc>
 801b82e:	4602      	mov	r2, r0
 801b830:	b928      	cbnz	r0, 801b83e <__i2b+0x1a>
 801b832:	4b05      	ldr	r3, [pc, #20]	@ (801b848 <__i2b+0x24>)
 801b834:	4805      	ldr	r0, [pc, #20]	@ (801b84c <__i2b+0x28>)
 801b836:	f240 1145 	movw	r1, #325	@ 0x145
 801b83a:	f000 ff55 	bl	801c6e8 <__assert_func>
 801b83e:	2301      	movs	r3, #1
 801b840:	6144      	str	r4, [r0, #20]
 801b842:	6103      	str	r3, [r0, #16]
 801b844:	bd10      	pop	{r4, pc}
 801b846:	bf00      	nop
 801b848:	0803ba3e 	.word	0x0803ba3e
 801b84c:	0803baaf 	.word	0x0803baaf

0801b850 <__multiply>:
 801b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b854:	4614      	mov	r4, r2
 801b856:	690a      	ldr	r2, [r1, #16]
 801b858:	6923      	ldr	r3, [r4, #16]
 801b85a:	429a      	cmp	r2, r3
 801b85c:	bfa8      	it	ge
 801b85e:	4623      	movge	r3, r4
 801b860:	460f      	mov	r7, r1
 801b862:	bfa4      	itt	ge
 801b864:	460c      	movge	r4, r1
 801b866:	461f      	movge	r7, r3
 801b868:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b86c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b870:	68a3      	ldr	r3, [r4, #8]
 801b872:	6861      	ldr	r1, [r4, #4]
 801b874:	eb0a 0609 	add.w	r6, sl, r9
 801b878:	42b3      	cmp	r3, r6
 801b87a:	b085      	sub	sp, #20
 801b87c:	bfb8      	it	lt
 801b87e:	3101      	addlt	r1, #1
 801b880:	f7ff fe92 	bl	801b5a8 <_Balloc>
 801b884:	b930      	cbnz	r0, 801b894 <__multiply+0x44>
 801b886:	4602      	mov	r2, r0
 801b888:	4b44      	ldr	r3, [pc, #272]	@ (801b99c <__multiply+0x14c>)
 801b88a:	4845      	ldr	r0, [pc, #276]	@ (801b9a0 <__multiply+0x150>)
 801b88c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b890:	f000 ff2a 	bl	801c6e8 <__assert_func>
 801b894:	f100 0514 	add.w	r5, r0, #20
 801b898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b89c:	462b      	mov	r3, r5
 801b89e:	2200      	movs	r2, #0
 801b8a0:	4543      	cmp	r3, r8
 801b8a2:	d321      	bcc.n	801b8e8 <__multiply+0x98>
 801b8a4:	f107 0114 	add.w	r1, r7, #20
 801b8a8:	f104 0214 	add.w	r2, r4, #20
 801b8ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b8b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b8b4:	9302      	str	r3, [sp, #8]
 801b8b6:	1b13      	subs	r3, r2, r4
 801b8b8:	3b15      	subs	r3, #21
 801b8ba:	f023 0303 	bic.w	r3, r3, #3
 801b8be:	3304      	adds	r3, #4
 801b8c0:	f104 0715 	add.w	r7, r4, #21
 801b8c4:	42ba      	cmp	r2, r7
 801b8c6:	bf38      	it	cc
 801b8c8:	2304      	movcc	r3, #4
 801b8ca:	9301      	str	r3, [sp, #4]
 801b8cc:	9b02      	ldr	r3, [sp, #8]
 801b8ce:	9103      	str	r1, [sp, #12]
 801b8d0:	428b      	cmp	r3, r1
 801b8d2:	d80c      	bhi.n	801b8ee <__multiply+0x9e>
 801b8d4:	2e00      	cmp	r6, #0
 801b8d6:	dd03      	ble.n	801b8e0 <__multiply+0x90>
 801b8d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d05b      	beq.n	801b998 <__multiply+0x148>
 801b8e0:	6106      	str	r6, [r0, #16]
 801b8e2:	b005      	add	sp, #20
 801b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8e8:	f843 2b04 	str.w	r2, [r3], #4
 801b8ec:	e7d8      	b.n	801b8a0 <__multiply+0x50>
 801b8ee:	f8b1 a000 	ldrh.w	sl, [r1]
 801b8f2:	f1ba 0f00 	cmp.w	sl, #0
 801b8f6:	d024      	beq.n	801b942 <__multiply+0xf2>
 801b8f8:	f104 0e14 	add.w	lr, r4, #20
 801b8fc:	46a9      	mov	r9, r5
 801b8fe:	f04f 0c00 	mov.w	ip, #0
 801b902:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b906:	f8d9 3000 	ldr.w	r3, [r9]
 801b90a:	fa1f fb87 	uxth.w	fp, r7
 801b90e:	b29b      	uxth	r3, r3
 801b910:	fb0a 330b 	mla	r3, sl, fp, r3
 801b914:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b918:	f8d9 7000 	ldr.w	r7, [r9]
 801b91c:	4463      	add	r3, ip
 801b91e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b922:	fb0a c70b 	mla	r7, sl, fp, ip
 801b926:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b92a:	b29b      	uxth	r3, r3
 801b92c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b930:	4572      	cmp	r2, lr
 801b932:	f849 3b04 	str.w	r3, [r9], #4
 801b936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b93a:	d8e2      	bhi.n	801b902 <__multiply+0xb2>
 801b93c:	9b01      	ldr	r3, [sp, #4]
 801b93e:	f845 c003 	str.w	ip, [r5, r3]
 801b942:	9b03      	ldr	r3, [sp, #12]
 801b944:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b948:	3104      	adds	r1, #4
 801b94a:	f1b9 0f00 	cmp.w	r9, #0
 801b94e:	d021      	beq.n	801b994 <__multiply+0x144>
 801b950:	682b      	ldr	r3, [r5, #0]
 801b952:	f104 0c14 	add.w	ip, r4, #20
 801b956:	46ae      	mov	lr, r5
 801b958:	f04f 0a00 	mov.w	sl, #0
 801b95c:	f8bc b000 	ldrh.w	fp, [ip]
 801b960:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b964:	fb09 770b 	mla	r7, r9, fp, r7
 801b968:	4457      	add	r7, sl
 801b96a:	b29b      	uxth	r3, r3
 801b96c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b970:	f84e 3b04 	str.w	r3, [lr], #4
 801b974:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b97c:	f8be 3000 	ldrh.w	r3, [lr]
 801b980:	fb09 330a 	mla	r3, r9, sl, r3
 801b984:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b988:	4562      	cmp	r2, ip
 801b98a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b98e:	d8e5      	bhi.n	801b95c <__multiply+0x10c>
 801b990:	9f01      	ldr	r7, [sp, #4]
 801b992:	51eb      	str	r3, [r5, r7]
 801b994:	3504      	adds	r5, #4
 801b996:	e799      	b.n	801b8cc <__multiply+0x7c>
 801b998:	3e01      	subs	r6, #1
 801b99a:	e79b      	b.n	801b8d4 <__multiply+0x84>
 801b99c:	0803ba3e 	.word	0x0803ba3e
 801b9a0:	0803baaf 	.word	0x0803baaf

0801b9a4 <__pow5mult>:
 801b9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9a8:	4615      	mov	r5, r2
 801b9aa:	f012 0203 	ands.w	r2, r2, #3
 801b9ae:	4607      	mov	r7, r0
 801b9b0:	460e      	mov	r6, r1
 801b9b2:	d007      	beq.n	801b9c4 <__pow5mult+0x20>
 801b9b4:	4c25      	ldr	r4, [pc, #148]	@ (801ba4c <__pow5mult+0xa8>)
 801b9b6:	3a01      	subs	r2, #1
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b9be:	f7ff fe55 	bl	801b66c <__multadd>
 801b9c2:	4606      	mov	r6, r0
 801b9c4:	10ad      	asrs	r5, r5, #2
 801b9c6:	d03d      	beq.n	801ba44 <__pow5mult+0xa0>
 801b9c8:	69fc      	ldr	r4, [r7, #28]
 801b9ca:	b97c      	cbnz	r4, 801b9ec <__pow5mult+0x48>
 801b9cc:	2010      	movs	r0, #16
 801b9ce:	f7fc fbb3 	bl	8018138 <malloc>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	61f8      	str	r0, [r7, #28]
 801b9d6:	b928      	cbnz	r0, 801b9e4 <__pow5mult+0x40>
 801b9d8:	4b1d      	ldr	r3, [pc, #116]	@ (801ba50 <__pow5mult+0xac>)
 801b9da:	481e      	ldr	r0, [pc, #120]	@ (801ba54 <__pow5mult+0xb0>)
 801b9dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b9e0:	f000 fe82 	bl	801c6e8 <__assert_func>
 801b9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b9e8:	6004      	str	r4, [r0, #0]
 801b9ea:	60c4      	str	r4, [r0, #12]
 801b9ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b9f4:	b94c      	cbnz	r4, 801ba0a <__pow5mult+0x66>
 801b9f6:	f240 2171 	movw	r1, #625	@ 0x271
 801b9fa:	4638      	mov	r0, r7
 801b9fc:	f7ff ff12 	bl	801b824 <__i2b>
 801ba00:	2300      	movs	r3, #0
 801ba02:	f8c8 0008 	str.w	r0, [r8, #8]
 801ba06:	4604      	mov	r4, r0
 801ba08:	6003      	str	r3, [r0, #0]
 801ba0a:	f04f 0900 	mov.w	r9, #0
 801ba0e:	07eb      	lsls	r3, r5, #31
 801ba10:	d50a      	bpl.n	801ba28 <__pow5mult+0x84>
 801ba12:	4631      	mov	r1, r6
 801ba14:	4622      	mov	r2, r4
 801ba16:	4638      	mov	r0, r7
 801ba18:	f7ff ff1a 	bl	801b850 <__multiply>
 801ba1c:	4631      	mov	r1, r6
 801ba1e:	4680      	mov	r8, r0
 801ba20:	4638      	mov	r0, r7
 801ba22:	f7ff fe01 	bl	801b628 <_Bfree>
 801ba26:	4646      	mov	r6, r8
 801ba28:	106d      	asrs	r5, r5, #1
 801ba2a:	d00b      	beq.n	801ba44 <__pow5mult+0xa0>
 801ba2c:	6820      	ldr	r0, [r4, #0]
 801ba2e:	b938      	cbnz	r0, 801ba40 <__pow5mult+0x9c>
 801ba30:	4622      	mov	r2, r4
 801ba32:	4621      	mov	r1, r4
 801ba34:	4638      	mov	r0, r7
 801ba36:	f7ff ff0b 	bl	801b850 <__multiply>
 801ba3a:	6020      	str	r0, [r4, #0]
 801ba3c:	f8c0 9000 	str.w	r9, [r0]
 801ba40:	4604      	mov	r4, r0
 801ba42:	e7e4      	b.n	801ba0e <__pow5mult+0x6a>
 801ba44:	4630      	mov	r0, r6
 801ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba4a:	bf00      	nop
 801ba4c:	0803bb08 	.word	0x0803bb08
 801ba50:	0803b9cf 	.word	0x0803b9cf
 801ba54:	0803baaf 	.word	0x0803baaf

0801ba58 <__lshift>:
 801ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba5c:	460c      	mov	r4, r1
 801ba5e:	6849      	ldr	r1, [r1, #4]
 801ba60:	6923      	ldr	r3, [r4, #16]
 801ba62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ba66:	68a3      	ldr	r3, [r4, #8]
 801ba68:	4607      	mov	r7, r0
 801ba6a:	4691      	mov	r9, r2
 801ba6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ba70:	f108 0601 	add.w	r6, r8, #1
 801ba74:	42b3      	cmp	r3, r6
 801ba76:	db0b      	blt.n	801ba90 <__lshift+0x38>
 801ba78:	4638      	mov	r0, r7
 801ba7a:	f7ff fd95 	bl	801b5a8 <_Balloc>
 801ba7e:	4605      	mov	r5, r0
 801ba80:	b948      	cbnz	r0, 801ba96 <__lshift+0x3e>
 801ba82:	4602      	mov	r2, r0
 801ba84:	4b28      	ldr	r3, [pc, #160]	@ (801bb28 <__lshift+0xd0>)
 801ba86:	4829      	ldr	r0, [pc, #164]	@ (801bb2c <__lshift+0xd4>)
 801ba88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ba8c:	f000 fe2c 	bl	801c6e8 <__assert_func>
 801ba90:	3101      	adds	r1, #1
 801ba92:	005b      	lsls	r3, r3, #1
 801ba94:	e7ee      	b.n	801ba74 <__lshift+0x1c>
 801ba96:	2300      	movs	r3, #0
 801ba98:	f100 0114 	add.w	r1, r0, #20
 801ba9c:	f100 0210 	add.w	r2, r0, #16
 801baa0:	4618      	mov	r0, r3
 801baa2:	4553      	cmp	r3, sl
 801baa4:	db33      	blt.n	801bb0e <__lshift+0xb6>
 801baa6:	6920      	ldr	r0, [r4, #16]
 801baa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801baac:	f104 0314 	add.w	r3, r4, #20
 801bab0:	f019 091f 	ands.w	r9, r9, #31
 801bab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801babc:	d02b      	beq.n	801bb16 <__lshift+0xbe>
 801babe:	f1c9 0e20 	rsb	lr, r9, #32
 801bac2:	468a      	mov	sl, r1
 801bac4:	2200      	movs	r2, #0
 801bac6:	6818      	ldr	r0, [r3, #0]
 801bac8:	fa00 f009 	lsl.w	r0, r0, r9
 801bacc:	4310      	orrs	r0, r2
 801bace:	f84a 0b04 	str.w	r0, [sl], #4
 801bad2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bad6:	459c      	cmp	ip, r3
 801bad8:	fa22 f20e 	lsr.w	r2, r2, lr
 801badc:	d8f3      	bhi.n	801bac6 <__lshift+0x6e>
 801bade:	ebac 0304 	sub.w	r3, ip, r4
 801bae2:	3b15      	subs	r3, #21
 801bae4:	f023 0303 	bic.w	r3, r3, #3
 801bae8:	3304      	adds	r3, #4
 801baea:	f104 0015 	add.w	r0, r4, #21
 801baee:	4584      	cmp	ip, r0
 801baf0:	bf38      	it	cc
 801baf2:	2304      	movcc	r3, #4
 801baf4:	50ca      	str	r2, [r1, r3]
 801baf6:	b10a      	cbz	r2, 801bafc <__lshift+0xa4>
 801baf8:	f108 0602 	add.w	r6, r8, #2
 801bafc:	3e01      	subs	r6, #1
 801bafe:	4638      	mov	r0, r7
 801bb00:	612e      	str	r6, [r5, #16]
 801bb02:	4621      	mov	r1, r4
 801bb04:	f7ff fd90 	bl	801b628 <_Bfree>
 801bb08:	4628      	mov	r0, r5
 801bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb0e:	f842 0f04 	str.w	r0, [r2, #4]!
 801bb12:	3301      	adds	r3, #1
 801bb14:	e7c5      	b.n	801baa2 <__lshift+0x4a>
 801bb16:	3904      	subs	r1, #4
 801bb18:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb1c:	f841 2f04 	str.w	r2, [r1, #4]!
 801bb20:	459c      	cmp	ip, r3
 801bb22:	d8f9      	bhi.n	801bb18 <__lshift+0xc0>
 801bb24:	e7ea      	b.n	801bafc <__lshift+0xa4>
 801bb26:	bf00      	nop
 801bb28:	0803ba3e 	.word	0x0803ba3e
 801bb2c:	0803baaf 	.word	0x0803baaf

0801bb30 <__mcmp>:
 801bb30:	690a      	ldr	r2, [r1, #16]
 801bb32:	4603      	mov	r3, r0
 801bb34:	6900      	ldr	r0, [r0, #16]
 801bb36:	1a80      	subs	r0, r0, r2
 801bb38:	b530      	push	{r4, r5, lr}
 801bb3a:	d10e      	bne.n	801bb5a <__mcmp+0x2a>
 801bb3c:	3314      	adds	r3, #20
 801bb3e:	3114      	adds	r1, #20
 801bb40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bb44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bb48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bb4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bb50:	4295      	cmp	r5, r2
 801bb52:	d003      	beq.n	801bb5c <__mcmp+0x2c>
 801bb54:	d205      	bcs.n	801bb62 <__mcmp+0x32>
 801bb56:	f04f 30ff 	mov.w	r0, #4294967295
 801bb5a:	bd30      	pop	{r4, r5, pc}
 801bb5c:	42a3      	cmp	r3, r4
 801bb5e:	d3f3      	bcc.n	801bb48 <__mcmp+0x18>
 801bb60:	e7fb      	b.n	801bb5a <__mcmp+0x2a>
 801bb62:	2001      	movs	r0, #1
 801bb64:	e7f9      	b.n	801bb5a <__mcmp+0x2a>
	...

0801bb68 <__mdiff>:
 801bb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb6c:	4689      	mov	r9, r1
 801bb6e:	4606      	mov	r6, r0
 801bb70:	4611      	mov	r1, r2
 801bb72:	4648      	mov	r0, r9
 801bb74:	4614      	mov	r4, r2
 801bb76:	f7ff ffdb 	bl	801bb30 <__mcmp>
 801bb7a:	1e05      	subs	r5, r0, #0
 801bb7c:	d112      	bne.n	801bba4 <__mdiff+0x3c>
 801bb7e:	4629      	mov	r1, r5
 801bb80:	4630      	mov	r0, r6
 801bb82:	f7ff fd11 	bl	801b5a8 <_Balloc>
 801bb86:	4602      	mov	r2, r0
 801bb88:	b928      	cbnz	r0, 801bb96 <__mdiff+0x2e>
 801bb8a:	4b3f      	ldr	r3, [pc, #252]	@ (801bc88 <__mdiff+0x120>)
 801bb8c:	f240 2137 	movw	r1, #567	@ 0x237
 801bb90:	483e      	ldr	r0, [pc, #248]	@ (801bc8c <__mdiff+0x124>)
 801bb92:	f000 fda9 	bl	801c6e8 <__assert_func>
 801bb96:	2301      	movs	r3, #1
 801bb98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bb9c:	4610      	mov	r0, r2
 801bb9e:	b003      	add	sp, #12
 801bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bba4:	bfbc      	itt	lt
 801bba6:	464b      	movlt	r3, r9
 801bba8:	46a1      	movlt	r9, r4
 801bbaa:	4630      	mov	r0, r6
 801bbac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bbb0:	bfba      	itte	lt
 801bbb2:	461c      	movlt	r4, r3
 801bbb4:	2501      	movlt	r5, #1
 801bbb6:	2500      	movge	r5, #0
 801bbb8:	f7ff fcf6 	bl	801b5a8 <_Balloc>
 801bbbc:	4602      	mov	r2, r0
 801bbbe:	b918      	cbnz	r0, 801bbc8 <__mdiff+0x60>
 801bbc0:	4b31      	ldr	r3, [pc, #196]	@ (801bc88 <__mdiff+0x120>)
 801bbc2:	f240 2145 	movw	r1, #581	@ 0x245
 801bbc6:	e7e3      	b.n	801bb90 <__mdiff+0x28>
 801bbc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bbcc:	6926      	ldr	r6, [r4, #16]
 801bbce:	60c5      	str	r5, [r0, #12]
 801bbd0:	f109 0310 	add.w	r3, r9, #16
 801bbd4:	f109 0514 	add.w	r5, r9, #20
 801bbd8:	f104 0e14 	add.w	lr, r4, #20
 801bbdc:	f100 0b14 	add.w	fp, r0, #20
 801bbe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bbe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bbe8:	9301      	str	r3, [sp, #4]
 801bbea:	46d9      	mov	r9, fp
 801bbec:	f04f 0c00 	mov.w	ip, #0
 801bbf0:	9b01      	ldr	r3, [sp, #4]
 801bbf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bbf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bbfa:	9301      	str	r3, [sp, #4]
 801bbfc:	fa1f f38a 	uxth.w	r3, sl
 801bc00:	4619      	mov	r1, r3
 801bc02:	b283      	uxth	r3, r0
 801bc04:	1acb      	subs	r3, r1, r3
 801bc06:	0c00      	lsrs	r0, r0, #16
 801bc08:	4463      	add	r3, ip
 801bc0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bc0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bc18:	4576      	cmp	r6, lr
 801bc1a:	f849 3b04 	str.w	r3, [r9], #4
 801bc1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bc22:	d8e5      	bhi.n	801bbf0 <__mdiff+0x88>
 801bc24:	1b33      	subs	r3, r6, r4
 801bc26:	3b15      	subs	r3, #21
 801bc28:	f023 0303 	bic.w	r3, r3, #3
 801bc2c:	3415      	adds	r4, #21
 801bc2e:	3304      	adds	r3, #4
 801bc30:	42a6      	cmp	r6, r4
 801bc32:	bf38      	it	cc
 801bc34:	2304      	movcc	r3, #4
 801bc36:	441d      	add	r5, r3
 801bc38:	445b      	add	r3, fp
 801bc3a:	461e      	mov	r6, r3
 801bc3c:	462c      	mov	r4, r5
 801bc3e:	4544      	cmp	r4, r8
 801bc40:	d30e      	bcc.n	801bc60 <__mdiff+0xf8>
 801bc42:	f108 0103 	add.w	r1, r8, #3
 801bc46:	1b49      	subs	r1, r1, r5
 801bc48:	f021 0103 	bic.w	r1, r1, #3
 801bc4c:	3d03      	subs	r5, #3
 801bc4e:	45a8      	cmp	r8, r5
 801bc50:	bf38      	it	cc
 801bc52:	2100      	movcc	r1, #0
 801bc54:	440b      	add	r3, r1
 801bc56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bc5a:	b191      	cbz	r1, 801bc82 <__mdiff+0x11a>
 801bc5c:	6117      	str	r7, [r2, #16]
 801bc5e:	e79d      	b.n	801bb9c <__mdiff+0x34>
 801bc60:	f854 1b04 	ldr.w	r1, [r4], #4
 801bc64:	46e6      	mov	lr, ip
 801bc66:	0c08      	lsrs	r0, r1, #16
 801bc68:	fa1c fc81 	uxtah	ip, ip, r1
 801bc6c:	4471      	add	r1, lr
 801bc6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bc72:	b289      	uxth	r1, r1
 801bc74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bc78:	f846 1b04 	str.w	r1, [r6], #4
 801bc7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bc80:	e7dd      	b.n	801bc3e <__mdiff+0xd6>
 801bc82:	3f01      	subs	r7, #1
 801bc84:	e7e7      	b.n	801bc56 <__mdiff+0xee>
 801bc86:	bf00      	nop
 801bc88:	0803ba3e 	.word	0x0803ba3e
 801bc8c:	0803baaf 	.word	0x0803baaf

0801bc90 <__ulp>:
 801bc90:	b082      	sub	sp, #8
 801bc92:	ed8d 0b00 	vstr	d0, [sp]
 801bc96:	9a01      	ldr	r2, [sp, #4]
 801bc98:	4b0f      	ldr	r3, [pc, #60]	@ (801bcd8 <__ulp+0x48>)
 801bc9a:	4013      	ands	r3, r2
 801bc9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	dc08      	bgt.n	801bcb6 <__ulp+0x26>
 801bca4:	425b      	negs	r3, r3
 801bca6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bcaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bcae:	da04      	bge.n	801bcba <__ulp+0x2a>
 801bcb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bcb4:	4113      	asrs	r3, r2
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	e008      	b.n	801bccc <__ulp+0x3c>
 801bcba:	f1a2 0314 	sub.w	r3, r2, #20
 801bcbe:	2b1e      	cmp	r3, #30
 801bcc0:	bfda      	itte	le
 801bcc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bcc6:	40da      	lsrle	r2, r3
 801bcc8:	2201      	movgt	r2, #1
 801bcca:	2300      	movs	r3, #0
 801bccc:	4619      	mov	r1, r3
 801bcce:	4610      	mov	r0, r2
 801bcd0:	ec41 0b10 	vmov	d0, r0, r1
 801bcd4:	b002      	add	sp, #8
 801bcd6:	4770      	bx	lr
 801bcd8:	7ff00000 	.word	0x7ff00000

0801bcdc <__b2d>:
 801bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bce0:	6906      	ldr	r6, [r0, #16]
 801bce2:	f100 0814 	add.w	r8, r0, #20
 801bce6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bcea:	1f37      	subs	r7, r6, #4
 801bcec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bcf0:	4610      	mov	r0, r2
 801bcf2:	f7ff fd4b 	bl	801b78c <__hi0bits>
 801bcf6:	f1c0 0320 	rsb	r3, r0, #32
 801bcfa:	280a      	cmp	r0, #10
 801bcfc:	600b      	str	r3, [r1, #0]
 801bcfe:	491b      	ldr	r1, [pc, #108]	@ (801bd6c <__b2d+0x90>)
 801bd00:	dc15      	bgt.n	801bd2e <__b2d+0x52>
 801bd02:	f1c0 0c0b 	rsb	ip, r0, #11
 801bd06:	fa22 f30c 	lsr.w	r3, r2, ip
 801bd0a:	45b8      	cmp	r8, r7
 801bd0c:	ea43 0501 	orr.w	r5, r3, r1
 801bd10:	bf34      	ite	cc
 801bd12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd16:	2300      	movcs	r3, #0
 801bd18:	3015      	adds	r0, #21
 801bd1a:	fa02 f000 	lsl.w	r0, r2, r0
 801bd1e:	fa23 f30c 	lsr.w	r3, r3, ip
 801bd22:	4303      	orrs	r3, r0
 801bd24:	461c      	mov	r4, r3
 801bd26:	ec45 4b10 	vmov	d0, r4, r5
 801bd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd2e:	45b8      	cmp	r8, r7
 801bd30:	bf3a      	itte	cc
 801bd32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd36:	f1a6 0708 	subcc.w	r7, r6, #8
 801bd3a:	2300      	movcs	r3, #0
 801bd3c:	380b      	subs	r0, #11
 801bd3e:	d012      	beq.n	801bd66 <__b2d+0x8a>
 801bd40:	f1c0 0120 	rsb	r1, r0, #32
 801bd44:	fa23 f401 	lsr.w	r4, r3, r1
 801bd48:	4082      	lsls	r2, r0
 801bd4a:	4322      	orrs	r2, r4
 801bd4c:	4547      	cmp	r7, r8
 801bd4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bd52:	bf8c      	ite	hi
 801bd54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bd58:	2200      	movls	r2, #0
 801bd5a:	4083      	lsls	r3, r0
 801bd5c:	40ca      	lsrs	r2, r1
 801bd5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bd62:	4313      	orrs	r3, r2
 801bd64:	e7de      	b.n	801bd24 <__b2d+0x48>
 801bd66:	ea42 0501 	orr.w	r5, r2, r1
 801bd6a:	e7db      	b.n	801bd24 <__b2d+0x48>
 801bd6c:	3ff00000 	.word	0x3ff00000

0801bd70 <__d2b>:
 801bd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bd74:	460f      	mov	r7, r1
 801bd76:	2101      	movs	r1, #1
 801bd78:	ec59 8b10 	vmov	r8, r9, d0
 801bd7c:	4616      	mov	r6, r2
 801bd7e:	f7ff fc13 	bl	801b5a8 <_Balloc>
 801bd82:	4604      	mov	r4, r0
 801bd84:	b930      	cbnz	r0, 801bd94 <__d2b+0x24>
 801bd86:	4602      	mov	r2, r0
 801bd88:	4b23      	ldr	r3, [pc, #140]	@ (801be18 <__d2b+0xa8>)
 801bd8a:	4824      	ldr	r0, [pc, #144]	@ (801be1c <__d2b+0xac>)
 801bd8c:	f240 310f 	movw	r1, #783	@ 0x30f
 801bd90:	f000 fcaa 	bl	801c6e8 <__assert_func>
 801bd94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bd98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bd9c:	b10d      	cbz	r5, 801bda2 <__d2b+0x32>
 801bd9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bda2:	9301      	str	r3, [sp, #4]
 801bda4:	f1b8 0300 	subs.w	r3, r8, #0
 801bda8:	d023      	beq.n	801bdf2 <__d2b+0x82>
 801bdaa:	4668      	mov	r0, sp
 801bdac:	9300      	str	r3, [sp, #0]
 801bdae:	f7ff fd0c 	bl	801b7ca <__lo0bits>
 801bdb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bdb6:	b1d0      	cbz	r0, 801bdee <__d2b+0x7e>
 801bdb8:	f1c0 0320 	rsb	r3, r0, #32
 801bdbc:	fa02 f303 	lsl.w	r3, r2, r3
 801bdc0:	430b      	orrs	r3, r1
 801bdc2:	40c2      	lsrs	r2, r0
 801bdc4:	6163      	str	r3, [r4, #20]
 801bdc6:	9201      	str	r2, [sp, #4]
 801bdc8:	9b01      	ldr	r3, [sp, #4]
 801bdca:	61a3      	str	r3, [r4, #24]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	bf0c      	ite	eq
 801bdd0:	2201      	moveq	r2, #1
 801bdd2:	2202      	movne	r2, #2
 801bdd4:	6122      	str	r2, [r4, #16]
 801bdd6:	b1a5      	cbz	r5, 801be02 <__d2b+0x92>
 801bdd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bddc:	4405      	add	r5, r0
 801bdde:	603d      	str	r5, [r7, #0]
 801bde0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bde4:	6030      	str	r0, [r6, #0]
 801bde6:	4620      	mov	r0, r4
 801bde8:	b003      	add	sp, #12
 801bdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdee:	6161      	str	r1, [r4, #20]
 801bdf0:	e7ea      	b.n	801bdc8 <__d2b+0x58>
 801bdf2:	a801      	add	r0, sp, #4
 801bdf4:	f7ff fce9 	bl	801b7ca <__lo0bits>
 801bdf8:	9b01      	ldr	r3, [sp, #4]
 801bdfa:	6163      	str	r3, [r4, #20]
 801bdfc:	3020      	adds	r0, #32
 801bdfe:	2201      	movs	r2, #1
 801be00:	e7e8      	b.n	801bdd4 <__d2b+0x64>
 801be02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801be0a:	6038      	str	r0, [r7, #0]
 801be0c:	6918      	ldr	r0, [r3, #16]
 801be0e:	f7ff fcbd 	bl	801b78c <__hi0bits>
 801be12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801be16:	e7e5      	b.n	801bde4 <__d2b+0x74>
 801be18:	0803ba3e 	.word	0x0803ba3e
 801be1c:	0803baaf 	.word	0x0803baaf

0801be20 <__ratio>:
 801be20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be24:	4688      	mov	r8, r1
 801be26:	4669      	mov	r1, sp
 801be28:	4681      	mov	r9, r0
 801be2a:	f7ff ff57 	bl	801bcdc <__b2d>
 801be2e:	a901      	add	r1, sp, #4
 801be30:	4640      	mov	r0, r8
 801be32:	ec55 4b10 	vmov	r4, r5, d0
 801be36:	f7ff ff51 	bl	801bcdc <__b2d>
 801be3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801be3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801be42:	1ad2      	subs	r2, r2, r3
 801be44:	e9dd 3100 	ldrd	r3, r1, [sp]
 801be48:	1a5b      	subs	r3, r3, r1
 801be4a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801be4e:	ec57 6b10 	vmov	r6, r7, d0
 801be52:	2b00      	cmp	r3, #0
 801be54:	bfd6      	itet	le
 801be56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801be5a:	462a      	movgt	r2, r5
 801be5c:	463a      	movle	r2, r7
 801be5e:	46ab      	mov	fp, r5
 801be60:	46a2      	mov	sl, r4
 801be62:	bfce      	itee	gt
 801be64:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801be68:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801be6c:	ee00 3a90 	vmovle	s1, r3
 801be70:	ec4b ab17 	vmov	d7, sl, fp
 801be74:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801be78:	b003      	add	sp, #12
 801be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be7e <__copybits>:
 801be7e:	3901      	subs	r1, #1
 801be80:	b570      	push	{r4, r5, r6, lr}
 801be82:	1149      	asrs	r1, r1, #5
 801be84:	6914      	ldr	r4, [r2, #16]
 801be86:	3101      	adds	r1, #1
 801be88:	f102 0314 	add.w	r3, r2, #20
 801be8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801be90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801be94:	1f05      	subs	r5, r0, #4
 801be96:	42a3      	cmp	r3, r4
 801be98:	d30c      	bcc.n	801beb4 <__copybits+0x36>
 801be9a:	1aa3      	subs	r3, r4, r2
 801be9c:	3b11      	subs	r3, #17
 801be9e:	f023 0303 	bic.w	r3, r3, #3
 801bea2:	3211      	adds	r2, #17
 801bea4:	42a2      	cmp	r2, r4
 801bea6:	bf88      	it	hi
 801bea8:	2300      	movhi	r3, #0
 801beaa:	4418      	add	r0, r3
 801beac:	2300      	movs	r3, #0
 801beae:	4288      	cmp	r0, r1
 801beb0:	d305      	bcc.n	801bebe <__copybits+0x40>
 801beb2:	bd70      	pop	{r4, r5, r6, pc}
 801beb4:	f853 6b04 	ldr.w	r6, [r3], #4
 801beb8:	f845 6f04 	str.w	r6, [r5, #4]!
 801bebc:	e7eb      	b.n	801be96 <__copybits+0x18>
 801bebe:	f840 3b04 	str.w	r3, [r0], #4
 801bec2:	e7f4      	b.n	801beae <__copybits+0x30>

0801bec4 <__any_on>:
 801bec4:	f100 0214 	add.w	r2, r0, #20
 801bec8:	6900      	ldr	r0, [r0, #16]
 801beca:	114b      	asrs	r3, r1, #5
 801becc:	4298      	cmp	r0, r3
 801bece:	b510      	push	{r4, lr}
 801bed0:	db11      	blt.n	801bef6 <__any_on+0x32>
 801bed2:	dd0a      	ble.n	801beea <__any_on+0x26>
 801bed4:	f011 011f 	ands.w	r1, r1, #31
 801bed8:	d007      	beq.n	801beea <__any_on+0x26>
 801beda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bede:	fa24 f001 	lsr.w	r0, r4, r1
 801bee2:	fa00 f101 	lsl.w	r1, r0, r1
 801bee6:	428c      	cmp	r4, r1
 801bee8:	d10b      	bne.n	801bf02 <__any_on+0x3e>
 801beea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801beee:	4293      	cmp	r3, r2
 801bef0:	d803      	bhi.n	801befa <__any_on+0x36>
 801bef2:	2000      	movs	r0, #0
 801bef4:	bd10      	pop	{r4, pc}
 801bef6:	4603      	mov	r3, r0
 801bef8:	e7f7      	b.n	801beea <__any_on+0x26>
 801befa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801befe:	2900      	cmp	r1, #0
 801bf00:	d0f5      	beq.n	801beee <__any_on+0x2a>
 801bf02:	2001      	movs	r0, #1
 801bf04:	e7f6      	b.n	801bef4 <__any_on+0x30>

0801bf06 <__ascii_wctomb>:
 801bf06:	4603      	mov	r3, r0
 801bf08:	4608      	mov	r0, r1
 801bf0a:	b141      	cbz	r1, 801bf1e <__ascii_wctomb+0x18>
 801bf0c:	2aff      	cmp	r2, #255	@ 0xff
 801bf0e:	d904      	bls.n	801bf1a <__ascii_wctomb+0x14>
 801bf10:	228a      	movs	r2, #138	@ 0x8a
 801bf12:	601a      	str	r2, [r3, #0]
 801bf14:	f04f 30ff 	mov.w	r0, #4294967295
 801bf18:	4770      	bx	lr
 801bf1a:	700a      	strb	r2, [r1, #0]
 801bf1c:	2001      	movs	r0, #1
 801bf1e:	4770      	bx	lr

0801bf20 <__ssputs_r>:
 801bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf24:	688e      	ldr	r6, [r1, #8]
 801bf26:	461f      	mov	r7, r3
 801bf28:	42be      	cmp	r6, r7
 801bf2a:	680b      	ldr	r3, [r1, #0]
 801bf2c:	4682      	mov	sl, r0
 801bf2e:	460c      	mov	r4, r1
 801bf30:	4690      	mov	r8, r2
 801bf32:	d82d      	bhi.n	801bf90 <__ssputs_r+0x70>
 801bf34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bf38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bf3c:	d026      	beq.n	801bf8c <__ssputs_r+0x6c>
 801bf3e:	6965      	ldr	r5, [r4, #20]
 801bf40:	6909      	ldr	r1, [r1, #16]
 801bf42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf46:	eba3 0901 	sub.w	r9, r3, r1
 801bf4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bf4e:	1c7b      	adds	r3, r7, #1
 801bf50:	444b      	add	r3, r9
 801bf52:	106d      	asrs	r5, r5, #1
 801bf54:	429d      	cmp	r5, r3
 801bf56:	bf38      	it	cc
 801bf58:	461d      	movcc	r5, r3
 801bf5a:	0553      	lsls	r3, r2, #21
 801bf5c:	d527      	bpl.n	801bfae <__ssputs_r+0x8e>
 801bf5e:	4629      	mov	r1, r5
 801bf60:	f7fc f91c 	bl	801819c <_malloc_r>
 801bf64:	4606      	mov	r6, r0
 801bf66:	b360      	cbz	r0, 801bfc2 <__ssputs_r+0xa2>
 801bf68:	6921      	ldr	r1, [r4, #16]
 801bf6a:	464a      	mov	r2, r9
 801bf6c:	f7fe f97d 	bl	801a26a <memcpy>
 801bf70:	89a3      	ldrh	r3, [r4, #12]
 801bf72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bf76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bf7a:	81a3      	strh	r3, [r4, #12]
 801bf7c:	6126      	str	r6, [r4, #16]
 801bf7e:	6165      	str	r5, [r4, #20]
 801bf80:	444e      	add	r6, r9
 801bf82:	eba5 0509 	sub.w	r5, r5, r9
 801bf86:	6026      	str	r6, [r4, #0]
 801bf88:	60a5      	str	r5, [r4, #8]
 801bf8a:	463e      	mov	r6, r7
 801bf8c:	42be      	cmp	r6, r7
 801bf8e:	d900      	bls.n	801bf92 <__ssputs_r+0x72>
 801bf90:	463e      	mov	r6, r7
 801bf92:	6820      	ldr	r0, [r4, #0]
 801bf94:	4632      	mov	r2, r6
 801bf96:	4641      	mov	r1, r8
 801bf98:	f000 fb6a 	bl	801c670 <memmove>
 801bf9c:	68a3      	ldr	r3, [r4, #8]
 801bf9e:	1b9b      	subs	r3, r3, r6
 801bfa0:	60a3      	str	r3, [r4, #8]
 801bfa2:	6823      	ldr	r3, [r4, #0]
 801bfa4:	4433      	add	r3, r6
 801bfa6:	6023      	str	r3, [r4, #0]
 801bfa8:	2000      	movs	r0, #0
 801bfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfae:	462a      	mov	r2, r5
 801bfb0:	f000 fbcc 	bl	801c74c <_realloc_r>
 801bfb4:	4606      	mov	r6, r0
 801bfb6:	2800      	cmp	r0, #0
 801bfb8:	d1e0      	bne.n	801bf7c <__ssputs_r+0x5c>
 801bfba:	6921      	ldr	r1, [r4, #16]
 801bfbc:	4650      	mov	r0, sl
 801bfbe:	f7fe ff5d 	bl	801ae7c <_free_r>
 801bfc2:	230c      	movs	r3, #12
 801bfc4:	f8ca 3000 	str.w	r3, [sl]
 801bfc8:	89a3      	ldrh	r3, [r4, #12]
 801bfca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bfce:	81a3      	strh	r3, [r4, #12]
 801bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfd4:	e7e9      	b.n	801bfaa <__ssputs_r+0x8a>
	...

0801bfd8 <_svfiprintf_r>:
 801bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfdc:	4698      	mov	r8, r3
 801bfde:	898b      	ldrh	r3, [r1, #12]
 801bfe0:	061b      	lsls	r3, r3, #24
 801bfe2:	b09d      	sub	sp, #116	@ 0x74
 801bfe4:	4607      	mov	r7, r0
 801bfe6:	460d      	mov	r5, r1
 801bfe8:	4614      	mov	r4, r2
 801bfea:	d510      	bpl.n	801c00e <_svfiprintf_r+0x36>
 801bfec:	690b      	ldr	r3, [r1, #16]
 801bfee:	b973      	cbnz	r3, 801c00e <_svfiprintf_r+0x36>
 801bff0:	2140      	movs	r1, #64	@ 0x40
 801bff2:	f7fc f8d3 	bl	801819c <_malloc_r>
 801bff6:	6028      	str	r0, [r5, #0]
 801bff8:	6128      	str	r0, [r5, #16]
 801bffa:	b930      	cbnz	r0, 801c00a <_svfiprintf_r+0x32>
 801bffc:	230c      	movs	r3, #12
 801bffe:	603b      	str	r3, [r7, #0]
 801c000:	f04f 30ff 	mov.w	r0, #4294967295
 801c004:	b01d      	add	sp, #116	@ 0x74
 801c006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c00a:	2340      	movs	r3, #64	@ 0x40
 801c00c:	616b      	str	r3, [r5, #20]
 801c00e:	2300      	movs	r3, #0
 801c010:	9309      	str	r3, [sp, #36]	@ 0x24
 801c012:	2320      	movs	r3, #32
 801c014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c018:	f8cd 800c 	str.w	r8, [sp, #12]
 801c01c:	2330      	movs	r3, #48	@ 0x30
 801c01e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c1bc <_svfiprintf_r+0x1e4>
 801c022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c026:	f04f 0901 	mov.w	r9, #1
 801c02a:	4623      	mov	r3, r4
 801c02c:	469a      	mov	sl, r3
 801c02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c032:	b10a      	cbz	r2, 801c038 <_svfiprintf_r+0x60>
 801c034:	2a25      	cmp	r2, #37	@ 0x25
 801c036:	d1f9      	bne.n	801c02c <_svfiprintf_r+0x54>
 801c038:	ebba 0b04 	subs.w	fp, sl, r4
 801c03c:	d00b      	beq.n	801c056 <_svfiprintf_r+0x7e>
 801c03e:	465b      	mov	r3, fp
 801c040:	4622      	mov	r2, r4
 801c042:	4629      	mov	r1, r5
 801c044:	4638      	mov	r0, r7
 801c046:	f7ff ff6b 	bl	801bf20 <__ssputs_r>
 801c04a:	3001      	adds	r0, #1
 801c04c:	f000 80a7 	beq.w	801c19e <_svfiprintf_r+0x1c6>
 801c050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c052:	445a      	add	r2, fp
 801c054:	9209      	str	r2, [sp, #36]	@ 0x24
 801c056:	f89a 3000 	ldrb.w	r3, [sl]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	f000 809f 	beq.w	801c19e <_svfiprintf_r+0x1c6>
 801c060:	2300      	movs	r3, #0
 801c062:	f04f 32ff 	mov.w	r2, #4294967295
 801c066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c06a:	f10a 0a01 	add.w	sl, sl, #1
 801c06e:	9304      	str	r3, [sp, #16]
 801c070:	9307      	str	r3, [sp, #28]
 801c072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c076:	931a      	str	r3, [sp, #104]	@ 0x68
 801c078:	4654      	mov	r4, sl
 801c07a:	2205      	movs	r2, #5
 801c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c080:	484e      	ldr	r0, [pc, #312]	@ (801c1bc <_svfiprintf_r+0x1e4>)
 801c082:	f7e4 f945 	bl	8000310 <memchr>
 801c086:	9a04      	ldr	r2, [sp, #16]
 801c088:	b9d8      	cbnz	r0, 801c0c2 <_svfiprintf_r+0xea>
 801c08a:	06d0      	lsls	r0, r2, #27
 801c08c:	bf44      	itt	mi
 801c08e:	2320      	movmi	r3, #32
 801c090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c094:	0711      	lsls	r1, r2, #28
 801c096:	bf44      	itt	mi
 801c098:	232b      	movmi	r3, #43	@ 0x2b
 801c09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c09e:	f89a 3000 	ldrb.w	r3, [sl]
 801c0a2:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0a4:	d015      	beq.n	801c0d2 <_svfiprintf_r+0xfa>
 801c0a6:	9a07      	ldr	r2, [sp, #28]
 801c0a8:	4654      	mov	r4, sl
 801c0aa:	2000      	movs	r0, #0
 801c0ac:	f04f 0c0a 	mov.w	ip, #10
 801c0b0:	4621      	mov	r1, r4
 801c0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0b6:	3b30      	subs	r3, #48	@ 0x30
 801c0b8:	2b09      	cmp	r3, #9
 801c0ba:	d94b      	bls.n	801c154 <_svfiprintf_r+0x17c>
 801c0bc:	b1b0      	cbz	r0, 801c0ec <_svfiprintf_r+0x114>
 801c0be:	9207      	str	r2, [sp, #28]
 801c0c0:	e014      	b.n	801c0ec <_svfiprintf_r+0x114>
 801c0c2:	eba0 0308 	sub.w	r3, r0, r8
 801c0c6:	fa09 f303 	lsl.w	r3, r9, r3
 801c0ca:	4313      	orrs	r3, r2
 801c0cc:	9304      	str	r3, [sp, #16]
 801c0ce:	46a2      	mov	sl, r4
 801c0d0:	e7d2      	b.n	801c078 <_svfiprintf_r+0xa0>
 801c0d2:	9b03      	ldr	r3, [sp, #12]
 801c0d4:	1d19      	adds	r1, r3, #4
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	9103      	str	r1, [sp, #12]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	bfbb      	ittet	lt
 801c0de:	425b      	neglt	r3, r3
 801c0e0:	f042 0202 	orrlt.w	r2, r2, #2
 801c0e4:	9307      	strge	r3, [sp, #28]
 801c0e6:	9307      	strlt	r3, [sp, #28]
 801c0e8:	bfb8      	it	lt
 801c0ea:	9204      	strlt	r2, [sp, #16]
 801c0ec:	7823      	ldrb	r3, [r4, #0]
 801c0ee:	2b2e      	cmp	r3, #46	@ 0x2e
 801c0f0:	d10a      	bne.n	801c108 <_svfiprintf_r+0x130>
 801c0f2:	7863      	ldrb	r3, [r4, #1]
 801c0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0f6:	d132      	bne.n	801c15e <_svfiprintf_r+0x186>
 801c0f8:	9b03      	ldr	r3, [sp, #12]
 801c0fa:	1d1a      	adds	r2, r3, #4
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	9203      	str	r2, [sp, #12]
 801c100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c104:	3402      	adds	r4, #2
 801c106:	9305      	str	r3, [sp, #20]
 801c108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c1cc <_svfiprintf_r+0x1f4>
 801c10c:	7821      	ldrb	r1, [r4, #0]
 801c10e:	2203      	movs	r2, #3
 801c110:	4650      	mov	r0, sl
 801c112:	f7e4 f8fd 	bl	8000310 <memchr>
 801c116:	b138      	cbz	r0, 801c128 <_svfiprintf_r+0x150>
 801c118:	9b04      	ldr	r3, [sp, #16]
 801c11a:	eba0 000a 	sub.w	r0, r0, sl
 801c11e:	2240      	movs	r2, #64	@ 0x40
 801c120:	4082      	lsls	r2, r0
 801c122:	4313      	orrs	r3, r2
 801c124:	3401      	adds	r4, #1
 801c126:	9304      	str	r3, [sp, #16]
 801c128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c12c:	4824      	ldr	r0, [pc, #144]	@ (801c1c0 <_svfiprintf_r+0x1e8>)
 801c12e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c132:	2206      	movs	r2, #6
 801c134:	f7e4 f8ec 	bl	8000310 <memchr>
 801c138:	2800      	cmp	r0, #0
 801c13a:	d036      	beq.n	801c1aa <_svfiprintf_r+0x1d2>
 801c13c:	4b21      	ldr	r3, [pc, #132]	@ (801c1c4 <_svfiprintf_r+0x1ec>)
 801c13e:	bb1b      	cbnz	r3, 801c188 <_svfiprintf_r+0x1b0>
 801c140:	9b03      	ldr	r3, [sp, #12]
 801c142:	3307      	adds	r3, #7
 801c144:	f023 0307 	bic.w	r3, r3, #7
 801c148:	3308      	adds	r3, #8
 801c14a:	9303      	str	r3, [sp, #12]
 801c14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c14e:	4433      	add	r3, r6
 801c150:	9309      	str	r3, [sp, #36]	@ 0x24
 801c152:	e76a      	b.n	801c02a <_svfiprintf_r+0x52>
 801c154:	fb0c 3202 	mla	r2, ip, r2, r3
 801c158:	460c      	mov	r4, r1
 801c15a:	2001      	movs	r0, #1
 801c15c:	e7a8      	b.n	801c0b0 <_svfiprintf_r+0xd8>
 801c15e:	2300      	movs	r3, #0
 801c160:	3401      	adds	r4, #1
 801c162:	9305      	str	r3, [sp, #20]
 801c164:	4619      	mov	r1, r3
 801c166:	f04f 0c0a 	mov.w	ip, #10
 801c16a:	4620      	mov	r0, r4
 801c16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c170:	3a30      	subs	r2, #48	@ 0x30
 801c172:	2a09      	cmp	r2, #9
 801c174:	d903      	bls.n	801c17e <_svfiprintf_r+0x1a6>
 801c176:	2b00      	cmp	r3, #0
 801c178:	d0c6      	beq.n	801c108 <_svfiprintf_r+0x130>
 801c17a:	9105      	str	r1, [sp, #20]
 801c17c:	e7c4      	b.n	801c108 <_svfiprintf_r+0x130>
 801c17e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c182:	4604      	mov	r4, r0
 801c184:	2301      	movs	r3, #1
 801c186:	e7f0      	b.n	801c16a <_svfiprintf_r+0x192>
 801c188:	ab03      	add	r3, sp, #12
 801c18a:	9300      	str	r3, [sp, #0]
 801c18c:	462a      	mov	r2, r5
 801c18e:	4b0e      	ldr	r3, [pc, #56]	@ (801c1c8 <_svfiprintf_r+0x1f0>)
 801c190:	a904      	add	r1, sp, #16
 801c192:	4638      	mov	r0, r7
 801c194:	f7fc ffa8 	bl	80190e8 <_printf_float>
 801c198:	1c42      	adds	r2, r0, #1
 801c19a:	4606      	mov	r6, r0
 801c19c:	d1d6      	bne.n	801c14c <_svfiprintf_r+0x174>
 801c19e:	89ab      	ldrh	r3, [r5, #12]
 801c1a0:	065b      	lsls	r3, r3, #25
 801c1a2:	f53f af2d 	bmi.w	801c000 <_svfiprintf_r+0x28>
 801c1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c1a8:	e72c      	b.n	801c004 <_svfiprintf_r+0x2c>
 801c1aa:	ab03      	add	r3, sp, #12
 801c1ac:	9300      	str	r3, [sp, #0]
 801c1ae:	462a      	mov	r2, r5
 801c1b0:	4b05      	ldr	r3, [pc, #20]	@ (801c1c8 <_svfiprintf_r+0x1f0>)
 801c1b2:	a904      	add	r1, sp, #16
 801c1b4:	4638      	mov	r0, r7
 801c1b6:	f7fd fa1f 	bl	80195f8 <_printf_i>
 801c1ba:	e7ed      	b.n	801c198 <_svfiprintf_r+0x1c0>
 801c1bc:	0803bc08 	.word	0x0803bc08
 801c1c0:	0803bc12 	.word	0x0803bc12
 801c1c4:	080190e9 	.word	0x080190e9
 801c1c8:	0801bf21 	.word	0x0801bf21
 801c1cc:	0803bc0e 	.word	0x0803bc0e

0801c1d0 <__sfputc_r>:
 801c1d0:	6893      	ldr	r3, [r2, #8]
 801c1d2:	3b01      	subs	r3, #1
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	b410      	push	{r4}
 801c1d8:	6093      	str	r3, [r2, #8]
 801c1da:	da08      	bge.n	801c1ee <__sfputc_r+0x1e>
 801c1dc:	6994      	ldr	r4, [r2, #24]
 801c1de:	42a3      	cmp	r3, r4
 801c1e0:	db01      	blt.n	801c1e6 <__sfputc_r+0x16>
 801c1e2:	290a      	cmp	r1, #10
 801c1e4:	d103      	bne.n	801c1ee <__sfputc_r+0x1e>
 801c1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1ea:	f7fd befa 	b.w	8019fe2 <__swbuf_r>
 801c1ee:	6813      	ldr	r3, [r2, #0]
 801c1f0:	1c58      	adds	r0, r3, #1
 801c1f2:	6010      	str	r0, [r2, #0]
 801c1f4:	7019      	strb	r1, [r3, #0]
 801c1f6:	4608      	mov	r0, r1
 801c1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1fc:	4770      	bx	lr

0801c1fe <__sfputs_r>:
 801c1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c200:	4606      	mov	r6, r0
 801c202:	460f      	mov	r7, r1
 801c204:	4614      	mov	r4, r2
 801c206:	18d5      	adds	r5, r2, r3
 801c208:	42ac      	cmp	r4, r5
 801c20a:	d101      	bne.n	801c210 <__sfputs_r+0x12>
 801c20c:	2000      	movs	r0, #0
 801c20e:	e007      	b.n	801c220 <__sfputs_r+0x22>
 801c210:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c214:	463a      	mov	r2, r7
 801c216:	4630      	mov	r0, r6
 801c218:	f7ff ffda 	bl	801c1d0 <__sfputc_r>
 801c21c:	1c43      	adds	r3, r0, #1
 801c21e:	d1f3      	bne.n	801c208 <__sfputs_r+0xa>
 801c220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c224 <_vfiprintf_r>:
 801c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c228:	460d      	mov	r5, r1
 801c22a:	b09d      	sub	sp, #116	@ 0x74
 801c22c:	4614      	mov	r4, r2
 801c22e:	4698      	mov	r8, r3
 801c230:	4606      	mov	r6, r0
 801c232:	b118      	cbz	r0, 801c23c <_vfiprintf_r+0x18>
 801c234:	6a03      	ldr	r3, [r0, #32]
 801c236:	b90b      	cbnz	r3, 801c23c <_vfiprintf_r+0x18>
 801c238:	f7fd fd96 	bl	8019d68 <__sinit>
 801c23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c23e:	07d9      	lsls	r1, r3, #31
 801c240:	d405      	bmi.n	801c24e <_vfiprintf_r+0x2a>
 801c242:	89ab      	ldrh	r3, [r5, #12]
 801c244:	059a      	lsls	r2, r3, #22
 801c246:	d402      	bmi.n	801c24e <_vfiprintf_r+0x2a>
 801c248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c24a:	f7fe f80c 	bl	801a266 <__retarget_lock_acquire_recursive>
 801c24e:	89ab      	ldrh	r3, [r5, #12]
 801c250:	071b      	lsls	r3, r3, #28
 801c252:	d501      	bpl.n	801c258 <_vfiprintf_r+0x34>
 801c254:	692b      	ldr	r3, [r5, #16]
 801c256:	b99b      	cbnz	r3, 801c280 <_vfiprintf_r+0x5c>
 801c258:	4629      	mov	r1, r5
 801c25a:	4630      	mov	r0, r6
 801c25c:	f7fd ff00 	bl	801a060 <__swsetup_r>
 801c260:	b170      	cbz	r0, 801c280 <_vfiprintf_r+0x5c>
 801c262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c264:	07dc      	lsls	r4, r3, #31
 801c266:	d504      	bpl.n	801c272 <_vfiprintf_r+0x4e>
 801c268:	f04f 30ff 	mov.w	r0, #4294967295
 801c26c:	b01d      	add	sp, #116	@ 0x74
 801c26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c272:	89ab      	ldrh	r3, [r5, #12]
 801c274:	0598      	lsls	r0, r3, #22
 801c276:	d4f7      	bmi.n	801c268 <_vfiprintf_r+0x44>
 801c278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c27a:	f7fd fff5 	bl	801a268 <__retarget_lock_release_recursive>
 801c27e:	e7f3      	b.n	801c268 <_vfiprintf_r+0x44>
 801c280:	2300      	movs	r3, #0
 801c282:	9309      	str	r3, [sp, #36]	@ 0x24
 801c284:	2320      	movs	r3, #32
 801c286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c28a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c28e:	2330      	movs	r3, #48	@ 0x30
 801c290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c440 <_vfiprintf_r+0x21c>
 801c294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c298:	f04f 0901 	mov.w	r9, #1
 801c29c:	4623      	mov	r3, r4
 801c29e:	469a      	mov	sl, r3
 801c2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2a4:	b10a      	cbz	r2, 801c2aa <_vfiprintf_r+0x86>
 801c2a6:	2a25      	cmp	r2, #37	@ 0x25
 801c2a8:	d1f9      	bne.n	801c29e <_vfiprintf_r+0x7a>
 801c2aa:	ebba 0b04 	subs.w	fp, sl, r4
 801c2ae:	d00b      	beq.n	801c2c8 <_vfiprintf_r+0xa4>
 801c2b0:	465b      	mov	r3, fp
 801c2b2:	4622      	mov	r2, r4
 801c2b4:	4629      	mov	r1, r5
 801c2b6:	4630      	mov	r0, r6
 801c2b8:	f7ff ffa1 	bl	801c1fe <__sfputs_r>
 801c2bc:	3001      	adds	r0, #1
 801c2be:	f000 80a7 	beq.w	801c410 <_vfiprintf_r+0x1ec>
 801c2c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2c4:	445a      	add	r2, fp
 801c2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2c8:	f89a 3000 	ldrb.w	r3, [sl]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	f000 809f 	beq.w	801c410 <_vfiprintf_r+0x1ec>
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2dc:	f10a 0a01 	add.w	sl, sl, #1
 801c2e0:	9304      	str	r3, [sp, #16]
 801c2e2:	9307      	str	r3, [sp, #28]
 801c2e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c2e8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c2ea:	4654      	mov	r4, sl
 801c2ec:	2205      	movs	r2, #5
 801c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2f2:	4853      	ldr	r0, [pc, #332]	@ (801c440 <_vfiprintf_r+0x21c>)
 801c2f4:	f7e4 f80c 	bl	8000310 <memchr>
 801c2f8:	9a04      	ldr	r2, [sp, #16]
 801c2fa:	b9d8      	cbnz	r0, 801c334 <_vfiprintf_r+0x110>
 801c2fc:	06d1      	lsls	r1, r2, #27
 801c2fe:	bf44      	itt	mi
 801c300:	2320      	movmi	r3, #32
 801c302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c306:	0713      	lsls	r3, r2, #28
 801c308:	bf44      	itt	mi
 801c30a:	232b      	movmi	r3, #43	@ 0x2b
 801c30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c310:	f89a 3000 	ldrb.w	r3, [sl]
 801c314:	2b2a      	cmp	r3, #42	@ 0x2a
 801c316:	d015      	beq.n	801c344 <_vfiprintf_r+0x120>
 801c318:	9a07      	ldr	r2, [sp, #28]
 801c31a:	4654      	mov	r4, sl
 801c31c:	2000      	movs	r0, #0
 801c31e:	f04f 0c0a 	mov.w	ip, #10
 801c322:	4621      	mov	r1, r4
 801c324:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c328:	3b30      	subs	r3, #48	@ 0x30
 801c32a:	2b09      	cmp	r3, #9
 801c32c:	d94b      	bls.n	801c3c6 <_vfiprintf_r+0x1a2>
 801c32e:	b1b0      	cbz	r0, 801c35e <_vfiprintf_r+0x13a>
 801c330:	9207      	str	r2, [sp, #28]
 801c332:	e014      	b.n	801c35e <_vfiprintf_r+0x13a>
 801c334:	eba0 0308 	sub.w	r3, r0, r8
 801c338:	fa09 f303 	lsl.w	r3, r9, r3
 801c33c:	4313      	orrs	r3, r2
 801c33e:	9304      	str	r3, [sp, #16]
 801c340:	46a2      	mov	sl, r4
 801c342:	e7d2      	b.n	801c2ea <_vfiprintf_r+0xc6>
 801c344:	9b03      	ldr	r3, [sp, #12]
 801c346:	1d19      	adds	r1, r3, #4
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	9103      	str	r1, [sp, #12]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	bfbb      	ittet	lt
 801c350:	425b      	neglt	r3, r3
 801c352:	f042 0202 	orrlt.w	r2, r2, #2
 801c356:	9307      	strge	r3, [sp, #28]
 801c358:	9307      	strlt	r3, [sp, #28]
 801c35a:	bfb8      	it	lt
 801c35c:	9204      	strlt	r2, [sp, #16]
 801c35e:	7823      	ldrb	r3, [r4, #0]
 801c360:	2b2e      	cmp	r3, #46	@ 0x2e
 801c362:	d10a      	bne.n	801c37a <_vfiprintf_r+0x156>
 801c364:	7863      	ldrb	r3, [r4, #1]
 801c366:	2b2a      	cmp	r3, #42	@ 0x2a
 801c368:	d132      	bne.n	801c3d0 <_vfiprintf_r+0x1ac>
 801c36a:	9b03      	ldr	r3, [sp, #12]
 801c36c:	1d1a      	adds	r2, r3, #4
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	9203      	str	r2, [sp, #12]
 801c372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c376:	3402      	adds	r4, #2
 801c378:	9305      	str	r3, [sp, #20]
 801c37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c450 <_vfiprintf_r+0x22c>
 801c37e:	7821      	ldrb	r1, [r4, #0]
 801c380:	2203      	movs	r2, #3
 801c382:	4650      	mov	r0, sl
 801c384:	f7e3 ffc4 	bl	8000310 <memchr>
 801c388:	b138      	cbz	r0, 801c39a <_vfiprintf_r+0x176>
 801c38a:	9b04      	ldr	r3, [sp, #16]
 801c38c:	eba0 000a 	sub.w	r0, r0, sl
 801c390:	2240      	movs	r2, #64	@ 0x40
 801c392:	4082      	lsls	r2, r0
 801c394:	4313      	orrs	r3, r2
 801c396:	3401      	adds	r4, #1
 801c398:	9304      	str	r3, [sp, #16]
 801c39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c39e:	4829      	ldr	r0, [pc, #164]	@ (801c444 <_vfiprintf_r+0x220>)
 801c3a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c3a4:	2206      	movs	r2, #6
 801c3a6:	f7e3 ffb3 	bl	8000310 <memchr>
 801c3aa:	2800      	cmp	r0, #0
 801c3ac:	d03f      	beq.n	801c42e <_vfiprintf_r+0x20a>
 801c3ae:	4b26      	ldr	r3, [pc, #152]	@ (801c448 <_vfiprintf_r+0x224>)
 801c3b0:	bb1b      	cbnz	r3, 801c3fa <_vfiprintf_r+0x1d6>
 801c3b2:	9b03      	ldr	r3, [sp, #12]
 801c3b4:	3307      	adds	r3, #7
 801c3b6:	f023 0307 	bic.w	r3, r3, #7
 801c3ba:	3308      	adds	r3, #8
 801c3bc:	9303      	str	r3, [sp, #12]
 801c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3c0:	443b      	add	r3, r7
 801c3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3c4:	e76a      	b.n	801c29c <_vfiprintf_r+0x78>
 801c3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3ca:	460c      	mov	r4, r1
 801c3cc:	2001      	movs	r0, #1
 801c3ce:	e7a8      	b.n	801c322 <_vfiprintf_r+0xfe>
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	3401      	adds	r4, #1
 801c3d4:	9305      	str	r3, [sp, #20]
 801c3d6:	4619      	mov	r1, r3
 801c3d8:	f04f 0c0a 	mov.w	ip, #10
 801c3dc:	4620      	mov	r0, r4
 801c3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3e2:	3a30      	subs	r2, #48	@ 0x30
 801c3e4:	2a09      	cmp	r2, #9
 801c3e6:	d903      	bls.n	801c3f0 <_vfiprintf_r+0x1cc>
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d0c6      	beq.n	801c37a <_vfiprintf_r+0x156>
 801c3ec:	9105      	str	r1, [sp, #20]
 801c3ee:	e7c4      	b.n	801c37a <_vfiprintf_r+0x156>
 801c3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3f4:	4604      	mov	r4, r0
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	e7f0      	b.n	801c3dc <_vfiprintf_r+0x1b8>
 801c3fa:	ab03      	add	r3, sp, #12
 801c3fc:	9300      	str	r3, [sp, #0]
 801c3fe:	462a      	mov	r2, r5
 801c400:	4b12      	ldr	r3, [pc, #72]	@ (801c44c <_vfiprintf_r+0x228>)
 801c402:	a904      	add	r1, sp, #16
 801c404:	4630      	mov	r0, r6
 801c406:	f7fc fe6f 	bl	80190e8 <_printf_float>
 801c40a:	4607      	mov	r7, r0
 801c40c:	1c78      	adds	r0, r7, #1
 801c40e:	d1d6      	bne.n	801c3be <_vfiprintf_r+0x19a>
 801c410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c412:	07d9      	lsls	r1, r3, #31
 801c414:	d405      	bmi.n	801c422 <_vfiprintf_r+0x1fe>
 801c416:	89ab      	ldrh	r3, [r5, #12]
 801c418:	059a      	lsls	r2, r3, #22
 801c41a:	d402      	bmi.n	801c422 <_vfiprintf_r+0x1fe>
 801c41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c41e:	f7fd ff23 	bl	801a268 <__retarget_lock_release_recursive>
 801c422:	89ab      	ldrh	r3, [r5, #12]
 801c424:	065b      	lsls	r3, r3, #25
 801c426:	f53f af1f 	bmi.w	801c268 <_vfiprintf_r+0x44>
 801c42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c42c:	e71e      	b.n	801c26c <_vfiprintf_r+0x48>
 801c42e:	ab03      	add	r3, sp, #12
 801c430:	9300      	str	r3, [sp, #0]
 801c432:	462a      	mov	r2, r5
 801c434:	4b05      	ldr	r3, [pc, #20]	@ (801c44c <_vfiprintf_r+0x228>)
 801c436:	a904      	add	r1, sp, #16
 801c438:	4630      	mov	r0, r6
 801c43a:	f7fd f8dd 	bl	80195f8 <_printf_i>
 801c43e:	e7e4      	b.n	801c40a <_vfiprintf_r+0x1e6>
 801c440:	0803bc08 	.word	0x0803bc08
 801c444:	0803bc12 	.word	0x0803bc12
 801c448:	080190e9 	.word	0x080190e9
 801c44c:	0801c1ff 	.word	0x0801c1ff
 801c450:	0803bc0e 	.word	0x0803bc0e

0801c454 <__sflush_r>:
 801c454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c45c:	0716      	lsls	r6, r2, #28
 801c45e:	4605      	mov	r5, r0
 801c460:	460c      	mov	r4, r1
 801c462:	d454      	bmi.n	801c50e <__sflush_r+0xba>
 801c464:	684b      	ldr	r3, [r1, #4]
 801c466:	2b00      	cmp	r3, #0
 801c468:	dc02      	bgt.n	801c470 <__sflush_r+0x1c>
 801c46a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	dd48      	ble.n	801c502 <__sflush_r+0xae>
 801c470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c472:	2e00      	cmp	r6, #0
 801c474:	d045      	beq.n	801c502 <__sflush_r+0xae>
 801c476:	2300      	movs	r3, #0
 801c478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c47c:	682f      	ldr	r7, [r5, #0]
 801c47e:	6a21      	ldr	r1, [r4, #32]
 801c480:	602b      	str	r3, [r5, #0]
 801c482:	d030      	beq.n	801c4e6 <__sflush_r+0x92>
 801c484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c486:	89a3      	ldrh	r3, [r4, #12]
 801c488:	0759      	lsls	r1, r3, #29
 801c48a:	d505      	bpl.n	801c498 <__sflush_r+0x44>
 801c48c:	6863      	ldr	r3, [r4, #4]
 801c48e:	1ad2      	subs	r2, r2, r3
 801c490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c492:	b10b      	cbz	r3, 801c498 <__sflush_r+0x44>
 801c494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c496:	1ad2      	subs	r2, r2, r3
 801c498:	2300      	movs	r3, #0
 801c49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c49c:	6a21      	ldr	r1, [r4, #32]
 801c49e:	4628      	mov	r0, r5
 801c4a0:	47b0      	blx	r6
 801c4a2:	1c43      	adds	r3, r0, #1
 801c4a4:	89a3      	ldrh	r3, [r4, #12]
 801c4a6:	d106      	bne.n	801c4b6 <__sflush_r+0x62>
 801c4a8:	6829      	ldr	r1, [r5, #0]
 801c4aa:	291d      	cmp	r1, #29
 801c4ac:	d82b      	bhi.n	801c506 <__sflush_r+0xb2>
 801c4ae:	4a2a      	ldr	r2, [pc, #168]	@ (801c558 <__sflush_r+0x104>)
 801c4b0:	410a      	asrs	r2, r1
 801c4b2:	07d6      	lsls	r6, r2, #31
 801c4b4:	d427      	bmi.n	801c506 <__sflush_r+0xb2>
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	6062      	str	r2, [r4, #4]
 801c4ba:	04d9      	lsls	r1, r3, #19
 801c4bc:	6922      	ldr	r2, [r4, #16]
 801c4be:	6022      	str	r2, [r4, #0]
 801c4c0:	d504      	bpl.n	801c4cc <__sflush_r+0x78>
 801c4c2:	1c42      	adds	r2, r0, #1
 801c4c4:	d101      	bne.n	801c4ca <__sflush_r+0x76>
 801c4c6:	682b      	ldr	r3, [r5, #0]
 801c4c8:	b903      	cbnz	r3, 801c4cc <__sflush_r+0x78>
 801c4ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801c4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c4ce:	602f      	str	r7, [r5, #0]
 801c4d0:	b1b9      	cbz	r1, 801c502 <__sflush_r+0xae>
 801c4d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c4d6:	4299      	cmp	r1, r3
 801c4d8:	d002      	beq.n	801c4e0 <__sflush_r+0x8c>
 801c4da:	4628      	mov	r0, r5
 801c4dc:	f7fe fcce 	bl	801ae7c <_free_r>
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801c4e4:	e00d      	b.n	801c502 <__sflush_r+0xae>
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	4628      	mov	r0, r5
 801c4ea:	47b0      	blx	r6
 801c4ec:	4602      	mov	r2, r0
 801c4ee:	1c50      	adds	r0, r2, #1
 801c4f0:	d1c9      	bne.n	801c486 <__sflush_r+0x32>
 801c4f2:	682b      	ldr	r3, [r5, #0]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d0c6      	beq.n	801c486 <__sflush_r+0x32>
 801c4f8:	2b1d      	cmp	r3, #29
 801c4fa:	d001      	beq.n	801c500 <__sflush_r+0xac>
 801c4fc:	2b16      	cmp	r3, #22
 801c4fe:	d11e      	bne.n	801c53e <__sflush_r+0xea>
 801c500:	602f      	str	r7, [r5, #0]
 801c502:	2000      	movs	r0, #0
 801c504:	e022      	b.n	801c54c <__sflush_r+0xf8>
 801c506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c50a:	b21b      	sxth	r3, r3
 801c50c:	e01b      	b.n	801c546 <__sflush_r+0xf2>
 801c50e:	690f      	ldr	r7, [r1, #16]
 801c510:	2f00      	cmp	r7, #0
 801c512:	d0f6      	beq.n	801c502 <__sflush_r+0xae>
 801c514:	0793      	lsls	r3, r2, #30
 801c516:	680e      	ldr	r6, [r1, #0]
 801c518:	bf08      	it	eq
 801c51a:	694b      	ldreq	r3, [r1, #20]
 801c51c:	600f      	str	r7, [r1, #0]
 801c51e:	bf18      	it	ne
 801c520:	2300      	movne	r3, #0
 801c522:	eba6 0807 	sub.w	r8, r6, r7
 801c526:	608b      	str	r3, [r1, #8]
 801c528:	f1b8 0f00 	cmp.w	r8, #0
 801c52c:	dde9      	ble.n	801c502 <__sflush_r+0xae>
 801c52e:	6a21      	ldr	r1, [r4, #32]
 801c530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c532:	4643      	mov	r3, r8
 801c534:	463a      	mov	r2, r7
 801c536:	4628      	mov	r0, r5
 801c538:	47b0      	blx	r6
 801c53a:	2800      	cmp	r0, #0
 801c53c:	dc08      	bgt.n	801c550 <__sflush_r+0xfc>
 801c53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c546:	81a3      	strh	r3, [r4, #12]
 801c548:	f04f 30ff 	mov.w	r0, #4294967295
 801c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c550:	4407      	add	r7, r0
 801c552:	eba8 0800 	sub.w	r8, r8, r0
 801c556:	e7e7      	b.n	801c528 <__sflush_r+0xd4>
 801c558:	dfbffffe 	.word	0xdfbffffe

0801c55c <_fflush_r>:
 801c55c:	b538      	push	{r3, r4, r5, lr}
 801c55e:	690b      	ldr	r3, [r1, #16]
 801c560:	4605      	mov	r5, r0
 801c562:	460c      	mov	r4, r1
 801c564:	b913      	cbnz	r3, 801c56c <_fflush_r+0x10>
 801c566:	2500      	movs	r5, #0
 801c568:	4628      	mov	r0, r5
 801c56a:	bd38      	pop	{r3, r4, r5, pc}
 801c56c:	b118      	cbz	r0, 801c576 <_fflush_r+0x1a>
 801c56e:	6a03      	ldr	r3, [r0, #32]
 801c570:	b90b      	cbnz	r3, 801c576 <_fflush_r+0x1a>
 801c572:	f7fd fbf9 	bl	8019d68 <__sinit>
 801c576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d0f3      	beq.n	801c566 <_fflush_r+0xa>
 801c57e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c580:	07d0      	lsls	r0, r2, #31
 801c582:	d404      	bmi.n	801c58e <_fflush_r+0x32>
 801c584:	0599      	lsls	r1, r3, #22
 801c586:	d402      	bmi.n	801c58e <_fflush_r+0x32>
 801c588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c58a:	f7fd fe6c 	bl	801a266 <__retarget_lock_acquire_recursive>
 801c58e:	4628      	mov	r0, r5
 801c590:	4621      	mov	r1, r4
 801c592:	f7ff ff5f 	bl	801c454 <__sflush_r>
 801c596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c598:	07da      	lsls	r2, r3, #31
 801c59a:	4605      	mov	r5, r0
 801c59c:	d4e4      	bmi.n	801c568 <_fflush_r+0xc>
 801c59e:	89a3      	ldrh	r3, [r4, #12]
 801c5a0:	059b      	lsls	r3, r3, #22
 801c5a2:	d4e1      	bmi.n	801c568 <_fflush_r+0xc>
 801c5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5a6:	f7fd fe5f 	bl	801a268 <__retarget_lock_release_recursive>
 801c5aa:	e7dd      	b.n	801c568 <_fflush_r+0xc>

0801c5ac <__swhatbuf_r>:
 801c5ac:	b570      	push	{r4, r5, r6, lr}
 801c5ae:	460c      	mov	r4, r1
 801c5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5b4:	2900      	cmp	r1, #0
 801c5b6:	b096      	sub	sp, #88	@ 0x58
 801c5b8:	4615      	mov	r5, r2
 801c5ba:	461e      	mov	r6, r3
 801c5bc:	da0d      	bge.n	801c5da <__swhatbuf_r+0x2e>
 801c5be:	89a3      	ldrh	r3, [r4, #12]
 801c5c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c5c4:	f04f 0100 	mov.w	r1, #0
 801c5c8:	bf14      	ite	ne
 801c5ca:	2340      	movne	r3, #64	@ 0x40
 801c5cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c5d0:	2000      	movs	r0, #0
 801c5d2:	6031      	str	r1, [r6, #0]
 801c5d4:	602b      	str	r3, [r5, #0]
 801c5d6:	b016      	add	sp, #88	@ 0x58
 801c5d8:	bd70      	pop	{r4, r5, r6, pc}
 801c5da:	466a      	mov	r2, sp
 801c5dc:	f000 f862 	bl	801c6a4 <_fstat_r>
 801c5e0:	2800      	cmp	r0, #0
 801c5e2:	dbec      	blt.n	801c5be <__swhatbuf_r+0x12>
 801c5e4:	9901      	ldr	r1, [sp, #4]
 801c5e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c5ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c5ee:	4259      	negs	r1, r3
 801c5f0:	4159      	adcs	r1, r3
 801c5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c5f6:	e7eb      	b.n	801c5d0 <__swhatbuf_r+0x24>

0801c5f8 <__smakebuf_r>:
 801c5f8:	898b      	ldrh	r3, [r1, #12]
 801c5fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c5fc:	079d      	lsls	r5, r3, #30
 801c5fe:	4606      	mov	r6, r0
 801c600:	460c      	mov	r4, r1
 801c602:	d507      	bpl.n	801c614 <__smakebuf_r+0x1c>
 801c604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c608:	6023      	str	r3, [r4, #0]
 801c60a:	6123      	str	r3, [r4, #16]
 801c60c:	2301      	movs	r3, #1
 801c60e:	6163      	str	r3, [r4, #20]
 801c610:	b003      	add	sp, #12
 801c612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c614:	ab01      	add	r3, sp, #4
 801c616:	466a      	mov	r2, sp
 801c618:	f7ff ffc8 	bl	801c5ac <__swhatbuf_r>
 801c61c:	9f00      	ldr	r7, [sp, #0]
 801c61e:	4605      	mov	r5, r0
 801c620:	4639      	mov	r1, r7
 801c622:	4630      	mov	r0, r6
 801c624:	f7fb fdba 	bl	801819c <_malloc_r>
 801c628:	b948      	cbnz	r0, 801c63e <__smakebuf_r+0x46>
 801c62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c62e:	059a      	lsls	r2, r3, #22
 801c630:	d4ee      	bmi.n	801c610 <__smakebuf_r+0x18>
 801c632:	f023 0303 	bic.w	r3, r3, #3
 801c636:	f043 0302 	orr.w	r3, r3, #2
 801c63a:	81a3      	strh	r3, [r4, #12]
 801c63c:	e7e2      	b.n	801c604 <__smakebuf_r+0xc>
 801c63e:	89a3      	ldrh	r3, [r4, #12]
 801c640:	6020      	str	r0, [r4, #0]
 801c642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c646:	81a3      	strh	r3, [r4, #12]
 801c648:	9b01      	ldr	r3, [sp, #4]
 801c64a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c64e:	b15b      	cbz	r3, 801c668 <__smakebuf_r+0x70>
 801c650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c654:	4630      	mov	r0, r6
 801c656:	f000 f837 	bl	801c6c8 <_isatty_r>
 801c65a:	b128      	cbz	r0, 801c668 <__smakebuf_r+0x70>
 801c65c:	89a3      	ldrh	r3, [r4, #12]
 801c65e:	f023 0303 	bic.w	r3, r3, #3
 801c662:	f043 0301 	orr.w	r3, r3, #1
 801c666:	81a3      	strh	r3, [r4, #12]
 801c668:	89a3      	ldrh	r3, [r4, #12]
 801c66a:	431d      	orrs	r5, r3
 801c66c:	81a5      	strh	r5, [r4, #12]
 801c66e:	e7cf      	b.n	801c610 <__smakebuf_r+0x18>

0801c670 <memmove>:
 801c670:	4288      	cmp	r0, r1
 801c672:	b510      	push	{r4, lr}
 801c674:	eb01 0402 	add.w	r4, r1, r2
 801c678:	d902      	bls.n	801c680 <memmove+0x10>
 801c67a:	4284      	cmp	r4, r0
 801c67c:	4623      	mov	r3, r4
 801c67e:	d807      	bhi.n	801c690 <memmove+0x20>
 801c680:	1e43      	subs	r3, r0, #1
 801c682:	42a1      	cmp	r1, r4
 801c684:	d008      	beq.n	801c698 <memmove+0x28>
 801c686:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c68a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c68e:	e7f8      	b.n	801c682 <memmove+0x12>
 801c690:	4402      	add	r2, r0
 801c692:	4601      	mov	r1, r0
 801c694:	428a      	cmp	r2, r1
 801c696:	d100      	bne.n	801c69a <memmove+0x2a>
 801c698:	bd10      	pop	{r4, pc}
 801c69a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c69e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c6a2:	e7f7      	b.n	801c694 <memmove+0x24>

0801c6a4 <_fstat_r>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4d07      	ldr	r5, [pc, #28]	@ (801c6c4 <_fstat_r+0x20>)
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4604      	mov	r4, r0
 801c6ac:	4608      	mov	r0, r1
 801c6ae:	4611      	mov	r1, r2
 801c6b0:	602b      	str	r3, [r5, #0]
 801c6b2:	f7ea fd2f 	bl	8007114 <_fstat>
 801c6b6:	1c43      	adds	r3, r0, #1
 801c6b8:	d102      	bne.n	801c6c0 <_fstat_r+0x1c>
 801c6ba:	682b      	ldr	r3, [r5, #0]
 801c6bc:	b103      	cbz	r3, 801c6c0 <_fstat_r+0x1c>
 801c6be:	6023      	str	r3, [r4, #0]
 801c6c0:	bd38      	pop	{r3, r4, r5, pc}
 801c6c2:	bf00      	nop
 801c6c4:	24004cb4 	.word	0x24004cb4

0801c6c8 <_isatty_r>:
 801c6c8:	b538      	push	{r3, r4, r5, lr}
 801c6ca:	4d06      	ldr	r5, [pc, #24]	@ (801c6e4 <_isatty_r+0x1c>)
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	4608      	mov	r0, r1
 801c6d2:	602b      	str	r3, [r5, #0]
 801c6d4:	f7ea fd2e 	bl	8007134 <_isatty>
 801c6d8:	1c43      	adds	r3, r0, #1
 801c6da:	d102      	bne.n	801c6e2 <_isatty_r+0x1a>
 801c6dc:	682b      	ldr	r3, [r5, #0]
 801c6de:	b103      	cbz	r3, 801c6e2 <_isatty_r+0x1a>
 801c6e0:	6023      	str	r3, [r4, #0]
 801c6e2:	bd38      	pop	{r3, r4, r5, pc}
 801c6e4:	24004cb4 	.word	0x24004cb4

0801c6e8 <__assert_func>:
 801c6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6ea:	4614      	mov	r4, r2
 801c6ec:	461a      	mov	r2, r3
 801c6ee:	4b09      	ldr	r3, [pc, #36]	@ (801c714 <__assert_func+0x2c>)
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	4605      	mov	r5, r0
 801c6f4:	68d8      	ldr	r0, [r3, #12]
 801c6f6:	b954      	cbnz	r4, 801c70e <__assert_func+0x26>
 801c6f8:	4b07      	ldr	r3, [pc, #28]	@ (801c718 <__assert_func+0x30>)
 801c6fa:	461c      	mov	r4, r3
 801c6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c700:	9100      	str	r1, [sp, #0]
 801c702:	462b      	mov	r3, r5
 801c704:	4905      	ldr	r1, [pc, #20]	@ (801c71c <__assert_func+0x34>)
 801c706:	f000 f84f 	bl	801c7a8 <fiprintf>
 801c70a:	f000 f85f 	bl	801c7cc <abort>
 801c70e:	4b04      	ldr	r3, [pc, #16]	@ (801c720 <__assert_func+0x38>)
 801c710:	e7f4      	b.n	801c6fc <__assert_func+0x14>
 801c712:	bf00      	nop
 801c714:	240001a0 	.word	0x240001a0
 801c718:	0803bc54 	.word	0x0803bc54
 801c71c:	0803bc26 	.word	0x0803bc26
 801c720:	0803bc19 	.word	0x0803bc19

0801c724 <_calloc_r>:
 801c724:	b570      	push	{r4, r5, r6, lr}
 801c726:	fba1 5402 	umull	r5, r4, r1, r2
 801c72a:	b93c      	cbnz	r4, 801c73c <_calloc_r+0x18>
 801c72c:	4629      	mov	r1, r5
 801c72e:	f7fb fd35 	bl	801819c <_malloc_r>
 801c732:	4606      	mov	r6, r0
 801c734:	b928      	cbnz	r0, 801c742 <_calloc_r+0x1e>
 801c736:	2600      	movs	r6, #0
 801c738:	4630      	mov	r0, r6
 801c73a:	bd70      	pop	{r4, r5, r6, pc}
 801c73c:	220c      	movs	r2, #12
 801c73e:	6002      	str	r2, [r0, #0]
 801c740:	e7f9      	b.n	801c736 <_calloc_r+0x12>
 801c742:	462a      	mov	r2, r5
 801c744:	4621      	mov	r1, r4
 801c746:	f7fd fce1 	bl	801a10c <memset>
 801c74a:	e7f5      	b.n	801c738 <_calloc_r+0x14>

0801c74c <_realloc_r>:
 801c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c750:	4680      	mov	r8, r0
 801c752:	4615      	mov	r5, r2
 801c754:	460c      	mov	r4, r1
 801c756:	b921      	cbnz	r1, 801c762 <_realloc_r+0x16>
 801c758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c75c:	4611      	mov	r1, r2
 801c75e:	f7fb bd1d 	b.w	801819c <_malloc_r>
 801c762:	b92a      	cbnz	r2, 801c770 <_realloc_r+0x24>
 801c764:	f7fe fb8a 	bl	801ae7c <_free_r>
 801c768:	2400      	movs	r4, #0
 801c76a:	4620      	mov	r0, r4
 801c76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c770:	f000 f833 	bl	801c7da <_malloc_usable_size_r>
 801c774:	4285      	cmp	r5, r0
 801c776:	4606      	mov	r6, r0
 801c778:	d802      	bhi.n	801c780 <_realloc_r+0x34>
 801c77a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c77e:	d8f4      	bhi.n	801c76a <_realloc_r+0x1e>
 801c780:	4629      	mov	r1, r5
 801c782:	4640      	mov	r0, r8
 801c784:	f7fb fd0a 	bl	801819c <_malloc_r>
 801c788:	4607      	mov	r7, r0
 801c78a:	2800      	cmp	r0, #0
 801c78c:	d0ec      	beq.n	801c768 <_realloc_r+0x1c>
 801c78e:	42b5      	cmp	r5, r6
 801c790:	462a      	mov	r2, r5
 801c792:	4621      	mov	r1, r4
 801c794:	bf28      	it	cs
 801c796:	4632      	movcs	r2, r6
 801c798:	f7fd fd67 	bl	801a26a <memcpy>
 801c79c:	4621      	mov	r1, r4
 801c79e:	4640      	mov	r0, r8
 801c7a0:	f7fe fb6c 	bl	801ae7c <_free_r>
 801c7a4:	463c      	mov	r4, r7
 801c7a6:	e7e0      	b.n	801c76a <_realloc_r+0x1e>

0801c7a8 <fiprintf>:
 801c7a8:	b40e      	push	{r1, r2, r3}
 801c7aa:	b503      	push	{r0, r1, lr}
 801c7ac:	4601      	mov	r1, r0
 801c7ae:	ab03      	add	r3, sp, #12
 801c7b0:	4805      	ldr	r0, [pc, #20]	@ (801c7c8 <fiprintf+0x20>)
 801c7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7b6:	6800      	ldr	r0, [r0, #0]
 801c7b8:	9301      	str	r3, [sp, #4]
 801c7ba:	f7ff fd33 	bl	801c224 <_vfiprintf_r>
 801c7be:	b002      	add	sp, #8
 801c7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7c4:	b003      	add	sp, #12
 801c7c6:	4770      	bx	lr
 801c7c8:	240001a0 	.word	0x240001a0

0801c7cc <abort>:
 801c7cc:	b508      	push	{r3, lr}
 801c7ce:	2006      	movs	r0, #6
 801c7d0:	f000 f834 	bl	801c83c <raise>
 801c7d4:	2001      	movs	r0, #1
 801c7d6:	f7ea fc4d 	bl	8007074 <_exit>

0801c7da <_malloc_usable_size_r>:
 801c7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7de:	1f18      	subs	r0, r3, #4
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	bfbc      	itt	lt
 801c7e4:	580b      	ldrlt	r3, [r1, r0]
 801c7e6:	18c0      	addlt	r0, r0, r3
 801c7e8:	4770      	bx	lr

0801c7ea <_raise_r>:
 801c7ea:	291f      	cmp	r1, #31
 801c7ec:	b538      	push	{r3, r4, r5, lr}
 801c7ee:	4605      	mov	r5, r0
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	d904      	bls.n	801c7fe <_raise_r+0x14>
 801c7f4:	2316      	movs	r3, #22
 801c7f6:	6003      	str	r3, [r0, #0]
 801c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c7fc:	bd38      	pop	{r3, r4, r5, pc}
 801c7fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c800:	b112      	cbz	r2, 801c808 <_raise_r+0x1e>
 801c802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c806:	b94b      	cbnz	r3, 801c81c <_raise_r+0x32>
 801c808:	4628      	mov	r0, r5
 801c80a:	f000 f831 	bl	801c870 <_getpid_r>
 801c80e:	4622      	mov	r2, r4
 801c810:	4601      	mov	r1, r0
 801c812:	4628      	mov	r0, r5
 801c814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c818:	f000 b818 	b.w	801c84c <_kill_r>
 801c81c:	2b01      	cmp	r3, #1
 801c81e:	d00a      	beq.n	801c836 <_raise_r+0x4c>
 801c820:	1c59      	adds	r1, r3, #1
 801c822:	d103      	bne.n	801c82c <_raise_r+0x42>
 801c824:	2316      	movs	r3, #22
 801c826:	6003      	str	r3, [r0, #0]
 801c828:	2001      	movs	r0, #1
 801c82a:	e7e7      	b.n	801c7fc <_raise_r+0x12>
 801c82c:	2100      	movs	r1, #0
 801c82e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c832:	4620      	mov	r0, r4
 801c834:	4798      	blx	r3
 801c836:	2000      	movs	r0, #0
 801c838:	e7e0      	b.n	801c7fc <_raise_r+0x12>
	...

0801c83c <raise>:
 801c83c:	4b02      	ldr	r3, [pc, #8]	@ (801c848 <raise+0xc>)
 801c83e:	4601      	mov	r1, r0
 801c840:	6818      	ldr	r0, [r3, #0]
 801c842:	f7ff bfd2 	b.w	801c7ea <_raise_r>
 801c846:	bf00      	nop
 801c848:	240001a0 	.word	0x240001a0

0801c84c <_kill_r>:
 801c84c:	b538      	push	{r3, r4, r5, lr}
 801c84e:	4d07      	ldr	r5, [pc, #28]	@ (801c86c <_kill_r+0x20>)
 801c850:	2300      	movs	r3, #0
 801c852:	4604      	mov	r4, r0
 801c854:	4608      	mov	r0, r1
 801c856:	4611      	mov	r1, r2
 801c858:	602b      	str	r3, [r5, #0]
 801c85a:	f7ea fbfb 	bl	8007054 <_kill>
 801c85e:	1c43      	adds	r3, r0, #1
 801c860:	d102      	bne.n	801c868 <_kill_r+0x1c>
 801c862:	682b      	ldr	r3, [r5, #0]
 801c864:	b103      	cbz	r3, 801c868 <_kill_r+0x1c>
 801c866:	6023      	str	r3, [r4, #0]
 801c868:	bd38      	pop	{r3, r4, r5, pc}
 801c86a:	bf00      	nop
 801c86c:	24004cb4 	.word	0x24004cb4

0801c870 <_getpid_r>:
 801c870:	f7ea bbe8 	b.w	8007044 <_getpid>

0801c874 <atan2>:
 801c874:	f000 bc00 	b.w	801d078 <__ieee754_atan2>

0801c878 <sqrt>:
 801c878:	b508      	push	{r3, lr}
 801c87a:	ed2d 8b04 	vpush	{d8-d9}
 801c87e:	eeb0 8b40 	vmov.f64	d8, d0
 801c882:	f000 fb32 	bl	801ceea <__ieee754_sqrt>
 801c886:	eeb4 8b48 	vcmp.f64	d8, d8
 801c88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c88e:	d60c      	bvs.n	801c8aa <sqrt+0x32>
 801c890:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801c8b0 <sqrt+0x38>
 801c894:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801c898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c89c:	d505      	bpl.n	801c8aa <sqrt+0x32>
 801c89e:	f7fd fcb7 	bl	801a210 <__errno>
 801c8a2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801c8a6:	2321      	movs	r3, #33	@ 0x21
 801c8a8:	6003      	str	r3, [r0, #0]
 801c8aa:	ecbd 8b04 	vpop	{d8-d9}
 801c8ae:	bd08      	pop	{r3, pc}
	...

0801c8b8 <cos>:
 801c8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c8ba:	eeb0 7b40 	vmov.f64	d7, d0
 801c8be:	ee17 3a90 	vmov	r3, s15
 801c8c2:	4a21      	ldr	r2, [pc, #132]	@ (801c948 <cos+0x90>)
 801c8c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c8c8:	4293      	cmp	r3, r2
 801c8ca:	d806      	bhi.n	801c8da <cos+0x22>
 801c8cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c940 <cos+0x88>
 801c8d0:	b005      	add	sp, #20
 801c8d2:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8d6:	f000 bb0f 	b.w	801cef8 <__kernel_cos>
 801c8da:	4a1c      	ldr	r2, [pc, #112]	@ (801c94c <cos+0x94>)
 801c8dc:	4293      	cmp	r3, r2
 801c8de:	d904      	bls.n	801c8ea <cos+0x32>
 801c8e0:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c8e4:	b005      	add	sp, #20
 801c8e6:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8ea:	4668      	mov	r0, sp
 801c8ec:	f000 fc88 	bl	801d200 <__ieee754_rem_pio2>
 801c8f0:	f000 0003 	and.w	r0, r0, #3
 801c8f4:	2801      	cmp	r0, #1
 801c8f6:	d009      	beq.n	801c90c <cos+0x54>
 801c8f8:	2802      	cmp	r0, #2
 801c8fa:	d010      	beq.n	801c91e <cos+0x66>
 801c8fc:	b9b0      	cbnz	r0, 801c92c <cos+0x74>
 801c8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c902:	ed9d 0b00 	vldr	d0, [sp]
 801c906:	f000 faf7 	bl	801cef8 <__kernel_cos>
 801c90a:	e7eb      	b.n	801c8e4 <cos+0x2c>
 801c90c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c910:	ed9d 0b00 	vldr	d0, [sp]
 801c914:	f000 fb58 	bl	801cfc8 <__kernel_sin>
 801c918:	eeb1 0b40 	vneg.f64	d0, d0
 801c91c:	e7e2      	b.n	801c8e4 <cos+0x2c>
 801c91e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c922:	ed9d 0b00 	vldr	d0, [sp]
 801c926:	f000 fae7 	bl	801cef8 <__kernel_cos>
 801c92a:	e7f5      	b.n	801c918 <cos+0x60>
 801c92c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c930:	ed9d 0b00 	vldr	d0, [sp]
 801c934:	2001      	movs	r0, #1
 801c936:	f000 fb47 	bl	801cfc8 <__kernel_sin>
 801c93a:	e7d3      	b.n	801c8e4 <cos+0x2c>
 801c93c:	f3af 8000 	nop.w
	...
 801c948:	3fe921fb 	.word	0x3fe921fb
 801c94c:	7fefffff 	.word	0x7fefffff

0801c950 <sin>:
 801c950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c952:	eeb0 7b40 	vmov.f64	d7, d0
 801c956:	ee17 3a90 	vmov	r3, s15
 801c95a:	4a21      	ldr	r2, [pc, #132]	@ (801c9e0 <sin+0x90>)
 801c95c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c960:	4293      	cmp	r3, r2
 801c962:	d807      	bhi.n	801c974 <sin+0x24>
 801c964:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c9d8 <sin+0x88>
 801c968:	2000      	movs	r0, #0
 801c96a:	b005      	add	sp, #20
 801c96c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c970:	f000 bb2a 	b.w	801cfc8 <__kernel_sin>
 801c974:	4a1b      	ldr	r2, [pc, #108]	@ (801c9e4 <sin+0x94>)
 801c976:	4293      	cmp	r3, r2
 801c978:	d904      	bls.n	801c984 <sin+0x34>
 801c97a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c97e:	b005      	add	sp, #20
 801c980:	f85d fb04 	ldr.w	pc, [sp], #4
 801c984:	4668      	mov	r0, sp
 801c986:	f000 fc3b 	bl	801d200 <__ieee754_rem_pio2>
 801c98a:	f000 0003 	and.w	r0, r0, #3
 801c98e:	2801      	cmp	r0, #1
 801c990:	d00a      	beq.n	801c9a8 <sin+0x58>
 801c992:	2802      	cmp	r0, #2
 801c994:	d00f      	beq.n	801c9b6 <sin+0x66>
 801c996:	b9c0      	cbnz	r0, 801c9ca <sin+0x7a>
 801c998:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c99c:	ed9d 0b00 	vldr	d0, [sp]
 801c9a0:	2001      	movs	r0, #1
 801c9a2:	f000 fb11 	bl	801cfc8 <__kernel_sin>
 801c9a6:	e7ea      	b.n	801c97e <sin+0x2e>
 801c9a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c9ac:	ed9d 0b00 	vldr	d0, [sp]
 801c9b0:	f000 faa2 	bl	801cef8 <__kernel_cos>
 801c9b4:	e7e3      	b.n	801c97e <sin+0x2e>
 801c9b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c9ba:	ed9d 0b00 	vldr	d0, [sp]
 801c9be:	2001      	movs	r0, #1
 801c9c0:	f000 fb02 	bl	801cfc8 <__kernel_sin>
 801c9c4:	eeb1 0b40 	vneg.f64	d0, d0
 801c9c8:	e7d9      	b.n	801c97e <sin+0x2e>
 801c9ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c9ce:	ed9d 0b00 	vldr	d0, [sp]
 801c9d2:	f000 fa91 	bl	801cef8 <__kernel_cos>
 801c9d6:	e7f5      	b.n	801c9c4 <sin+0x74>
	...
 801c9e0:	3fe921fb 	.word	0x3fe921fb
 801c9e4:	7fefffff 	.word	0x7fefffff

0801c9e8 <asinf>:
 801c9e8:	b508      	push	{r3, lr}
 801c9ea:	ed2d 8b02 	vpush	{d8}
 801c9ee:	eeb0 8a40 	vmov.f32	s16, s0
 801c9f2:	f000 fe4b 	bl	801d68c <__ieee754_asinf>
 801c9f6:	eeb4 8a48 	vcmp.f32	s16, s16
 801c9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9fe:	eef0 8a40 	vmov.f32	s17, s0
 801ca02:	d615      	bvs.n	801ca30 <asinf+0x48>
 801ca04:	eeb0 0a48 	vmov.f32	s0, s16
 801ca08:	f000 f83a 	bl	801ca80 <fabsf>
 801ca0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ca10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ca14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca18:	dd0a      	ble.n	801ca30 <asinf+0x48>
 801ca1a:	f7fd fbf9 	bl	801a210 <__errno>
 801ca1e:	ecbd 8b02 	vpop	{d8}
 801ca22:	2321      	movs	r3, #33	@ 0x21
 801ca24:	6003      	str	r3, [r0, #0]
 801ca26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ca2a:	4804      	ldr	r0, [pc, #16]	@ (801ca3c <asinf+0x54>)
 801ca2c:	f7fd bc34 	b.w	801a298 <nanf>
 801ca30:	eeb0 0a68 	vmov.f32	s0, s17
 801ca34:	ecbd 8b02 	vpop	{d8}
 801ca38:	bd08      	pop	{r3, pc}
 801ca3a:	bf00      	nop
 801ca3c:	0803bc54 	.word	0x0803bc54

0801ca40 <atan2f>:
 801ca40:	f000 bf0a 	b.w	801d858 <__ieee754_atan2f>

0801ca44 <sqrtf>:
 801ca44:	b508      	push	{r3, lr}
 801ca46:	ed2d 8b02 	vpush	{d8}
 801ca4a:	eeb0 8a40 	vmov.f32	s16, s0
 801ca4e:	f000 fa4f 	bl	801cef0 <__ieee754_sqrtf>
 801ca52:	eeb4 8a48 	vcmp.f32	s16, s16
 801ca56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca5a:	d60c      	bvs.n	801ca76 <sqrtf+0x32>
 801ca5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801ca7c <sqrtf+0x38>
 801ca60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ca64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca68:	d505      	bpl.n	801ca76 <sqrtf+0x32>
 801ca6a:	f7fd fbd1 	bl	801a210 <__errno>
 801ca6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ca72:	2321      	movs	r3, #33	@ 0x21
 801ca74:	6003      	str	r3, [r0, #0]
 801ca76:	ecbd 8b02 	vpop	{d8}
 801ca7a:	bd08      	pop	{r3, pc}
 801ca7c:	00000000 	.word	0x00000000

0801ca80 <fabsf>:
 801ca80:	ee10 3a10 	vmov	r3, s0
 801ca84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ca88:	ee00 3a10 	vmov	s0, r3
 801ca8c:	4770      	bx	lr
	...

0801ca90 <logf>:
 801ca90:	ee10 3a10 	vmov	r3, s0
 801ca94:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801ca98:	b410      	push	{r4}
 801ca9a:	d055      	beq.n	801cb48 <logf+0xb8>
 801ca9c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 801caa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801caa4:	d31a      	bcc.n	801cadc <logf+0x4c>
 801caa6:	005a      	lsls	r2, r3, #1
 801caa8:	d104      	bne.n	801cab4 <logf+0x24>
 801caaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801caae:	2001      	movs	r0, #1
 801cab0:	f000 b9fa 	b.w	801cea8 <__math_divzerof>
 801cab4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801cab8:	d043      	beq.n	801cb42 <logf+0xb2>
 801caba:	2b00      	cmp	r3, #0
 801cabc:	db02      	blt.n	801cac4 <logf+0x34>
 801cabe:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 801cac2:	d303      	bcc.n	801cacc <logf+0x3c>
 801cac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cac8:	f000 ba00 	b.w	801cecc <__math_invalidf>
 801cacc:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801cb50 <logf+0xc0>
 801cad0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cad4:	ee10 3a10 	vmov	r3, s0
 801cad8:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 801cadc:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 801cae0:	491c      	ldr	r1, [pc, #112]	@ (801cb54 <logf+0xc4>)
 801cae2:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 801cae6:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 801caea:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801caee:	0dd4      	lsrs	r4, r2, #23
 801caf0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801caf4:	05e4      	lsls	r4, r4, #23
 801caf6:	ed90 5b00 	vldr	d5, [r0]
 801cafa:	1b1b      	subs	r3, r3, r4
 801cafc:	ee07 3a90 	vmov	s15, r3
 801cb00:	ed90 6b02 	vldr	d6, [r0, #8]
 801cb04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801cb08:	15d2      	asrs	r2, r2, #23
 801cb0a:	eea5 0b07 	vfma.f64	d0, d5, d7
 801cb0e:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 801cb12:	ee20 4b00 	vmul.f64	d4, d0, d0
 801cb16:	ee07 2a90 	vmov	s15, r2
 801cb1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cb1e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cb22:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 801cb26:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 801cb2a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801cb2e:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 801cb32:	ee30 0b06 	vadd.f64	d0, d0, d6
 801cb36:	eea5 7b04 	vfma.f64	d7, d5, d4
 801cb3a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801cb3e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cb42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cb46:	4770      	bx	lr
 801cb48:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801cb58 <logf+0xc8>
 801cb4c:	e7f9      	b.n	801cb42 <logf+0xb2>
 801cb4e:	bf00      	nop
 801cb50:	4b000000 	.word	0x4b000000
 801cb54:	0803bc58 	.word	0x0803bc58
 801cb58:	00000000 	.word	0x00000000

0801cb5c <checkint>:
 801cb5c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801cb60:	2b7e      	cmp	r3, #126	@ 0x7e
 801cb62:	d910      	bls.n	801cb86 <checkint+0x2a>
 801cb64:	2b96      	cmp	r3, #150	@ 0x96
 801cb66:	d80c      	bhi.n	801cb82 <checkint+0x26>
 801cb68:	2201      	movs	r2, #1
 801cb6a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 801cb72:	1e5a      	subs	r2, r3, #1
 801cb74:	4202      	tst	r2, r0
 801cb76:	d106      	bne.n	801cb86 <checkint+0x2a>
 801cb78:	4203      	tst	r3, r0
 801cb7a:	bf0c      	ite	eq
 801cb7c:	2002      	moveq	r0, #2
 801cb7e:	2001      	movne	r0, #1
 801cb80:	4770      	bx	lr
 801cb82:	2002      	movs	r0, #2
 801cb84:	4770      	bx	lr
 801cb86:	2000      	movs	r0, #0
 801cb88:	4770      	bx	lr
 801cb8a:	0000      	movs	r0, r0
 801cb8c:	0000      	movs	r0, r0
	...

0801cb90 <powf>:
 801cb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb92:	ee10 1a10 	vmov	r1, s0
 801cb96:	ee10 4a90 	vmov	r4, s1
 801cb9a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 801cb9e:	0063      	lsls	r3, r4, #1
 801cba0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801cba4:	eef0 7a40 	vmov.f32	s15, s0
 801cba8:	eeb0 7a60 	vmov.f32	s14, s1
 801cbac:	f103 30ff 	add.w	r0, r3, #4294967295
 801cbb0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 801cbb4:	d252      	bcs.n	801cc5c <powf+0xcc>
 801cbb6:	4290      	cmp	r0, r2
 801cbb8:	d258      	bcs.n	801cc6c <powf+0xdc>
 801cbba:	2000      	movs	r0, #0
 801cbbc:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 801cbc0:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 801cbc4:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801cbc8:	0ddb      	lsrs	r3, r3, #23
 801cbca:	4a9d      	ldr	r2, [pc, #628]	@ (801ce40 <powf+0x2b0>)
 801cbcc:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 801cbd0:	05db      	lsls	r3, r3, #23
 801cbd2:	1ac9      	subs	r1, r1, r3
 801cbd4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 801cbd8:	ee07 1a90 	vmov	s15, r1
 801cbdc:	ed94 5b02 	vldr	d5, [r4, #8]
 801cbe0:	ed94 4b00 	vldr	d4, [r4]
 801cbe4:	15db      	asrs	r3, r3, #23
 801cbe6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801cbea:	ee07 3a90 	vmov	s15, r3
 801cbee:	eea4 2b06 	vfma.f64	d2, d4, d6
 801cbf2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 801cbf6:	ee22 4b02 	vmul.f64	d4, d2, d2
 801cbfa:	ee24 0b04 	vmul.f64	d0, d4, d4
 801cbfe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cc02:	ee36 6b05 	vadd.f64	d6, d6, d5
 801cc06:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 801cc0a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 801cc0e:	eea2 1b05 	vfma.f64	d1, d2, d5
 801cc12:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 801cc16:	eea2 5b03 	vfma.f64	d5, d2, d3
 801cc1a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 801cc1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801cc22:	eea2 6b03 	vfma.f64	d6, d2, d3
 801cc26:	eea4 6b05 	vfma.f64	d6, d4, d5
 801cc2a:	eea1 6b00 	vfma.f64	d6, d1, d0
 801cc2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc32:	ee17 3a90 	vmov	r3, s15
 801cc36:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801cc3a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	f0c0 80b8 	bcc.w	801cdb4 <powf+0x224>
 801cc44:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801ce20 <powf+0x290>
 801cc48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc50:	dd79      	ble.n	801cd46 <powf+0x1b6>
 801cc52:	b003      	add	sp, #12
 801cc54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cc58:	f000 b920 	b.w	801ce9c <__math_oflowf>
 801cc5c:	4290      	cmp	r0, r2
 801cc5e:	d330      	bcc.n	801ccc2 <powf+0x132>
 801cc60:	b12b      	cbz	r3, 801cc6e <powf+0xde>
 801cc62:	0049      	lsls	r1, r1, #1
 801cc64:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 801cc68:	d808      	bhi.n	801cc7c <powf+0xec>
 801cc6a:	e015      	b.n	801cc98 <powf+0x108>
 801cc6c:	b953      	cbnz	r3, 801cc84 <powf+0xf4>
 801cc6e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 801cc72:	0049      	lsls	r1, r1, #1
 801cc74:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 801cc78:	f240 80ca 	bls.w	801ce10 <powf+0x280>
 801cc7c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801cc80:	b003      	add	sp, #12
 801cc82:	bd30      	pop	{r4, r5, pc}
 801cc84:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 801cc88:	d105      	bne.n	801cc96 <powf+0x106>
 801cc8a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801cc8e:	0064      	lsls	r4, r4, #1
 801cc90:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801cc94:	e7f0      	b.n	801cc78 <powf+0xe8>
 801cc96:	0049      	lsls	r1, r1, #1
 801cc98:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 801cc9c:	d1ee      	bne.n	801cc7c <powf+0xec>
 801cc9e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801cca2:	f000 80b5 	beq.w	801ce10 <powf+0x280>
 801cca6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801ccaa:	ea6f 0404 	mvn.w	r4, r4
 801ccae:	bf34      	ite	cc
 801ccb0:	2100      	movcc	r1, #0
 801ccb2:	2101      	movcs	r1, #1
 801ccb4:	0fe4      	lsrs	r4, r4, #31
 801ccb6:	42a1      	cmp	r1, r4
 801ccb8:	f040 80ad 	bne.w	801ce16 <powf+0x286>
 801ccbc:	ee27 0a07 	vmul.f32	s0, s14, s14
 801ccc0:	e7de      	b.n	801cc80 <powf+0xf0>
 801ccc2:	004d      	lsls	r5, r1, #1
 801ccc4:	1e6b      	subs	r3, r5, #1
 801ccc6:	4293      	cmp	r3, r2
 801ccc8:	d31b      	bcc.n	801cd02 <powf+0x172>
 801ccca:	2900      	cmp	r1, #0
 801cccc:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ccd0:	da0e      	bge.n	801ccf0 <powf+0x160>
 801ccd2:	4620      	mov	r0, r4
 801ccd4:	f7ff ff42 	bl	801cb5c <checkint>
 801ccd8:	2801      	cmp	r0, #1
 801ccda:	d109      	bne.n	801ccf0 <powf+0x160>
 801ccdc:	eeb1 0a40 	vneg.f32	s0, s0
 801cce0:	b945      	cbnz	r5, 801ccf4 <powf+0x164>
 801cce2:	2c00      	cmp	r4, #0
 801cce4:	dacc      	bge.n	801cc80 <powf+0xf0>
 801cce6:	b003      	add	sp, #12
 801cce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ccec:	f000 b8dc 	b.w	801cea8 <__math_divzerof>
 801ccf0:	2000      	movs	r0, #0
 801ccf2:	e7f5      	b.n	801cce0 <powf+0x150>
 801ccf4:	2c00      	cmp	r4, #0
 801ccf6:	dac3      	bge.n	801cc80 <powf+0xf0>
 801ccf8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ccfc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801cd00:	e7be      	b.n	801cc80 <powf+0xf0>
 801cd02:	2900      	cmp	r1, #0
 801cd04:	da1d      	bge.n	801cd42 <powf+0x1b2>
 801cd06:	4620      	mov	r0, r4
 801cd08:	f7ff ff28 	bl	801cb5c <checkint>
 801cd0c:	b920      	cbnz	r0, 801cd18 <powf+0x188>
 801cd0e:	b003      	add	sp, #12
 801cd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd14:	f000 b8da 	b.w	801cecc <__math_invalidf>
 801cd18:	1e43      	subs	r3, r0, #1
 801cd1a:	4258      	negs	r0, r3
 801cd1c:	4158      	adcs	r0, r3
 801cd1e:	0400      	lsls	r0, r0, #16
 801cd20:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cd24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801cd28:	f4bf af48 	bcs.w	801cbbc <powf+0x2c>
 801cd2c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801ce44 <powf+0x2b4>
 801cd30:	ee27 0aa6 	vmul.f32	s0, s15, s13
 801cd34:	ee10 3a10 	vmov	r3, s0
 801cd38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cd3c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 801cd40:	e73c      	b.n	801cbbc <powf+0x2c>
 801cd42:	2000      	movs	r0, #0
 801cd44:	e7ee      	b.n	801cd24 <powf+0x194>
 801cd46:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 801ce28 <powf+0x298>
 801cd4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd52:	dd0f      	ble.n	801cd74 <powf+0x1e4>
 801cd54:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 801cd58:	b1c0      	cbz	r0, 801cd8c <powf+0x1fc>
 801cd5a:	9301      	str	r3, [sp, #4]
 801cd5c:	eddd 6a01 	vldr	s13, [sp, #4]
 801cd60:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801cd64:	ee76 6a66 	vsub.f32	s13, s12, s13
 801cd68:	eef4 6a46 	vcmp.f32	s13, s12
 801cd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd70:	f47f af6f 	bne.w	801cc52 <powf+0xc2>
 801cd74:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 801ce30 <powf+0x2a0>
 801cd78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd80:	d80c      	bhi.n	801cd9c <powf+0x20c>
 801cd82:	b003      	add	sp, #12
 801cd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cd88:	f000 b87c 	b.w	801ce84 <__math_uflowf>
 801cd8c:	9300      	str	r3, [sp, #0]
 801cd8e:	eddd 6a00 	vldr	s13, [sp]
 801cd92:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801cd96:	ee76 6a86 	vadd.f32	s13, s13, s12
 801cd9a:	e7e5      	b.n	801cd68 <powf+0x1d8>
 801cd9c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 801ce38 <powf+0x2a8>
 801cda0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cda8:	d504      	bpl.n	801cdb4 <powf+0x224>
 801cdaa:	b003      	add	sp, #12
 801cdac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cdb0:	f000 b86e 	b.w	801ce90 <__math_may_uflowf>
 801cdb4:	4b24      	ldr	r3, [pc, #144]	@ (801ce48 <powf+0x2b8>)
 801cdb6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cdba:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 801cdbe:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cdc2:	ee16 2a10 	vmov	r2, s12
 801cdc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cdca:	f002 011f 	and.w	r1, r2, #31
 801cdce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cdd2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 801cdd6:	ee27 4b07 	vmul.f64	d4, d7, d7
 801cdda:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 801cdde:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801cde2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801cde6:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cdea:	686d      	ldr	r5, [r5, #4]
 801cdec:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 801cdf0:	1880      	adds	r0, r0, r2
 801cdf2:	2100      	movs	r1, #0
 801cdf4:	190a      	adds	r2, r1, r4
 801cdf6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801cdfa:	eea7 0b05 	vfma.f64	d0, d7, d5
 801cdfe:	ec43 2b17 	vmov	d7, r2, r3
 801ce02:	eea6 0b04 	vfma.f64	d0, d6, d4
 801ce06:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ce0a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ce0e:	e737      	b.n	801cc80 <powf+0xf0>
 801ce10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ce14:	e734      	b.n	801cc80 <powf+0xf0>
 801ce16:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 801ce4c <powf+0x2bc>
 801ce1a:	e731      	b.n	801cc80 <powf+0xf0>
 801ce1c:	f3af 8000 	nop.w
 801ce20:	ffd1d571 	.word	0xffd1d571
 801ce24:	405fffff 	.word	0x405fffff
 801ce28:	ffa3aae2 	.word	0xffa3aae2
 801ce2c:	405fffff 	.word	0x405fffff
 801ce30:	00000000 	.word	0x00000000
 801ce34:	c062c000 	.word	0xc062c000
 801ce38:	00000000 	.word	0x00000000
 801ce3c:	c062a000 	.word	0xc062a000
 801ce40:	0803c0f0 	.word	0x0803c0f0
 801ce44:	4b000000 	.word	0x4b000000
 801ce48:	0803bfa8 	.word	0x0803bfa8
 801ce4c:	00000000 	.word	0x00000000

0801ce50 <with_errnof>:
 801ce50:	b510      	push	{r4, lr}
 801ce52:	ed2d 8b02 	vpush	{d8}
 801ce56:	eeb0 8a40 	vmov.f32	s16, s0
 801ce5a:	4604      	mov	r4, r0
 801ce5c:	f7fd f9d8 	bl	801a210 <__errno>
 801ce60:	eeb0 0a48 	vmov.f32	s0, s16
 801ce64:	ecbd 8b02 	vpop	{d8}
 801ce68:	6004      	str	r4, [r0, #0]
 801ce6a:	bd10      	pop	{r4, pc}

0801ce6c <xflowf>:
 801ce6c:	b130      	cbz	r0, 801ce7c <xflowf+0x10>
 801ce6e:	eef1 7a40 	vneg.f32	s15, s0
 801ce72:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ce76:	2022      	movs	r0, #34	@ 0x22
 801ce78:	f7ff bfea 	b.w	801ce50 <with_errnof>
 801ce7c:	eef0 7a40 	vmov.f32	s15, s0
 801ce80:	e7f7      	b.n	801ce72 <xflowf+0x6>
	...

0801ce84 <__math_uflowf>:
 801ce84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ce8c <__math_uflowf+0x8>
 801ce88:	f7ff bff0 	b.w	801ce6c <xflowf>
 801ce8c:	10000000 	.word	0x10000000

0801ce90 <__math_may_uflowf>:
 801ce90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ce98 <__math_may_uflowf+0x8>
 801ce94:	f7ff bfea 	b.w	801ce6c <xflowf>
 801ce98:	1a200000 	.word	0x1a200000

0801ce9c <__math_oflowf>:
 801ce9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cea4 <__math_oflowf+0x8>
 801cea0:	f7ff bfe4 	b.w	801ce6c <xflowf>
 801cea4:	70000000 	.word	0x70000000

0801cea8 <__math_divzerof>:
 801cea8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801cec8 <__math_divzerof+0x20>
 801ceac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ceb0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801ceba:	fe47 7a87 	vseleq.f32	s15, s15, s14
 801cebe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801cec2:	f7ff bfc5 	b.w	801ce50 <with_errnof>
 801cec6:	bf00      	nop
 801cec8:	00000000 	.word	0x00000000

0801cecc <__math_invalidf>:
 801cecc:	eef0 7a40 	vmov.f32	s15, s0
 801ced0:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ced4:	eef4 7a67 	vcmp.f32	s15, s15
 801ced8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cedc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801cee0:	d602      	bvs.n	801cee8 <__math_invalidf+0x1c>
 801cee2:	2021      	movs	r0, #33	@ 0x21
 801cee4:	f7ff bfb4 	b.w	801ce50 <with_errnof>
 801cee8:	4770      	bx	lr

0801ceea <__ieee754_sqrt>:
 801ceea:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ceee:	4770      	bx	lr

0801cef0 <__ieee754_sqrtf>:
 801cef0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cef4:	4770      	bx	lr
	...

0801cef8 <__kernel_cos>:
 801cef8:	eeb0 5b40 	vmov.f64	d5, d0
 801cefc:	ee15 1a90 	vmov	r1, s11
 801cf00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cf04:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cf08:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801cf0c:	d204      	bcs.n	801cf18 <__kernel_cos+0x20>
 801cf0e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801cf12:	ee17 3a90 	vmov	r3, s15
 801cf16:	b343      	cbz	r3, 801cf6a <__kernel_cos+0x72>
 801cf18:	ee25 6b05 	vmul.f64	d6, d5, d5
 801cf1c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801cf20:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801cf90 <__kernel_cos+0x98>
 801cf24:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cf98 <__kernel_cos+0xa0>
 801cf28:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cf2c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cfa0 <__kernel_cos+0xa8>
 801cf30:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cf34:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cfa8 <__kernel_cos+0xb0>
 801cf38:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cf3c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cfb0 <__kernel_cos+0xb8>
 801cf40:	4b1f      	ldr	r3, [pc, #124]	@ (801cfc0 <__kernel_cos+0xc8>)
 801cf42:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cf46:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cfb8 <__kernel_cos+0xc0>
 801cf4a:	4299      	cmp	r1, r3
 801cf4c:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cf50:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cf54:	ee24 4b06 	vmul.f64	d4, d4, d6
 801cf58:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cf5c:	eea6 1b04 	vfma.f64	d1, d6, d4
 801cf60:	d804      	bhi.n	801cf6c <__kernel_cos+0x74>
 801cf62:	ee37 7b41 	vsub.f64	d7, d7, d1
 801cf66:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cf6a:	4770      	bx	lr
 801cf6c:	4b15      	ldr	r3, [pc, #84]	@ (801cfc4 <__kernel_cos+0xcc>)
 801cf6e:	4299      	cmp	r1, r3
 801cf70:	d809      	bhi.n	801cf86 <__kernel_cos+0x8e>
 801cf72:	2200      	movs	r2, #0
 801cf74:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801cf78:	ec43 2b16 	vmov	d6, r2, r3
 801cf7c:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cf80:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cf84:	e7ed      	b.n	801cf62 <__kernel_cos+0x6a>
 801cf86:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801cf8a:	e7f7      	b.n	801cf7c <__kernel_cos+0x84>
 801cf8c:	f3af 8000 	nop.w
 801cf90:	be8838d4 	.word	0xbe8838d4
 801cf94:	bda8fae9 	.word	0xbda8fae9
 801cf98:	bdb4b1c4 	.word	0xbdb4b1c4
 801cf9c:	3e21ee9e 	.word	0x3e21ee9e
 801cfa0:	809c52ad 	.word	0x809c52ad
 801cfa4:	be927e4f 	.word	0xbe927e4f
 801cfa8:	19cb1590 	.word	0x19cb1590
 801cfac:	3efa01a0 	.word	0x3efa01a0
 801cfb0:	16c15177 	.word	0x16c15177
 801cfb4:	bf56c16c 	.word	0xbf56c16c
 801cfb8:	5555554c 	.word	0x5555554c
 801cfbc:	3fa55555 	.word	0x3fa55555
 801cfc0:	3fd33332 	.word	0x3fd33332
 801cfc4:	3fe90000 	.word	0x3fe90000

0801cfc8 <__kernel_sin>:
 801cfc8:	ee10 3a90 	vmov	r3, s1
 801cfcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cfd0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cfd4:	d204      	bcs.n	801cfe0 <__kernel_sin+0x18>
 801cfd6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cfda:	ee17 3a90 	vmov	r3, s15
 801cfde:	b35b      	cbz	r3, 801d038 <__kernel_sin+0x70>
 801cfe0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cfe4:	ee20 5b06 	vmul.f64	d5, d0, d6
 801cfe8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801d040 <__kernel_sin+0x78>
 801cfec:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d048 <__kernel_sin+0x80>
 801cff0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cff4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d050 <__kernel_sin+0x88>
 801cff8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cffc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d058 <__kernel_sin+0x90>
 801d000:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d004:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d060 <__kernel_sin+0x98>
 801d008:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d00c:	b930      	cbnz	r0, 801d01c <__kernel_sin+0x54>
 801d00e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d068 <__kernel_sin+0xa0>
 801d012:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d016:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d01a:	4770      	bx	lr
 801d01c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801d020:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801d024:	eea1 7b04 	vfma.f64	d7, d1, d4
 801d028:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801d02c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d070 <__kernel_sin+0xa8>
 801d030:	eea5 1b07 	vfma.f64	d1, d5, d7
 801d034:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d038:	4770      	bx	lr
 801d03a:	bf00      	nop
 801d03c:	f3af 8000 	nop.w
 801d040:	5acfd57c 	.word	0x5acfd57c
 801d044:	3de5d93a 	.word	0x3de5d93a
 801d048:	8a2b9ceb 	.word	0x8a2b9ceb
 801d04c:	be5ae5e6 	.word	0xbe5ae5e6
 801d050:	57b1fe7d 	.word	0x57b1fe7d
 801d054:	3ec71de3 	.word	0x3ec71de3
 801d058:	19c161d5 	.word	0x19c161d5
 801d05c:	bf2a01a0 	.word	0xbf2a01a0
 801d060:	1110f8a6 	.word	0x1110f8a6
 801d064:	3f811111 	.word	0x3f811111
 801d068:	55555549 	.word	0x55555549
 801d06c:	bfc55555 	.word	0xbfc55555
 801d070:	55555549 	.word	0x55555549
 801d074:	3fc55555 	.word	0x3fc55555

0801d078 <__ieee754_atan2>:
 801d078:	ee11 1a10 	vmov	r1, s2
 801d07c:	eeb0 7b40 	vmov.f64	d7, d0
 801d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d082:	ee11 5a90 	vmov	r5, s3
 801d086:	424b      	negs	r3, r1
 801d088:	4f59      	ldr	r7, [pc, #356]	@ (801d1f0 <__ieee754_atan2+0x178>)
 801d08a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801d08e:	430b      	orrs	r3, r1
 801d090:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d094:	42bb      	cmp	r3, r7
 801d096:	d80d      	bhi.n	801d0b4 <__ieee754_atan2+0x3c>
 801d098:	ee10 ca10 	vmov	ip, s0
 801d09c:	ee17 6a90 	vmov	r6, s15
 801d0a0:	f1cc 0000 	rsb	r0, ip, #0
 801d0a4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801d0a8:	ea40 000c 	orr.w	r0, r0, ip
 801d0ac:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801d0b0:	42b8      	cmp	r0, r7
 801d0b2:	d904      	bls.n	801d0be <__ieee754_atan2+0x46>
 801d0b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 801d0b8:	eeb0 0b47 	vmov.f64	d0, d7
 801d0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0be:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801d0c2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801d0c6:	4308      	orrs	r0, r1
 801d0c8:	d103      	bne.n	801d0d2 <__ieee754_atan2+0x5a>
 801d0ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d0ce:	f000 b9db 	b.w	801d488 <atan>
 801d0d2:	17ac      	asrs	r4, r5, #30
 801d0d4:	f004 0402 	and.w	r4, r4, #2
 801d0d8:	ea53 0c0c 	orrs.w	ip, r3, ip
 801d0dc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801d0e0:	d107      	bne.n	801d0f2 <__ieee754_atan2+0x7a>
 801d0e2:	2c02      	cmp	r4, #2
 801d0e4:	d05c      	beq.n	801d1a0 <__ieee754_atan2+0x128>
 801d0e6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801d1b8 <__ieee754_atan2+0x140>
 801d0ea:	2c03      	cmp	r4, #3
 801d0ec:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801d0f0:	e7e2      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d0f2:	4311      	orrs	r1, r2
 801d0f4:	d107      	bne.n	801d106 <__ieee754_atan2+0x8e>
 801d0f6:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801d1c0 <__ieee754_atan2+0x148>
 801d0fa:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801d1c8 <__ieee754_atan2+0x150>
 801d0fe:	2e00      	cmp	r6, #0
 801d100:	fe27 7b06 	vselge.f64	d7, d7, d6
 801d104:	e7d8      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d106:	42ba      	cmp	r2, r7
 801d108:	d10f      	bne.n	801d12a <__ieee754_atan2+0xb2>
 801d10a:	4293      	cmp	r3, r2
 801d10c:	f104 34ff 	add.w	r4, r4, #4294967295
 801d110:	d107      	bne.n	801d122 <__ieee754_atan2+0xaa>
 801d112:	2c02      	cmp	r4, #2
 801d114:	d847      	bhi.n	801d1a6 <__ieee754_atan2+0x12e>
 801d116:	4b37      	ldr	r3, [pc, #220]	@ (801d1f4 <__ieee754_atan2+0x17c>)
 801d118:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d11c:	ed93 7b00 	vldr	d7, [r3]
 801d120:	e7ca      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d122:	2c02      	cmp	r4, #2
 801d124:	d842      	bhi.n	801d1ac <__ieee754_atan2+0x134>
 801d126:	4b34      	ldr	r3, [pc, #208]	@ (801d1f8 <__ieee754_atan2+0x180>)
 801d128:	e7f6      	b.n	801d118 <__ieee754_atan2+0xa0>
 801d12a:	42bb      	cmp	r3, r7
 801d12c:	d0e3      	beq.n	801d0f6 <__ieee754_atan2+0x7e>
 801d12e:	1a9b      	subs	r3, r3, r2
 801d130:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801d134:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d138:	da1a      	bge.n	801d170 <__ieee754_atan2+0xf8>
 801d13a:	2d00      	cmp	r5, #0
 801d13c:	da01      	bge.n	801d142 <__ieee754_atan2+0xca>
 801d13e:	323c      	adds	r2, #60	@ 0x3c
 801d140:	db19      	blt.n	801d176 <__ieee754_atan2+0xfe>
 801d142:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801d146:	f000 fa99 	bl	801d67c <fabs>
 801d14a:	f000 f99d 	bl	801d488 <atan>
 801d14e:	eeb0 7b40 	vmov.f64	d7, d0
 801d152:	2c01      	cmp	r4, #1
 801d154:	d012      	beq.n	801d17c <__ieee754_atan2+0x104>
 801d156:	2c02      	cmp	r4, #2
 801d158:	d019      	beq.n	801d18e <__ieee754_atan2+0x116>
 801d15a:	2c00      	cmp	r4, #0
 801d15c:	d0ac      	beq.n	801d0b8 <__ieee754_atan2+0x40>
 801d15e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801d1d0 <__ieee754_atan2+0x158>
 801d162:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d166:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801d1d8 <__ieee754_atan2+0x160>
 801d16a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d16e:	e7a3      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d170:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801d1c0 <__ieee754_atan2+0x148>
 801d174:	e7ed      	b.n	801d152 <__ieee754_atan2+0xda>
 801d176:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801d1e0 <__ieee754_atan2+0x168>
 801d17a:	e7ea      	b.n	801d152 <__ieee754_atan2+0xda>
 801d17c:	ee17 1a90 	vmov	r1, s15
 801d180:	ec53 2b17 	vmov	r2, r3, d7
 801d184:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d188:	ec43 2b17 	vmov	d7, r2, r3
 801d18c:	e794      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d18e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801d1d0 <__ieee754_atan2+0x158>
 801d192:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d196:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801d1d8 <__ieee754_atan2+0x160>
 801d19a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d19e:	e78b      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d1a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d1d8 <__ieee754_atan2+0x160>
 801d1a4:	e788      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d1a6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d1e8 <__ieee754_atan2+0x170>
 801d1aa:	e785      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d1ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801d1e0 <__ieee754_atan2+0x168>
 801d1b0:	e782      	b.n	801d0b8 <__ieee754_atan2+0x40>
 801d1b2:	bf00      	nop
 801d1b4:	f3af 8000 	nop.w
 801d1b8:	54442d18 	.word	0x54442d18
 801d1bc:	c00921fb 	.word	0xc00921fb
 801d1c0:	54442d18 	.word	0x54442d18
 801d1c4:	3ff921fb 	.word	0x3ff921fb
 801d1c8:	54442d18 	.word	0x54442d18
 801d1cc:	bff921fb 	.word	0xbff921fb
 801d1d0:	33145c07 	.word	0x33145c07
 801d1d4:	3ca1a626 	.word	0x3ca1a626
 801d1d8:	54442d18 	.word	0x54442d18
 801d1dc:	400921fb 	.word	0x400921fb
	...
 801d1e8:	54442d18 	.word	0x54442d18
 801d1ec:	3fe921fb 	.word	0x3fe921fb
 801d1f0:	7ff00000 	.word	0x7ff00000
 801d1f4:	0803bd90 	.word	0x0803bd90
 801d1f8:	0803bd78 	.word	0x0803bd78
 801d1fc:	00000000 	.word	0x00000000

0801d200 <__ieee754_rem_pio2>:
 801d200:	b570      	push	{r4, r5, r6, lr}
 801d202:	eeb0 7b40 	vmov.f64	d7, d0
 801d206:	ee17 5a90 	vmov	r5, s15
 801d20a:	4b99      	ldr	r3, [pc, #612]	@ (801d470 <__ieee754_rem_pio2+0x270>)
 801d20c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d210:	429e      	cmp	r6, r3
 801d212:	b088      	sub	sp, #32
 801d214:	4604      	mov	r4, r0
 801d216:	d807      	bhi.n	801d228 <__ieee754_rem_pio2+0x28>
 801d218:	2200      	movs	r2, #0
 801d21a:	2300      	movs	r3, #0
 801d21c:	ed84 0b00 	vstr	d0, [r4]
 801d220:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d224:	2000      	movs	r0, #0
 801d226:	e01b      	b.n	801d260 <__ieee754_rem_pio2+0x60>
 801d228:	4b92      	ldr	r3, [pc, #584]	@ (801d474 <__ieee754_rem_pio2+0x274>)
 801d22a:	429e      	cmp	r6, r3
 801d22c:	d83b      	bhi.n	801d2a6 <__ieee754_rem_pio2+0xa6>
 801d22e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801d232:	2d00      	cmp	r5, #0
 801d234:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d430 <__ieee754_rem_pio2+0x230>
 801d238:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801d23c:	dd19      	ble.n	801d272 <__ieee754_rem_pio2+0x72>
 801d23e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d242:	429e      	cmp	r6, r3
 801d244:	d00e      	beq.n	801d264 <__ieee754_rem_pio2+0x64>
 801d246:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d438 <__ieee754_rem_pio2+0x238>
 801d24a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801d24e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d252:	ed84 6b00 	vstr	d6, [r4]
 801d256:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d25a:	ed84 7b02 	vstr	d7, [r4, #8]
 801d25e:	2001      	movs	r0, #1
 801d260:	b008      	add	sp, #32
 801d262:	bd70      	pop	{r4, r5, r6, pc}
 801d264:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d440 <__ieee754_rem_pio2+0x240>
 801d268:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d448 <__ieee754_rem_pio2+0x248>
 801d26c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d270:	e7eb      	b.n	801d24a <__ieee754_rem_pio2+0x4a>
 801d272:	429e      	cmp	r6, r3
 801d274:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d278:	d00e      	beq.n	801d298 <__ieee754_rem_pio2+0x98>
 801d27a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d438 <__ieee754_rem_pio2+0x238>
 801d27e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d282:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d286:	ed84 6b00 	vstr	d6, [r4]
 801d28a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d28e:	f04f 30ff 	mov.w	r0, #4294967295
 801d292:	ed84 7b02 	vstr	d7, [r4, #8]
 801d296:	e7e3      	b.n	801d260 <__ieee754_rem_pio2+0x60>
 801d298:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d440 <__ieee754_rem_pio2+0x240>
 801d29c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d448 <__ieee754_rem_pio2+0x248>
 801d2a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d2a4:	e7eb      	b.n	801d27e <__ieee754_rem_pio2+0x7e>
 801d2a6:	4b74      	ldr	r3, [pc, #464]	@ (801d478 <__ieee754_rem_pio2+0x278>)
 801d2a8:	429e      	cmp	r6, r3
 801d2aa:	d870      	bhi.n	801d38e <__ieee754_rem_pio2+0x18e>
 801d2ac:	f000 f9e6 	bl	801d67c <fabs>
 801d2b0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d2b4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d450 <__ieee754_rem_pio2+0x250>
 801d2b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d2bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d2c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d2c4:	ee17 0a90 	vmov	r0, s15
 801d2c8:	eeb1 4b45 	vneg.f64	d4, d5
 801d2cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d430 <__ieee754_rem_pio2+0x230>
 801d2d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d2d4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d438 <__ieee754_rem_pio2+0x238>
 801d2d8:	281f      	cmp	r0, #31
 801d2da:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d2de:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d2e2:	dc05      	bgt.n	801d2f0 <__ieee754_rem_pio2+0xf0>
 801d2e4:	4b65      	ldr	r3, [pc, #404]	@ (801d47c <__ieee754_rem_pio2+0x27c>)
 801d2e6:	1e42      	subs	r2, r0, #1
 801d2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d2ec:	42b3      	cmp	r3, r6
 801d2ee:	d109      	bne.n	801d304 <__ieee754_rem_pio2+0x104>
 801d2f0:	ee16 3a90 	vmov	r3, s13
 801d2f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d2f8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d2fc:	2b10      	cmp	r3, #16
 801d2fe:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d302:	dc02      	bgt.n	801d30a <__ieee754_rem_pio2+0x10a>
 801d304:	ed84 6b00 	vstr	d6, [r4]
 801d308:	e01a      	b.n	801d340 <__ieee754_rem_pio2+0x140>
 801d30a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d440 <__ieee754_rem_pio2+0x240>
 801d30e:	eeb0 6b40 	vmov.f64	d6, d0
 801d312:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d316:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d31a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d31e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d448 <__ieee754_rem_pio2+0x248>
 801d322:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d326:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d32a:	ee13 3a90 	vmov	r3, s7
 801d32e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d332:	1ad3      	subs	r3, r2, r3
 801d334:	2b31      	cmp	r3, #49	@ 0x31
 801d336:	dc17      	bgt.n	801d368 <__ieee754_rem_pio2+0x168>
 801d338:	eeb0 0b46 	vmov.f64	d0, d6
 801d33c:	ed84 3b00 	vstr	d3, [r4]
 801d340:	ed94 6b00 	vldr	d6, [r4]
 801d344:	2d00      	cmp	r5, #0
 801d346:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d34a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d34e:	ed84 0b02 	vstr	d0, [r4, #8]
 801d352:	da85      	bge.n	801d260 <__ieee754_rem_pio2+0x60>
 801d354:	eeb1 6b46 	vneg.f64	d6, d6
 801d358:	eeb1 0b40 	vneg.f64	d0, d0
 801d35c:	ed84 6b00 	vstr	d6, [r4]
 801d360:	ed84 0b02 	vstr	d0, [r4, #8]
 801d364:	4240      	negs	r0, r0
 801d366:	e77b      	b.n	801d260 <__ieee754_rem_pio2+0x60>
 801d368:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d458 <__ieee754_rem_pio2+0x258>
 801d36c:	eeb0 0b46 	vmov.f64	d0, d6
 801d370:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d374:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d378:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d37c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d460 <__ieee754_rem_pio2+0x260>
 801d380:	eeb0 7b46 	vmov.f64	d7, d6
 801d384:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d388:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d38c:	e7ba      	b.n	801d304 <__ieee754_rem_pio2+0x104>
 801d38e:	4b3c      	ldr	r3, [pc, #240]	@ (801d480 <__ieee754_rem_pio2+0x280>)
 801d390:	429e      	cmp	r6, r3
 801d392:	d906      	bls.n	801d3a2 <__ieee754_rem_pio2+0x1a2>
 801d394:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d398:	ed80 7b02 	vstr	d7, [r0, #8]
 801d39c:	ed80 7b00 	vstr	d7, [r0]
 801d3a0:	e740      	b.n	801d224 <__ieee754_rem_pio2+0x24>
 801d3a2:	ee10 3a10 	vmov	r3, s0
 801d3a6:	1532      	asrs	r2, r6, #20
 801d3a8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d3b2:	ec41 0b17 	vmov	d7, r0, r1
 801d3b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d3ba:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d468 <__ieee754_rem_pio2+0x268>
 801d3be:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d3c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d3c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d3ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d3ce:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d3d2:	a808      	add	r0, sp, #32
 801d3d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d3d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d3dc:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d3e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d3e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d3e8:	2103      	movs	r1, #3
 801d3ea:	ed30 7b02 	vldmdb	r0!, {d7}
 801d3ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3f6:	460b      	mov	r3, r1
 801d3f8:	f101 31ff 	add.w	r1, r1, #4294967295
 801d3fc:	d0f5      	beq.n	801d3ea <__ieee754_rem_pio2+0x1ea>
 801d3fe:	4921      	ldr	r1, [pc, #132]	@ (801d484 <__ieee754_rem_pio2+0x284>)
 801d400:	9101      	str	r1, [sp, #4]
 801d402:	2102      	movs	r1, #2
 801d404:	9100      	str	r1, [sp, #0]
 801d406:	a802      	add	r0, sp, #8
 801d408:	4621      	mov	r1, r4
 801d40a:	f000 fb99 	bl	801db40 <__kernel_rem_pio2>
 801d40e:	2d00      	cmp	r5, #0
 801d410:	f6bf af26 	bge.w	801d260 <__ieee754_rem_pio2+0x60>
 801d414:	ed94 7b00 	vldr	d7, [r4]
 801d418:	eeb1 7b47 	vneg.f64	d7, d7
 801d41c:	ed84 7b00 	vstr	d7, [r4]
 801d420:	ed94 7b02 	vldr	d7, [r4, #8]
 801d424:	eeb1 7b47 	vneg.f64	d7, d7
 801d428:	ed84 7b02 	vstr	d7, [r4, #8]
 801d42c:	e79a      	b.n	801d364 <__ieee754_rem_pio2+0x164>
 801d42e:	bf00      	nop
 801d430:	54400000 	.word	0x54400000
 801d434:	3ff921fb 	.word	0x3ff921fb
 801d438:	1a626331 	.word	0x1a626331
 801d43c:	3dd0b461 	.word	0x3dd0b461
 801d440:	1a600000 	.word	0x1a600000
 801d444:	3dd0b461 	.word	0x3dd0b461
 801d448:	2e037073 	.word	0x2e037073
 801d44c:	3ba3198a 	.word	0x3ba3198a
 801d450:	6dc9c883 	.word	0x6dc9c883
 801d454:	3fe45f30 	.word	0x3fe45f30
 801d458:	2e000000 	.word	0x2e000000
 801d45c:	3ba3198a 	.word	0x3ba3198a
 801d460:	252049c1 	.word	0x252049c1
 801d464:	397b839a 	.word	0x397b839a
 801d468:	00000000 	.word	0x00000000
 801d46c:	41700000 	.word	0x41700000
 801d470:	3fe921fb 	.word	0x3fe921fb
 801d474:	4002d97b 	.word	0x4002d97b
 801d478:	413921fb 	.word	0x413921fb
 801d47c:	0803bda8 	.word	0x0803bda8
 801d480:	7fefffff 	.word	0x7fefffff
 801d484:	0803be28 	.word	0x0803be28

0801d488 <atan>:
 801d488:	b538      	push	{r3, r4, r5, lr}
 801d48a:	eeb0 7b40 	vmov.f64	d7, d0
 801d48e:	ee17 5a90 	vmov	r5, s15
 801d492:	4b73      	ldr	r3, [pc, #460]	@ (801d660 <atan+0x1d8>)
 801d494:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d498:	429c      	cmp	r4, r3
 801d49a:	d913      	bls.n	801d4c4 <atan+0x3c>
 801d49c:	4b71      	ldr	r3, [pc, #452]	@ (801d664 <atan+0x1dc>)
 801d49e:	429c      	cmp	r4, r3
 801d4a0:	d803      	bhi.n	801d4aa <atan+0x22>
 801d4a2:	d107      	bne.n	801d4b4 <atan+0x2c>
 801d4a4:	ee10 3a10 	vmov	r3, s0
 801d4a8:	b123      	cbz	r3, 801d4b4 <atan+0x2c>
 801d4aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d4ae:	eeb0 0b47 	vmov.f64	d0, d7
 801d4b2:	bd38      	pop	{r3, r4, r5, pc}
 801d4b4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801d5f0 <atan+0x168>
 801d4b8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801d5f8 <atan+0x170>
 801d4bc:	2d00      	cmp	r5, #0
 801d4be:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801d4c2:	e7f4      	b.n	801d4ae <atan+0x26>
 801d4c4:	4b68      	ldr	r3, [pc, #416]	@ (801d668 <atan+0x1e0>)
 801d4c6:	429c      	cmp	r4, r3
 801d4c8:	d811      	bhi.n	801d4ee <atan+0x66>
 801d4ca:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801d4ce:	429c      	cmp	r4, r3
 801d4d0:	d80a      	bhi.n	801d4e8 <atan+0x60>
 801d4d2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801d4d6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801d600 <atan+0x178>
 801d4da:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d4de:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4e6:	dce2      	bgt.n	801d4ae <atan+0x26>
 801d4e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d4ec:	e013      	b.n	801d516 <atan+0x8e>
 801d4ee:	f000 f8c5 	bl	801d67c <fabs>
 801d4f2:	4b5e      	ldr	r3, [pc, #376]	@ (801d66c <atan+0x1e4>)
 801d4f4:	429c      	cmp	r4, r3
 801d4f6:	d84f      	bhi.n	801d598 <atan+0x110>
 801d4f8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801d4fc:	429c      	cmp	r4, r3
 801d4fe:	d841      	bhi.n	801d584 <atan+0xfc>
 801d500:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801d504:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801d508:	2300      	movs	r3, #0
 801d50a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801d50e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d512:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d516:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d608 <atan+0x180>
 801d51a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d51e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801d522:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d610 <atan+0x188>
 801d526:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d52a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801d618 <atan+0x190>
 801d52e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d532:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d620 <atan+0x198>
 801d536:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d53a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801d628 <atan+0x1a0>
 801d53e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801d542:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801d630 <atan+0x1a8>
 801d546:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801d638 <atan+0x1b0>
 801d54a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d54e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d640 <atan+0x1b8>
 801d552:	eea5 2b06 	vfma.f64	d2, d5, d6
 801d556:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d648 <atan+0x1c0>
 801d55a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d55e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801d650 <atan+0x1c8>
 801d562:	eea6 2b05 	vfma.f64	d2, d6, d5
 801d566:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801d658 <atan+0x1d0>
 801d56a:	1c5a      	adds	r2, r3, #1
 801d56c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801d570:	ee26 6b05 	vmul.f64	d6, d6, d5
 801d574:	eea3 6b04 	vfma.f64	d6, d3, d4
 801d578:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d57c:	d121      	bne.n	801d5c2 <atan+0x13a>
 801d57e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d582:	e794      	b.n	801d4ae <atan+0x26>
 801d584:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801d588:	2301      	movs	r3, #1
 801d58a:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d58e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d592:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801d596:	e7be      	b.n	801d516 <atan+0x8e>
 801d598:	4b35      	ldr	r3, [pc, #212]	@ (801d670 <atan+0x1e8>)
 801d59a:	429c      	cmp	r4, r3
 801d59c:	d20b      	bcs.n	801d5b6 <atan+0x12e>
 801d59e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801d5a2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801d5a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801d5aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 801d5ae:	2302      	movs	r3, #2
 801d5b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801d5b4:	e7af      	b.n	801d516 <atan+0x8e>
 801d5b6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801d5ba:	2303      	movs	r3, #3
 801d5bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801d5c0:	e7a9      	b.n	801d516 <atan+0x8e>
 801d5c2:	4a2c      	ldr	r2, [pc, #176]	@ (801d674 <atan+0x1ec>)
 801d5c4:	492c      	ldr	r1, [pc, #176]	@ (801d678 <atan+0x1f0>)
 801d5c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801d5ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801d5ce:	ed93 5b00 	vldr	d5, [r3]
 801d5d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d5d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801d5da:	ed92 7b00 	vldr	d7, [r2]
 801d5de:	2d00      	cmp	r5, #0
 801d5e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d5e4:	bfb8      	it	lt
 801d5e6:	eeb1 7b47 	vneglt.f64	d7, d7
 801d5ea:	e760      	b.n	801d4ae <atan+0x26>
 801d5ec:	f3af 8000 	nop.w
 801d5f0:	54442d18 	.word	0x54442d18
 801d5f4:	bff921fb 	.word	0xbff921fb
 801d5f8:	54442d18 	.word	0x54442d18
 801d5fc:	3ff921fb 	.word	0x3ff921fb
 801d600:	8800759c 	.word	0x8800759c
 801d604:	7e37e43c 	.word	0x7e37e43c
 801d608:	e322da11 	.word	0xe322da11
 801d60c:	3f90ad3a 	.word	0x3f90ad3a
 801d610:	24760deb 	.word	0x24760deb
 801d614:	3fa97b4b 	.word	0x3fa97b4b
 801d618:	a0d03d51 	.word	0xa0d03d51
 801d61c:	3fb10d66 	.word	0x3fb10d66
 801d620:	c54c206e 	.word	0xc54c206e
 801d624:	3fb745cd 	.word	0x3fb745cd
 801d628:	920083ff 	.word	0x920083ff
 801d62c:	3fc24924 	.word	0x3fc24924
 801d630:	5555550d 	.word	0x5555550d
 801d634:	3fd55555 	.word	0x3fd55555
 801d638:	52defd9a 	.word	0x52defd9a
 801d63c:	bfadde2d 	.word	0xbfadde2d
 801d640:	2c6a6c2f 	.word	0x2c6a6c2f
 801d644:	bfa2b444 	.word	0xbfa2b444
 801d648:	af749a6d 	.word	0xaf749a6d
 801d64c:	bfb3b0f2 	.word	0xbfb3b0f2
 801d650:	fe231671 	.word	0xfe231671
 801d654:	bfbc71c6 	.word	0xbfbc71c6
 801d658:	9998ebc4 	.word	0x9998ebc4
 801d65c:	bfc99999 	.word	0xbfc99999
 801d660:	440fffff 	.word	0x440fffff
 801d664:	7ff00000 	.word	0x7ff00000
 801d668:	3fdbffff 	.word	0x3fdbffff
 801d66c:	3ff2ffff 	.word	0x3ff2ffff
 801d670:	40038000 	.word	0x40038000
 801d674:	0803bf50 	.word	0x0803bf50
 801d678:	0803bf30 	.word	0x0803bf30

0801d67c <fabs>:
 801d67c:	ec51 0b10 	vmov	r0, r1, d0
 801d680:	4602      	mov	r2, r0
 801d682:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d686:	ec43 2b10 	vmov	d0, r2, r3
 801d68a:	4770      	bx	lr

0801d68c <__ieee754_asinf>:
 801d68c:	b538      	push	{r3, r4, r5, lr}
 801d68e:	ee10 5a10 	vmov	r5, s0
 801d692:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d696:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801d69a:	ed2d 8b04 	vpush	{d8-d9}
 801d69e:	d10c      	bne.n	801d6ba <__ieee754_asinf+0x2e>
 801d6a0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801d818 <__ieee754_asinf+0x18c>
 801d6a4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801d81c <__ieee754_asinf+0x190>
 801d6a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d6ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d6b0:	eeb0 0a67 	vmov.f32	s0, s15
 801d6b4:	ecbd 8b04 	vpop	{d8-d9}
 801d6b8:	bd38      	pop	{r3, r4, r5, pc}
 801d6ba:	d904      	bls.n	801d6c6 <__ieee754_asinf+0x3a>
 801d6bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d6c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801d6c4:	e7f6      	b.n	801d6b4 <__ieee754_asinf+0x28>
 801d6c6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801d6ca:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801d6ce:	d20b      	bcs.n	801d6e8 <__ieee754_asinf+0x5c>
 801d6d0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801d6d4:	d252      	bcs.n	801d77c <__ieee754_asinf+0xf0>
 801d6d6:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801d820 <__ieee754_asinf+0x194>
 801d6da:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d6de:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6e6:	dce5      	bgt.n	801d6b4 <__ieee754_asinf+0x28>
 801d6e8:	f7ff f9ca 	bl	801ca80 <fabsf>
 801d6ec:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801d6f0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d6f4:	ee28 8a27 	vmul.f32	s16, s16, s15
 801d6f8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 801d824 <__ieee754_asinf+0x198>
 801d6fc:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801d828 <__ieee754_asinf+0x19c>
 801d700:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801d82c <__ieee754_asinf+0x1a0>
 801d704:	eea8 7a27 	vfma.f32	s14, s16, s15
 801d708:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801d830 <__ieee754_asinf+0x1a4>
 801d70c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d710:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801d834 <__ieee754_asinf+0x1a8>
 801d714:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d718:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801d838 <__ieee754_asinf+0x1ac>
 801d71c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d720:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801d83c <__ieee754_asinf+0x1b0>
 801d724:	eea7 9a88 	vfma.f32	s18, s15, s16
 801d728:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801d840 <__ieee754_asinf+0x1b4>
 801d72c:	eee8 7a07 	vfma.f32	s15, s16, s14
 801d730:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801d844 <__ieee754_asinf+0x1b8>
 801d734:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d738:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801d848 <__ieee754_asinf+0x1bc>
 801d73c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d740:	eeb0 0a48 	vmov.f32	s0, s16
 801d744:	eee7 8a88 	vfma.f32	s17, s15, s16
 801d748:	f7ff fbd2 	bl	801cef0 <__ieee754_sqrtf>
 801d74c:	4b3f      	ldr	r3, [pc, #252]	@ (801d84c <__ieee754_asinf+0x1c0>)
 801d74e:	ee29 9a08 	vmul.f32	s18, s18, s16
 801d752:	429c      	cmp	r4, r3
 801d754:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801d758:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801d75c:	d93d      	bls.n	801d7da <__ieee754_asinf+0x14e>
 801d75e:	eea0 0a06 	vfma.f32	s0, s0, s12
 801d762:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801d850 <__ieee754_asinf+0x1c4>
 801d766:	eee0 7a26 	vfma.f32	s15, s0, s13
 801d76a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801d81c <__ieee754_asinf+0x190>
 801d76e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d772:	2d00      	cmp	r5, #0
 801d774:	bfd8      	it	le
 801d776:	eeb1 0a40 	vnegle.f32	s0, s0
 801d77a:	e79b      	b.n	801d6b4 <__ieee754_asinf+0x28>
 801d77c:	ee60 7a00 	vmul.f32	s15, s0, s0
 801d780:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801d828 <__ieee754_asinf+0x19c>
 801d784:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801d824 <__ieee754_asinf+0x198>
 801d788:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801d83c <__ieee754_asinf+0x1b0>
 801d78c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d790:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801d830 <__ieee754_asinf+0x1a4>
 801d794:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d798:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801d834 <__ieee754_asinf+0x1a8>
 801d79c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d7a0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801d838 <__ieee754_asinf+0x1ac>
 801d7a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d7a8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801d82c <__ieee754_asinf+0x1a0>
 801d7ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d7b0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801d840 <__ieee754_asinf+0x1b4>
 801d7b4:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d7b8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801d844 <__ieee754_asinf+0x1b8>
 801d7bc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801d7c0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801d848 <__ieee754_asinf+0x1bc>
 801d7c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d7c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d7cc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801d7d0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801d7d4:	eea0 0a27 	vfma.f32	s0, s0, s15
 801d7d8:	e76c      	b.n	801d6b4 <__ieee754_asinf+0x28>
 801d7da:	ee10 3a10 	vmov	r3, s0
 801d7de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801d7e2:	f023 030f 	bic.w	r3, r3, #15
 801d7e6:	ee07 3a10 	vmov	s14, r3
 801d7ea:	eea7 8a47 	vfms.f32	s16, s14, s14
 801d7ee:	ee70 5a00 	vadd.f32	s11, s0, s0
 801d7f2:	ee30 0a07 	vadd.f32	s0, s0, s14
 801d7f6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801d818 <__ieee754_asinf+0x18c>
 801d7fa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801d7fe:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801d854 <__ieee754_asinf+0x1c8>
 801d802:	eee5 7a66 	vfms.f32	s15, s10, s13
 801d806:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801d80a:	eeb0 6a40 	vmov.f32	s12, s0
 801d80e:	eea7 6a66 	vfms.f32	s12, s14, s13
 801d812:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801d816:	e7aa      	b.n	801d76e <__ieee754_asinf+0xe2>
 801d818:	b33bbd2e 	.word	0xb33bbd2e
 801d81c:	3fc90fdb 	.word	0x3fc90fdb
 801d820:	7149f2ca 	.word	0x7149f2ca
 801d824:	3a4f7f04 	.word	0x3a4f7f04
 801d828:	3811ef08 	.word	0x3811ef08
 801d82c:	3e2aaaab 	.word	0x3e2aaaab
 801d830:	bd241146 	.word	0xbd241146
 801d834:	3e4e0aa8 	.word	0x3e4e0aa8
 801d838:	bea6b090 	.word	0xbea6b090
 801d83c:	3d9dc62e 	.word	0x3d9dc62e
 801d840:	bf303361 	.word	0xbf303361
 801d844:	4001572d 	.word	0x4001572d
 801d848:	c019d139 	.word	0xc019d139
 801d84c:	3f799999 	.word	0x3f799999
 801d850:	333bbd2e 	.word	0x333bbd2e
 801d854:	3f490fdb 	.word	0x3f490fdb

0801d858 <__ieee754_atan2f>:
 801d858:	ee10 2a90 	vmov	r2, s1
 801d85c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801d860:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801d864:	b510      	push	{r4, lr}
 801d866:	eef0 7a40 	vmov.f32	s15, s0
 801d86a:	d806      	bhi.n	801d87a <__ieee754_atan2f+0x22>
 801d86c:	ee10 0a10 	vmov	r0, s0
 801d870:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801d874:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801d878:	d904      	bls.n	801d884 <__ieee754_atan2f+0x2c>
 801d87a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801d87e:	eeb0 0a67 	vmov.f32	s0, s15
 801d882:	bd10      	pop	{r4, pc}
 801d884:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801d888:	d103      	bne.n	801d892 <__ieee754_atan2f+0x3a>
 801d88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d88e:	f000 b881 	b.w	801d994 <atanf>
 801d892:	1794      	asrs	r4, r2, #30
 801d894:	f004 0402 	and.w	r4, r4, #2
 801d898:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801d89c:	b93b      	cbnz	r3, 801d8ae <__ieee754_atan2f+0x56>
 801d89e:	2c02      	cmp	r4, #2
 801d8a0:	d05c      	beq.n	801d95c <__ieee754_atan2f+0x104>
 801d8a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801d970 <__ieee754_atan2f+0x118>
 801d8a6:	2c03      	cmp	r4, #3
 801d8a8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801d8ac:	e7e7      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d8ae:	b939      	cbnz	r1, 801d8c0 <__ieee754_atan2f+0x68>
 801d8b0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801d974 <__ieee754_atan2f+0x11c>
 801d8b4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801d978 <__ieee754_atan2f+0x120>
 801d8b8:	2800      	cmp	r0, #0
 801d8ba:	fe67 7a87 	vselge.f32	s15, s15, s14
 801d8be:	e7de      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d8c0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801d8c4:	d110      	bne.n	801d8e8 <__ieee754_atan2f+0x90>
 801d8c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801d8ca:	f104 34ff 	add.w	r4, r4, #4294967295
 801d8ce:	d107      	bne.n	801d8e0 <__ieee754_atan2f+0x88>
 801d8d0:	2c02      	cmp	r4, #2
 801d8d2:	d846      	bhi.n	801d962 <__ieee754_atan2f+0x10a>
 801d8d4:	4b29      	ldr	r3, [pc, #164]	@ (801d97c <__ieee754_atan2f+0x124>)
 801d8d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d8da:	edd3 7a00 	vldr	s15, [r3]
 801d8de:	e7ce      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d8e0:	2c02      	cmp	r4, #2
 801d8e2:	d841      	bhi.n	801d968 <__ieee754_atan2f+0x110>
 801d8e4:	4b26      	ldr	r3, [pc, #152]	@ (801d980 <__ieee754_atan2f+0x128>)
 801d8e6:	e7f6      	b.n	801d8d6 <__ieee754_atan2f+0x7e>
 801d8e8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801d8ec:	d0e0      	beq.n	801d8b0 <__ieee754_atan2f+0x58>
 801d8ee:	1a5b      	subs	r3, r3, r1
 801d8f0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801d8f4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801d8f8:	da1a      	bge.n	801d930 <__ieee754_atan2f+0xd8>
 801d8fa:	2a00      	cmp	r2, #0
 801d8fc:	da01      	bge.n	801d902 <__ieee754_atan2f+0xaa>
 801d8fe:	313c      	adds	r1, #60	@ 0x3c
 801d900:	db19      	blt.n	801d936 <__ieee754_atan2f+0xde>
 801d902:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801d906:	f7ff f8bb 	bl	801ca80 <fabsf>
 801d90a:	f000 f843 	bl	801d994 <atanf>
 801d90e:	eef0 7a40 	vmov.f32	s15, s0
 801d912:	2c01      	cmp	r4, #1
 801d914:	d012      	beq.n	801d93c <__ieee754_atan2f+0xe4>
 801d916:	2c02      	cmp	r4, #2
 801d918:	d017      	beq.n	801d94a <__ieee754_atan2f+0xf2>
 801d91a:	2c00      	cmp	r4, #0
 801d91c:	d0af      	beq.n	801d87e <__ieee754_atan2f+0x26>
 801d91e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801d984 <__ieee754_atan2f+0x12c>
 801d922:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d926:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801d988 <__ieee754_atan2f+0x130>
 801d92a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d92e:	e7a6      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d930:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801d974 <__ieee754_atan2f+0x11c>
 801d934:	e7ed      	b.n	801d912 <__ieee754_atan2f+0xba>
 801d936:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801d98c <__ieee754_atan2f+0x134>
 801d93a:	e7ea      	b.n	801d912 <__ieee754_atan2f+0xba>
 801d93c:	ee17 3a90 	vmov	r3, s15
 801d940:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801d944:	ee07 3a90 	vmov	s15, r3
 801d948:	e799      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d94a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801d984 <__ieee754_atan2f+0x12c>
 801d94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d952:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801d988 <__ieee754_atan2f+0x130>
 801d956:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d95a:	e790      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d95c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801d988 <__ieee754_atan2f+0x130>
 801d960:	e78d      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d962:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801d990 <__ieee754_atan2f+0x138>
 801d966:	e78a      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d968:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801d98c <__ieee754_atan2f+0x134>
 801d96c:	e787      	b.n	801d87e <__ieee754_atan2f+0x26>
 801d96e:	bf00      	nop
 801d970:	c0490fdb 	.word	0xc0490fdb
 801d974:	3fc90fdb 	.word	0x3fc90fdb
 801d978:	bfc90fdb 	.word	0xbfc90fdb
 801d97c:	0803bf7c 	.word	0x0803bf7c
 801d980:	0803bf70 	.word	0x0803bf70
 801d984:	33bbbd2e 	.word	0x33bbbd2e
 801d988:	40490fdb 	.word	0x40490fdb
 801d98c:	00000000 	.word	0x00000000
 801d990:	3f490fdb 	.word	0x3f490fdb

0801d994 <atanf>:
 801d994:	b538      	push	{r3, r4, r5, lr}
 801d996:	ee10 5a10 	vmov	r5, s0
 801d99a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d99e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801d9a2:	eef0 7a40 	vmov.f32	s15, s0
 801d9a6:	d30f      	bcc.n	801d9c8 <atanf+0x34>
 801d9a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801d9ac:	d904      	bls.n	801d9b8 <atanf+0x24>
 801d9ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d9b2:	eeb0 0a67 	vmov.f32	s0, s15
 801d9b6:	bd38      	pop	{r3, r4, r5, pc}
 801d9b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801daf0 <atanf+0x15c>
 801d9bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801daf4 <atanf+0x160>
 801d9c0:	2d00      	cmp	r5, #0
 801d9c2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801d9c6:	e7f4      	b.n	801d9b2 <atanf+0x1e>
 801d9c8:	4b4b      	ldr	r3, [pc, #300]	@ (801daf8 <atanf+0x164>)
 801d9ca:	429c      	cmp	r4, r3
 801d9cc:	d810      	bhi.n	801d9f0 <atanf+0x5c>
 801d9ce:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801d9d2:	d20a      	bcs.n	801d9ea <atanf+0x56>
 801d9d4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801dafc <atanf+0x168>
 801d9d8:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d9dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9e0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9e8:	dce3      	bgt.n	801d9b2 <atanf+0x1e>
 801d9ea:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ee:	e013      	b.n	801da18 <atanf+0x84>
 801d9f0:	f7ff f846 	bl	801ca80 <fabsf>
 801d9f4:	4b42      	ldr	r3, [pc, #264]	@ (801db00 <atanf+0x16c>)
 801d9f6:	429c      	cmp	r4, r3
 801d9f8:	d84f      	bhi.n	801da9a <atanf+0x106>
 801d9fa:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801d9fe:	429c      	cmp	r4, r3
 801da00:	d841      	bhi.n	801da86 <atanf+0xf2>
 801da02:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801da06:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801da0a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801da0e:	2300      	movs	r3, #0
 801da10:	ee30 0a27 	vadd.f32	s0, s0, s15
 801da14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da18:	1c5a      	adds	r2, r3, #1
 801da1a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801da1e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801db04 <atanf+0x170>
 801da22:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801db08 <atanf+0x174>
 801da26:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 801db0c <atanf+0x178>
 801da2a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801da2e:	eee6 5a87 	vfma.f32	s11, s13, s14
 801da32:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801db10 <atanf+0x17c>
 801da36:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801da3a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801db14 <atanf+0x180>
 801da3e:	eee7 5a26 	vfma.f32	s11, s14, s13
 801da42:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801db18 <atanf+0x184>
 801da46:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801da4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801db1c <atanf+0x188>
 801da4e:	eee7 5a26 	vfma.f32	s11, s14, s13
 801da52:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801db20 <atanf+0x18c>
 801da56:	eea6 5a87 	vfma.f32	s10, s13, s14
 801da5a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801db24 <atanf+0x190>
 801da5e:	eea5 7a26 	vfma.f32	s14, s10, s13
 801da62:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801db28 <atanf+0x194>
 801da66:	eea7 5a26 	vfma.f32	s10, s14, s13
 801da6a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801db2c <atanf+0x198>
 801da6e:	eea5 7a26 	vfma.f32	s14, s10, s13
 801da72:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da76:	eea5 7a86 	vfma.f32	s14, s11, s12
 801da7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801da7e:	d121      	bne.n	801dac4 <atanf+0x130>
 801da80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801da84:	e795      	b.n	801d9b2 <atanf+0x1e>
 801da86:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801da8a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801da8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801da92:	2301      	movs	r3, #1
 801da94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da98:	e7be      	b.n	801da18 <atanf+0x84>
 801da9a:	4b25      	ldr	r3, [pc, #148]	@ (801db30 <atanf+0x19c>)
 801da9c:	429c      	cmp	r4, r3
 801da9e:	d80b      	bhi.n	801dab8 <atanf+0x124>
 801daa0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801daa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801daa8:	eea0 7a27 	vfma.f32	s14, s0, s15
 801daac:	2302      	movs	r3, #2
 801daae:	ee70 6a67 	vsub.f32	s13, s0, s15
 801dab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dab6:	e7af      	b.n	801da18 <atanf+0x84>
 801dab8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801dabc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dac0:	2303      	movs	r3, #3
 801dac2:	e7a9      	b.n	801da18 <atanf+0x84>
 801dac4:	4a1b      	ldr	r2, [pc, #108]	@ (801db34 <atanf+0x1a0>)
 801dac6:	491c      	ldr	r1, [pc, #112]	@ (801db38 <atanf+0x1a4>)
 801dac8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801dacc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801dad0:	edd3 6a00 	vldr	s13, [r3]
 801dad4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801dad8:	2d00      	cmp	r5, #0
 801dada:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dade:	edd2 7a00 	vldr	s15, [r2]
 801dae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dae6:	bfb8      	it	lt
 801dae8:	eef1 7a67 	vneglt.f32	s15, s15
 801daec:	e761      	b.n	801d9b2 <atanf+0x1e>
 801daee:	bf00      	nop
 801daf0:	bfc90fdb 	.word	0xbfc90fdb
 801daf4:	3fc90fdb 	.word	0x3fc90fdb
 801daf8:	3edfffff 	.word	0x3edfffff
 801dafc:	7149f2ca 	.word	0x7149f2ca
 801db00:	3f97ffff 	.word	0x3f97ffff
 801db04:	3c8569d7 	.word	0x3c8569d7
 801db08:	3d4bda59 	.word	0x3d4bda59
 801db0c:	bd6ef16b 	.word	0xbd6ef16b
 801db10:	3d886b35 	.word	0x3d886b35
 801db14:	3dba2e6e 	.word	0x3dba2e6e
 801db18:	3e124925 	.word	0x3e124925
 801db1c:	3eaaaaab 	.word	0x3eaaaaab
 801db20:	bd15a221 	.word	0xbd15a221
 801db24:	bd9d8795 	.word	0xbd9d8795
 801db28:	bde38e38 	.word	0xbde38e38
 801db2c:	be4ccccd 	.word	0xbe4ccccd
 801db30:	401bffff 	.word	0x401bffff
 801db34:	0803bf98 	.word	0x0803bf98
 801db38:	0803bf88 	.word	0x0803bf88
 801db3c:	00000000 	.word	0x00000000

0801db40 <__kernel_rem_pio2>:
 801db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db44:	ed2d 8b06 	vpush	{d8-d10}
 801db48:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801db4c:	469b      	mov	fp, r3
 801db4e:	9001      	str	r0, [sp, #4]
 801db50:	4bbb      	ldr	r3, [pc, #748]	@ (801de40 <__kernel_rem_pio2+0x300>)
 801db52:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801db54:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801db58:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801db5c:	f112 0f14 	cmn.w	r2, #20
 801db60:	bfa8      	it	ge
 801db62:	1ed3      	subge	r3, r2, #3
 801db64:	f10b 3aff 	add.w	sl, fp, #4294967295
 801db68:	bfb8      	it	lt
 801db6a:	2300      	movlt	r3, #0
 801db6c:	f06f 0517 	mvn.w	r5, #23
 801db70:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801de28 <__kernel_rem_pio2+0x2e8>
 801db74:	bfa4      	itt	ge
 801db76:	2018      	movge	r0, #24
 801db78:	fb93 f3f0 	sdivge	r3, r3, r0
 801db7c:	fb03 5505 	mla	r5, r3, r5, r5
 801db80:	eba3 040a 	sub.w	r4, r3, sl
 801db84:	4415      	add	r5, r2
 801db86:	460f      	mov	r7, r1
 801db88:	eb09 060a 	add.w	r6, r9, sl
 801db8c:	a81a      	add	r0, sp, #104	@ 0x68
 801db8e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801db92:	2200      	movs	r2, #0
 801db94:	42b2      	cmp	r2, r6
 801db96:	dd0e      	ble.n	801dbb6 <__kernel_rem_pio2+0x76>
 801db98:	aa1a      	add	r2, sp, #104	@ 0x68
 801db9a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801db9e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801dba2:	2600      	movs	r6, #0
 801dba4:	454e      	cmp	r6, r9
 801dba6:	dc25      	bgt.n	801dbf4 <__kernel_rem_pio2+0xb4>
 801dba8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801de28 <__kernel_rem_pio2+0x2e8>
 801dbac:	f8dd c004 	ldr.w	ip, [sp, #4]
 801dbb0:	4614      	mov	r4, r2
 801dbb2:	2000      	movs	r0, #0
 801dbb4:	e015      	b.n	801dbe2 <__kernel_rem_pio2+0xa2>
 801dbb6:	42d4      	cmn	r4, r2
 801dbb8:	d409      	bmi.n	801dbce <__kernel_rem_pio2+0x8e>
 801dbba:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801dbbe:	ee07 1a90 	vmov	s15, r1
 801dbc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dbc6:	eca0 7b02 	vstmia	r0!, {d7}
 801dbca:	3201      	adds	r2, #1
 801dbcc:	e7e2      	b.n	801db94 <__kernel_rem_pio2+0x54>
 801dbce:	eeb0 7b46 	vmov.f64	d7, d6
 801dbd2:	e7f8      	b.n	801dbc6 <__kernel_rem_pio2+0x86>
 801dbd4:	ecbc 5b02 	vldmia	ip!, {d5}
 801dbd8:	ed94 6b00 	vldr	d6, [r4]
 801dbdc:	3001      	adds	r0, #1
 801dbde:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dbe2:	4550      	cmp	r0, sl
 801dbe4:	f1a4 0408 	sub.w	r4, r4, #8
 801dbe8:	ddf4      	ble.n	801dbd4 <__kernel_rem_pio2+0x94>
 801dbea:	ecae 7b02 	vstmia	lr!, {d7}
 801dbee:	3601      	adds	r6, #1
 801dbf0:	3208      	adds	r2, #8
 801dbf2:	e7d7      	b.n	801dba4 <__kernel_rem_pio2+0x64>
 801dbf4:	aa06      	add	r2, sp, #24
 801dbf6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801de30 <__kernel_rem_pio2+0x2f0>
 801dbfa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801de38 <__kernel_rem_pio2+0x2f8>
 801dbfe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801dc02:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801dc06:	9203      	str	r2, [sp, #12]
 801dc08:	9302      	str	r3, [sp, #8]
 801dc0a:	464c      	mov	r4, r9
 801dc0c:	00e3      	lsls	r3, r4, #3
 801dc0e:	9304      	str	r3, [sp, #16]
 801dc10:	ab92      	add	r3, sp, #584	@ 0x248
 801dc12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dc16:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801dc1a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801dc1c:	ab06      	add	r3, sp, #24
 801dc1e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801dc22:	461e      	mov	r6, r3
 801dc24:	4620      	mov	r0, r4
 801dc26:	2800      	cmp	r0, #0
 801dc28:	f1a2 0208 	sub.w	r2, r2, #8
 801dc2c:	dc4a      	bgt.n	801dcc4 <__kernel_rem_pio2+0x184>
 801dc2e:	4628      	mov	r0, r5
 801dc30:	9305      	str	r3, [sp, #20]
 801dc32:	f000 fa01 	bl	801e038 <scalbn>
 801dc36:	eeb0 8b40 	vmov.f64	d8, d0
 801dc3a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801dc3e:	ee28 0b00 	vmul.f64	d0, d8, d0
 801dc42:	f000 fa79 	bl	801e138 <floor>
 801dc46:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801dc4a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801dc4e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801dc52:	2d00      	cmp	r5, #0
 801dc54:	ee17 8a90 	vmov	r8, s15
 801dc58:	9b05      	ldr	r3, [sp, #20]
 801dc5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dc5e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801dc62:	dd41      	ble.n	801dce8 <__kernel_rem_pio2+0x1a8>
 801dc64:	1e60      	subs	r0, r4, #1
 801dc66:	aa06      	add	r2, sp, #24
 801dc68:	f1c5 0c18 	rsb	ip, r5, #24
 801dc6c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801dc70:	fa46 f20c 	asr.w	r2, r6, ip
 801dc74:	4490      	add	r8, r2
 801dc76:	fa02 f20c 	lsl.w	r2, r2, ip
 801dc7a:	1ab6      	subs	r6, r6, r2
 801dc7c:	aa06      	add	r2, sp, #24
 801dc7e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801dc82:	f1c5 0217 	rsb	r2, r5, #23
 801dc86:	4116      	asrs	r6, r2
 801dc88:	2e00      	cmp	r6, #0
 801dc8a:	dd3c      	ble.n	801dd06 <__kernel_rem_pio2+0x1c6>
 801dc8c:	f04f 0c00 	mov.w	ip, #0
 801dc90:	f108 0801 	add.w	r8, r8, #1
 801dc94:	4660      	mov	r0, ip
 801dc96:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801dc9a:	4564      	cmp	r4, ip
 801dc9c:	dc66      	bgt.n	801dd6c <__kernel_rem_pio2+0x22c>
 801dc9e:	2d00      	cmp	r5, #0
 801dca0:	dd03      	ble.n	801dcaa <__kernel_rem_pio2+0x16a>
 801dca2:	2d01      	cmp	r5, #1
 801dca4:	d072      	beq.n	801dd8c <__kernel_rem_pio2+0x24c>
 801dca6:	2d02      	cmp	r5, #2
 801dca8:	d07a      	beq.n	801dda0 <__kernel_rem_pio2+0x260>
 801dcaa:	2e02      	cmp	r6, #2
 801dcac:	d12b      	bne.n	801dd06 <__kernel_rem_pio2+0x1c6>
 801dcae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dcb2:	ee30 8b48 	vsub.f64	d8, d0, d8
 801dcb6:	b330      	cbz	r0, 801dd06 <__kernel_rem_pio2+0x1c6>
 801dcb8:	4628      	mov	r0, r5
 801dcba:	f000 f9bd 	bl	801e038 <scalbn>
 801dcbe:	ee38 8b40 	vsub.f64	d8, d8, d0
 801dcc2:	e020      	b.n	801dd06 <__kernel_rem_pio2+0x1c6>
 801dcc4:	ee20 7b09 	vmul.f64	d7, d0, d9
 801dcc8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801dccc:	3801      	subs	r0, #1
 801dcce:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801dcd2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801dcd6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dcda:	eca6 0a01 	vstmia	r6!, {s0}
 801dcde:	ed92 0b00 	vldr	d0, [r2]
 801dce2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801dce6:	e79e      	b.n	801dc26 <__kernel_rem_pio2+0xe6>
 801dce8:	d105      	bne.n	801dcf6 <__kernel_rem_pio2+0x1b6>
 801dcea:	1e62      	subs	r2, r4, #1
 801dcec:	a906      	add	r1, sp, #24
 801dcee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801dcf2:	15f6      	asrs	r6, r6, #23
 801dcf4:	e7c8      	b.n	801dc88 <__kernel_rem_pio2+0x148>
 801dcf6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801dcfa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd02:	da31      	bge.n	801dd68 <__kernel_rem_pio2+0x228>
 801dd04:	2600      	movs	r6, #0
 801dd06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd0e:	f040 809b 	bne.w	801de48 <__kernel_rem_pio2+0x308>
 801dd12:	1e62      	subs	r2, r4, #1
 801dd14:	2000      	movs	r0, #0
 801dd16:	454a      	cmp	r2, r9
 801dd18:	da49      	bge.n	801ddae <__kernel_rem_pio2+0x26e>
 801dd1a:	2800      	cmp	r0, #0
 801dd1c:	d062      	beq.n	801dde4 <__kernel_rem_pio2+0x2a4>
 801dd1e:	3c01      	subs	r4, #1
 801dd20:	ab06      	add	r3, sp, #24
 801dd22:	3d18      	subs	r5, #24
 801dd24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d0f8      	beq.n	801dd1e <__kernel_rem_pio2+0x1de>
 801dd2c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dd30:	4628      	mov	r0, r5
 801dd32:	f000 f981 	bl	801e038 <scalbn>
 801dd36:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801de30 <__kernel_rem_pio2+0x2f0>
 801dd3a:	1c62      	adds	r2, r4, #1
 801dd3c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dd3e:	00d3      	lsls	r3, r2, #3
 801dd40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801dd44:	4622      	mov	r2, r4
 801dd46:	2a00      	cmp	r2, #0
 801dd48:	f280 80a8 	bge.w	801de9c <__kernel_rem_pio2+0x35c>
 801dd4c:	4622      	mov	r2, r4
 801dd4e:	2a00      	cmp	r2, #0
 801dd50:	f2c0 80c6 	blt.w	801dee0 <__kernel_rem_pio2+0x3a0>
 801dd54:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dd56:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801dd5a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801de28 <__kernel_rem_pio2+0x2e8>
 801dd5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801de44 <__kernel_rem_pio2+0x304>
 801dd62:	2000      	movs	r0, #0
 801dd64:	1aa1      	subs	r1, r4, r2
 801dd66:	e0b0      	b.n	801deca <__kernel_rem_pio2+0x38a>
 801dd68:	2602      	movs	r6, #2
 801dd6a:	e78f      	b.n	801dc8c <__kernel_rem_pio2+0x14c>
 801dd6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd70:	b948      	cbnz	r0, 801dd86 <__kernel_rem_pio2+0x246>
 801dd72:	b122      	cbz	r2, 801dd7e <__kernel_rem_pio2+0x23e>
 801dd74:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801dd78:	f843 2c04 	str.w	r2, [r3, #-4]
 801dd7c:	2201      	movs	r2, #1
 801dd7e:	f10c 0c01 	add.w	ip, ip, #1
 801dd82:	4610      	mov	r0, r2
 801dd84:	e789      	b.n	801dc9a <__kernel_rem_pio2+0x15a>
 801dd86:	ebae 0202 	sub.w	r2, lr, r2
 801dd8a:	e7f5      	b.n	801dd78 <__kernel_rem_pio2+0x238>
 801dd8c:	1e62      	subs	r2, r4, #1
 801dd8e:	ab06      	add	r3, sp, #24
 801dd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dd98:	a906      	add	r1, sp, #24
 801dd9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801dd9e:	e784      	b.n	801dcaa <__kernel_rem_pio2+0x16a>
 801dda0:	1e62      	subs	r2, r4, #1
 801dda2:	ab06      	add	r3, sp, #24
 801dda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dda8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ddac:	e7f4      	b.n	801dd98 <__kernel_rem_pio2+0x258>
 801ddae:	ab06      	add	r3, sp, #24
 801ddb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ddb4:	3a01      	subs	r2, #1
 801ddb6:	4318      	orrs	r0, r3
 801ddb8:	e7ad      	b.n	801dd16 <__kernel_rem_pio2+0x1d6>
 801ddba:	3301      	adds	r3, #1
 801ddbc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801ddc0:	2800      	cmp	r0, #0
 801ddc2:	d0fa      	beq.n	801ddba <__kernel_rem_pio2+0x27a>
 801ddc4:	9a04      	ldr	r2, [sp, #16]
 801ddc6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801ddca:	446a      	add	r2, sp
 801ddcc:	eb04 000b 	add.w	r0, r4, fp
 801ddd0:	a91a      	add	r1, sp, #104	@ 0x68
 801ddd2:	1c66      	adds	r6, r4, #1
 801ddd4:	3a98      	subs	r2, #152	@ 0x98
 801ddd6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801ddda:	4423      	add	r3, r4
 801dddc:	42b3      	cmp	r3, r6
 801ddde:	da04      	bge.n	801ddea <__kernel_rem_pio2+0x2aa>
 801dde0:	461c      	mov	r4, r3
 801dde2:	e713      	b.n	801dc0c <__kernel_rem_pio2+0xcc>
 801dde4:	9a03      	ldr	r2, [sp, #12]
 801dde6:	2301      	movs	r3, #1
 801dde8:	e7e8      	b.n	801ddbc <__kernel_rem_pio2+0x27c>
 801ddea:	9902      	ldr	r1, [sp, #8]
 801ddec:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ddf0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801ddf4:	9104      	str	r1, [sp, #16]
 801ddf6:	ee07 1a90 	vmov	s15, r1
 801ddfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ddfe:	2400      	movs	r4, #0
 801de00:	eca0 7b02 	vstmia	r0!, {d7}
 801de04:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801de28 <__kernel_rem_pio2+0x2e8>
 801de08:	4686      	mov	lr, r0
 801de0a:	4554      	cmp	r4, sl
 801de0c:	dd03      	ble.n	801de16 <__kernel_rem_pio2+0x2d6>
 801de0e:	eca2 7b02 	vstmia	r2!, {d7}
 801de12:	3601      	adds	r6, #1
 801de14:	e7e2      	b.n	801dddc <__kernel_rem_pio2+0x29c>
 801de16:	ecbc 5b02 	vldmia	ip!, {d5}
 801de1a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801de1e:	3401      	adds	r4, #1
 801de20:	eea5 7b06 	vfma.f64	d7, d5, d6
 801de24:	e7f1      	b.n	801de0a <__kernel_rem_pio2+0x2ca>
 801de26:	bf00      	nop
	...
 801de34:	3e700000 	.word	0x3e700000
 801de38:	00000000 	.word	0x00000000
 801de3c:	41700000 	.word	0x41700000
 801de40:	0803c258 	.word	0x0803c258
 801de44:	0803c218 	.word	0x0803c218
 801de48:	4268      	negs	r0, r5
 801de4a:	eeb0 0b48 	vmov.f64	d0, d8
 801de4e:	f000 f8f3 	bl	801e038 <scalbn>
 801de52:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801e020 <__kernel_rem_pio2+0x4e0>
 801de56:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801de5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de5e:	db17      	blt.n	801de90 <__kernel_rem_pio2+0x350>
 801de60:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801e028 <__kernel_rem_pio2+0x4e8>
 801de64:	ee20 7b07 	vmul.f64	d7, d0, d7
 801de68:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801de6c:	aa06      	add	r2, sp, #24
 801de6e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801de72:	eea5 0b46 	vfms.f64	d0, d5, d6
 801de76:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de7a:	3518      	adds	r5, #24
 801de7c:	ee10 3a10 	vmov	r3, s0
 801de80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801de84:	ee17 3a10 	vmov	r3, s14
 801de88:	3401      	adds	r4, #1
 801de8a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801de8e:	e74d      	b.n	801dd2c <__kernel_rem_pio2+0x1ec>
 801de90:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de94:	aa06      	add	r2, sp, #24
 801de96:	ee10 3a10 	vmov	r3, s0
 801de9a:	e7f6      	b.n	801de8a <__kernel_rem_pio2+0x34a>
 801de9c:	a806      	add	r0, sp, #24
 801de9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801dea2:	9001      	str	r0, [sp, #4]
 801dea4:	ee07 0a90 	vmov	s15, r0
 801dea8:	3a01      	subs	r2, #1
 801deaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801deae:	ee27 7b00 	vmul.f64	d7, d7, d0
 801deb2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801deb6:	ed21 7b02 	vstmdb	r1!, {d7}
 801deba:	e744      	b.n	801dd46 <__kernel_rem_pio2+0x206>
 801debc:	ecbc 5b02 	vldmia	ip!, {d5}
 801dec0:	ecb5 6b02 	vldmia	r5!, {d6}
 801dec4:	3001      	adds	r0, #1
 801dec6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801deca:	4548      	cmp	r0, r9
 801decc:	dc01      	bgt.n	801ded2 <__kernel_rem_pio2+0x392>
 801dece:	4281      	cmp	r1, r0
 801ded0:	daf4      	bge.n	801debc <__kernel_rem_pio2+0x37c>
 801ded2:	a842      	add	r0, sp, #264	@ 0x108
 801ded4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ded8:	ed81 7b00 	vstr	d7, [r1]
 801dedc:	3a01      	subs	r2, #1
 801dede:	e736      	b.n	801dd4e <__kernel_rem_pio2+0x20e>
 801dee0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801dee2:	2a02      	cmp	r2, #2
 801dee4:	dc0a      	bgt.n	801defc <__kernel_rem_pio2+0x3bc>
 801dee6:	2a00      	cmp	r2, #0
 801dee8:	dc2d      	bgt.n	801df46 <__kernel_rem_pio2+0x406>
 801deea:	d046      	beq.n	801df7a <__kernel_rem_pio2+0x43a>
 801deec:	f008 0007 	and.w	r0, r8, #7
 801def0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801def4:	ecbd 8b06 	vpop	{d8-d10}
 801def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801defc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801defe:	2a03      	cmp	r2, #3
 801df00:	d1f4      	bne.n	801deec <__kernel_rem_pio2+0x3ac>
 801df02:	a942      	add	r1, sp, #264	@ 0x108
 801df04:	f1a3 0208 	sub.w	r2, r3, #8
 801df08:	440a      	add	r2, r1
 801df0a:	4611      	mov	r1, r2
 801df0c:	4620      	mov	r0, r4
 801df0e:	2800      	cmp	r0, #0
 801df10:	f1a1 0108 	sub.w	r1, r1, #8
 801df14:	dc52      	bgt.n	801dfbc <__kernel_rem_pio2+0x47c>
 801df16:	4621      	mov	r1, r4
 801df18:	2901      	cmp	r1, #1
 801df1a:	f1a2 0208 	sub.w	r2, r2, #8
 801df1e:	dc5d      	bgt.n	801dfdc <__kernel_rem_pio2+0x49c>
 801df20:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801e030 <__kernel_rem_pio2+0x4f0>
 801df24:	aa42      	add	r2, sp, #264	@ 0x108
 801df26:	4413      	add	r3, r2
 801df28:	2c01      	cmp	r4, #1
 801df2a:	dc67      	bgt.n	801dffc <__kernel_rem_pio2+0x4bc>
 801df2c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801df30:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801df34:	2e00      	cmp	r6, #0
 801df36:	d167      	bne.n	801e008 <__kernel_rem_pio2+0x4c8>
 801df38:	ed87 5b00 	vstr	d5, [r7]
 801df3c:	ed87 6b02 	vstr	d6, [r7, #8]
 801df40:	ed87 7b04 	vstr	d7, [r7, #16]
 801df44:	e7d2      	b.n	801deec <__kernel_rem_pio2+0x3ac>
 801df46:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801e030 <__kernel_rem_pio2+0x4f0>
 801df4a:	aa42      	add	r2, sp, #264	@ 0x108
 801df4c:	4413      	add	r3, r2
 801df4e:	4622      	mov	r2, r4
 801df50:	2a00      	cmp	r2, #0
 801df52:	da24      	bge.n	801df9e <__kernel_rem_pio2+0x45e>
 801df54:	b34e      	cbz	r6, 801dfaa <__kernel_rem_pio2+0x46a>
 801df56:	eeb1 7b46 	vneg.f64	d7, d6
 801df5a:	ed87 7b00 	vstr	d7, [r7]
 801df5e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801df62:	aa44      	add	r2, sp, #272	@ 0x110
 801df64:	2301      	movs	r3, #1
 801df66:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df6a:	429c      	cmp	r4, r3
 801df6c:	da20      	bge.n	801dfb0 <__kernel_rem_pio2+0x470>
 801df6e:	b10e      	cbz	r6, 801df74 <__kernel_rem_pio2+0x434>
 801df70:	eeb1 7b47 	vneg.f64	d7, d7
 801df74:	ed87 7b02 	vstr	d7, [r7, #8]
 801df78:	e7b8      	b.n	801deec <__kernel_rem_pio2+0x3ac>
 801df7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801e030 <__kernel_rem_pio2+0x4f0>
 801df7e:	aa42      	add	r2, sp, #264	@ 0x108
 801df80:	4413      	add	r3, r2
 801df82:	2c00      	cmp	r4, #0
 801df84:	da05      	bge.n	801df92 <__kernel_rem_pio2+0x452>
 801df86:	b10e      	cbz	r6, 801df8c <__kernel_rem_pio2+0x44c>
 801df88:	eeb1 7b47 	vneg.f64	d7, d7
 801df8c:	ed87 7b00 	vstr	d7, [r7]
 801df90:	e7ac      	b.n	801deec <__kernel_rem_pio2+0x3ac>
 801df92:	ed33 6b02 	vldmdb	r3!, {d6}
 801df96:	3c01      	subs	r4, #1
 801df98:	ee37 7b06 	vadd.f64	d7, d7, d6
 801df9c:	e7f1      	b.n	801df82 <__kernel_rem_pio2+0x442>
 801df9e:	ed33 7b02 	vldmdb	r3!, {d7}
 801dfa2:	3a01      	subs	r2, #1
 801dfa4:	ee36 6b07 	vadd.f64	d6, d6, d7
 801dfa8:	e7d2      	b.n	801df50 <__kernel_rem_pio2+0x410>
 801dfaa:	eeb0 7b46 	vmov.f64	d7, d6
 801dfae:	e7d4      	b.n	801df5a <__kernel_rem_pio2+0x41a>
 801dfb0:	ecb2 6b02 	vldmia	r2!, {d6}
 801dfb4:	3301      	adds	r3, #1
 801dfb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801dfba:	e7d6      	b.n	801df6a <__kernel_rem_pio2+0x42a>
 801dfbc:	ed91 7b00 	vldr	d7, [r1]
 801dfc0:	ed91 5b02 	vldr	d5, [r1, #8]
 801dfc4:	3801      	subs	r0, #1
 801dfc6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801dfca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801dfce:	ed81 6b00 	vstr	d6, [r1]
 801dfd2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801dfd6:	ed81 7b02 	vstr	d7, [r1, #8]
 801dfda:	e798      	b.n	801df0e <__kernel_rem_pio2+0x3ce>
 801dfdc:	ed92 7b00 	vldr	d7, [r2]
 801dfe0:	ed92 5b02 	vldr	d5, [r2, #8]
 801dfe4:	3901      	subs	r1, #1
 801dfe6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801dfea:	ee37 7b46 	vsub.f64	d7, d7, d6
 801dfee:	ed82 6b00 	vstr	d6, [r2]
 801dff2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801dff6:	ed82 7b02 	vstr	d7, [r2, #8]
 801dffa:	e78d      	b.n	801df18 <__kernel_rem_pio2+0x3d8>
 801dffc:	ed33 6b02 	vldmdb	r3!, {d6}
 801e000:	3c01      	subs	r4, #1
 801e002:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e006:	e78f      	b.n	801df28 <__kernel_rem_pio2+0x3e8>
 801e008:	eeb1 5b45 	vneg.f64	d5, d5
 801e00c:	eeb1 6b46 	vneg.f64	d6, d6
 801e010:	ed87 5b00 	vstr	d5, [r7]
 801e014:	eeb1 7b47 	vneg.f64	d7, d7
 801e018:	ed87 6b02 	vstr	d6, [r7, #8]
 801e01c:	e790      	b.n	801df40 <__kernel_rem_pio2+0x400>
 801e01e:	bf00      	nop
 801e020:	00000000 	.word	0x00000000
 801e024:	41700000 	.word	0x41700000
 801e028:	00000000 	.word	0x00000000
 801e02c:	3e700000 	.word	0x3e700000
	...

0801e038 <scalbn>:
 801e038:	ee10 1a90 	vmov	r1, s1
 801e03c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e040:	b98b      	cbnz	r3, 801e066 <scalbn+0x2e>
 801e042:	ee10 3a10 	vmov	r3, s0
 801e046:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801e04a:	4319      	orrs	r1, r3
 801e04c:	d00a      	beq.n	801e064 <scalbn+0x2c>
 801e04e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801e100 <scalbn+0xc8>
 801e052:	4b37      	ldr	r3, [pc, #220]	@ (801e130 <scalbn+0xf8>)
 801e054:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e058:	4298      	cmp	r0, r3
 801e05a:	da0b      	bge.n	801e074 <scalbn+0x3c>
 801e05c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801e108 <scalbn+0xd0>
 801e060:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e064:	4770      	bx	lr
 801e066:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e06a:	4293      	cmp	r3, r2
 801e06c:	d107      	bne.n	801e07e <scalbn+0x46>
 801e06e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e072:	4770      	bx	lr
 801e074:	ee10 1a90 	vmov	r1, s1
 801e078:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e07c:	3b36      	subs	r3, #54	@ 0x36
 801e07e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801e082:	4290      	cmp	r0, r2
 801e084:	dd0d      	ble.n	801e0a2 <scalbn+0x6a>
 801e086:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801e110 <scalbn+0xd8>
 801e08a:	ee10 3a90 	vmov	r3, s1
 801e08e:	eeb0 6b47 	vmov.f64	d6, d7
 801e092:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801e118 <scalbn+0xe0>
 801e096:	2b00      	cmp	r3, #0
 801e098:	fe27 7b05 	vselge.f64	d7, d7, d5
 801e09c:	ee27 0b06 	vmul.f64	d0, d7, d6
 801e0a0:	4770      	bx	lr
 801e0a2:	4418      	add	r0, r3
 801e0a4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801e0a8:	4298      	cmp	r0, r3
 801e0aa:	dcec      	bgt.n	801e086 <scalbn+0x4e>
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	dd0a      	ble.n	801e0c6 <scalbn+0x8e>
 801e0b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801e0b4:	ec53 2b10 	vmov	r2, r3, d0
 801e0b8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801e0bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801e0c0:	ec43 2b10 	vmov	d0, r2, r3
 801e0c4:	4770      	bx	lr
 801e0c6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801e0ca:	da09      	bge.n	801e0e0 <scalbn+0xa8>
 801e0cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801e108 <scalbn+0xd0>
 801e0d0:	ee10 3a90 	vmov	r3, s1
 801e0d4:	eeb0 6b47 	vmov.f64	d6, d7
 801e0d8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801e120 <scalbn+0xe8>
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	e7db      	b.n	801e098 <scalbn+0x60>
 801e0e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801e0e4:	ec53 2b10 	vmov	r2, r3, d0
 801e0e8:	3036      	adds	r0, #54	@ 0x36
 801e0ea:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801e0ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801e0f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e128 <scalbn+0xf0>
 801e0f6:	ec43 2b10 	vmov	d0, r2, r3
 801e0fa:	e7b1      	b.n	801e060 <scalbn+0x28>
 801e0fc:	f3af 8000 	nop.w
 801e100:	00000000 	.word	0x00000000
 801e104:	43500000 	.word	0x43500000
 801e108:	c2f8f359 	.word	0xc2f8f359
 801e10c:	01a56e1f 	.word	0x01a56e1f
 801e110:	8800759c 	.word	0x8800759c
 801e114:	7e37e43c 	.word	0x7e37e43c
 801e118:	8800759c 	.word	0x8800759c
 801e11c:	fe37e43c 	.word	0xfe37e43c
 801e120:	c2f8f359 	.word	0xc2f8f359
 801e124:	81a56e1f 	.word	0x81a56e1f
 801e128:	00000000 	.word	0x00000000
 801e12c:	3c900000 	.word	0x3c900000
 801e130:	ffff3cb0 	.word	0xffff3cb0
 801e134:	00000000 	.word	0x00000000

0801e138 <floor>:
 801e138:	ee10 3a90 	vmov	r3, s1
 801e13c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801e140:	ee10 2a10 	vmov	r2, s0
 801e144:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801e148:	2913      	cmp	r1, #19
 801e14a:	b530      	push	{r4, r5, lr}
 801e14c:	4615      	mov	r5, r2
 801e14e:	dc33      	bgt.n	801e1b8 <floor+0x80>
 801e150:	2900      	cmp	r1, #0
 801e152:	da18      	bge.n	801e186 <floor+0x4e>
 801e154:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801e218 <floor+0xe0>
 801e158:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e15c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e164:	dd0a      	ble.n	801e17c <floor+0x44>
 801e166:	2b00      	cmp	r3, #0
 801e168:	da50      	bge.n	801e20c <floor+0xd4>
 801e16a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e16e:	4313      	orrs	r3, r2
 801e170:	2200      	movs	r2, #0
 801e172:	4293      	cmp	r3, r2
 801e174:	4b2a      	ldr	r3, [pc, #168]	@ (801e220 <floor+0xe8>)
 801e176:	bf08      	it	eq
 801e178:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801e17c:	4619      	mov	r1, r3
 801e17e:	4610      	mov	r0, r2
 801e180:	ec41 0b10 	vmov	d0, r0, r1
 801e184:	e01f      	b.n	801e1c6 <floor+0x8e>
 801e186:	4827      	ldr	r0, [pc, #156]	@ (801e224 <floor+0xec>)
 801e188:	4108      	asrs	r0, r1
 801e18a:	ea03 0400 	and.w	r4, r3, r0
 801e18e:	4314      	orrs	r4, r2
 801e190:	d019      	beq.n	801e1c6 <floor+0x8e>
 801e192:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e218 <floor+0xe0>
 801e196:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e19a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a2:	ddeb      	ble.n	801e17c <floor+0x44>
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	bfbe      	ittt	lt
 801e1a8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801e1ac:	410a      	asrlt	r2, r1
 801e1ae:	189b      	addlt	r3, r3, r2
 801e1b0:	ea23 0300 	bic.w	r3, r3, r0
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	e7e1      	b.n	801e17c <floor+0x44>
 801e1b8:	2933      	cmp	r1, #51	@ 0x33
 801e1ba:	dd05      	ble.n	801e1c8 <floor+0x90>
 801e1bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e1c0:	d101      	bne.n	801e1c6 <floor+0x8e>
 801e1c2:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e1c6:	bd30      	pop	{r4, r5, pc}
 801e1c8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e1d0:	40e0      	lsrs	r0, r4
 801e1d2:	4210      	tst	r0, r2
 801e1d4:	d0f7      	beq.n	801e1c6 <floor+0x8e>
 801e1d6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e218 <floor+0xe0>
 801e1da:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e1de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1e6:	ddc9      	ble.n	801e17c <floor+0x44>
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	da02      	bge.n	801e1f2 <floor+0xba>
 801e1ec:	2914      	cmp	r1, #20
 801e1ee:	d103      	bne.n	801e1f8 <floor+0xc0>
 801e1f0:	3301      	adds	r3, #1
 801e1f2:	ea22 0200 	bic.w	r2, r2, r0
 801e1f6:	e7c1      	b.n	801e17c <floor+0x44>
 801e1f8:	2401      	movs	r4, #1
 801e1fa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801e1fe:	fa04 f101 	lsl.w	r1, r4, r1
 801e202:	440a      	add	r2, r1
 801e204:	42aa      	cmp	r2, r5
 801e206:	bf38      	it	cc
 801e208:	191b      	addcc	r3, r3, r4
 801e20a:	e7f2      	b.n	801e1f2 <floor+0xba>
 801e20c:	2200      	movs	r2, #0
 801e20e:	4613      	mov	r3, r2
 801e210:	e7b4      	b.n	801e17c <floor+0x44>
 801e212:	bf00      	nop
 801e214:	f3af 8000 	nop.w
 801e218:	8800759c 	.word	0x8800759c
 801e21c:	7e37e43c 	.word	0x7e37e43c
 801e220:	bff00000 	.word	0xbff00000
 801e224:	000fffff 	.word	0x000fffff

0801e228 <_init>:
 801e228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e22a:	bf00      	nop
 801e22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e22e:	bc08      	pop	{r3}
 801e230:	469e      	mov	lr, r3
 801e232:	4770      	bx	lr

0801e234 <_fini>:
 801e234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e236:	bf00      	nop
 801e238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e23a:	bc08      	pop	{r3}
 801e23c:	469e      	mov	lr, r3
 801e23e:	4770      	bx	lr
